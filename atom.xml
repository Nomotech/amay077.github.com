<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://amay077.github.com/atom.xml" rel="self"/>
  <link href="http://amay077.github.com/"/>
  <updated>2013-02-28T16:44:08+09:00</updated>
  <id>http://amay077.github.com/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android で作った HelloWorld のソースを眺めてみる]]></title>
    <link href="http://amay077.github.com/blog/2013/02/28/helloworld-on-xamarin-android/"/>
    <updated>2013-02-28T00:38:00+09:00</updated>
    <id>http://amay077.github.com/blog/2013/02/28/helloworld-on-xamarin-android</id>
    <content type="html"><![CDATA[<p>MonoDroid とか Mono for Android とか呼ばれてた時は、「あーどうせ MonoDevelop と他のモジュールあれこれインストールしなきゃいけないんでしょ？」と腰が重かったのですが、<a href="http://www.forest.impress.co.jp/docs/news/20130221_588816.html">Xamarin 2.0 としてオールインワン化</a>されるとこうも食指が動きますか。</p>

<!-- more -->


<p>さっそく Xamarin.Android のプロジェクトを作って、中身をみてみました。</p>

<h2>ダウンロード</h2>

<p><a href="http://xamarin.com/">Xamarin.com</a> から <strong>Download Now</strong> しましたよ。あ、環境は Mac(Lion) です。</p>

<h2>インストール</h2>

<p>dmg 開いてインストーラっぽいのを実行するだけ。Android と iOS の SDK の場所を聞かれましたがデフォのまま続行しました。たぶん Android 開発者はもう SDK あるのでそこを指定しても良いのでしょう。</p>

<h2>起動、プロジェクト作成</h2>

<p>C# - Android - Android Ice Cream Sandwitch Application を選択。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/xamarin_create_project.png" alt="&quot;create_project&quot;" /></p>

<p>ちなみに VB.NET もありますが、Android用のプロジェクトテンプレがありませんでした。</p>

<h2>プロジェクトの中身はこんな感じ</h2>

<p><img src="https://dl.dropbox.com/u/264530/qiita/xamarin_helloworld.png" alt="&quot;project&quot;" /></p>

<p>ソリューションツリー、Visual Studio っぽさと Android っぽさが同居していてなんか不思議な感じです。</p>

<p>「参照」「Properties」「Resource.designer.cs」あたりは Visual Studio っぽいですね。
一方、「Assets」「drawable」「layout」「values」あたりは Android っぽいですね。
ちなみに、<code>layout/Main.axml</code> というファイルがあります。一瞬「ザムル(Xaml)？」と見間違えましたが、開いてみるとなんのことはない、ただの Android Layout XML でした(<sup>_<sup>;)</sup></sup></p>

<p>そして <code>MainActivity.cs</code> 、混血ですね。</p>

<p>ソースを見てみましょう。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.App</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Content</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Runtime</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Views</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Widget</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.OS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">HelloXamarinAndroid</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [Activity (Label = &quot;HelloXamarinAndroid&quot;, MainLauncher = true)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Activity1</span> <span class="p">:</span> <span class="n">Activity</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Set our view from the &quot;main&quot; layout resource</span>
</span><span class='line'>            <span class="n">SetContentView</span><span class="p">(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">Main</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get our button from the layout resource,</span>
</span><span class='line'>            <span class="c1">// and attach an event to it</span>
</span><span class='line'>            <span class="n">Button</span> <span class="n">button</span> <span class="p">=</span> <span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">myButton</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>            <span class="n">button</span><span class="p">.</span><span class="n">Click</span> <span class="p">+=</span> <span class="k">delegate</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">button</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0} clicks!&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">++);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ソースの中にも Android の要素がたくさん確認できます。</p>

<p><code>[Activity (Label = "HelloXamarinAndroid", MainLauncher = true)]</code>
これ、本家では AndroidManifest.xml の Intent-Filter に定義する設定ですね。ここに書けちゃうみたいです。</p>

<p><code>public class Activity1 : Activity</code>
Activity クラスを継承するのも変わりません。</p>

<p><code>protected override void OnCreate(Bundle bundle)</code>
onCreate を override するのも、その中で setContentView するのも、findViewById するのも本家と変わりません。C# っぽくメソッド名が大文字で始まっているのと、若干メンバ名(R.id が Resource.Id とか)が変わっているくらいです。</p>

<p>そしてボタンクリックらへんの処理、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Button</span> <span class="n">button</span> <span class="p">=</span> <span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">myButton</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">Click</span> <span class="p">+=</span> <span class="k">delegate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">button</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0} clicks!&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">++);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>C# ならではの匿名delegate 使ってます。OnClickListener インターフェースを実装しなければならない本家に比べて短く書けます。
更に短くするなら以下でしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">button</span> <span class="p">=</span> <span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">myButton</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">Click</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="n">button</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0} clicks!&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">++);</span>
</span></code></pre></td></tr></table></div></figure>


<p>まず <code>var</code>。型推論ですよ Variant じゃないですよ。
そしてイベントハンドラはラムダ式で１行で書けます。いや嬉しい。</p>

<p>あと地味にイベントハンドラが += で複数追加できるのもありがたいと思う時が来るでしょう。</p>

<h2>ビルド、実行</h2>

<p>実行すると、こんなダイアログが出てきます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/xamarin_device_select.png" alt="&quot;devices&quot;" /></p>

<p>実機もちゃんと認識されます。</p>

<h2>まとめ</h2>

<p>ソースコード見るまで勘違いしてました。クロスプラットフォームをうたっているから HelloWorld くらいなら &#8220;Write once, run anywhere&#8221; なのかと。</p>

<p>全然違いました。Xamarin.Android は気持ち良いくらいに Android SDK のラッパですし、Xamarin.iOS は iOS SDK のラッパでした。</p>

<p>UI は共通化できませんし、プラットフォーム固有の機能を使うロジックも共通化できません。M-V-VM なら、共通化できるのは M の一部と VM くらい？それも <code>DependencyProperty</code> みたいなのは用意されていないので自作する必要があります。</p>

<p>しかしラッパなだけに元々 Android の開発をしていた人にとっての学習コストは低いです。
Obj-C やりたくねー、って思ってた人にもちょうど良いかも知れません。</p>

<p>なんといっても、スマホアプリ開発で async/await とか Reactive Extensions とか使えるのかと思うと wktk です(<sup>^)</sup></p>

<p>最後に Xamarin.android も Xamarin Studio も、ここまで完成度が高いとは思ってませんでした。Xamarin さん、Mono さんごめんなさい。(ソースコードエディタで日本語入力ができないのは僕だけでしょうか？)
なんか C# 楽しいので<a href="https://store.xamarin.com/">買っちゃい</a>そうです、INDEE くらいなら。</p>

<h2>参考</h2>

<ul>
<li><a href="http://ufcpp.wordpress.com/2013/02/24/xamarin-2-0/">Xamarin 2.0 | ++C++; // 未確認飛行 C ブログ</a></li>
</ul>


<p>Mono ランタイムが同梱されているのですね。上の HelloWorld で 1.2MB くらいでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jetty で静的コンテンツを有効にして起動するまで]]></title>
    <link href="http://amay077.github.com/blog/2013/02/25/static-contents-on-jetty/"/>
    <updated>2013-02-25T19:33:00+09:00</updated>
    <id>http://amay077.github.com/blog/2013/02/25/static-contents-on-jetty</id>
    <content type="html"><![CDATA[<p>jetty で静的コンテンツを有効にして起動するまで</p>

<p>index.html とかホストしたいだけなんですけど、意外に苦労したのでメモ。</p>

<!-- more -->


<h2>jetty のダウンロード</h2>

<p><a href="http://download.eclipse.org/jetty/">Jetty Ecripse Downloads</a> から stable-8 をダウンロード。(9 がまだ RC だったおので、念のため)</p>

<h2>適当なディレクトリに展開</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/dev/sdks/jetty-8.1.9</span></code></pre></td></tr></table></div></figure>


<p>にしてみました。</p>

<h2>とりあえず起動してみる</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/dev/sdks/jetty-8.1.9
</span><span class='line'>$ java -jar start.jar</span></code></pre></td></tr></table></div></figure>


<p>http://localhost:8080 にアクセス。</p>

<p>動いた、ふむふむ。</p>

<h2>普通の HTML とかをぶっこむディレクトリを作る</h2>

<p>&#8216;htdocs&#8217; にしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/dev/sdks/jetty-8.1.9
</span><span class='line'>$ mkdir htdocs</span></code></pre></td></tr></table></div></figure>


<p>適当な HTML を htdocs に入れる。</p>

<figure class='code'><figcaption><span>~/dev/sdks/jetty-8.1.9/htdocs/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;ja&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;H1&gt;</span>Hello World!<span class="nt">&lt;/H1&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>jetty の設定ファイルで、静的コンテンツを有効にする Handler とかいうやつを設定する</h2>

<p><code>etc/jetty.xml</code> をコピーして、<code>etc/jetty_static.xml</code> とか適当な名前にする。</p>

<p>handler の設定のところに ResourceHandler のブロックを入れる</p>

<figure class='code'><figcaption><span>jetty_static.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- =============================================================== --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Configure the Jetty Server                                      --&gt;</span>
</span><span class='line'><span class="c">&lt;!--                                                                 --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Documentation of this file format can be found at:              --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- http://wiki.eclipse.org/Jetty/Reference/jetty.xml_syntax        --&gt;</span>
</span><span class='line'><span class="c">&lt;!--                                                                 --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Additional configuration files are available in $JETTY_HOME/etc --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- and can be mixed in.  For example:                              --&gt;</span>
</span><span class='line'><span class="c">&lt;!--   java -jar start.jar etc/jetty-ssl.xml                         --&gt;</span>
</span><span class='line'><span class="c">&lt;!--                                                                 --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- See start.ini file for the default configuraton files           --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- =============================================================== --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;Configure</span> <span class="na">id=</span><span class="s">&quot;Server&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.Server&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Server Thread Pool                                          --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;ThreadPool&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- Default queued blocking threadpool --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;New</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.util.thread.QueuedThreadPool&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;minThreads&quot;</span><span class="nt">&gt;</span>10<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;maxThreads&quot;</span><span class="nt">&gt;</span>200<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;detailedDump&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Set connectors                                              --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Call</span> <span class="na">name=</span><span class="s">&quot;addConnector&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg&gt;</span>
</span><span class='line'>          <span class="nt">&lt;New</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;&lt;Property</span> <span class="na">name=</span><span class="s">&quot;jetty.host&quot;</span> <span class="nt">/&gt;&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;port&quot;</span><span class="nt">&gt;&lt;Property</span> <span class="na">name=</span><span class="s">&quot;jetty.port&quot;</span> <span class="na">default=</span><span class="s">&quot;8080&quot;</span><span class="nt">/&gt;&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;maxIdleTime&quot;</span><span class="nt">&gt;</span>300000<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;Acceptors&quot;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;statsOn&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;confidentialPort&quot;</span><span class="nt">&gt;</span>8443<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;lowResourcesConnections&quot;</span><span class="nt">&gt;</span>20000<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;lowResourcesMaxIdleTime&quot;</span><span class="nt">&gt;</span>5000<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Set handler Collection Structure                            --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;handler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;Handlers&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.HandlerCollection&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;handlers&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;org.eclipse.jetty.server.Handler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="c">&lt;!-- ここから --&gt;</span>
</span><span class='line'>           <span class="nt">&lt;Item&gt;</span>
</span><span class='line'>            <span class="nt">&lt;New</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.ResourceHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;resourceBase&quot;</span><span class="nt">&gt;&lt;Property</span> <span class="na">name=</span><span class="s">&quot;files.base&quot;</span> <span class="na">default=</span><span class="s">&quot;./htdocs&quot;</span><span class="nt">/&gt;&lt;/Set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>           <span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>           <span class="c">&lt;!-- ここまで --&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c">&lt;!-- よくわからないのでコメントアウトしてみた</span>
</span><span class='line'><span class="c">           &lt;Item&gt;</span>
</span><span class='line'><span class="c">             &lt;New id=&quot;Contexts&quot; class=&quot;org.eclipse.jetty.server.handler.ContextHandlerCollection&quot;/&gt;</span>
</span><span class='line'><span class="c">           &lt;/Item&gt;</span>
</span><span class='line'><span class="c">           &lt;Item&gt;</span>
</span><span class='line'><span class="c">             &lt;New id=&quot;DefaultHandler&quot; class=&quot;org.eclipse.jetty.server.handler.DefaultHandler&quot;/&gt;</span>
</span><span class='line'><span class="c">           &lt;/Item&gt; --&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- extra options                                               --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- =========================================================== --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;stopAtShutdown&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;sendServerVersion&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;sendDateHeader&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;gracefulShutdown&quot;</span><span class="nt">&gt;</span>1000<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;dumpAfterStart&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;dumpBeforeStop&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>設定ファイルを指定して起動してみる</h2>

<figure class='code'><figcaption><span>jetty_static.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ cd ~/dev/sdks/jetty-8.1.9
</span><span class='line'>$ java -jar start.jar --ini etc/jetty_static.xml
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;ini は不要な気もするのだけど、付けないとエラーになっちゃった。</p>

<p>これで、 http://localhost:8080 にアクセスすると、さっきつくった Hello World が表示されるはず。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps API v2 のマーカーの Anchor を探る]]></title>
    <link href="http://amay077.github.com/blog/2013/02/19/googlemap-v2-anchor/"/>
    <updated>2013-02-19T23:10:00+09:00</updated>
    <id>http://amay077.github.com/blog/2013/02/19/googlemap-v2-anchor</id>
    <content type="html"><![CDATA[<p>Google Maps API の Marker には、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/MarkerOptions#anchor(float,%20float">Anchor</a> というプロパティがあり、緯度経度と、画像のどの位置をマッピングさせるかを設定する事ができます。</p>

<!-- more -->


<p>Marker の既定の画像は、よく見るピンみたいなやつですが、既定の Anchor は、0.5f/1.0f になっています。設定値は、画像に対する「x軸の割合」と「y軸の割合」で、言わんとすることは、「緯度経度の位置を画像の、横方向はちょうど真ん中、縦方向は最下部に合わせる」という事です。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/marker_anchor.png" alt="Marker.anchor の設定値" /></p>

<p>以下のように、設定値を変更すると、それぞれマーカーの表示位置が変わります。(Android SDK に同梱される Google Maps API v2 のサンプルをベースにしています)</p>

<figure class='code'><figcaption><span>anchor_center_bottom.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdelaide</span> <span class="o">=</span> <span class="n">mMap</span><span class="o">.</span><span class="na">addMarker</span><span class="o">(</span><span class="k">new</span> <span class="n">MarkerOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="n">ADELAIDE</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">&quot;Adelaide&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">snippet</span><span class="o">(</span><span class="s">&quot;Population: 1,213,000&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">anchor</span><span class="o">(</span><span class="mf">0.5f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">));</span> <span class="c1">// 既定値と同じ</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>anchor_left_top.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdelaide</span> <span class="o">=</span> <span class="n">mMap</span><span class="o">.</span><span class="na">addMarker</span><span class="o">(</span><span class="k">new</span> <span class="n">MarkerOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="n">ADELAIDE</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">&quot;Adelaide&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">snippet</span><span class="o">(</span><span class="s">&quot;Population: 1,213,000&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">anchor</span><span class="o">(</span><span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">));</span> <span class="c1">// 左上</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>anchor_right_middle.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdelaide</span> <span class="o">=</span> <span class="n">mMap</span><span class="o">.</span><span class="na">addMarker</span><span class="o">(</span><span class="k">new</span> <span class="n">MarkerOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="n">ADELAIDE</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">&quot;Adelaide&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">snippet</span><span class="o">(</span><span class="s">&quot;Population: 1,213,000&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">anchor</span><span class="o">(</span><span class="mf">1.0f</span><span class="o">,</span> <span class="mf">0.5f</span><span class="o">));</span> <span class="c1">// 右中</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropbox.com/u/264530/qiita/marker_anchor_sample.png" alt="Marker.anchor examples" /></p>

<h2>v1 ではどうだったっけ？</h2>

<p>Google Maps API v1 では、<a href="https://developers.google.com/maps/documentation/android/v1/reference/">ItemizedOverlay</a> の <code>boundCenter</code> と <code>boundCenterBottom</code> に相当する機能ですね。こちらはメソッド名の通り、「中央/中心」と「中央/下部」しか対応してなかったので、より柔軟になったと言えます。</p>

<h2>ハマりどころ</h2>

<ul>
<li>最初、anchor はピクセル指定だ、と勝手に勘違いして、画像のサイズを取得してゴニョゴニョやってたのは内緒。</li>
<li>0.0〜1.0 の範囲であることを忘れて、0〜100 の値を設定すると、<strong>「マーカーが全部消えます」</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTC J で NETWORK_PROVIDER で位置測位した時の機種依存バグ？]]></title>
    <link href="http://amay077.github.com/blog/2013/02/19/htc-j-networkprovider-bug/"/>
    <updated>2013-02-19T00:41:00+09:00</updated>
    <id>http://amay077.github.com/blog/2013/02/19/htc-j-networkprovider-bug</id>
    <content type="html"><![CDATA[<p><a href="mixi%20Engineers'%20Blog%20http://alpha.mixi.co.jp/2013/11572/">Androidの機種依存問題を吸収するプロジェクトAndroid-Device-Compatibilityを公開したお話</a> を見て、あーそう言えばこんなんあったなーと思い出したのでメモ。</p>

<h2>症状</h2>

<p>下記条件を満たす時に、LocationManager.requestLocationUpdates すると、最新の位置が取得されず、<strong>前回測位した位置</strong> が返される。</p>

<p>時刻は更新されてたか、、、あーどうだったかな。</p>

<!-- more -->


<h2>条件</h2>

<ul>
<li>NETWORK_PROVIDER で位置を取得した場合（GPS じゃない）</li>
<li>WiFi が無効の場合（つまり携帯電話の基地局のみを使った測位の場合）</li>
<li>スリープ中な場合</li>
<li>HTC J である(IS03, Nexus S では発生してない。 HTC J Butterfly はわからない)</li>
</ul>


<h2>こんな事してたら見つけた</h2>

<p>早い話が HexRinger なんですが、このアプリは、AlarmManager で一定時間毎に WiFi/基地局から位置を取得しています。デバッグで移動中のログを取ってたら、「この時間帯、電車で寝てたのになんか位置変わってないんだけどｗ」となりました。</p>

<h2>対策</h2>

<p>WakeLock する。ただし PARTIAL_WAKE_LOCK だとダメで、画面も起こしてやらないとダメだった。
SCREEN あるいは FULL_WAKELOCK が必要な常駐アプリって、最悪やん。</p>

<h2>いろいろ試した事とか推測</h2>

<ul>
<li>測位前に通信させればいけるか？と思ったけどダメだった。</li>
<li>そもそも「最寄りの基地局情報」がスリープ状態だと更新されないんじゃないか説。</li>
</ul>


<p>設置場所が山奥過ぎてこの地雷を踏む人はそうはいないと思いますが、「HTC J だけど問題ないよ？」「Butterfly でもダメだったわー」とかの情報あったらコメントください。 m(<em> </em>)m</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android の jUnit テストで Context が欲しい時]]></title>
    <link href="http://amay077.github.com/blog/2013/01/19/gets-context-on-android-junit/"/>
    <updated>2013-01-19T00:44:00+09:00</updated>
    <id>http://amay077.github.com/blog/2013/01/19/gets-context-on-android-junit</id>
    <content type="html"><![CDATA[<p>Activity のテストなら <code>ActivityInstrumentationTestCase2</code> 、 Service なら <code>ServiceTestCase</code> を使うべきなんでしょうけど、Android って事あるごとに Context が必要なので、ただのクラスライブラリのテストでも必要なことがシバシバ。</p>

<!-- more -->




<figure class='code'><figcaption><span>HogeTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HogeTest</span> <span class="kd">extends</span> <span class="n">InstrumentationTestCase</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** ApplicationContext を取得します */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Context</span> <span class="nf">getApplicationContext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">getInstrumentation</span><span class="o">().</span><span class="na">getTargetContext</span><span class="o">().</span><span class="na">getApplicationContext</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li>[androidの単体テスト(AndroidTestCase) - Androidのド肝] (http://blog.haw.co.jp/android/?p=471) - クラス図がとても役に立ちました</li>
<li><a href="http://stackoverflow.com/questions/5544205/accessing-application-context-from-testsuite-in-setup-before-calling-getactivi">android - Accessing application context from TestSuite in Setup() before calling getActivity() - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 で OpenStreetMap を表示する]]></title>
    <link href="http://amay077.github.com/blog/2012/12/26/osm-on-googlemapv2/"/>
    <updated>2012-12-26T00:18:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/26/osm-on-googlemapv2</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://atnd.org/events/34052">FOSS4G Advent Calendar 2012</a> の 12/26 の記事です。</p>

<p>ベクトル地図が扱える新しい Google Maps Android API v2 については、<a href="http://qiita.com/items/7ad0244c0fb4b431e090">Google Map Android API v2 の v1 からの変更点メモ</a> で書きました。</p>

<p>ここでは、v2 で新しく追加された <code>TileOverlay</code> を使って、OpenStreetMap を重ねてみます。</p>

<!-- more -->


<h2>UrlTileProvider を使って OpenStreetMap を表示する</h2>

<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の TileOverlayDemoActivity.java を見れば一目瞭然なので、それをベースにします。</p>

<h3>サンプルのコード</h3>

<figure class='code'><figcaption><span>TileOverlayDemoActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** This returns moon tiles. */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">MOON_MAP_URL_FORMAT</span> <span class="o">=</span>
</span><span class='line'>        <span class="s">&quot;http://mw1.google.com/mw-planetary/lunar/lunarmaps_v1/clem_bw/%d/%d/%d.jpg&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">GoogleMap</span> <span class="n">mMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setUpMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mMap</span><span class="o">.</span><span class="na">setMapType</span><span class="o">(</span><span class="n">GoogleMap</span><span class="o">.</span><span class="na">MAP_TYPE_NONE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TileProvider</span> <span class="n">tileProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UrlTileProvider</span><span class="o">(</span><span class="mi">256</span><span class="o">,</span> <span class="mi">256</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">URL</span> <span class="nf">getTileUrl</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// The moon tile coordinate system is reversed.  This is not normal.</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">reversedY</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">-</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>           <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">US</span><span class="o">,</span> <span class="n">MOON_MAP_URL_FORMAT</span><span class="o">,</span> <span class="n">zoom</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">reversedY</span><span class="o">);</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="n">mMap</span><span class="o">.</span><span class="na">addTileOverlay</span><span class="o">(</span><span class="k">new</span> <span class="n">TileOverlayOptions</span><span class="o">().</span><span class="na">tileProvider</span><span class="o">(</span><span class="n">tileProvider</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修正前のコードは、Google Moon のタイル画像を使用しています。</p>

<p>これを OpenStreetMap を使用するように改造します。</p>

<figure class='code'><figcaption><span>OsmTileOverlayDemoActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** This returns moon tiles. */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OSM_MAP_URL_FORMAT</span> <span class="o">=</span>
</span><span class='line'>        <span class="s">&quot;http://tile.openstreetmap.org/%d/%d/%d.png&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">GoogleMap</span> <span class="n">mMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setUpMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mMap</span><span class="o">.</span><span class="na">setMapType</span><span class="o">(</span><span class="n">GoogleMap</span><span class="o">.</span><span class="na">MAP_TYPE_NONE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TileProvider</span> <span class="n">tileProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UrlTileProvider</span><span class="o">(</span><span class="mi">256</span><span class="o">,</span> <span class="mi">256</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">URL</span> <span class="nf">getTileUrl</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">US</span><span class="o">,</span> <span class="n">OSM_MAP_URL_FORMAT</span><span class="o">,</span> <span class="n">zoom</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="n">mMap</span><span class="o">.</span><span class="na">addTileOverlay</span><span class="o">(</span><span class="k">new</span> <span class="n">TileOverlayOptions</span><span class="o">().</span><span class="na">tileProvider</span><span class="o">(</span><span class="n">tileProvider</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>できました。うーん、簡単すぎる。
URL は OpenStreetMap のものを使います。y軸の値は、Google Moon では逆順となっていたのを正順のまま使用するだけです。</p>

<p>こんな感じで表示できます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/advent2012_osm.png" alt="OpenStreetMap on Google Map API" /></p>

<p>移動、拡大・縮小だけでなく、API v2 の恩恵で、回転やチルトもできるのが嬉しいですね。</p>

<h2>TileOverlay を透過させる</h2>

<p>さて、ベース地図を Google から他のものに差し替えてしまうならこれまでの使い方で十分でしょう。しかし Google のベクトル3Dグリグリ地図をベース地図として使いたいとは誰しもが思うことでしょう。</p>

<p>ここでは、Google地図の上に TileOverlay を透過で表示することにチャレンジしてみます。
ケースとしては、雨雲レーダーのメッシュや、統計メッシュなどを重ね合わせる事が考えられます。</p>

<p>さて、API v2 のもう一つの新機能 GroundOverlay には <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTransparency(float">setTransparentcy</a> というズバリなメソッドがあり、それを使えば一発です。</p>

<p>しかし、TileOverlay とその関連クラスには、透過に関するメソッドは見当たりません。
そこで TileProvider でダウンロードされた画像データを直接弄って、透過にします。</p>

<p>TileProvider は文字通り <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile">Tile</a> を Provide します。そしてこの Tile はタイル画像データそのものです。</p>

<p><a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data">Tile.data</a> の説明には次のように記述があります。</p>

<blockquote><p>A byte array containing the image data. The image will be created from this data by calling <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/null#decodeByteArray(byte[],%20int,%20int">decodeByteArray(byte[], int, int)</a>).</p></blockquote>

<p>つまりこのプロパティの中身を透過させてあげれば良さげ、という事になります。</p>

<p>上記のコードで使用した UrlTileProvider の <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/UrlTileProvider#getTile(int,%20int,%20int">getTile</a> を override して…と思ったら、
＿人人人人人人人人人＿
＞　突然の final！　＜
￣<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>￣</sup></sup></sup></sup></sup></sup></sup></sup>
という事で override できません。</p>

<p>仕方ががないので、独自の TileProvider を別途用意して、UrlTileProvider を内包する形で <code>TransparencyUrlTileProvider</code> というクラスを実装します。</p>

<figure class='code'><figcaption><span>TransparencyUrlTileProvider.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransparencyUrlTileProvider</span> <span class="kd">implements</span> <span class="n">TileProvider</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OSM_MAP_URL_FORMAT</span> <span class="o">=</span> <span class="s">&quot;http://tile.openstreetmap.org/%d/%d/%d.png&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">_transparency</span><span class="o">;</span> <span class="c1">// 透過率(0〜255)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">UrlTileProvider</span> <span class="n">_osmTileProv</span><span class="o">;</span> <span class="c1">// 内包する TileProvider</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TransparencyUrlTileProvider</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">int</span> <span class="n">transparency</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">_transparency</span> <span class="o">=</span> <span class="n">transparency</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">_osmTileProv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UrlTileProvider</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">URL</span> <span class="nf">getTileUrl</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">US</span><span class="o">,</span> <span class="n">OSM_MAP_URL_FORMAT</span><span class="o">,</span> <span class="n">zoom</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>              <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Tile</span> <span class="nf">getTile</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Tile</span> <span class="n">tile</span> <span class="o">=</span> <span class="n">_osmTileProv</span><span class="o">.</span><span class="na">getTile</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">zoom</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// TODO ここで Tile の透過処理を行う</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">tile</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使う側は、こんな感じになります。</p>

<figure class='code'><figcaption><span>OsmTileOverlayDemoActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">GoogleMap</span> <span class="n">mMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setUpMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// mMap.setMapType(GoogleMap.MAP_TYPE_NONE); ベース地図は消さない</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mMap</span><span class="o">.</span><span class="na">addTileOverlay</span><span class="o">(</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">TileOverlayOptions</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">tileProvider</span><span class="o">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">TransparencyUrlTileProvider</span><span class="o">(</span><span class="mi">256</span><span class="o">,</span> <span class="mi">256</span><span class="o">,</span> <span class="mi">100</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでで改造前と同じく OpenStreetMap が「非透過で」表示されるのは確認できます。</p>

<p>次にいよいよ Bitmap の透過処理です。
まず、Tile から Bitmap を抜き出します。API リファレンスによると、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data">Tile.data</a> というメンバがあるハズが…見つかりません。代わりに <code>Tile.bM</code> という byte[] なメンバがあります。こいつで間違いないでしょう。</p>

<p>Tile.bM の byte[] から Bitmap インスタンスを生成します。</p>

<pre><code>Bitmap bitmap = BitmapFactory.decodeByteArray(tile.bM, 0, tile.bM.length);
</code></pre>

<p>次に透過処理ですが、Android ではちょっと面倒なようです。
以下のサイトを参考にさせて頂いて、関数を作成しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/hypercrab/20110730/1312038162">Android: Bitmap の背景を透明にする - 入隠者通信 ～病を嗜む～</a></li>
</ul>


<figure class='code'><figcaption><span>makeTransparentBmp.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Bitmap</span> <span class="nf">makeTransparentBmp</span><span class="o">(</span><span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bmp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">transparency</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">bmp</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">bmp</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>     <span class="kt">int</span><span class="o">[]</span> <span class="n">pixels</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">width</span><span class="o">,</span><span class="n">height</span><span class="o">,</span><span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">ARGB_8888</span> <span class="o">);</span>
</span><span class='line'>     <span class="n">bmp</span><span class="o">.</span><span class="na">getPixels</span><span class="o">(</span><span class="n">pixels</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>     <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>           <span class="kt">int</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pixels</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">width</span><span class="o">];</span>
</span><span class='line'>           <span class="n">pixels</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">width</span><span class="o">]</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">(</span><span class="n">transparency</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">Color</span><span class="o">.</span><span class="na">red</span><span class="o">(</span><span class="n">pixel</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">green</span><span class="o">(</span><span class="n">pixel</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">blue</span><span class="o">(</span><span class="n">pixel</span><span class="o">));</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="n">bitmap</span><span class="o">.</span><span class="na">eraseColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>
</span><span class='line'>     <span class="n">bitmap</span><span class="o">.</span><span class="na">setPixels</span><span class="o">(</span><span class="n">pixels</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では TODO の所に組み込みます。</p>

<figure class='code'><figcaption><span>TransparencyUrlTileProvider.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransparencyUrlTileProvider</span> <span class="kd">implements</span> <span class="n">TileProvider</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">前略</span><span class="o">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Tile</span> <span class="nf">getTile</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Tile</span> <span class="n">tile</span> <span class="o">=</span> <span class="n">_osmTileProv</span><span class="o">.</span><span class="na">getTile</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">zoom</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Tile の透過処理を行う</span>
</span><span class='line'>       <span class="n">Bitmap</span> <span class="n">bmp</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeByteArray</span><span class="o">(</span><span class="n">tile</span><span class="o">.</span><span class="na">bM</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">tile</span><span class="o">.</span><span class="na">bM</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>       <span class="n">Bitmap</span> <span class="n">transparentBmp</span> <span class="o">=</span> <span class="n">makeTransparentBmp</span><span class="o">(</span><span class="n">bmp</span><span class="o">,</span> <span class="n">_transparency</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Tile を作り直す</span>
</span><span class='line'>      <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>      <span class="n">transparentBmp</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="n">CompressFormat</span><span class="o">.</span><span class="na">PNG</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="n">bos</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Tile</span> <span class="n">tranparentTile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tile</span><span class="o">(</span><span class="n">tile</span><span class="o">.</span><span class="na">width</span><span class="o">,</span> <span class="n">tile</span><span class="o">.</span><span class="na">height</span><span class="o">,</span> <span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">tranparentTile</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">以下略</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>動かしてみます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/advent2012_osmwithg.png" alt="OpenStreetMap with Google Map API" /></p>

<p>これは、GoogleMap の衛星写真の上に OpenStreetMap を透過して重ねた例です（分かりづらい</p>

<h2>まとめ</h2>

<p>このように Google Maps Android API v2 では、TileProvider を使って、タイル地図画像を簡単に表示させることができます。</p>

<p>Google Maps Javascript API や、MapKit でも他のタイル地図画像を利用することはできましたが、それらよりもより簡単に使えます。ハックというよりも API が公式にサポートしている、という感じです。</p>

<p>これまで Android には、Javascript の OpenLayers や、 iOS の route-me のような、地図タイルデータソースを扱える地図SDKはありませんでした（いや OsmDroid くらいか）</p>

<p>それを Google Maps Android API v2 がサポートしたのですから使わない手はありません。地図SDK としては一番高性能で事実上標準なのですから。</p>

<p>これに、OpenStreetMap や電子国土地図、衛星画像などの背景地図や、統計データメッシュや、アメダスなどの主題図的なタイル地図が重ねられるといろいろできそうだなあ、という感じです。
(Yahoo! さんの<a href="http://weather.yahoo.co.jp/weather/zoomradar/">雨雲レーダー</a> のタイル画像もこっそり試してみて「こりゃ面白い」と思ったので公式に提供して欲しいですｗ)</p>

<p>私にはタイル地図データを作る知識は無いので、タイル地図のポータルみたいなものがあるといいなあと思います。 <a href="https://www.facebook.com/chitaikyo">地図タイル工法協会</a> さんよろしくおねがいします。</p>

<p>というわけで、Android で地図使いたいなら(今のところ) Google Maps API v2 一択！ 他社さんもガンバレ！</p>

<p>※あれ？このネタどこが FOSS4G だ？ま、いっか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android/EditTextでIMEの未確定文字列が確定された瞬間(のフォーク)]]></title>
    <link href="http://amay077.github.com/blog/2012/12/26/edittext-ontextchanged/"/>
    <updated>2012-12-26T00:00:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/26/edittext-ontextchanged</id>
    <content type="html"><![CDATA[<p>Android の EditText の文字列と、String 変数値を同期させたいケースって結構あると思うんですけど、<a href="http://developer.android.com/reference/android/view/View.OnFocusChangeListener.html">LostFocus</a> みたいなのでやると、オンフォーカスな状態で Activity が閉じられた時に LostFocus が呼ばれなくてあぼんとなるのは VB6あがりのプログラマ(=私)なら誰もが経験するんじゃないでしょうか？</p>

<!-- more -->


<p>じゃあ <a href="http://developer.android.com/reference/android/text/TextWatcher.html#onTextChanged(java.lang.CharSequence,%20int,%20int,%20int">onTextChanged</a> だぜ、って仕込んでみると、Android のこれは IME で変換中の文字列もバンバン飛んで来まして大変使い勝手が悪い。(サジェストなんかする際には必要なんでしょうけども)</p>

<p>例えば、以下で紹介されている方法</p>

<ul>
<li><a href="http://blog.global-eng.co.jp/android/2011/04/08/textwatcher%e3%81%a7edittext%e3%81%ae%e5%85%a5%e5%8a%9b%e5%86%85%e5%ae%b9%e3%82%92%e3%83%aa%e3%82%a2%e3%83%ab%e3%82%bf%e3%82%a4%e3%83%a0%e3%81%ab%e5%8f%8d%e6%98%a0%e3%81%99%e3%82%8b/">TextWatcherでEditTextの入力内容をリアルタイムに反映する | GE Android Blog</a></li>
</ul>


<p>を実装しますと、IME確定前の文字列もじゃんじゃん同期してくれちゃいます。</p>

<p>これに起因したであろう Android アプリもありまして(Instagram とか。今は治ってる。)、なんとかならんかなーと思っていました。</p>

<p>そんな時、こちら↓</p>

<ul>
<li><a href="http://www.spiritek.co.jp/spkblog/2012/10/25/androidedittext%e3%81%a7ime%e3%81%ae%e6%9c%aa%e7%a2%ba%e5%ae%9a%e6%96%87%e5%ad%97%e5%88%97%e3%81%8c%e7%a2%ba%e5%ae%9a%e3%81%95%e3%82%8c%e3%81%9f%e7%9e%ac%e9%96%93/">Android/EditTextでIMEの未確定文字列が確定された瞬間 | SpiriteK Blog</a></li>
</ul>


<p>の記事にめぐり逢いまして、まさに私が求めていたそのもの。</p>

<p>ですが、未確定文字＝下線付き(<code>UnderlineSpan</code>)である、という前提がどうにもしっくり来ませんで(未確定文字に下線を付けない IME もそりゃあるだろうなーという意味で)。</p>

<p>もちろん、その前で言及されている内部クラス <code>android.view.inputmethod.ComposingText</code> を文字列比較するのもうーん…。</p>

<p>で、自分でも試行錯誤してみたところ、<a href="http://developer.android.com/reference/android/text/Spanned.html#getSpanFlags(java.lang.Object">Spanned.getSpanFlags</a> というメソッドがあるのに気づきました。あと、<a href="http://developer.android.com/reference/android/text/Spanned.html#SPAN_COMPOSING">SPAN_COMPOSING</a> というフラグも。</p>

<p>これらを使って、文字列が確定されているかどうか？を識別することができるのではないかと考え、前出の記事のコードを以下のように修正してみました。</p>

<figure class='code'><figcaption><span>DetermineComposingText.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">edit1</span><span class="o">.</span><span class="na">addTextChangedListener</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWatcher</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">currentLength</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">before</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">,</span> <span class="kt">int</span> <span class="n">after</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">currentLength</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTextChanged</span><span class="o">(</span><span class="n">Editable</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;after:&quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">currentLength</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">unfixed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">spanned</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getSpans</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">spanned</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">obj</span> <span class="o">:</span> <span class="n">spanned</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// UnderlineSpan での判定から getSpanFlags への判定に変更。</span>
</span><span class='line'>                <span class="c1">// if (obj instanceof android.text.style.UnderlineSpan) {</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">s</span><span class="o">.</span><span class="na">getSpanFlags</span><span class="o">(</span><span class="n">obj</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">Spanned</span><span class="o">.</span><span class="na">SPAN_COMPOSING</span><span class="o">)</span> <span class="o">==</span> <span class="n">Spanned</span><span class="o">.</span><span class="na">SPAN_COMPOSING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">unfixed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">unfixed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span> <span class="n">toast</span> <span class="o">=</span> <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="s">&quot;確定&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">);</span>
</span><span class='line'>            <span class="n">toast</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>s.getSpanFlags(obj) &amp; Spanned.SPAN_COMPOSING) == Spanned.SPAN_COMPOSING)</code> で SPAN_COMPOSING(未確定文字)のフラグが立っているかを判定しています。</p>

<p>とりあえず手持ちの ATOK では修正前と同じように動作しているようです。</p>

<p>IME 側で「未確定文字は SPAN_COMPOSING を必ず設定する」ものかどうかは分かりませんが、個人的には UnderlineSpan を使った手法よりもすっきりしました、というお話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 の図形の描画順(zIndex)を探る]]></title>
    <link href="http://amay077.github.com/blog/2012/12/25/googlemap-v2-zindex/"/>
    <updated>2012-12-25T17:48:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/25/googlemap-v2-zindex</id>
    <content type="html"><![CDATA[<p>Google Maps Android API v1 では Overlay をレイヤのように使うことで図形群の前後関係をコントロールできましたが、v2 では <code>Polyline</code> や <code>Polygon</code> クラスに <code>zIndex</code> が導入されました。</p>

<p>いくつかの図形を重ねて描画し、zIndex が与える影響を調べてみました。</p>

<!-- more -->


<h2>zIndex なし の場合</h2>

<p>まず zIndex を指定しない場合。</p>

<ol>
<li>マーカー</li>
<li>線(太)</li>
<li>線(細)</li>
<li>ポリゴン(青)</li>
<li>ポリゴン(緑)</li>
</ol>


<p>の順で <code>GoogleMap</code> に追加しています。</p>

<figure class='code'><figcaption><span>NoZindex.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">TOKYO</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">35.691</span><span class="o">,</span> <span class="mf">139.693</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">NAGOYA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">35.1805</span><span class="o">,</span> <span class="mf">136.9073</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">TOYOHASHI</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">34.770</span><span class="o">,</span> <span class="mf">137.391</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">MATSUMOTO</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">36.239</span><span class="o">,</span> <span class="mf">137.969</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">SHIZUOKA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">34.99</span><span class="o">,</span> <span class="mf">138.39</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">MAEBASHI</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">36.38</span><span class="o">,</span> <span class="mf">139.04</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// マーカー</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addMarker</span><span class="o">(</span><span class="k">new</span> <span class="n">MarkerOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">35.47</span><span class="o">,</span> <span class="mf">138.71</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">&quot;富士山&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ライン</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolyline</span><span class="o">(</span><span class="k">new</span> <span class="n">PolylineOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">NAGOYA</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">width</span><span class="o">(</span><span class="mi">40</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">color</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">));</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolyline</span><span class="o">(</span><span class="k">new</span> <span class="n">PolylineOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">NAGOYA</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">width</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">color</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ポリゴン</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolygon</span><span class="o">(</span><span class="k">new</span> <span class="n">PolygonOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">MATSUMOTO</span><span class="o">,</span> <span class="n">TOYOHASHI</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">fillColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">CYAN</span><span class="o">));</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolygon</span><span class="o">(</span><span class="k">new</span> <span class="n">PolygonOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">MAEBASHI</span><span class="o">,</span> <span class="n">SHIZUOKA</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">fillColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果、こうなりました。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/zindex_off.png" alt="noZindex" /></p>

<p>前後関係を見ると、奥から</p>

<ol>
<li>ポリゴン(青)</li>
<li>ポリゴン(緑)</li>
<li>線(太)</li>
<li>線(細)</li>
<li>マーカー</li>
</ol>


<p>となりました。描画順＝追加した順、であれば、マーカーや線は、ポリゴンによって覆い隠されてしまうのですが、そうなりませんでした。
図形によって前後関係が決められていて、
奥から ポリゴン → ライン → マーカー となるようです。
ちなみに、zindex を指定しない時の既定値は <code>0</code> です。</p>

<h2>zIndex を設定してみる</h2>

<p>次に zIndex を次のように設定してみます。</p>

<figure class='code'><figcaption><span>WithZindex.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// マーカー</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addMarker</span><span class="o">(</span><span class="k">new</span> <span class="n">MarkerOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">35.47</span><span class="o">,</span> <span class="mf">138.71</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">&quot;富士山&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ライン</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolyline</span><span class="o">(</span><span class="k">new</span> <span class="n">PolylineOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">NAGOYA</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">width</span><span class="o">(</span><span class="mi">40</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">color</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">zIndex</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolyline</span><span class="o">(</span><span class="k">new</span> <span class="n">PolylineOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">NAGOYA</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">width</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">color</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">zIndex</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ポリゴン</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolygon</span><span class="o">(</span><span class="k">new</span> <span class="n">PolygonOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">MATSUMOTO</span><span class="o">,</span> <span class="n">TOYOHASHI</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">fillColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">CYAN</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">zIndex</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolygon</span><span class="o">(</span><span class="k">new</span> <span class="n">PolygonOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">MAEBASHI</span><span class="o">,</span> <span class="n">SHIZUOKA</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">fillColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">zIndex</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は以下のとおり。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/zindex_on.png" alt="noZindex" /></p>

<ol>
<li>線(太)</li>
<li>線(細)</li>
<li>ポリゴン(青)</li>
<li>ポリゴン(緑)</li>
<li>マーカー</li>
</ol>


<p>む、ライン、ポリゴンに関係なく、zIndex で指定した順に奥から描画されているようです。</p>

<h2>Developer Guide の説明</h2>

<p>いつも試してから見る公式ガイドｗ</p>

<ul>
<li><a href="https://developers.google.com/maps/documentation/android/lines#customize_a_polyline">Customize a Polyline - Google Maps Android API v2</a></li>
</ul>


<blockquote><p>Z-index
The stack order of this Polyline, relative to other overlays (polylines, polygons, ground overlays and tile overlays) in the map. A Polyline with a high z-index is drawn above overlays with lower z-indexes. Two overlays with the same z-index are drawn in an arbitrary order. Set this property with PolylineOptions.zIndex(). You can change this after the Polyline has been added to the map with the Polyline.setZIndex() method.</p></blockquote>

<p>まあ、それっぽいことが書いてあるわｗ
どうやら <code>GroundOverlay</code> や <code>TileOverlay</code> にも zIndex があり、前後関係をコントロールできるようですね。</p>

<h2>まとめ</h2>

<p>Google Maps Android API v2 の Polyline と Polygon の zIndex はまとめると次のようになります。</p>

<ul>
<li>指定しない(<code>0</code>)と、追加の順番に関わらず <strong><em>Polyline の方が Polygon よりも手前</em></strong> に描画される。Polyline 同士、Polygon 同士は、追加順に奥から描画される。</li>
<li>指定した場合、Polyline、Polygon の区別なく、<strong><em>zIndex の順で</em></strong> 奥から描画される。</li>
<li>マーカーは常に一番手前に描画される。</li>
</ul>


<p>ということで、zIndex をうまく設定すれば、図形群の前後関係を調整・変更することができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 で大圏コースを表示する]]></title>
    <link href="http://amay077.github.com/blog/2012/12/24/googlemap-v2-geodesic-line/"/>
    <updated>2012-12-24T17:51:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/24/googlemap-v2-geodesic-line</id>
    <content type="html"><![CDATA[<p>GoogleMap は<a href="http://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%AB%E3%82%AB%E3%83%88%E3%83%AB%E5%9B%B3%E6%B3%95">メルカトル図法</a>なので、地図上の２点間を結んだ直線は最短距離になりません。(メルカトル図法で正しいのは角度だけ、でしたよね。)</p>

<p>地球上の２点間の最短距離は「<a href="http://ja.wikipedia.org/wiki/%E5%A4%A7%E5%9C%8F%E3%82%B3%E3%83%BC%E3%82%B9">大圏コース</a>」と呼ばれます。</p>

<p>で、Android 版の新しい API を使うと、この大圏コースを簡単に表示することができます。</p>

<!-- more -->


<p>こんな感じ、赤がただの直線、青が大圏コースです。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/greatcircle.png" alt="greatcircle" /></p>

<p>やり方は以下のとおりで、<code>geodesic</code> を <code>true</code> にすれば大圏コースになります。</p>

<figure class='code'><figcaption><span>GeodesicPolyline.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">GoogleMap</span> <span class="n">mMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">TOKYO</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">35.691</span><span class="o">,</span> <span class="mf">139.693</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">LatLng</span> <span class="n">HAWAII</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LatLng</span><span class="o">(</span><span class="mf">19.87</span><span class="o">,</span> <span class="o">-</span><span class="mf">155.56</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ただの直線</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolyline</span><span class="o">(</span><span class="k">new</span> <span class="n">PolylineOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">HAWAII</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">width</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">color</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">geodesic</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 大圏コース</span>
</span><span class='line'><span class="n">mMap</span><span class="o">.</span><span class="na">addPolyline</span><span class="o">(</span><span class="k">new</span> <span class="n">PolylineOptions</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TOKYO</span><span class="o">,</span> <span class="n">HAWAII</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">width</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">color</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">geodesic</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Developper Guide に説明があります。</p>

<ul>
<li><a href="https://developers.google.com/maps/documentation/android/lines#geodesic_and_non-geodesic_lines">Polylines and Polygons - Google Maps Android API v2</a></li>
</ul>


<blockquote><p>A Geodesic line is a line that follows the curvature of the earth. In contrast, a non-geodesic line will be drawn using the coordinate system of your screen. By Default, Polyline and Polygon objects will draw non-geodesic lines. You can change any Polyline or Polygon to use geodesic lines by setting the geodesic property to true.</p>

<p>適当訳
Geodesic なラインとは地球上の曲がった線のことです。non-geodesic ってやつは画面座標系で描いた線で、これがデフォルトです。Polyline や Polygon を geodesic にしたければ geodesic プロパティを true にするとよろし。</p></blockquote>

<p>ちなみにこの「２点間の最短距離」は <a href="http://developer.android.com/reference/android/location/Location.html#distanceBetween(double,%20double,%20double,%20double,%20float[]">Location.distanceBetween</a> メソッドで求められます。</p>

<p>どうやら、Javascript 版にはもともとこの機能があったようで、以下のサイトに例があります。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/tsato/geoweb/googlemaps/great-circle/">Googleマップで大圏コースを表示する</a></li>
</ul>


<p>あと、iOS 版の Google Maps API にもあるみた…あれ、ないや。
(余談ですが iOS 版の API には Polygon を描く機能もないんですね)</p>

<ul>
<li><a href="https://developers.google.com/maps/documentation/ios/lines">Polylines - Google Maps SDK for iOS</a></li>
</ul>


<h2>その他</h2>

<p>つか、Android の GoogleMap さん、思いっきり縮小しても世界が画面内に収まらないので、大圏コースの例が見せにくいわ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jUnit で非同期処理のテストがちょっと楽になるクラス作ってみた]]></title>
    <link href="http://amay077.github.com/blog/2012/12/20/asynctest-on-junit/"/>
    <updated>2012-12-20T19:07:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/20/asynctest-on-junit</id>
    <content type="html"><![CDATA[<p>非同期メソッドのテストって、皆さんどうやってるんでしょう？
ちょっとググってみたけど「<code>Object.wait</code> とか <code>CountDownLatch</code> とか <code>Future</code> で待て」とかあんまり良い答えが見つからなかったので、自分でユーティリティクラス作ってみた。</p>

<!-- more -->


<p>まあ CountDownLatch で待ってるだけなんですけども。</p>

<p>2013.1.10 修正:メソッドに全部 <code>synchronized</code> つけたら動かんやん、恥ずかし…</p>

<figure class='code'><figcaption><span>FutureResult.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * success または error が呼ばれるまで get() で待ってる Future みたいなクラス</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author @amay077</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FutureResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">TimeUnit</span> <span class="n">TIMEOUT_UNIT</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">_latch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">T</span> <span class="n">_value</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Exception</span> <span class="n">_error</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FutureResultException</span> <span class="kd">extends</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">FutureResultException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">detailException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">(</span><span class="n">detailException</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 非同期処理が成功したら呼ぶメソッド</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">success</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">_value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      <span class="n">_latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 非同期処理が失敗したら呼ぶメソッド</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">_error</span> <span class="o">=</span> <span class="n">ex</span><span class="o">;</span>
</span><span class='line'>      <span class="n">_latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 非同期処理が終わるまで待って結果を返す。</span>
</span><span class='line'><span class="cm">  * エラーだったら例外を投げる。</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">T</span> <span class="nf">get</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">_latch</span><span class="o">.</span><span class="na">await</span><span class="o">(</span><span class="n">TIMEOUT</span><span class="o">,</span> <span class="n">TIMEOUT_UNIT</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">FutureResultException</span><span class="o">(</span><span class="k">new</span> <span class="n">TimeoutException</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">FutureResultException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">_error</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="n">_error</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">_value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Future インターフェースを implements しようと思ったけど数が多くてやめたｗ
使い方はこんな感じ。</p>

<figure class='code'><figcaption><span>AsyncMethodTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAsyncMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">FutureResult</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureResult</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 非同期なメソッドを実行</span>
</span><span class='line'>  <span class="n">hoge</span><span class="o">.</span><span class="na">asyncMethod</span><span class="o">(</span><span class="k">new</span> <span class="n">OnReceiveListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Integer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 正そうな値を受信しtら success を呼ぶ</span>
</span><span class='line'>          <span class="n">result</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// エラーを受信した場合は error を呼ぶ</span>
</span><span class='line'>          <span class="n">result</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 検証</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// get で success か error かタイムアウトするまで待ってる。</span>
</span><span class='line'>      <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">fail</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p>なんて記事を書いたあとにもっかいググってみたらこんなライブラリがあるようで。詳細はまだ見てない。</p>

<ul>
<li><a href="http://code.google.com/p/awaitility/">Awaitility</a> - Awaitility is a small Java-based DSL for synchronizing asynchronous operations. It makes it easy to test asynchronous code. - Google Project Hosting</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 の v1 からの変更点メモ]]></title>
    <link href="http://amay077.github.com/blog/2012/12/20/googlemap-andro-api-v2-changes/"/>
    <updated>2012-12-20T16:10:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/20/googlemap-andro-api-v2-changes</id>
    <content type="html"><![CDATA[<p><a href="http://www.atmarkit.co.jp/ait/articles/1212/04/news110.html">Android の Map API が刷新</a>され、</p>

<ul>
<li>ベクトル地図！</li>
<li>回転、視点変更</li>
<li>屋内、地下街マップの表示</li>
</ul>


<p>が可能になりました。Googleマップアプリの機能が API で提供された感じです。これは感涙。</p>

<!-- more -->


<p>v2 になって導入手順が大幅に変わりましたが、 <a href="https://twitter.com/adamrocker">@adamrocker</a> さんが早速解説して下さっています。</p>

<ul>
<li><a href="http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html">throw Life - Google Maps Android API v2を使ってみた</a></li>
</ul>


<p>ここでは、Google Map Android API v1 からの変更点を中心に紹介してみます。</p>

<h2>互換性</h2>

<p><strong><em>あ・り・ま・せ・ん、以上！</em></strong></p>

<p>Fragment 化、3D対応などにより、API の設計思想そのものが変わった様で、既存のコードをそのまま流用できることはないでしょう。
前の MapView に似せた <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/MapView">com.google.android.gms.maps.MapView</a> というクラスがありますが、クラス名が同じだけでメンバは全然別物です。</p>

<h2>じゃあ、v1 のあの機能は v2 でどうやんの？</h2>

<h3>移動、拡大・縮小など</h3>

<p><img src="http://f.cl.ly/items/2d3M3T1v3W3C0H102d3L/gmap2_basic.png" alt="BasicMap" /></p>

<p>v1 では <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/MapController.html">MapController</a> の animateTo とか setZoom で行なっていましたが、そもそも v2 には MapController クラスがなくなっています。</p>

<p>v2 では <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap">GoogleMap</a> クラスの animateCamera() や moveCamera() で移動、拡大・縮小を行います。
これらに加えて、角度(bearing)、視点(tilt) も設定します。animateCamera は Google Earth みたいなアニメーションが定義できてカッコいいですよ。</p>

<p>ちなみに、無段階ズームになった影響で、Zoom の値が int から float になっています。値が示す地図縮尺は変化ないようです。v1 の Zoom=15 と v2 の Zoom=15.0f は同じ意味です。</p>

<h4>参考</h4>

<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の該当箇所を添えておきます。</p>

<ul>
<li>CameraDemoActivity.java</li>
</ul>


<h3>ズームボタンとかの表示ON/OFF</h3>

<p><img src="http://cl.ly/image/40220F3I163f/gmap2_uisettings.png" alt="UISettings" /></p>

<p>v1 では MapView の setBuiltInZoomControls でズームボタンの表示ON/OFF ができました。
v2 では、GoogleMap から <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap#getUiSettings(">UISettings</a> を取得して設定します。
v2 では、ズームボタンの他に、コンパスが増えているのでそれらの表示制御と、各種ジェスチャ(スクロール、回転、チルト)の有効/無効 が設定できます。</p>

<h4>参考</h4>

<ul>
<li>UiSettingsDemoActivity.java</li>
</ul>


<h3>マーカー表示</h3>

<p><img src="http://cl.ly/image/2a0b2C073d1f/gmap2_markers.png" alt="Markers" />
API の使い方で一番大きく変わったのはこの辺りかと思います。</p>

<p>v1 では、MapView に <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/ItemizedOverlay.html">ItemizedOverlay</a> を add して、OverlayItem(＝マーカー)を登録して…って感じでしたが、全滅です。</p>

<p>v2 でのマーカー表示は <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addMarker(com.google.android.gms.maps.model.MarkerOptions">GoogleMap.addMarker</a> を使います。
Overlay の概念が事実上なくなって、GoogleMap クラスから Marker オブジェクトを生成するようになりました。</p>

<p>マーカーのグループ管理ができなくなってちょっと不便に感じます。(v1 では、ローソンとファミマのマーカーを管理するのに、lawsonOverlay と famimaOverlay を用意しておけば良かった)</p>

<p>v2 のメリットは、マーカーがドラッグをサポートするようになったのと、情報ウィンドウ(ふきだし)が標準搭載されたことです。</p>

<h4>参考</h4>

<ul>
<li>MarkerDemoActivity.java</li>
</ul>


<h3>図形(ラインとかポリゴンとか)描画</h3>

<p><img src="http://cl.ly/image/0c3i2E1z3V1r/gmap2_polygons.png" alt="Polygons" />
これも大きく作り替えないといけないところです。</p>

<p>v1 では、Overlay の <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Overlay.html#draw(android.graphics.Canvas,%20com.google.android.maps.MapView,%20boolean">draw</a> を override して、Canvas の drawLine などの描画メソッドを呼び出す感じでした。</p>

<p>v2 では、Overlay がありませんし、Canvas を直接さわれる口がありません。
ではどうするかというと、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon">Polygon</a> , <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polyline">Polyline</a> というクラスが用意されています。</p>

<p>GoogleMap クラスの <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolygon(com.google.android.gms.maps.model.PolygonOptions">addPolygon</a> , <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolyline(com.google.android.gms.maps.model.PolylineOptions">addPolyline</a> メソッドで追加します。Marker と同じく Overlay の概念はありません。</p>

<p>また add した Polygon や Polyline は、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon.html#remove(">remove</a> するか <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#clear(">GoogleMap.clear</a> するまで地図上に登録されています。</p>

<p>v2 になって、描画処理は重くなったなあという印象です。
v1 の感覚で図形を add しまくると、すごくもっさりします。画面に表示すべきものだけ、さらに非同期でパラパラと図形が描画されていくような処理を実装しないとストレスフルな感じになりそうです。</p>

<h4>&#8220;表示している領域&#8221; の取得方法</h4>

<p>v1 では、getMapCenter , getLatitudeSpan, getLongitudeSpan でなんとなく取得できました。
v2 では、GoogleMap.getProjection で得られる <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/Projection">Projection</a> クラスの getVisibleRegion から取得できます。</p>

<p>注意点は、回転している時とチルトしている時、いずれも &#8220;表示している範囲を包括する矩形&#8221; が得られるようですが、特にチルトしている時は奥行き分が領域に含まれますので、視点を倒せば倒すほど遠くが見える(領域が広がる)ことになります。画面に表示しているものだけ図形を描画する時など、奥行きはある程度のしきい値を持たないと範囲が広くなりすぎです。</p>

<h4>ハマった所</h4>

<p>Polygon は当然塗りつぶしができるわけですが、これポリゴンの座標群が「時計回り」でないと塗りつぶされません。地理情報システムの業界では、&#8221;ポリゴンの外周は時計回り、穴は反時計回り&#8221; という常識があるのですが、それに習ったものと思われます。この原因にたどり着くまで、始点と終点が一致してないのかな、少数の切り捨てで一致してないのかとか、小一時間悩みました。</p>

<h4>参考</h4>

<ul>
<li>PolygonDemoActivity.java</li>
<li>PolylineDemoActivity.java</li>
</ul>


<h3>MapView とは一体？</h3>

<p>冒頭で紹介した <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/MapView">com.google.android.gms.maps.MapView</a> ですが、地図の表示はできたものの、その後、位置を移動しようと</p>

<pre><code>GoogleMap gMap = ((MapView) findViewById(R.id.map)).getMap();
gMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(35, 130)));
</code></pre>

<p>というコードを実行した所、 <code>java.lang.NullPointerException: CameraUpdateFactory is not initialized</code> が発生してしまいました。え？どうやって移動するの？</p>

<h4>参考</h4>

<ul>
<li>RawMapViewDemoActivity.java</li>
</ul>


<h2>増えた機能</h2>

<p>v1 感覚だと使うのに苦労しそうな v2 ですが、冒頭で紹介した機能以外に追加されてる機能もあります。</p>

<h3>情報ウィンドウ(ふきだし)</h3>

<p>これこれ、マーカーをタップすると表示される「ふきだし」。
v1 には無かったので、自作か外部ライブラリ使いしか無かったんですよね。
サンプル MarkerDemoActivity.java で使い方が紹介されてます。</p>

<h2>タイルオーバーレイとグラウンドオーバーレイ</h2>

<p>GIS&#8217;er 感涙の両機能。
タイルオーバーレイは、他のタイル地図サービスをオーバーレイできる、ってことですね。OpenStreetMap とか。iOS の <a href="http://qiita.com/items/8d89eeea614ce4293514">route-me</a> みたいなことができると期待してます。だれかハックを！
<img src="http://f.cl.ly/items/470S1b1B3a1F3F3z093i/gmap2_tileoverlay.png" alt="TileOverlay" /></p>

<p>グラウンドオーバーレイは、画像ファイルに位置情報を与えてやると、それが地面に張り付いたように表示されるというものです。
<img src="http://f.cl.ly/items/470s2M3g0w3Z2H423B3t/gmap2_groudoverlay.png" alt="GroundOverlay" /></p>

<p>タイルオーバーレイのサンプルは TileOverlayDemoActivity.java 、グラウンドオーバーレイのサンプルは GroundOverlayDemoActivity.java です。</p>

<h2>雑感</h2>

<p>Google Map Android API v2 をざっと使ってみての感想です。</p>

<p>v1 と互換性がなくなり、使い方がガラっと変わったのはある程度想定していました。2次元と3次元の溝は深いです。</p>

<p>Android と関係ないですが、iOS の MapKit も同じようなことになるのではないかと思っています。(地図アプリは 3D に対応しましたが MapKit は 2D のまま。3D用のMapKit は &#8220;まったく別のもの&#8221; として提供されるのではないかと。)</p>

<p>導入の仕方が難しくなっちゃったなー、と。
なぜ Google API Console で管理するのはよいとしても、ライブラリプロジェクトを参照しないといけないのか、とか。
(実は Fragment 初めて使いました…)</p>

<p>あと、Google Play Service や API Console との結びつきが強くなり、利用状況がモニタリングできる環境が整いつつあります。こりゃ課金も現実味を帯びてきたなあ、と。</p>

<p>そんなわけで、導入がちょいと面倒だったり、v1 と互換性まったくないですけど、なにしろ Googleマップアプリのあの地図レンダリングと機能がアプリに組み込めるのは嬉しい限りです。新たに地図アプリ作るなら使わない手はないですね！</p>

<p>まだ使いこなしてはいないので、順次 Post していきたいと思います。
最後に拙作の Android アプリ「HexRinger」の Map API v2 対応試作版をステマして終わります。</p>

<p><img src="http://cl.ly/image/1n0f1e0c1r3C/gmap2_hexringer.png" alt="HexRinger" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac mini(late 2012)に Windows7(32bit)をインストールしたメモ]]></title>
    <link href="http://amay077.github.com/blog/2012/11/20/win7-on-macmini/"/>
    <updated>2012-11-20T19:12:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/11/20/win7-on-macmini</id>
    <content type="html"><![CDATA[<p>Windows8(32bit) でもいけます。</p>

<!-- more -->


<ol>
<li>Mountain Lion の Bootcampアシスタントで Windows7_32bit のディスク入れて続行しようとすると「対応してません」とエラーが出る</li>
<li>とりあえず「サポートソフトウェア」はUSBメモリに取得しておく</li>
<li>Bootcampアシスタントはあきらめ「ディスクユーティリティ」でパーティションを作る</li>
<li>再起動→起動時に option(ALT)キー押しっぱなし→windows のディスクを選択</li>
<li>Windows7_32bit をインストール</li>
<li>インストール後、デバイスマネージャ見ると黄色がいっぱい。ネットもつながらない</li>
<li>サポートソフトウェアは64bit用だが、中には兼用のものもあるので、入れられるものは入れておく</li>
<li>Broadcom からイーサネットコントローラのドライバをダウンロードしてインストール</li>
<li>ネットがつながった、これで勝つる。</li>
</ol>


<p>※他に古い Mac mini があるなら、そこから Bootcamp でサポートソフトウェアをダウンロードしておくと、32bit のドライバが使える
※けどどーしても Bluetooth ドライバが見つからない。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps API Key の取得で「入力されたフィンガープリントは無効です。」が出るようになった件]]></title>
    <link href="http://amay077.github.com/blog/2012/11/20/fingerprint-error-on-googlemap-api-v1/"/>
    <updated>2012-11-20T18:14:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/11/20/fingerprint-error-on-googlemap-api-v1</id>
    <content type="html"><![CDATA[<p>Android で Googleマップを利用する際に必ず通る道である Google Map API Key の取得。
久しぶりに行ったら、少しハマったのでメモ。</p>

<!-- more -->


<p>手順は、</p>

<p><a href="http://wikiwiki.jp/android/?Maps%20API%20Key%A4%CE%BC%E8%C6%C0">Maps API Keyの取得 - Android Wiki</a></p>

<p>など、たくさん出てくるが、この通りやっても <strong>「入力されたフィンガープリントは無効です。」</strong> とエラーになってしまう。</p>

<p>「いやいやご冗談を。」と、よぉ〜く見直したら、</p>

<h2>keytool の結果が MD5 じゃなくて SHA1 になってるッ！！！</h2>

<p>という話。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  keytool -list -keystore ~/.android/debug.keystore </span></code></pre></td></tr></table></div></figure>


<blockquote><p>キーストアのパスワードを入力してください:</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><em>  WARNING WARNING WARNING  </em></strong></strong></strong></strong></strong></strong></strong></strong>
<em>キーストアに保存された情報の整合性は</em>
<em>検証されていません。整合性を検証するには</em>
<em>キーストアのパスワードを入力する必要があります。</em>
<strong><strong><strong><strong><strong><strong><strong><strong><em>  WARNING WARNING WARNING  </em></strong></strong></strong></strong></strong></strong></strong></strong></p>

<p>キーストアのタイプ: JKS
キーストア・プロバイダ: SUN</p>

<p>キーストアには1エントリが含まれます</p>

<p>androiddebugkey,2011/10/05, PrivateKeyEntry,
証明書のフィンガプリント(SHA1): xx:xx:xx:xx:xx:xx:xx:…</p></blockquote>

<p>上のリンク先のコメントにチラッと説明があった。
どうやら Java7 を導入すると SHA1 に替わってしまうらしい。</p>

<p>-v を足して実行すると、MD5 も表示されるので、そこからコピーして解決。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  keytool -list -keystore ~/.android/debug.keystore -v</span></code></pre></td></tr></table></div></figure>


<blockquote><p>キーストアのパスワードを入力してください:</p>

<p><strong><strong><strong><strong><strong><strong><strong><strong><em>  WARNING WARNING WARNING  </em></strong></strong></strong></strong></strong></strong></strong></strong>
<em>キーストアに保存された情報の整合性は</em>
<em>検証されていません。整合性を検証するには</em>
<em>キーストアのパスワードを入力する必要があります。</em>
<strong><strong><strong><strong><strong><strong><strong><strong><em>  WARNING WARNING WARNING  </em></strong></strong></strong></strong></strong></strong></strong></strong></p>

<p>キーストアのタイプ: JKS
キーストア・プロバイダ: SUN</p>

<p>キーストアには1エントリが含まれます</p>

<p>別名: androiddebugkey
作成日: 2011/10/05
エントリ・タイプ: PrivateKeyEntry
証明書チェーンの長さ: 1
証明書[1]:
所有者: CN=Android Debug, O=Android, C=US
発行者: CN=Android Debug, O=Android, C=US
シリアル番号: 4e8bdcd5
有効期間の開始日: Wed Oct 05 13:28:05 JST 2011終了日: Fri Sep 27 13:28:05 JST 2041
証明書のフィンガプリント:</p>

<pre><code> MD5:  xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:…
 SHA1: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:…
 SHA256: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:…
 署名アルゴリズム名: SHA1withRSA
 バージョン: 3
</code></pre></blockquote>

<p>気づかねぇよ、こんなもん（←やつあたり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express で ejs のつもりなのに jade が入っちゃう時]]></title>
    <link href="http://amay077.github.com/blog/2012/11/20/how-to-install-jade-on-express/"/>
    <updated>2012-11-20T15:17:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/11/20/how-to-install-jade-on-express</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ express -t ejs myapp</span></code></pre></td></tr></table></div></figure>


<p>で ejs を入れたつもりが、<code>views/index.jade</code> とかが入っちゃう。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ express -tejs myapp
</span><span class='line'>            ^スペース空けない</span></code></pre></td></tr></table></div></figure>


<p>と、正しく ejs が使われる。</p>

<p>なんなのよこれ。express が rc だから？</p>

<h2>0:51追記</h2>

<p>あーっ、ヘルプ見たら <code>express -e myapp</code> が正しいのね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ express -h</span></code></pre></td></tr></table></div></figure>


<blockquote><p> Usage: express [options]</p>

<p> Options:</p>

<p>   -h, &#8211;help          output usage information
   -V, &#8211;version       output the version number
   -s, &#8211;sessions      add session support
   -e, &#8211;ejs           add ejs engine support (defaults to jade)
   -J, &#8211;jshtml        add jshtml engine support (defaults to jade)
   -H, &#8211;hogan         add hogan.js engine support
   -c, &#8211;css <engine>  add stylesheet <engine> support (less|stylus) (defaults to plain css)
   -f, &#8211;force         force on non-empty directory</p></blockquote>

<h2>環境</h2>

<ul>
<li>Mac OS X 10.8.2</li>
<li>node v0.9.2</li>
<li>express 3.0.0rc5</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText2 で Shift-jis を使う]]></title>
    <link href="http://amay077.github.com/blog/2012/10/20/how-to-use-shiftjis-on-sublimetext2/"/>
    <updated>2012-10-20T19:19:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/10/20/how-to-use-shiftjis-on-sublimetext2</id>
    <content type="html"><![CDATA[<p>SublimeText2 は大変便利なテキストエディタですが、shift-jis に対応していないのが玉にキズでした。</p>

<!-- more -->


<p><img src="https://dl.dropbox.com/u/264530/qiita/shiftjis.png" alt="mojibake" /></p>

<p>そんな時、@umibose さんのツイートが！</p>

<blockquote><p>Sublime Text 2でSJISもいける！https://t.co/XxCrfPd0</p>

<p>M.Hayakawaさん (@umibose) <a href="https://twitter.com/umibose/status/256247651710951424">10月 11, 2012</a></p></blockquote>

<p>ふむ、ConvertToUTF8 というものできるのか。というわけで早速試してみました。</p>

<p>以下手順。</p>

<h2>1. Sublime Package Control の導入</h2>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Installation – Sublime Package Control – a Sublime Text 2 Package Manager by wbond</a> の手順。</p>

<p>まず、SublimeText2 にパッケージコントロールシステムを導入します。(既に入っていればスキップ)</p>

<p>SublimeText2 を起動し、 <code>shift + ctrl + @</code> (ctrl+`) を押すと、画面下部にコンソールが表示されます。(Win版のショートカット知りません)</p>

<p>ここに、上記リンクにある import〜 の一文を貼り付けて Enter！</p>

<p>なんだかインストールが終わった感じなら Sublime を再起動します。</p>

<h2>2. ConvertToUTF8 の導入</h2>

<p><a href="https://github.com/seanliang/ConvertToUTF8">ConvertToUTF8 - Github</a> の手順。</p>

<p><code>shift + command + p</code>(Win版はry) を押すと、Command Palette が開くので、そこで <code>Package Control: Install Package</code> を選択。（ある程度入力するとサジェストされます）</p>

<p>次に出てくるポップアップ(画面名分からん)で <code>ConvertToUTF8</code> を選択。</p>

<p>インストールが終わったら Sublime を再起動すれば…</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/choise_charcode.png" alt="choice" /></p>

<p>お、なんか文字コード選択が出た（でない場合もある？）
そして…
<img src="https://dl.dropbox.com/u/264530/qiita/shiftjis_correct.png" alt="choice" /></p>

<p>おっしゃー！
これであとは日本語入力時の挙動が直ってくれたら最強エディタですね。</p>

<p><a href="https://twitter.com/umibose">@umibose</a> さん、ありがとうございます！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac に Homebrew で Haskell 入れて HelloWorld]]></title>
    <link href="http://amay077.github.com/blog/2012/10/20/helloworld-of-haskell/"/>
    <updated>2012-10-20T14:22:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/10/20/helloworld-of-haskell</id>
    <content type="html"><![CDATA[<p>OS は Mountain Lion、Homebrew は入ってる前提で。</p>

<!-- more -->


<h2>インストール</h2>

<p>「処理系」の GHC と、開発用プラットフォームをインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ghc</span></code></pre></td></tr></table></div></figure>


<blockquote><p>==> Downloading http://www.haskell.org/ghc/dist/7.4.2/ghc-7.4.2-x86_64-apple-darwin.tar.bz2</p>

<h6>################################################################## 100.0%</h6>

<p>==> ./configure &#8211;prefix=/usr/local/Cellar/ghc/7.4.2
==> make install
==> Caveats
This brew is for GHC only; you might also be interested in haskell-platform.
==> Summary
/usr/local/Cellar/ghc/7.4.2: 6209 files, 842M, built in 18.9 minutes</p></blockquote>

<p>20分弱かかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install haskell-platform</span></code></pre></td></tr></table></div></figure>


<blockquote><p>==> Downloading http://lambda.haskell.org/platform/download/2012.2.0.0/haskell-platform-2012</p>

<h6>################################################################## 100.0%</h6>

<p>==> ./configure &#8211;prefix=/usr/local/Cellar/haskell-platform/2012.2.0.0 &#8211;enable-unsupported-
==> EXTRA_CONFIGURE_OPTS=&#8221;&#8211;libdir=/usr/local/Cellar/haskell-platform/2012.2.0.0/lib/ghc&#8221; ma
==> Caveats
Run <code>cabal update</code> to initialize the package list.</p>

<p>If you are replacing a previous version of haskell-platform, you may want
to unregister packages belonging to the old version. You can find broken
packages using:
  ghc-pkg check &#8211;simple-output
You can uninstall them using:
  ghc-pkg check &#8211;simple-output | xargs -n 1 ghc-pkg unregister &#8211;force
==> Summary
/usr/local/Cellar/haskell-platform/2012.2.0.0: 869 files, 174M, built in 13.4 minutes</p></blockquote>

<p>全部で３０分ほど。途中「ほんとに動いてんの？」って状態になったが焦らず放っておいたら終わってた。</p>

<h2>対話式インタプリタを起動する</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ghci</span></code></pre></td></tr></table></div></figure>


<blockquote><p>GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim &#8230; linking &#8230; done.
Loading package integer-gmp &#8230; linking &#8230; done.
Loading package base &#8230; linking &#8230; done.
Prelude></p></blockquote>

<h2>ハロワ</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; putStrLn "Hello, World"</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Hello, World</p></blockquote>

<h2>GHCi の終了</h2>

<p>意外と分からなかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:quit</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Leaving GHCi.</p></blockquote>

<h2>【未解決】runhaskell で「lexical error (UTF-8 decoding error)」エラー</h2>

<p><a href="http://www.haskell.org/haskellwiki/10%E5%88%86%E3%81%A7%E5%AD%A6%E3%81%B6Haskell">10分で学ぶHaskell - HaskellWiki</a> にあった REPL じゃなくてソースをビルドして実行する方法でエラーが。</p>

<figure class='code'><figcaption><span>Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="n">putStrLn</span> <span class="s">&quot;What is 2 + 2?&quot;</span>
</span><span class='line'>          <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">readLn</span>
</span><span class='line'>          <span class="kr">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>              <span class="kr">then</span> <span class="n">putStrLn</span> <span class="s">&quot;You&#39;re right!&quot;</span>
</span><span class='line'>              <span class="kr">else</span> <span class="n">putStrLn</span> <span class="s">&quot;You&#39;re wrong!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>を Test.hs で保存して、</p>

<figure class='code'><figcaption><span>Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">ghc</span> <span class="c1">--make Test.hs</span>
</span></code></pre></td></tr></table></div></figure>


<p>を実行して、Test, Test.hi, Test.o ファイルが生成される。
で、</p>

<figure class='code'><figcaption><span>Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">runhaskell</span> <span class="kt">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすると</p>

<blockquote><p>Test:1:1: lexical error (UTF-8 decoding error)</p></blockquote>

<p>というエラーが。よく分からないからとりあえず、</p>

<figure class='code'><figcaption><span>Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">runghc</span> <span class="kt">Test</span><span class="o">.</span><span class="n">hs</span>
</span></code></pre></td></tr></table></div></figure>


<p>で満足してる。まだ入り口にも立ってない気分。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.haskell.org/haskellwiki/10%E5%88%86%E3%81%A7%E5%AD%A6%E3%81%B6Haskell">10分で学ぶHaskell - HaskellWiki</a></li>
<li><a href="http://d.hatena.ne.jp/hide_o_55/20110427/1303914801">Haskell再入門 1日目(環境構築) - WebService::Blog->new( user => ’hide_o_55’ )</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
