<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2014-02-11T19:49:37+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MvvmCross だけじゃない！クロスプラットフォームMVVMフレームワーク「QuickCross」を試す]]></title>
    <link href="http://amay077.github.io/blog/2014/02/11/introduce-quickcross/"/>
    <updated>2014-02-11T19:47:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/02/11/introduce-quickcross</id>
    <content type="html"><![CDATA[<p><a href="http://amay077.github.io/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework/">以前、MvvmCross を紹介しました</a> が、Xamarin で使える同種のフレームワークはまだいくつかあります。</p>

<!--more-->


<p>今回は、その中の一つ、「QuickCross」を見てみます</p>

<ul>
<li><a href="https://github.com/MacawNL/QuickCross">MacawNL/QuickCross</a></li>
</ul>


<h2>なぜ他のMVVMフレームワークが必要なのか？</h2>

<p><a href="https://github.com/MacawNL/QuickCross#why-another-cross-platform-mvvm-framework">Why another cross-platform Mvvm framework?</a> にて、MvvmCross があるのになぜ？という事を説明しています。</p>

<p>要約すると、MvvmCross は、高機能だが Fat で複雑で、拡張が大変であるのに対し、QuickCross は、軽量で生産性が高く、拡張が簡単である、との事です。</p>

<h2>主な機能</h2>

<p><a href="https://github.com/MacawNL/QuickCross#features">Features</a> より。</p>

<ul>
<li>Xamarin.iOS, Xamarin.Android, Windows Phone, Windows Store Apps に対応。</li>
<li>バイナリは使ってない！Snippet と、プロジェクトにソースコードの追加を行うだけです。</li>
<li>ViewModel や View の追加は package manager console からコマンドを実行して行います。</li>
<li>いくつかのコードスニペットを提供します。</li>
<li>以下略…</li>
</ul>


<h2>仕組み</h2>

<p><img src="https://raw.github.com/MacawNL/QuickCross/master/assets/quickcross_pattern.png" alt="" />
via https://github.com/MacawNL/QuickCross#features</p>

<p>Navigator って概念があるのが MvvmCross と違うとこですかね。</p>

<h2>使い方</h2>

<p><a href="https://github.com/MacawNL/QuickCross#getting-started">Getting Started</a> を見てください。</p>

<p>Nuget の Package manager console を使う必要があるので、Mac と Xamarin Studio 、そして Indie Edition では試せません、残念。
Visual Studio ＋ Xamarin Business Edition以上を使ってる方、試してみてください。</p>

<h2>サンプルを動かしてみた</h2>

<p>Getting Started は試せませんでしたが、github に含まれるサンプルは Mac + Xamarin Studio でも動かせました。</p>

<p><a href="https://github.com/MacawNL/QuickCross/blob/master/QuickCross.ios.sln">QuickCross.ios.sln</a> を Xamarin Studio で開いて実行したところ↓</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/introduce_quickcross_01.png" alt="" /></p>

<p>MvvmCross と同じく、ViewModel などは Shared プロジェクトの方にあります。
Shared プロジェクトは PCL にできるんじゃないかなーと思いやってみましたが、</p>

<ul>
<li>Profile147(.NET4.0) では <code>System.Windows.Input.ICommand</code> が無いと言われ</li>
<li>Profile78(.NET4.5) では、この<a href="https://bugzilla.xamarin.com/show_bug.cgi?id=17247">バグ</a> にエンカウント</li>
</ul>


<p>してビルドできませんでした、残念。</p>

<h2>まとめ</h2>

<p>MvvmCross は確かに大規模すぎて使うのが大変です。拡張するには Plugin を自作する事になりますし。
QuickCross は、すべてのソースコードがプロジェクトにあるので、カスタマイズが手軽に行えそうだというのは分かりました。</p>

<p>Xamarin Starter Edition の場合、64kbyte までのバイナリ制限があるので、MvvmCross は使えませんが、QuickCross なら使えるかも知れません。</p>

<p>ただ残念なのは、Nuget の Package Manager Console を使う必要があるために、Visual Studio が必要で、その為には Xamarin も Business Edition 以上が必要になってしまう所です。</p>

<p>Xamarin Studio のみでも使えるくらい Lightweight だったら、もっと試してみたくなるフレームワークです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS と Android で画面表示時のコールバックを比較する]]></title>
    <link href="http://amay077.github.io/blog/2014/01/29/displaying-view-lifecycle-comparison-ios-android/"/>
    <updated>2014-01-29T15:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/29/displaying-view-lifecycle-comparison-ios-android</id>
    <content type="html"><![CDATA[<p>モバイル開発における画面のライフサイクル、重要ですね。
iOS と Android で「ざっくりとは同じでしょ？」などと思っていましたが、調べてみたら結構違ってました。</p>

<!--more-->


<p>と言うのも、こちら</p>

<ul>
<li><a href="http://blog.jarinosuke.com/entry/uiviewcontroller_view_coding_pattern">メモリ管理・レイアウトの観点からみた UIViewController の view の扱い - jarinosuke blog</a></li>
</ul>


<p>のエントリが大変参考になったので、「Android と比べるとどうか？」と興味が沸いたのです。</p>

<h2>画面が表示される時</h2>

<p>iOS/Android の <code>UIViewController</code>, <code>Activity</code> に備わってるコールバックの、画面表示時での発生順をそれぞれ調べて発生順に並べてみました。同じような意味のコールバックは横に並べて書きました。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>クラスが生成された時</td>
<td>init</td>
<td>ctor(コンストラクタ)</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面がロードされる前</td>
<td>loadView</td>
<td>onCreate</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>(画面が再度開始される前)</td>
<td></td>
<td>onRestart ※停止状態(onStop)から復帰する時のみ</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面が開始される前</td>
<td></td>
<td>onStart</td>
</tr>
<tr>
<td></td>
<td>5</td>
<td>画面がロードされた後</td>
<td>viewDidLoad</td>
<td>onPostCreate</td>
</tr>
<tr>
<td></td>
<td>6</td>
<td>画面が表示され始める前</td>
<td></td>
<td>onResume ※一時停止(Pause)からの復帰はここから</td>
</tr>
<tr>
<td></td>
<td>7</td>
<td>画面が表示され始めた後</td>
<td></td>
<td>onPostResume</td>
</tr>
<tr>
<td></td>
<td>8</td>
<td>UIの配置が行われる前</td>
<td>viewWillLayoutSubviews</td>
<td></td>
</tr>
<tr>
<td></td>
<td>9</td>
<td>UIの配置が行われた後</td>
<td>viewDidLayoutSubviews</td>
<td></td>
</tr>
<tr>
<td></td>
<td>10</td>
<td>画面が表示される直前</td>
<td> viewWillAppear </td>
<td></td>
</tr>
<tr>
<td></td>
<td>11</td>
<td>画面が表示された直後</td>
<td>viewDidAppear</td>
<td></td>
</tr>
<tr>
<td></td>
<td>12</td>
<td>画面にフォーカスが移った直後</td>
<td></td>
<td>onWindowFocusChanged(true) ※表示される度に呼ばれる</td>
</tr>
</tbody>
</table>


<h3>onCreate は生成前？後？</h3>

<p>iOS というか CocoaTouch の命名文化って、will とか did とか、時系列が明確に分かるものが多いので良いですね。
それに比べて Android は…。 onCreate は前？後？ onPostCreate があるので「前」ですね。</p>

<h3>UIパーツのサイズはいつ決まるのか？</h3>

<p>iOS の方は 9. <code>viewDidLayoutSubviews</code> の時です。
冒頭で紹介したエントリにも以下のように書かれています。</p>

<blockquote><p>self.view の subviews.frame の調整、すなわちレイアウト処理は全てここで記述するべきです。</p></blockquote>

<p>Android の方は問題です。
<code>Button</code> などの生成は <code>onCreate</code> で行うのが一般的ですが、この時点では、まだレイアウトされていません。なので大抵の場合 <code>button1.Height = 0</code> です。
では、いつのタイミングで <code>button1.Height</code> に適切な値が格納されるかと言うと…、 12. <code>onWindowFocusChanged(true)</code> まで待たないといけません。しかもこのコールバックは、Focus が変わる度に呼ばれるので、「最初の１回」だけを取得しようと思ったら別のフラグが必要になります、あーめんどい。</p>

<p>続きは</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4393612/when-can-i-first-measure-a-view">android - When Can I First Measure a View? - Stack Overflow</a></li>
</ul>


<p>で。私は <code>View.post</code> する方法が一番簡単だと思いました。</p>

<h3>onResume/onPostResume の命名が&#8230;</h3>

<p>「画面が表示され始める前/画面が表示され始めた後」なんて無理やりな名前を付けてしまいました。
特に <code>onPostResume</code> は無理がありすぎ。
名前からは <code>viewDidAppear</code> に相当するとも捉えられますが、まだこの時点ではレイアウトが完了していないという、中途半端なタイミングです。何のために使えば良いのでしょう？</p>

<h3>回転したらどうなるの？</h3>

<p>iOS の場合は、8.<code>viewWillLayoutSubviews</code> からやり直しです。つまり、ここに適切に縦横対応のレイアウト処理を記述しておけば、<code>didRotateFromInterfaceOrientation</code>など、他のコールバックでの処理は通常必要ないと思います。</p>

<p>Android の場合は、AndroidManifest.xml への設定なしだと、なんと 1.コンストラクタ からやりなおしです。とその前に当然 <code>onDestroy</code> や <code>OnSaveInstanceState</code> が呼ばれるわけですが、、、それはまた別の機会に。</p>

<h2>まとめっぽいもの</h2>

<p>iOS プログラミングでは今まで <code>viewDidLoad</code> で、UIパーツを生成してレイアウト処理してるプログラムが多いように思いますが、それは間違いで、「loadView で生成して、viewDidLayoutSubviews でレイアウト」とするのが最も効率的なようです。</p>

<p>Android でも、onCreate でレイアウト処理するとハマることがありそうです(<a href="http://qiita.com/amay077/items/070ac1db6b52dd03505f">実際ありました</a>)。ちょっと注意しといた方がよさそうです。</p>

<p>「画面が破棄される時」「メモリが足りなくなった時」「回転した時」とか、書くこと沢山あるんですけど、ありすぎてもうダメです。</p>

<h2>参考</h2>

<h3>iOS</h3>

<ul>
<li><a href="https://developer.apple.com/library/ios/Documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instm/UIViewController">UIViewController Class Reference</a></li>
<li><a href="http://blog.jarinosuke.com/entry/uiviewcontroller_view_coding_pattern">メモリ管理・レイアウトの観点からみた UIViewController の view の扱い - jarinosuke blog</a></li>
<li><a href="https://gist.github.com/shinyaohira/6482235">iOS View Controllerプログラミングガイド</a></li>
</ul>


<h3>Android</h3>

<ul>
<li><a href="http://developer.android.com/training/basics/activity-lifecycle/starting.html">Starting an Activity | Android Developers</a></li>
<li><a href="http://developer.android.com/reference/android/app/Activity.html">Activity | Android Developers</a></li>
<li><a href="http://qiita.com/amay077/items/070ac1db6b52dd03505f">moveCamera(CameraUpdateFactory.newLatLngBounds(… で落ちる</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C と Java と C# でクロージャ的な書き方の比較]]></title>
    <link href="http://amay077.github.io/blog/2014/01/29/closure-like-statement-comparison-with-objc-java-csharp/"/>
    <updated>2014-01-29T15:52:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/29/closure-like-statement-comparison-with-objc-java-csharp</id>
    <content type="html"><![CDATA[<p>クロージャとかラムダとか匿名** とか名前はいろいろですけど、各言語の書き方と動き（特に変数の扱い）について比べてみました。</p>

<p>ついでに非同期処理の例にもなってしまいました。</p>

<!--more-->


<h3>Objective-C</h3>

<p>Blocks を使います。</p>

<figure class='code'><figcaption><span>Obj-C</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">__block</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">q_global</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">q_global</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// できない(コンパイルエラー</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// できる</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dispValue:</span><span class="n">z</span><span class="p">];</span> <span class="c1">// self の参照カウンタが+1される</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通に宣言した変数を Block の中で使うと、自動的に「キャプチャ」され、変数の複製される。この変数には、 Block 内では代入できずコンパイルエラーとなる。
<code>__block</code> を付けた変数は、Block 内外で同じ実体を参照でき、代入もできる。
<code>self</code> やプロパティを Block 内で使用すると参照カウンタがインクリメントされ、明示的に release しないとリークする。
あるいは、Block 外で <code>__weak</code> を付けた変数に代入しておくと、これは参照カウンタがインクリメントされない。</p>

<h3>Java 6 (Android ベースなので…)</h3>

<p>匿名クラスです。</p>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span><span class='line'><span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span> <span class="c1">// できない(コンパイルエラー</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span> <span class="c1">// できない(コンパイルエラー</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">typeName</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">()[</span><span class="mi">0</span><span class="o">].</span><span class="na">getName</span><span class="o">();</span> <span class="c1">// Runnable になる</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java は匿名クラスの実装中に使える変数はかなり制限がある。
普通に宣言した変数は、匿名クラス内では使えない(コンパイルエラー)。
<code>final</code> を付けて宣言した変数は、匿名クラス内では参照のみ可能。ちょうど Objective-C の通常変数を Block 内で使った時と同じ。
Obj-C の <code>self</code> にあたる <code>this</code> は匿名クラス内では、その匿名クラスを示す。</p>

<h3>C＃</h3>

<p>ラムダ式です。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'><span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">StartNew</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span> <span class="c1">// OK</span>
</span><span class='line'>    <span class="n">y</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span> <span class="c1">// これはダメ、const だから。</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">z</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">typeName</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>C# はかなりゆる〜い印象。
普通に宣言した変数を、ラムダ式の中でも自由に read/write できてしまう。write できちゃうのはこわい。
<code>this</code> は、ラムダ式の外側のクラスを示す。
　</p>

<h2>所感</h2>

<p>個人的には、Java のガチガチなのが好きかも。できる事が限定されているのでミスしにくい。
Objective-C は、ローカル変数は良いけど、self とか使っちゃうミス起こしそう。
C# は、普通に書き換えられて超不安、という感じ。なるべく const 使うようにしたい。
　
　
　</p>

<p>しかし記述量は C# が一番少ないですね、Xamarin いいよ Xamarin。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C の Dictionary は、キーに基本データ型が使えないのね ]]></title>
    <link href="http://amay077.github.io/blog/2014/01/28/cannot-using-int-type-in-objc-dictionary/"/>
    <updated>2014-01-28T15:49:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/28/cannot-using-int-type-in-objc-dictionary</id>
    <content type="html"><![CDATA[<p>Obj-C 慣れないもので、こんな所でハマってた。
くやしいので他の言語と比較しておく。
当然ながら Dictionary に限った話でない（はず）。</p>

<!--more-->


<h3>Objective-C</h3>

<figure class='code'><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">NSMutableDictionary</span><span class="o">*</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">dic</span> <span class="nl">setObject:</span><span class="s">@&quot;hoge&quot;</span> <span class="nl">forKey:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">]];</span> <span class="c1">// これは OK</span>
</span><span class='line'><span class="p">[</span><span class="n">dic</span> <span class="nl">setObject:</span><span class="s">@&quot;huga&quot;</span> <span class="nl">forKey:</span><span class="err">@</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// これも OK (@1 は NSNumber のリテラル構文なので)</span>
</span><span class='line'><span class="p">[</span><span class="n">dic</span> <span class="nl">setObject:</span><span class="s">@&quot;piyo&quot;</span> <span class="nl">forKey:</span><span class="mi">2</span><span class="p">];</span> <span class="c1">// これはダメ（落ちる</span>
</span></code></pre></td></tr></table></div></figure>


<p>キーと値が他の言語と逆なのにまずハマって、
キーに int型 の値を入れてたのに気づかずまたハマった。
せめてコンパイルエラーにして欲しいよ。
言語仕様上、型指定できないのでキーも値もどんな型でも突っ込めちゃう、こわい。</p>

<h3>Java</h3>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span> <span class="c1">// これはダメ(コンパイルできない)</span>
</span><span class='line'><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="s">&quot;hoge&quot;</span><span class="o">);</span> <span class="c1">// OK</span>
</span><span class='line'><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;piyo&quot;</span><span class="o">);</span> <span class="c1">// これも OK（へー</span>
</span></code></pre></td></tr></table></div></figure>


<p>int と Integer ってのがあって、int を使って HashMap を宣言できない。
これはコンパイル時に分かるので良いけど、int と Integer の変換が必要なことがしばしば。</p>

<h3>C＃</h3>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">dic</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span> <span class="c1">// 型推論＆Generic</span>
</span><span class='line'><span class="n">dic</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="s">&quot;hoge&quot;</span><span class="p">);</span> <span class="c1">// OK</span>
</span><span class='line'><span class="n">dic</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="s">&quot;piyo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">dic</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="s">&quot;huga&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>一番スッキリ書けますね。
　
　
　</p>

<p>…Xamarin いいよ、Xamarin</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac に入れてるアプリ一覧]]></title>
    <link href="http://amay077.github.io/blog/2014/01/24/my-favorite-apps-in-mac/"/>
    <updated>2014-01-24T15:47:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/24/my-favorite-apps-in-mac</id>
    <content type="html"><![CDATA[<p>環境移行するときの為の備忘録。
あんまりカスタマイズしない方だったけど３０超えてた。</p>

<!--more-->


<h2>カスタマイズ</h2>

<ol>
<li>XtraFinder : 標準Finderのタブよりこっちの方が好き。フォルダから Terminal を開けるのが地味に便利。</li>
<li>Sublime Text 2 : 常用テキストエディタ</li>
<li>CopyPath : Finder で選択したファイルのパスをクリップボードにコピる</li>
<li>ClipMenu : クリップボード履歴と定型文呼び出し</li>
<li>FreeMemory : メモリ解放してくれる系からテキトーに選んだ</li>
<li>Google IME : ATOK 買うお金がない</li>
</ol>


<h2>ブログ書く時</h2>

<ol>
<li>Kobito : Qiita 投稿＆Markdown エディタとして</li>
<li>Skitch : スクショ撮り＆注釈入れに</li>
<li>ImageOptim : 画像圧縮</li>
<li>LICEcap : スクリーンをGIFアニメとして記録できる、便利</li>
</ol>


<h2>クラウドストレージ</h2>

<ol>
<li>Dropbox : おなじみ</li>
<li>Bitcasa : 無制限Bytes/$10/Month プラン（既得権益♪）</li>
</ol>


<p>Evernote、Google Drive、Skydrive は Web で十分。</p>

<h2>チャットとか電話とか</h2>

<ol>
<li>Skype : 主にお仕事連絡用</li>
<li>Line : 家族連絡用</li>
<li>Linphone : 050plus の発着信に使ってたけど最近使えなくなった(泣</li>
</ol>


<h2>ブラウザ</h2>

<ol>
<li>Google Chrome : 常用</li>
<li>Firefox : 主にテスト用ですね</li>
</ol>


<h2>プログラム開発のお仕事で使う</h2>

<ol>
<li>Xamarin Studio : Xamarin 推しですから</li>
<li>SourceTree : git/hg、SVN も git-svn でやってる</li>
<li>Brackets : Web開発はこれで</li>
<li>Eclipse : 仕方なく</li>
<li>Xcode : 仕方なく</li>
<li>astah community : UML 描くのに</li>
<li>MacWinZipper : 日本語が化けないZIP圧縮/解凍ツール</li>
</ol>


<h2>その他</h2>

<ol>
<li>VMware Fusion : Windows 使う時はこれで</li>
<li>Sophos Anti-Virus : 一応のセキュリティ担保</li>
<li>Fitbit Connect : Fitbix Flex 買ったら付いてきた</li>
<li>Keynote : 買ったけど最近使ってないなあ</li>
<li>VLC : 定番</li>
<li>HandBrake : 定番</li>
<li>Cyberbuck : FTP とか S3 とか</li>
<li>radikoro : たまにラジオ聴いてる</li>
</ol>


<p>Word や Excel は、VMware の Windows で使ってます。Office の Mac版使うよりストレス溜まりません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewController の ViewDidLoad で this が nil になった件]]></title>
    <link href="http://amay077.github.io/blog/2014/01/18/viewcontroller-is-nil-when-viewdidload/"/>
    <updated>2014-01-18T18:18:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/18/viewcontroller-is-nil-when-viewdidload</id>
    <content type="html"><![CDATA[<p>Xamarin Studio + Xcode で Storyboard でアプリを作っていた。複数ある画面の内、ある一つの画面に遷移すると落ちる現象に見舞われていろいろ調べていた。</p>

<!--more-->


<p>Xamarin Studio で該当画面の ViewController の ViewDidLoad にブレークポイントを仕掛けて停止させ、ウォッチしてみたところ、なんと this が「nil」になっていた。</p>

<p>これのおかげで、ViewController に配置した UILabel などにもアクセスできない。</p>

<p>ViewController を作りなおしてみたり、呼び出し方法を変えてみたりいろいろやってみたけど解消せず。</p>

<p>30分ほど悪戦苦闘した後、実機にインストールされている該当アプリを一旦削除し、Xamarin Studio も終了させた後に再起動、ソリューションをクリーンして再ビルドして実行してみたところ、問題が解消した。</p>

<p>なにがしかのトラブルが起きた時は、まずは端末内のアプリを消してみると良いのかも知れない。（これまでの経験的に）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Component for iOS の CoordinateBounds について]]></title>
    <link href="http://amay077.github.io/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk/"/>
    <updated>2014-01-16T18:05:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk</id>
    <content type="html"><![CDATA[<p>すごくニッチな話ですけど、Xamarin Components にある Google Maps を Xamarin.iOS で使った。</p>

<!--more-->


<ul>
<li><a href="http://components.xamarin.com/view/googlemapsios">Google Maps /Components</a></li>
</ul>


<p>このライブラリの中に <code>CoordinateBounds</code> という「領域」を表すクラスがある。これは <a href="https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja">GMSCoordinateBounds</a> の Binding だ。</p>

<p>で、CoordinateBounds には <code>Including</code> (<a href="https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja#a63cffdf310ca19c6bab74c9a4034aadd">includingCoordinate</a>) というメソッドがあって、これを呼ぶと指定した座標が入るように領域を拡幅してくれる、便利だ。</p>

<p>で、最初はこのクラスをこう使っていた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">bounds</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CoordinateBounds</span><span class="p">();</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">34d</span><span class="p">,</span> <span class="m">134d</span><span class="p">));</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">33d</span><span class="p">,</span> <span class="m">133d</span><span class="p">));</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">35d</span><span class="p">,</span> <span class="m">135d</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>動かしてみて、この使い方だと <code>bounds</code> から期待した結果が得られないことに気づいた。範囲が -180〜+180 になってしまった。</p>

<p>正しくはこう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">bounds</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CoordinateBounds</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">34d</span><span class="p">,</span> <span class="m">134d</span><span class="p">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">33d</span><span class="p">,</span> <span class="m">133d</span><span class="p">));</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">35d</span><span class="p">,</span> <span class="m">135d</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと結果は、正しく [33,133 - 35,135] を返す。</p>

<p>処理上、生成時に２つの座標が揃ってないケースだったので、「あ、デフォルトコンストラクタあるじゃん」と使ってたらハマった。本家 iOS 版の方には引数無しの initXXX は無かった。</p>

<p>Objective-C の仕様上 alloc して init しないのを防げない、んだっけ？
だから、Xamarin.iOS の Binding でデフォルトコンストラクタを隠せないのかな？
突っ込んで調べてないけど、Binding ライブラリを使う時は注意しましょう、ちゃんと本家のAPIリファレンスを見ましょう、というお話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS でエラー “Failed to load AOT module ... in aot-only mode”]]></title>
    <link href="http://amay077.github.io/blog/2014/01/16/failed-to-load-aot-module-in-aot-only-mode/"/>
    <updated>2014-01-16T15:14:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/16/failed-to-load-aot-module-in-aot-only-mode</id>
    <content type="html"><![CDATA[<p>Xamarin.iOS で Binding プロジェクトをプロジェクトに追加して実機で実行したら、起動時に落ちるようになってしまった。</p>

<!--more-->


<p>Xamarin.iOS で Binding プロジェクトをプロジェクトに追加して実機で実行したら、起動時に落ちるようになってしまった。</p>

<p>ログには、</p>

<blockquote><p>Failed to load AOT module ‘/xxx/Hoge.dll.dylib&#8217; in aot-only mode.</p></blockquote>

<p>というエラーが出ていた。</p>

<p>実機からアプリを削除して、
ソリューションを「再ビルド」したら直った。小ネタ過ぎる。</p>

<h2>参考</h2>

<ul>
<li><a href="http://monotouch.2284126.n4.nabble.com/Failed-to-load-AOT-module-in-aot-only-mode-td4602614.html">MonoTouch - Failed to load AOT module &#8230; in aot-only mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で特定の画面だけ向きを固定する時ハマったこと]]></title>
    <link href="http://amay077.github.io/blog/2014/01/07/touble-by-lock-orientation-of-specific-viewcontroller/"/>
    <updated>2014-01-07T18:11:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/07/touble-by-lock-orientation-of-specific-viewcontroller</id>
    <content type="html"><![CDATA[<p>画面A,B があって B だけ横向き固定にしたい。</p>

<ul>
<li><a href="http://stackoverflow.com/a/12588038">uiviewcontroller - iOS 6 ViewController is rotating but shouldn&#8217;t - Stack Overflow</a></li>
<li><a href="http://qiita.com/yusuga_/items/8cc82376edb40e09f0e7">iPhone - UIViewController iOS6での画面回転への対応 - Qiita [キータ]</a></li>
</ul>


<p>これを Xamarin.iOS でやりたい。</p>

<!--more-->


<p>Storyboard を Interface Builder で開いて、NavigationController のカスタムクラスを <code>MyNavigationController</code> とした。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/viewcontroller_orientaion_lock_in_xamarin_ios_01.png" alt="" /></p>

<p>すると、Xamarin Studio 側にも <code>MyNavigationController.cs</code> ができるので、Stackoverflow の通り、以下のように実装した。</p>

<figure class='code'><figcaption><span>MyNavigationController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// This file has been autogenerated from a class added in the UI designer.</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.Foundation</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.UIKit</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MyNavigationController</span> <span class="p">:</span> <span class="n">UINavigationController</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="nf">MyNavigationController</span> <span class="p">(</span><span class="n">IntPtr</span> <span class="n">handle</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientation</span> <span class="nf">PreferredInterfaceOrientationForPresentation</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">ViewControllers</span><span class="p">.</span><span class="n">Last</span><span class="p">().</span><span class="n">PreferredInterfaceOrientationForPresentation</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientationMask</span> <span class="nf">GetSupportedInterfaceOrientations</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">ViewControllers</span><span class="p">.</span><span class="n">Last</span><span class="p">().</span><span class="n">GetSupportedInterfaceOrientations</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">ShouldAutorotate</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">ViewControllers</span><span class="p">.</span><span class="n">Last</span><span class="p">().</span><span class="n">ShouldAutorotate</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、横固定にしたい画面Bを以下のように実装。</p>

<figure class='code'><figcaption><span>BViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// This file has been autogenerated from a class added in the UI designer.</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.Foundation</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.UIKit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">BViewController</span> <span class="p">:</span> <span class="n">UIViewController</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="nf">PhotoPreviewViewController</span> <span class="p">(</span><span class="n">IntPtr</span> <span class="n">handle</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientation</span> <span class="nf">PreferredInterfaceOrientationForPresentation</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">UIInterfaceOrientation</span><span class="p">.</span><span class="n">LandscapeLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientationMask</span> <span class="nf">GetSupportedInterfaceOrientations</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">UIInterfaceOrientationMask</span><span class="p">.</span><span class="n">LandscapeLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">ShouldAutorotate</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで動かしてみたものの、一向に画面が固定されない。
しばらく悩んだ後、<code>MyNavigationController</code> のコンストラクタにブレークポイントを仕掛けてデバッグしてみたとても止まらない。
よくよくアプリケーション出力のコンソールを見てみると、</p>

<blockquote><p>Unknown class MyNavigationController in InterfaceBuilder file.&#8221;</p></blockquote>

<p>と出力されていることに気づいた。
なんか、.storyboard と C# クラスの関連付けがうまくいってないらしい。</p>

<p>ソリューションをクリアして、再ビルドしたらこのエラーは消え、画面Bの向きが固定されるようになった！</p>

<p>(ただ、縦画面のまま画面Bに遷移すると縦画面で固定されてしまう。これは実装が何か足りない気がする。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NHK紅白の Android/iPhone アプリが .NET/Xamarin 製だったということ]]></title>
    <link href="http://amay077.github.io/blog/2014/01/02/nhk-kouhaku-utagassen-apps-made-by-xamarin/"/>
    <updated>2014-01-02T11:27:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/02/nhk-kouhaku-utagassen-apps-made-by-xamarin</id>
    <content type="html"><![CDATA[<p>新年あけましておめでとうございます。
今年も Xamarin 推しで参ります、よろしくお願いします。</p>

<!--more-->


<p>2013年大晦日の紅白歌合戦、NHK が iPhone/Android 用のアプリを配信していました。</p>

<ul>
<li><a href="http://www1.nhk.or.jp/kouhaku/app/">紅白アプリ｜第64回NHK紅白歌合戦</a></li>
<li><a href="http://weekly.ascii.jp/elem/000/000/192/192769/">紅白で「イェーガー！」と叫ぶために曲を見逃さないiPhoneアプリ、NHK紅白</a></li>
</ul>


<p>なんとこのアプリ、Xamarin 製だったとのこと。
紅白あんまり興味なかったのでノーチェックでしたわー。</p>

<blockquote class="twitter-tweet" lang="ja"><p>紅白アプリXamarinなんか</p>&mdash; ゆたか (@tmyt) <a href="https://twitter.com/tmyt/statuses/413092620567470080">2013, 12月 17</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>iPhoneの紅白アプリ、MvvmCross使ってるってことは、Xamarinで作ってるってこと？！ <a href="http://t.co/cTWPz2cp9E">pic.twitter.com/cTWPz2cp9E</a></p>&mdash; 菊池紘 (@kikuchy) <a href="https://twitter.com/kikuchy/statuses/417977438597959680">2013, 12月 31</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>このツイートを RT した後、ソッコーで Android 版を入れてみましたら、確かにクレジットに MvvmCross やら ActionBarSherlock for Xamarin やらならんでいました。</p>

<h2>開発してるのは…</h2>

<p>開発は、<a href="http://www.fenrir-inc.com/">スレイプニル</a> で有名なフェンリルさんのようですね。</p>

<ul>
<li><a href="http://biz.fenrir-inc.com/application_development/casestudy_app/nhk_kouhaku.html">フェンリル株式会社 | スマートフォンアプリ開発 実績 NHK 紅白</a></li>
</ul>


<p>2年連続で作っておられるようですが、おととしから Mono(MonoTouch/Mono for Android) 製だったのかな？いやスゴいです！</p>

<h2>使われているライブラリ</h2>

<p>せっかくなので、Android/iOSアプリ両方の著作権表示から、使われている OSS ライブラリを列挙してみます。(<a href="http://nkzn.hatenablog.jp/entry/2013/12/30/010956">こちらのエントリ</a>にインスパイアされました)
当然ですが、すべて .NET/Mono で動作するライブラリばかりです。(ActionBar と Nimbus を除く)</p>

<h3>MvvmCross</h3>

<ul>
<li>https://github.com/MvvmCross/MvvmCross</li>
<li>クロスプラットフォームMVVMフレームワーク。<a href="http://qiita.com/amay077/items/c4227663b5a5e540dc13">こちらでも</a> 紹介しました</li>
</ul>


<h3>Json.NET</h3>

<ul>
<li>http://james.newtonking.com/json</li>
<li>.NET/Mono で JSON を扱うための事実上標準ライブラリ</li>
</ul>


<h3>SocketIO4Net.Client</h3>

<ul>
<li>http://socketio4net.codeplex.com/</li>
<li>WebSocket4Net と組み合わせて使うっぽい？ライブラリ</li>
</ul>


<h3>WebSocket4Net</h3>

<ul>
<li>http://websocket4net.codeplex.com/</li>
<li>.NET で WebSocket 使うためのライブラリ。</li>
</ul>


<h3>SuperSocket.ClientEngine</h3>

<ul>
<li>http://clientengine.codeplex.com/</li>
<li>ソケット通信用ライブラリっぽい。</li>
</ul>


<h3>MvxSettings</h3>

<ul>
<li>https://github.com/jamesmontemagno/Mvx.Plugins.Settings かな？</li>
<li>設定情報をストアするための、MvvmCross のプラグイン</li>
</ul>


<h3>ActionBarSherlock for Xamarin</h3>

<ul>
<li>http://components.xamarin.com/view/XamarinActionBarSherlock</li>
<li>スライドメニュー(NavigationDrawer) を実現するライブラリ。そういえばちょっと変わったスライドメニューでしたね。</li>
</ul>


<h3>AsyncOAuth</h3>

<ul>
<li>http://neue.cc/2013/02/27_398.html</li>
<li>C#/LINQ の神であらせられる <a href="http://neue.cc/2013/02/27_398.html">@neuecc</a> さん作の 非同期OAuthライブラリ</li>
</ul>


<h3>Nimbus</h3>

<ul>
<li>http://nimbuskit.info/</li>
<li>iOS の UIパーツがいろいろ拡張されてる的なライブラリ？Xamarin.iOS で Binding して使ってるのかなあ？</li>
</ul>


<h3>Html Agility Pack</h3>

<ul>
<li>http://htmlagilitypack.codeplex.com/</li>
<li>HTMLパーサライブラリ</li>
</ul>


<p>生放送のテレビ番組向けアプリということで、リアルタイム通信に注力された様子が、使用されたと思われるライブラリからも伺えます。</p>

<h2>これは強力すぎる Xamarin 導入事例ですね</h2>

<p>日本の最も有名なテレビ番組のスマホアプリに Xamarin が使われていたというのは大きな導入事例になること必至です。
アプリの性質上、期間限定となる可能性もあります。できればこのまま公開しつづけて欲しいですが、Xamarin を上司や提案先に紹介されたい場合は、お早めに、またキャプチャを多く撮っておかれる事をおすすめします。</p>

<p>最後に、今年が Xamarin 普及元年とならん事を近くの神社にお祈りして、新年最初のエントリの締めとします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マルチプラットフォーム MVVMフレームワーク「MvvmCross」を使う]]></title>
    <link href="http://amay077.github.io/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework/"/>
    <updated>2013-12-25T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2013/xamarin">Xamarin Advent Calendar 2013</a> も最終日となりました。
最後は、「実用的な」マルチプラットフォーム開発のツールを紹介します。</p>

<!--more-->


<p>MvvmCross ってやつを紹介したいのですが、まずは事前知識からさらりと。</p>

<h2>MVVM パターンについて</h2>

<p>MVVM は、 Model-View-ViewModel の頭文字を取ったものです。
MVC パターンの派生で、Microsoft が WPF/Silverlight のために作ったそうですが、今では JavaScript の <a href="http://knockoutjs.com/">Knockout.js</a> などでも利用されています。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png" alt="" />
(via <a href="http://ja.wikipedia.org/wiki/Model_View_ViewModel">Model View ViewModel - WikiPedia</a> CC-BY 3.0)</p>

<ul>
<li>Model - MVC の Model と一緒。ビジネスロジックはここに。</li>
<li>View - WPF なら .xaml、iOS なら .storyboard、Android なら .xml それだけ。1行もコードを書かないのが理想。

<ul>
<li>DataBinding - ViewModel を監視して、ViewModel の情報を View に表示する。View でのユーザーからの入力を受け付けて ViewModel を変更したり、コマンドを実行する。</li>
</ul>
</li>
<li>ViewModel - View の為の Model。状態管理と View の為の情報＆機能公開、およびその為の Model の利用。”ロジック” はここにも書いちゃダメ。</li>
</ul>


<p>いやもう絶対他のリソース読んだ方が分かりやすいですから(逃げ)。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/fdotnet/chushin/greatblogentry_02/greatblogentry_02_01.html">MVVMパターンの常識 ― 「M」「V」「VM」の役割とは？ － ＠IT</a></li>
</ul>


<h2>PCL(Portable Class Library) について</h2>

<p>WPF, Silverlight, Windows Store App など、異なるプラットフォームでバイナリを共有できる “ポータブルな” クラスライブラリ。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/windowsphone/develop/jj714086(v=vs.105">ポータブル クラス ライブラリを使用して機能を共有する</a>.aspx)</li>
</ul>


<p>そして、先日、Xamarin.Android と iOS でもポータルクラスライブラリが使える/作れるようになりました。</p>

<ul>
<li><a href="http://blog.xamarin.com/pcl-projects-and-vs2013/">PCL Projects and Visual Studio 2013 Support | Xamarin Blog</a></li>
</ul>


<p>ポータブルクラスライブラリとして作られた DLL は、WPF でも Store App でも Android でも iOS でも使いまわせる、という事です。</p>

<h2>MvvmCross とは</h2>

<p>さて本題。</p>

<p>MvvmCross は、様々なプラットフォームに対応した MVVMフレームワークです。対応プラットフォームをざっと挙げると、</p>

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Android</li>
<li>Windows Phone</li>
<li>Windows Store App</li>
<li>WPF</li>
<li>Mac</li>
</ul>


<p>です。</p>

<p>MvvmCross を使うと、MVVM パターンでいうところの Model, ViewModel を複数のプラットフォームで共通にできます。</p>

<p>図にすると下のような感じです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_01.png" alt="" /></p>

<p>「Model でプラットフォーム固有の機能使いたい場合もあるじゃん？」とかにも対応しているので、これが全てでは無いですが、最初の説明としてはこんなもんです。</p>

<p>ホームページなどはこちら。
Evolve セッションの Slides の 1〜10ページ が分かりやすいですかね。</p>

<ul>
<li><a href="https://github.com/MvvmCross/MvvmCross">MvvmCross/MvvmCross - github</a></li>
<li><a href="http://xamarin.com/evolve/2013#session-dnoeeoarfj">Architecting Cross-Platform Apps with MvvmCross - Evolve 2013 Conference – Xamarin</a></li>
</ul>


<h2>Xamarin.Android Xamarin.iOS で、MvvmCross を使ったアプリを作ってみる</h2>

<p>MvvmCross の現在 Stable なのは「v3」で、その Tutorials が</p>

<ul>
<li><a href="https://github.com/MvvmCross/MvvmCross/wiki/N-plus-1-Videos-Of-MvvmCross">N plus 1 Videos Of MvvmCross · MvvmCross/MvvmCross Wiki</a></li>
</ul>


<p>にあります。これがまたドットインストールも真っ青の充実ぶり。
この動画を順番に見ながら写経すれば使えるようになっちゃいます。</p>

<p>という訳で、最初の１つ「N=0」をトレースしてみましょう。</p>

<h3>動画と違うところ</h3>

<ul>
<li>Win でなく Mac、Visual Studio でなく Xamarin Studio を使います。Win+VS な人は動画をそのままトレースした方がよいでしょう。</li>
<li>Nuget 使いません。Nuget から取得したらエラーになったので、マニュアルでアセンブリ追加します。Nuget で配信されるプロジェクトのスケルトンも使わずスクラッチで実装します。</li>
<li>Windows Store App、Windows Phone は飛ばします。Mac なので。</li>
<li>iOS での UI 作成について。動画ではコードでUI構築してますが、Storyboard を使いました。その影響で、少しコードが動画と変わっています。</li>
</ul>


<p>では、開始〜。</p>

<h3>1. PCL プロジェクトを作る</h3>

<p>Xamarin Studio にて、新しいソリューションと「Portable Library」プロジェクトを作ります。プロジェクト名は “FirstDemo.Core”、ソリューション名は “FirstDemo” とします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_02.png" alt="" /></p>

<h3>2. MvvmCross のバイナリをダウンロードする</h3>

<p><a href="https://github.com/mvvmcross/MvvmCross-Binaries/tree/v3.1">MvvmCross/MvvmCross-Binaries の v3.1 branch</a> をダウンロードなり Clone なりします。</p>

<h3>3. プロジェクトにアセンブリ参照を追加する</h3>

<p>FirstDemo.Core プロジェクトに、先ほどダウンロードした <code>MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Portable</code> の中の以下のファイルを参照追加します。</p>

<ul>
<li>Cirrious.CrossCore.dll</li>
<li>Cirrious.MvvmCross.dll</li>
<li>Cirrious.MvvmCross.Localization.dll</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_03.png" alt="" /></p>

<h3>4. FirstViewModel クラス、App クラスの実装</h3>

<p>Nuget でインストールされるはずのクラスを実装します。</p>

<p>まず、ViewModels というフォルダを作ってその中に <code>FirstViewModel</code> クラスを作ります。</p>

<figure class='code'><figcaption><span>ViewModels/FirstViewModel.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Cirrious.MvvmCross.ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FirstDemo.Core.ViewModels</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">FirstViewModel</span> <span class="p">:</span> <span class="n">MvxViewModel</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="kt">string</span> <span class="n">_firstName</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_firstName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span> <span class="p">{</span> <span class="n">_firstName</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">FullName</span><span class="p">);}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="kt">string</span> <span class="n">_lastName</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_lastName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span> <span class="p">{</span> <span class="n">_lastName</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">FullName</span><span class="p">);}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0} {1}&quot;</span><span class="p">,</span> <span class="n">_firstName</span><span class="p">,</span> <span class="n">_lastName</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に <code>App</code> クラスはルートに。</p>

<figure class='code'><figcaption><span>App.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Cirrious.CrossCore.IoC</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">FirstDemo.Core.ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FirstDemo.Core</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">App</span> <span class="p">:</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">ViewModels</span><span class="p">.</span><span class="n">MvxApplication</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CreatableTypes</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">EndingWith</span><span class="p">(</span><span class="s">&quot;Service&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">AsInterfaces</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">RegisterAsLazySingleton</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">RegisterAppStart</span><span class="p">&lt;</span><span class="n">FirstViewModel</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MyClass.cs</code> は使わないので削除します。</p>

<p>ここまでが<a href="http://www.youtube.com/watch?v=_DHDMNB_IeY#t=281">動画の 4:40</a> くらいです。</p>

<h3>5. Android の UI を作る</h3>

<p>動画では <a href="http://www.youtube.com/watch?v=_DHDMNB_IeY#t=671">11:11</a> から。</p>

<p>ソリューションに Android Application プロジェクトを追加します。名前は “FirstDemo.Droid” とします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_04.png" alt="" /></p>

<h3>6. FirstDemo.Droid にアセンブリ参照を追加する</h3>

<p>まず、FirstDemo.Core をプロジェクト参照で追加します。
次に、MvvmCross 関連のアセンブリ群、以下を追加します。動画では Nuget でやってるところです。</p>

<ul>
<li>Cirrious.CrossCore.dll</li>
<li>Cirrious.CrossCore.Droid.dll *</li>
<li>Cirrious.MvvmCross.dll</li>
<li>Cirrious.MvvmCross.Droid.dll *</li>
<li>Cirrious.MvvmCross.Binding.dll</li>
<li>Cirrious.MvvmCross.Binding.Droid.dll *</li>
<li>Cirrious.MvvmCross.Localization.dll</li>
</ul>


<p>「*」付きのアセンブリは <code>MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Droid/</code> から、付いてないアセンブリは Core と同じく <code>MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Portable/</code> から追加します。後ろに “Droid” と付いているものは、プラットフォーム用のフォルダから持ってきましょうという事ですね。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_05.png" alt="" /></p>

<h3>7. FirstView クラス、Setup クラスの実装</h3>

<p>こちらも Nuget が使えれば〜 のところ。</p>

<p><code>FirstView</code> は、MainView.cs をリファクタでリネーム＆ Views フォルダ移動して内容を下のように書き換えます。</p>

<figure class='code'><figcaption><span>Views/FirstView.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.App</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Content</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Runtime</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Views</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Widget</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.OS</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Cirrious.MvvmCross.Droid.Views</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FirstDemo.Droid.Views</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [Activity(Label = &quot;FirstDemo.Droid&quot;, MainLauncher = true, Icon = &quot;@drawable/icon&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">FirstView</span> <span class="p">:</span> <span class="n">MvxActivity</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>            <span class="n">SetContentView</span><span class="p">(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">Main</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setup.cs はルートに作ります。</p>

<figure class='code'><figcaption><span>Setup.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Cirrious.MvvmCross.Droid.Platform</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Content</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Cirrious.MvvmCross.ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FirstDemo.Droid</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Setup</span> <span class="p">:</span> <span class="n">MvxAndroidSetup</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Setup</span><span class="p">(</span><span class="n">Context</span> <span class="n">appContext</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">appContext</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="n">IMvxApplication</span> <span class="nf">CreateApp</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">Core</span><span class="p">.</span><span class="n">App</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>あ、 <code>SplashScreen</code> は省略します。説明が面倒なので。</p>

<h3>8.  DataBinding の定義ファイルを作る</h3>

<p>これも Nuget の代わりにやるところ。
データバインディングを行うために必要なファイルです。この手順を忘れて、ビルドエラーでしばらくハマってました。</p>

<p><code>Resource/values</code> フォルダ内に以下の xml ファイルを作成します。</p>

<figure class='code'><figcaption><span>Resources/values/MvxBindingAttributes.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;resources&gt;</span>
</span><span class='line'>  <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;MvxBinding&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;MvxBind&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;MvxLang&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/declare-styleable&gt;</span>
</span><span class='line'>  <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;MvxControl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;MvxTemplate&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/declare-styleable&gt;</span>
</span><span class='line'>  <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;MvxListView&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;MvxItemTemplate&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;MvxDropDownItemTemplate&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/declare-styleable&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item</span> <span class="na">type=</span><span class="s">&quot;id&quot;</span> <span class="na">name=</span><span class="s">&quot;MvxBindingTagUnique&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;MvxImageView&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;MvxSource&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/declare-styleable&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>9. 画面を作る</h3>

<p>画面のレイアウトを作ります。
Xamarin Studio の Android用 UI デザイナは強力なので、ここだけは Visual Studio に勝っていると言えます。</p>

<p><code>Main.axml</code> を開いて、レイアウトされているボタンを削除し、「Plain Text」を2つと、Text(Mid) を1つ、縦に並べて配置します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_06.png" alt="" /></p>

<h3>10. データバインディングを記述する</h3>

<p><code>Main.axml</code> の「ソース」を開いて、データバインディングについての記述をします。完成形は下のようになります。</p>

<figure class='code'><figcaption><span>Resources/layout/Main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:local=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;EditText</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">local:MvxBind=</span><span class="s">&quot;Text FirstName&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;EditText</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">local:MvxBind=</span><span class="s">&quot;Text LastName&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Medium Text&quot;</span>
</span><span class='line'>        <span class="na">android:textAppearance=</span><span class="s">&quot;?android:attr/textAppearanceMedium&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">local:MvxBind=</span><span class="s">&quot;Text FullName&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで Android UI の実装は終わり。動画では <a href="http://www.youtube.com/watch?v=_DHDMNB_IeY#t=980">16:20</a> あたり。
Android 側では、初期化を除けば <strong>何も実装してない</strong> のがミソ。</p>

<h3>11. Android アプリを動かしてみる</h3>

<p>エミュレータで実行してみると、こんな感じです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_07.gif" alt="" /></p>

<p>Steve を痛恨のスペルミスしたけど、まあいいや。</p>

<p>では続いて、iOS アプリの実装です。</p>

<h3>12. iOS の UI を作る</h3>

<p>動画では <a href="http://www.youtube.com/watch?v=_DHDMNB_IeY#t=1558">25:58</a> から。</p>

<p>ソリューションに iPhone Application プロジェクトを追加します。Storyboard を使ってみましょう。名前は “FirstDemo.Touch” とします。(iOS 版の接尾辞に ”Touch” を使うのは、Xamarin.iOS の以前の名称である ”MonoTouch” からだと思いますが、大文字で始まる .NET 文化の中では “iOS” はとかく都合が悪いので、Touch という接尾辞は私も気に入っています。)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_08.png" alt="" /></p>

<h3>13. FirstDemo.Touch にアセンブリ参照を追加する</h3>

<p>Android の場合と同様、FirstDemo.Core をプロジェクト参照で追加します。
次に、MvvmCross 関連のアセンブリ群、以下を追加します。</p>

<ul>
<li>Cirrious.CrossCore.dll</li>
<li>Cirrious.CrossCore.Touch.dll *</li>
<li>Cirrious.MvvmCross.dll</li>
<li>Cirrious.MvvmCross.Touch.dll *</li>
<li>Cirrious.MvvmCross.Binding.dll</li>
<li>Cirrious.MvvmCross.Binding.Touch.dll *</li>
<li>Cirrious.MvvmCross.Localization.dll</li>
</ul>


<p>「*」付きのアセンブリは MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Touch/ から、付いてないアセンブリは Core と同じく MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Portable/ から追加します。後ろに “Touch” と付いているものは、プラットフォーム用のフォルダから持ってきましょうという事ですね。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_09.png" alt="" /></p>

<h3>14. Setup クラス, AppDelegate クラス、FirstView クラスの実装</h3>

<p>とここまで書いておいて、MvvmCross は実は Storyboard で使う時は少し細工が必要な事に気づいた。。。</p>

<p>MvvmCross の作者である slodge さんが下で回答されています。</p>

<ul>
<li><a href="http://stackoverflow.com/a/16323115">monotouch - MvvmCross and Xcode Storyboard - Stack Overflow</a></li>
</ul>


<p>という訳でここからのコードは、上記で示されている ‘eh’ もミックスしたもので、動画とは少し異なります。動作は同じです。</p>

<p>まず、Setup.cs をルートに作成して以下のように実装します。</p>

<figure class='code'><figcaption><span>Setup.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">Touch</span><span class="p">.</span><span class="n">Platform</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">Touch</span><span class="p">.</span><span class="n">Views</span><span class="p">.</span><span class="n">Presenters</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">FirstDemo</span><span class="p">.</span><span class="n">Touch</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">class</span> <span class="n">Setup</span> <span class="o">:</span> <span class="n">MvxTouchSetup</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">public</span> <span class="n">Setup</span><span class="p">(</span><span class="n">MvxApplicationDelegate</span> <span class="n">appDelegate</span><span class="p">,</span> <span class="n">IMvxTouchViewPresenter</span> <span class="n">presenter</span><span class="p">)</span>
</span><span class='line'>            <span class="o">:</span> <span class="n">base</span><span class="p">(</span><span class="n">appDelegate</span><span class="p">,</span> <span class="n">presenter</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">protected</span> <span class="n">override</span> <span class="n">IMvxApplication</span> <span class="n">CreateApp</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">new</span> <span class="n">Core</span><span class="p">.</span><span class="n">App</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>既存の AppDelegate.cs を以下のように書き換えます。</p>

<figure class='code'><figcaption><span>AppDelegate.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">using</span> <span class="n">MonoTouch</span><span class="p">.</span><span class="n">Foundation</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">Touch</span><span class="p">.</span><span class="n">Platform</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">MonoTouch</span><span class="p">.</span><span class="n">UIKit</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">Touch</span><span class="p">.</span><span class="n">Views</span><span class="p">.</span><span class="n">Presenters</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">FirstDemo</span><span class="p">.</span><span class="n">Touch</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Register</span><span class="p">(</span><span class="s">&quot;AppDelegate&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">partial</span> <span class="n">class</span> <span class="n">AppDelegate</span> <span class="o">:</span> <span class="n">MvxApplicationDelegate</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">public</span> <span class="n">override</span> <span class="n">UIWindow</span> <span class="n">Window</span> <span class="p">{</span> <span class="n">get</span><span class="p">;</span> <span class="n">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">public</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">FinishedLaunching</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">setup</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Setup</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">new</span> <span class="n">MvxTouchViewPresenter</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">Window</span><span class="p">));</span>
</span><span class='line'>            <span class="n">setup</span><span class="p">.</span><span class="n">Initialize</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>FirstView.cs は、FirstDemo.FirstDemoViewController.cs をリネームして作成します。Views フォルダを作って移動もしましょう。
また、<code>MvxViewConroller</code> から派生させるように変更します。</p>

<p> <img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_10.png" alt="" /></p>

<h3>15. iOS の UI を作る</h3>

<p>iOS 版の画面をレイアウトします。
動画ではコードで <code>UITextField</code> などを配置していますが、 <strong>UI をコードで記述する事は万死に値する</strong> ので、Xamarin Studio の iOS デザイナもしくは Xcode の Interface Builder を使います。</p>

<p>下の図は、Xamarin Studio α版の iOS デザイナ を使った例です。<a href="http://qiita.com/amay077/items/716742474bce343c5729">以前に紹介した</a>ものです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_11.png" alt="" /></p>

<p>TextField 2つと、Label を、<code>textEditFirst</code>, <code>textEditLast</code>, <code>labelFull</code> という変数にしておきます。</p>

<h3>16. データバインディングを記述する</h3>

<p>MvvmCross を iOS で使う場合、残念ながら storyboard 側にバインディングを記述する事はできないので、<code>FirstView.cs</code>  にコードで記述します。</p>

<p><code>ViewDidLoad</code> に以下のように追記します。</p>

<figure class='code'><figcaption><span>Views/FirstView.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">Binding</span><span class="p">.</span><span class="n">BindingContext</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">Touch</span><span class="p">.</span><span class="n">Views</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">Cirrious</span><span class="p">.</span><span class="n">MvvmCross</span><span class="p">.</span><span class="n">ViewModels</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">FirstDemo</span><span class="p">.</span><span class="n">Core</span><span class="p">.</span><span class="n">ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">FirstDemo</span><span class="p">.</span><span class="n">Touch</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">partial</span> <span class="n">class</span> <span class="n">FirstView</span> <span class="o">:</span> <span class="n">MvxViewController</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 省略 */</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">public</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">ViewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">this</span><span class="p">.</span><span class="n">Request</span> <span class="o">=</span> <span class="n">new</span> <span class="n">MvxViewModelRequest</span><span class="o">&lt;</span><span class="n">FirstViewModel</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>                <span class="n">null</span><span class="p">,</span> <span class="n">null</span><span class="p">,</span> <span class="n">new</span> <span class="n">MvxRequestedBy</span><span class="p">());</span>
</span><span class='line'>            <span class="n">base</span><span class="p">.</span><span class="n">ViewDidLoad</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">var</span> <span class="n">set</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">CreateBindingSet</span><span class="o">&lt;</span><span class="n">FirstView</span><span class="p">,</span> <span class="n">FirstViewModel</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>            <span class="n">set</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">textEditFirst</span><span class="p">).</span><span class="n">To</span><span class="p">(</span><span class="n">vm</span> <span class="o">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">FirstName</span><span class="p">);</span>
</span><span class='line'>            <span class="n">set</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">textEditLast</span><span class="p">).</span><span class="n">To</span><span class="p">(</span><span class="n">vm</span> <span class="o">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
</span><span class='line'>            <span class="n">set</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">labelFull</span><span class="p">).</span><span class="n">To</span><span class="p">(</span><span class="n">vm</span> <span class="o">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">FullName</span><span class="p">);</span>
</span><span class='line'>            <span class="n">set</span><span class="p">.</span><span class="n">Apply</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* 省略 */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで iOS 側も実装終了、動画では <a href="http://www.youtube.com/watch?v=_DHDMNB_IeY#t=2020">33:40</a> まで来ました。</p>

<h3>17. iOS アプリを動かしてみる</h3>

<p>動画では、Windows であるため Mac にリモート接続して実行していますが、Mac+Xamarin Studio なら即実行できます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_mvvmcross_2_12.gif" alt="" /></p>

<h2>MvvmCross についてのまとめ</h2>

<p>今日の完成版のコードは</p>

<ul>
<li><a href="https://github.com/amay077/NPlus1DaysOfMvvmCrossWithXamarinStudio/tree/master/N-00-FirstDemo">NPlus1DaysOfMvvmCrossWithXamarinStudio / N-00-FirstDemo - github</a></li>
</ul>


<p>に置いておきました。</p>

<p>ちょっと STEP が多くなっちゃいましたが、MvvmCross を使うと、複数のプラットフォームで ViewModel-Model を共通化できることが分かったと思います。</p>

<p><a href="https://github.com/MvvmCross/MvvmCross/wiki/N-plus-1-Videos-Of-MvvmCross">N+1 Days-</a> は、現在 39(!!) まであります。動画観てるだけでもわかった感じになります。（私は N=8 まで観た気がします。）</p>

<p>また、 @MvvmCross にツイートすると、気さくに（英語ですが）回答してくれます。</p>

<p>使いこなせば強力な武器になる MvvmCross 、今後も要チェックです。</p>

<h2>Xamarin Advent Calendar 2013 まとめ</h2>

<p>勢いに任せて作った XAC2013、なんとか完走できました。
「全部俺」でもいいやと思っていましたが、私含め5名の方に参加して頂けました、ありがとうございました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00H2SBO4E?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00H2SBO4E&amp;linkCode=shr&amp;tag=oku2008-22&amp;=books&amp;qid=1387973043&amp;sr=1-1&amp;keywords=%E6%97%A5%E7%B5%8C%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A2+2014%E5%B9%B42%E6%9C%88%E5%8F%B7">日経ソフトウェア</a> によると、「2014年にブレークする技術」に Xamarin はありませんでしたが、MS と提携以後のプッシュぶりを見ていると、今後、来年のブレークに期待できそうです。</p>

<p>昨日の @atsushieno さんの <a href="http://atsushieno.hatenablog.com/entry/2013/12/24/213950">Xamarin 創立からの苦労話</a> を知ると、安易に「ライセンス高ぇ！値下げPlz！」などとは言えませんが、ユーザ(デベロッパ)を増やしたいのもまた事実。α/β版だけでも 30days のトライアル期限なくしてもらえたいら嬉しいですね。</p>

<p>Xamarin Advent Calendar 2013 はこれで終わりですが、今後もちまちまと Tips みたいなものを書いてくつもりですので、 <a href="http://qiita.com/tags/xamarin">Qiita のタグ</a> をチェックしてもらえると嬉しいです。</p>

<p>そして Xamarin Advent Calendar 2014 でまたお会いしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で Yahoo! iOSマップSDK を使ってみる]]></title>
    <link href="http://amay077.github.io/blog/2013/12/23/using-yahoo-maps-sdk-for-ios-in-xamarin-ios/"/>
    <updated>2013-12-23T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/23/using-yahoo-maps-sdk-for-ios-in-xamarin-ios</id>
    <content type="html"><![CDATA[<p>Xamarin.iOS では、既存の iOS用ライブラリが利用できます。
今日は例として Yahoo Maps SDK for iOS を Xamarin.iOS から使ってみます。</p>

<!--more-->


<h2>Yahoo! iOSマップSDK とは</h2>

<ul>
<li><a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/">YOLP(地図):Yahoo! iOSマップSDK - Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>Yahoo! Japan が提供する地図SDKです。Google Maps にはない魅力として、「雨雲レーダー」「経路探索/案内」「AR機能」が挙げられます。
利用するには上記サイトから APIキー の発行が必要です。</p>

<h2>Xamarin.iOS で Objective-C ライブラリを使う方法</h2>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/">Binding Objective-C | Xamarin</a></li>
</ul>


<p>「Binding」と呼ばれます。
Obj-Cライブラリを呼び出すラッパーのようなものを C# で記述し、それを Xamarin.iOS アプリケーションから使用することが出来ます。</p>

<h2>Xamarin.iOS で Yahoo! iOSマップSDK を使う手順</h2>

<h3>1. Yahoo! iOSマップSDK をダウンロードし、APIキー を発行する</h3>

<p>SDK のダウンロードは、</p>

<ul>
<li><a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/">YOLP(地図):Yahoo! iOSマップSDK - Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>です。APIキー の発行は、</p>

<ul>
<li><a href="https://e.developer.yahoo.co.jp/dashboard/">アプリケーションの管理：Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>です。手順は、</p>

<ul>
<li><a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/tutorial1.html">YOLP(地図):利用準備 - Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>が分かりやすいです。</p>

<h3>2. Xamarin.iOS で Binding プロジェクトを作る</h3>

<p>Xamarin Studio で新しいソリューションを作ります。
iOS → iOS Binding Project で、名前は 「YMapBinding」、ソリューション名は「YMapSample」とします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_01.png" alt="" /></p>

<h3>3. Yahoo! iOSマップSDK のライブラリファイルを Binding プロジェクトに入れる</h3>

<p>ダウンロードした Yahoo! iOSマップSDK を解凍して、中に含まれる <code>YMapKit</code> ファイルを <code>libYMapKit.a</code> にリネームします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_02.png" alt="" /></p>

<p>Xamarin Studio で、YMapBinding プロジェクトに <code>libYMapKit.a</code> を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_03.png" alt="" /></p>

<h3>4. Yahoo! iOSマップSDK の API定義を C# で書く</h3>

<p>Binding プロジェクトにある <code>ApiDefinition.cs</code> を以下のように書き換えます。</p>

<figure class='code'><figcaption><span>ApiDefinition.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.ObjCRuntime</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.Foundation</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.UIKit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">YMapBinding</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [BaseType (typeof (UIView))]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">interface</span> <span class="n">YMKMapView</span> <span class="p">{</span>
</span><span class='line'><span class="na">        [Export (&quot;initWithFrame:appid:&quot;)]</span>
</span><span class='line'>        <span class="n">IntPtr</span> <span class="nf">Constructor</span> <span class="p">(</span><span class="n">RectangleF</span> <span class="n">frame</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appid</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>よく目を凝らすと分かるんですが、これは iOS版ライブラリの <code>initWithFrame:appId:</code> というコンストラクタを C# で定義しています。
他のメソッドやプロパティ、イベント(delegate)も同じように定義するのですが、ここでは省略します。</p>

<p>次に <code>libYMapKit.linkwith.cs</code> を開いて、以下のように書き換えます。</p>

<figure class='code'><figcaption><span>libYMapKit.linkwith.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.ObjCRuntime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">[assembly: LinkWith (&quot;libYMapKit.a&quot;, LinkTarget.ArmV7 | LinkTarget.ArmV7s | LinkTarget.Simulator ,ForceLoad = true, </span>
</span><span class='line'><span class="na">    Frameworks=&quot;UIKit SystemConfiguration CoreGraphics CoreLocation Foundation OpenGLES QuartzCore&quot;)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yahoo! iOSマップSDK が依存するライブラリを Frameworks に列挙しています。</p>

<p>これでひとまず Binding プロジェクト 側は終わりです。</p>

<h4>5. サンプルアプリケーションプロジェクトを作る</h4>

<p>YMapSample ソリューションに 新しいプロジェクト を追加、iPhone の Single view Application 、名称は「YMapApp」とします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_04.png" alt="" /></p>

<p>YMapApp プロジェクトを右クリックして、スタートアッププロジェクトをこちらに変更しておきます。</p>

<p>次に、参照設定で YMapBinding を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_05.png" alt="" /></p>

<h4>6. Yahoo! iOSマップSDK を表示するコードを書く</h4>

<p>YMapApp のビューコントローラ(たぶん YMapAppViewController)の<code>ViewDidLoad</code> に、以下のように追記します。</p>

<figure class='code'><figcaption><span>YMapAppViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">ViewDidLoad</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">base</span><span class="p">.</span><span class="n">ViewDidLoad</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">v</span> <span class="p">=</span> <span class="k">new</span> <span class="n">YMKMapView</span><span class="p">(</span><span class="k">new</span> <span class="n">RectangleF</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">320f</span><span class="p">,</span> <span class="m">320f</span><span class="p">),</span>
</span><span class='line'>        <span class="err">“</span><span class="p">&lt;</span><span class="n">your</span> <span class="n">app</span> <span class="n">key</span><span class="p">&gt;</span><span class="err">”</span><span class="p">);</span>  <span class="c1">// あなたが取得した APIキー</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddSubview</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ああ、 <code>using YMapBinding;</code> も必要ですね。</p>

<p>アプリの方もとりあえずこれで OK。</p>

<h4>7. 動かしてみる</h4>

<p>YMapApp を iOSシミュレータで実行してみます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_06.gif" alt="" /></p>

<p>はい、このように「とりあえず」Yahoo! iOSマップSDK を Xamarin.iOS で動かすことができました。</p>

<h2>この後（やること多いよ）</h2>

<h3>API定義をちまちまと移植</h3>

<p>この例ではコンストラクタ1つしか定義しませんでしたが、これを他のコンストラクタ、メソッド、プロパティ、イベントについて行う必要があります。これを助けるツールとして <a href="http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/objective_sharpie/">Objective Sharpie</a> が公開されていますが、あまり期待しない方が良さそうです。Yahoo! iOSマップSDK をこのツールにかけてみましたが、出来上がった定義ファイルはエラーがたくさん出ました。</p>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/">Binding Objective-C | Xamarin</a></li>
</ul>


<p>を理解した上で、Objective Sharpie の結果を参考にして、作っていく必要がありそうです。</p>

<h3>ApiDefinition.cs への定義は正しいのか？</h3>

<p>「Frameworks に、Yahoo! iOSマップSDK が依存しているライブラリを列挙」してみましたが、<a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/tutorial1.html">チュートリアル</a> には <code>libxml2.2.dylib</code> も含まれています。が、 <code>ApiDefinition.cs</code> にはこれは記述していません。けど動いています。何かの機能を使った時に問題になるかもしれません。そしてこの .dylib という拡張子の場合にどう定義すれば良いのか不明です。</p>

<h3>ライブラリが使用するリソースはどこに？</h3>

<p>ダウンロードした Yahoo! iOSマップSDK には <code>image</code> ディレクトリがあり、これをアプリケーションプロジェクトに配置することで、ライブラリがリソースを使うことになっています。Xamarin.iOS Binding プロジェクトではこれはどこに配置すればよいか、未調査です。</p>

<p>ということで Xamarin.iOS の Binding について紹介しました。
.Android の Binding は jar を放り込めばある程度自動で定義を生成してくれていたのに対し、かなり面倒な感じです。アプリケーションに必要な機能だけを定義して使っていく感じかなあと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub's Xamarin starter apps  について]]></title>
    <link href="http://amay077.github.io/blog/2013/12/22/about-githubs-xamarin-starter-apps/"/>
    <updated>2013-12-22T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/22/about-githubs-xamarin-starter-apps</id>
    <content type="html"><![CDATA[<p>Github社は、割と Xamarin に熱心で、<a href="http://xamarin.com/evolve/2013#session-zm59b5yptf">Xamarin Evolve というイベントでセッション</a>を行ったり、その時の資料が日本の速報系サイトで 「<a href="http://blog.livedoor.jp/itsoku/archives/33671593.html">Ruby を捨てて C# と MVVM に完全移行</a>」なんてヒドい扱い受けちゃったりしてます。</p>

<!--more-->


<p>でその Github 社が Xamarin でアプリ開発するならこれ使うといいよ、的なアプリケーションのひな形？を公開しています。</p>

<ul>
<li><a href="http://log.paulbetts.org/open-source-githubs-xamarin-starter-apps/">GitHub&#8217;s Xamarin starter apps</a></li>
</ul>


<p>Github社は、自前の MVVM フレームワーク「ReactiveUI」、非同期KVS の 「Akavache」を作ってますので、それを利用したものになっています。</p>

<ul>
<li><a href="http://www.reactiveui.net/">ReactiveUI</a></li>
<li><a href="https://github.com/akavache/Akavache">Akavache</a></li>
</ul>


<p>Starter Apps を Xamarin Studio で開くとこんな感じです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_startup_apps_by_github_01.png" alt="" /></p>

<p>アプリケーション自体は MVVM で作られていて、前述の RectiveUI によって、View 以外は極力プラットフォームに依存しないように作ることができます。</p>

<p>Starter-Core-Android と Starter-Core-iOS が、「View以外」の部分に相当します。(ここ PCL化 できれば１プロジェクトで済みそうですが)</p>

<p>Starter-Android と Starter-iOS は、各プラットフォームの View に相当します。</p>

<p>かくいう私もまだソースをじっくり読んでないのですが、クロスプラットフォームで開発する時の教材になるかなーと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で UIWebView から C# のコードを呼び出す方法]]></title>
    <link href="http://amay077.github.io/blog/2013/12/20/calling-cs-code-from-uiwebview/"/>
    <updated>2013-12-20T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/20/calling-cs-code-from-uiwebview</id>
    <content type="html"><![CDATA[<p>まあ、</p>

<ul>
<li><a href="http://i26.jp/html5dev/webview-%e3%81%a7-javascript-%e3%81%a8-objective-c-%e3%81%ae%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92%e7%9b%b8%e4%ba%92%e3%81%ab%e5%91%bc%e3%81%b3%e5%87%ba%e3%81%99%e6%96%b9%e6%b3%95/">WebView で Javascript と Objective-C のコードを相互に呼び出す方法 | 【スマホ×HTML5】Web&amp;ハイブリッドアプリ開発者ブログ</a></li>
</ul>


<p>を Xamarin.iOS でやってみたという話なだけです。</p>

<!--more-->


<h2>サンプル</h2>

<figure class='code'><figcaption><span>MainViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cm">/* in MainViewController.designer.cs</span>
</span><span class='line'><span class="cm">[Outlet]</span>
</span><span class='line'><span class="cm">[GeneratedCodeAttribute (&quot;iOS Designer&quot;, &quot;1.0&quot;)]</span>
</span><span class='line'><span class="cm">MonoTouch.UIKit.UIWebView MyWebView { get; set; }</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">ViewDidLoad</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">base</span><span class="p">.</span><span class="n">ViewDidLoad</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MyWebView</span><span class="p">.</span><span class="n">LoadRequest</span><span class="p">(</span><span class="n">NSUrlRequest</span><span class="p">.</span><span class="n">FromUrl</span><span class="p">(</span><span class="n">NSUrl</span><span class="p">.</span><span class="n">FromString</span><span class="p">(</span><span class="s">&quot;http://www.hatena.ne.jp/&quot;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// LoadFinished はイベント</span>
</span><span class='line'>    <span class="n">MyWebView</span><span class="p">.</span><span class="n">LoadFinished</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">MyWebView</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Url</span><span class="p">.</span><span class="n">Host</span><span class="p">,</span> <span class="s">&quot;b.hatena.ne.jp&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">UIAlertView</span><span class="p">(</span><span class="s">&quot;Load Finished&quot;</span><span class="p">,</span> <span class="s">&quot;ページが表示されました&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="s">&quot;Close&quot;</span><span class="p">).</span><span class="n">Show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ShouldStartLoad は Delegate</span>
</span><span class='line'>    <span class="n">MyWebView</span><span class="p">.</span><span class="n">ShouldStartLoad</span> <span class="p">=</span> <span class="p">(</span><span class="n">webView</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">navType</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">permited</span> <span class="p">=</span> <span class="p">!</span><span class="n">String</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">Url</span><span class="p">.</span><span class="n">Host</span><span class="p">,</span> <span class="s">&quot;hatenablog.com&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">permited</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">UIAlertView</span><span class="p">(</span><span class="s">&quot;ShouldStartLoad&quot;</span><span class="p">,</span> <span class="err">“はてなブログは見ちゃダメ！</span><span class="s">&quot;, null, &quot;</span><span class="n">Close</span><span class="s">&quot;).Show();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">permited</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>画面に UIWebView を一つ貼り付けて、 www.hatena.ne.jp を表示してます。</p>

<p>はてなブックマーク(b.hatena.ne.jp) へ移動すると、ページ読み込み後に「ページが表示されました」とポップアップします。
はてなブログ(hatenablog.com) へ移動しようとすると、「はてなブログは見ちゃダメ！」とポップアップし、移動はキャンセルされます。</p>

<p>Objective-C の、<code>webViewDidFinishLoad</code> , <code>shouldStartLoadWithRequest</code> デリゲートが、Xamarin.iOS では、 <code>LoadFinished</code> , <code>ShouldStartLoad</code> に対応します。</p>

<p>注意点は、<code>LoadFinished</code> はイベントであるのに、 <code>ShouldStartLoad</code> は delegate であるという事です。</p>

<p>Obj-C のデリゲートは、Xamarin.iOS では全てイベントになっているのかなーと思っていましたが、 <code>ShouldStartLoad</code> のように「値を返す」必要があるものについては delegate になっているようです。</p>

<p>Xamarin.iOS の APIデザインについては、公式サイトに説明があります。</p>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/api_design/">API Design | Xamarin</a></li>
</ul>


<p>ガッツリ熟読した方がよさそうですねえ。</p>

<p>最後に、作ったサンプルを動かしてみます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/calling_csharp_from_webview_01.gif" alt="" /></p>

<p>なんか <code>LoadFinished</code> が２回呼ばれてる。重複チェックしなきゃダメですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin で Windows Azure モバイルサービスを使う(その3:プッシュ通知編)]]></title>
    <link href="http://amay077.github.io/blog/2013/12/19/using-azure-mobile-services-in-xamarin-3/"/>
    <updated>2013-12-19T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/19/using-azure-mobile-services-in-xamarin-3</id>
    <content type="html"><![CDATA[<p>たぶん最終回です。<a href="http://qiita.com/amay077/items/ea510071bee85569dc18">前回</a> は、OAuth認証を実装しました。
今回は、前回のサンプルの続きとして、Xamarin.iOS + Azure Mobile Service によるプッシュ通知を実装してみます。</p>

<!--more-->


<p>プッシュ通知を組み込むためのチュートリアルはこちら</p>

<ul>
<li><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp">Get started with push notifications (Xamarin iOS) | Mobile Dev Center</a></li>
</ul>


<p>では、早速いってみましょう。</p>

<h2>プッシュ通知用の証明書ファイルを作成する</h2>

<blockquote><ol>
<li>Generate the Certificate Signing Request file</li>
<li>Register your app and enable push notifications</li>
<li>Create a provisioning profile for the app</li>
</ol>
</blockquote>

<p>についてです。</p>

<p>iOS でプッシュ通知を行うには Apple Push Notification Service(APNS) を使用しますので、その準備から始まります。
「もう知ってるよ」という人は 「4. Configure Mobile Services」から読んでも良いかと思います。</p>

<p>初めて行う人は、こちら↓の説明の方が日本語で分かりやすいかと思います。</p>

<ul>
<li><a href="http://blog.katty.in/4040">iPhoneのプッシュ通知(APNS)の証明書の作り方 | 三度の飯とエレクトロン</a></li>
</ul>


<p>この手順で最後に必要なのは「p12ファイル」です。パスワードはかかっていても問題ありません。</p>

<h2>Azure モバイルサービスにプッシュの設定をする</h2>

<blockquote><p>4 Configure Mobile Services</p></blockquote>

<p>についてです。</p>

<p>まず、Azure マネージメントポータル (https://manage.windowsazure.com/) から、モバイルサービス → 項目 → を選んで、上部にある「プッシュ」を選択します。
次に「apple プッシュ通知の設定」の証明書に、先に手順で入手した 「.p12ファイル」をアップロードします。パスワードはその時決めたものを入力します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_02.png" alt="" /></p>

<h2>アプリケーションにプッシュ通知を実装する</h2>

<blockquote><p>5 Add push notifications to your app</p></blockquote>

<p>について。ここ、ハマりどころ多いです。</p>

<p>Xamarin Studio で、前回のサンプルを開いてコードを追加していきます。</p>

<p><code>AppDelegate.cs</code> に、端末を識別するためのIDを保持するプロパティを作ります。</p>

<figure class='code'><figcaption><span>AppDelegate.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">DeviceToken</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ToDoItem.cs</code> にも同じく DeviceToken を追加します。
が、説明にある <code>[DataMember…</code> は間違いです。正しくは <code>[JsonProperty…</code> です。</p>

<figure class='code'><figcaption><span>ToDoItem.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="err">×</span><span class="p">[</span><span class="n">DataMember</span><span class="p">(</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;deviceToken&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="na">[JsonProperty(PropertyName = &quot;deviceToken&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">DeviceToken</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再び <code>AppDelegate.cs</code> に戻って、アプリが起動完了した時に、APNS サーバにアプリを登録するコードを追加します。</p>

<figure class='code'><figcaption><span>AppDelegate.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">FinishedLaunching</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="n">launchOptions</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIRemoteNotificationType</span> <span class="n">notificationTypes</span> <span class="p">=</span> <span class="n">UIRemoteNotificationType</span><span class="p">.</span><span class="n">Alert</span> <span class="p">|</span>
</span><span class='line'>        <span class="n">UIRemoteNotificationType</span><span class="p">.</span><span class="n">Badge</span> <span class="p">|</span> <span class="n">UIRemoteNotificationType</span><span class="p">.</span><span class="n">Sound</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIApplication</span><span class="p">.</span><span class="n">SharedApplication</span><span class="p">.</span><span class="n">RegisterForRemoteNotificationTypes</span><span class="p">(</span><span class="n">notificationTypes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に同じく  <code>AppDelegate.cs</code> に、アプリ登録完了時にデバイストークンを受け取るコールバックを実装します。</p>

<p><strong>ここが2つ目のハマりポイントです。</strong>
<code>deviceToken.Description</code> を使用していますが、これは iOSネイティブと異なり <strong>空白入りの文字列を返す</strong> ようです。そのためそのまま DeviceToken として利用すると、通知が来ません。エラーにもならないので原因究明に数時間要しました…。<code>Replace</code> で空白も取り除きます。</p>

<figure class='code'><figcaption><span>AppDelegate.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">RegisteredForRemoteNotifications</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">,</span> <span class="n">NSData</span> <span class="n">deviceToken</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">trimmedDeviceToken</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&lt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Replcae</span><span class="p">(</span><span class="err">“</span> <span class="err">“</span><span class="p">,</span> <span class="err">“”</span><span class="p">);</span> <span class="c1">// ←追加</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">DeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、<code>AppDelegate.cs</code> に、プッシュ通知受信時のコードを書きます。</p>

<figure class='code'><figcaption><span>AppDelegate.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">ReceivedRemoteNotification</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="n">userInfo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">userInfo</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>    <span class="n">NSObject</span> <span class="n">inAppMessage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">success</span> <span class="p">=</span> <span class="n">userInfo</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="k">new</span> <span class="n">NSString</span><span class="p">(</span><span class="s">&quot;inAppMessage&quot;</span><span class="p">),</span> <span class="k">out</span> <span class="n">inAppMessage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UIAlertView</span><span class="p">(</span><span class="s">&quot;Got push notification&quot;</span><span class="p">,</span> <span class="n">inAppMessage</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">null</span><span class="p">,</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="n">alert</span><span class="p">.</span><span class="n">Show</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に <code>QSTodoListViewController.cs</code> の <code>OnAdd</code> を次のように変更して、追加するデータに DeviceToken を含めるようにします。この値を使って、Azure 側でプッシュ通知を送ります。</p>

<figure class='code'><figcaption><span>QSTodoListViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">deviceToken</span> <span class="p">=</span> <span class="p">((</span><span class="n">AppDelegate</span><span class="p">)</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">SharedApplication</span><span class="p">.</span><span class="n">Delegate</span><span class="p">).</span><span class="n">DeviceToken</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">newItem</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToDoItem</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span> <span class="p">=</span> <span class="n">itemText</span><span class="p">.</span><span class="n">Text</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Complete</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DeviceToken</span> <span class="p">=</span> <span class="n">deviceToken</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>コードの記述はこれで終わりですが、Xamarin Studio から、iOS アプリを実機で動かしたことがない人は、iOS Developer Account の設定をしておきましょう。</p>

<p>システムメニュー → Preferences、Environment → Developer Accounts から追加しておきます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_03.png" alt="" /></p>

<h2>マネージメントポータルで、データの追加時のスクリプトを登録する</h2>

<blockquote><p>6 Update the registered insert script in the Management Portal</p></blockquote>

<p>についてです。</p>

<p>まず、マネージメントポータル https://manage.windowsazure.com/ を開き、モバイルサービス → サービス名 → データ → テーブル名 と選択します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_04.png" alt="" /></p>

<p>次に、スクリプト を選択し、ドロップダウンから「挿入」を選択します。テーブルにデータが追加された時に実行するスクリプトが表示されます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_05.png" alt="" /></p>

<p>スクリプトを以下に置き換えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">insert</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">.</span><span class="nx">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Set timeout to delay the notification, to provide time for the </span>
</span><span class='line'>    <span class="c1">// app to be closed on the device to demonstrate toast notifications</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">push</span><span class="p">.</span><span class="nx">apns</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">deviceToken</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="o">:</span> <span class="s2">&quot;Toast: &quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">payload</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">inAppMessage</span><span class="o">:</span> <span class="s2">&quot;Hey, a new item arrived: &#39;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">text</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">2500</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、データの追加から 2.5秒後に、APNS にプッシュ通知のリクエストを投げます。</p>

<h2>動かす</h2>

<blockquote><p>7 Test push notifications in your app</p></blockquote>

<p>やっと試せます。</p>

<p>Xamarin Studio から、実機で実行します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_06.png" alt="" /></p>

<p>アプリ起動直後、通知の受信を許可するかどうかを尋ねられますので「Yes」で。(一度答えると二度と出ないのでしょうか？なのでチュートリアルの画像で。)</p>

<p><img src="http://www.windowsazure.com/media/devcenter/mobile/mobile-quickstart-push1-ios.png" alt="" /></p>

<p>Twitter 認証後、適当に項目を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_07.png" alt="" /></p>

<p>しばらく待っていると…</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_08.png" alt="" /></p>

<p>無事、プッシュ通知を受信できましたー。
(実はここに辿り着くまで数十回試しているので最初に通知を受け取った時の感激と言ったら…)</p>

<p>まあ、たぶんどっかでハマるだろうなーと思いながら、やっぱりハマった！という感じでしたので、皆さんも最初はどこかでハマるんじゃないかと。</p>

<p>ハマりどころは文中にも書きましたが、下にもトラブルシューティングとして書きました。何かのお役に立てば。</p>

<h2>トラブルシューティング</h2>

<h3>iOS Dev Center で Bundle ID 入力したらエラーになった</h3>

<p>プロジェクト名に アンダースコア が含まれてるとダメです。
Xamarin Studio のプロジェクト プロパティ → iOS Application で直しましょう。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_09.png" alt="" /></p>

<h3>アプリが起動直後(認証を通過した後)に落ちるようになった</h3>

<p><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp">チュートリアル</a>にある、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DataMember(Name = &quot;deviceToken&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">DeviceToken</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>は間違いです。下記が正しいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[JsonProperty(PropertyName = &quot;deviceToken&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">DeviceToken</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クライアントで「追加」しても、プッシュ通知が来ません</h3>

<p>まずは、Azure マネージメントポータルで「ログ」を見てみましょう。
下記からアクセスできます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_01.png" alt="" /></p>

<p>データ挿入時のスクリプトでエラーが出ていれば、ここに出力されるはずです。スクリプト内で <code>console.log</code> した内容もここに出力されます。</p>

<h3>それでもまだ、プッシュ通知が来ません</h3>

<p><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp">チュートリアル</a>にある、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">RegisteredForRemoteNotifications</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">,</span> <span class="n">NSData</span> <span class="n">deviceToken</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">trimmedDeviceToken</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&lt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">DeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>は、コードが足りません。これでは <code>trimmedDeviceToken</code> の文字列内に空白が含まれてしまい、正しい DeviceToken にならないようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">RegisteredForRemoteNotifications</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">,</span> <span class="n">NSData</span> <span class="n">deviceToken</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">trimmedDeviceToken</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&lt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">trimmedDeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">.</span><span class="n">Replcae</span><span class="p">(</span><span class="err">“</span> <span class="err">“</span><span class="p">,</span> <span class="err">“”</span><span class="p">);</span> <span class="c1">// ←追加</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">DeviceToken</span> <span class="p">=</span> <span class="n">trimmedDeviceToken</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と、空白を除去する必要があります。</p>

<h3>しかしそれでもまだ、プッシュ通知が来ません</h3>

<p>最初の手順、キーチェーンアクセスで CSR を作る時、「ユーザーのメールアドレス」「通称」を iOS Developer Center に登録しているものと同じにする必要があるみたいです。これが間違っていると、.p12 ファイルを書き出す時に選択すべき「Apple Development IOS Push Services: net.azure-mobile.amay077-baas-test」という鍵が見つからない(文字化けしてる)はずです。</p>

<p>また、iOS Developer Center に .p12 ファイルを再登録するとプロビジョニングファイルを再作成→端末に更新する必要があります。</p>

<p>これらを忘れると通知が来ません。そしてエラーにもならないので厄介です。</p>

<h2>雑感</h2>

<p>しかし <a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp#add-push">Azure のチュートリアル</a>、これ一度も試してないんじゃないの？</p>

<p>クラス名の接頭辞や大文字小文字の間違いはまだかわいいものだけど、ここミスると致命的という点が２つも。一度辿れば気づくと思うんだけどなあ。
最後にある completed example project ではちゃっかり正しいコードだったりするので、コンテンツの修正漏れなんだろうか。。。</p>

<p>それはともかく、何かトラブルがあると Xamarin のようなネイティブに皮を被せてるプラットフォームは途端に不安になります。どこに原因があるのか追求しづらいから。</p>

<p>今回も、コードの修正後、いきなりアプリが落ちるようになって、まずα版を使っていたのでそれを疑って stable に戻して、次に実機が悪いのかとシミュレータで動かしてみたり、いろいろ試行錯誤してやっとチュートリアルの誤記だと分かったり。まだノウハウが無いといえばそれまで、α版が自己責任なのはその通りですが、イレギュラー時のリスクはあるなあと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[家族ロボット教室に参加してきました]]></title>
    <link href="http://amay077.github.io/blog/2013/12/18/report-of-oyako-robot-kyoshitsu/"/>
    <updated>2013-12-18T20:23:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/18/report-of-oyako-robot-kyoshitsu</id>
    <content type="html"><![CDATA[<p><a href="http://jp.fujitsu.com/group/fct/contribution/familyrobot-1/2013/1214.html">第一回 家族ロボット教室 in ここにこ</a> に参加してきました。</p>

<!--more-->


<p>少し前に ここにこ へ行ったときに掲示してあったのを見かけて、小３の子供に「これ、行きたい？」と聞いたら「行く行く！」と乗り気だったので、その熱が冷めない内に申し込みました。</p>

<h2>どんなことをするの？</h2>

<p><a href="http://education.lego.com/ja-jp/preschool-and-school/secondary/mindstorms-education-ev3/">レゴ マインドストーム EV3</a> という教材を使います。</p>

<p>ググると２足歩行ロボットみたいなのが出てきますが、使ったのはもう少し簡素なロボットというよりは車のようなタイプのものでした。</p>

<p>前半はロボットの組み立て、後半はパソコンでプログラミングをします。</p>

<h3>ロボットを組み立てる</h3>

<p>ロボットの組み立ては、設計図通りにパーツを組み立てていくものです。パーツは大きめなので小３の子でも問題なく組み立てられました。一部難しいところは事前にスタッフの方が組み立ててくれていました。</p>

<p>こちらは組立中の様子、さっそく熱中しています。</p>

<p><img src="http://distilleryimage9.ak.instagram.com/fdf49ff4647a11e3a076122b2a59491d_8.jpg" alt="" /></p>

<p>そしてロボット完成。</p>

<p><img src="http://distilleryimage11.ak.instagram.com/6fe17c9a647b11e3aa520e5d6fd881bf_8.jpg" alt="" /></p>

<p>ロボットには、タイヤと、左右独立したモーター、フロント上部にタッチセンサー、フロント下部に光センサーが付いています。中央にあるのが心臓部です。</p>

<h3>プログラミングしてロボットを動かす</h3>

<p>さて次にいよいよプログラミングです。
ノートパソコンは１人１台用意してあり、プログラミングに使うソフトウェアも起動済みです。</p>

<p><img src="http://distilleryimage2.ak.instagram.com/3eac6e78647b11e3aeb912af24c9b212_8.jpg" alt="" /></p>

<p>富士通主催ですから当然PCも富士通の、OS は XP ですね。。。</p>

<p>プログラミングと言っても Java とか C とか「記述する」ものではなく、命令がブロックになっていて、それを繋いでいきます。</p>

<p>ブロックには、</p>

<ul>
<li>モーターを動かす</li>
<li>ステアリング</li>
<li>タッチセンサーを使う</li>
<li>光センサーを使う</li>
<li>ループ（繰り返す）</li>
</ul>


<p>などがあり、「モーターを動かす」には、左右どちらか・回転数・速さ、ステアリングには回転角度などのパラメータがあります。</p>

<p>USBケーブルでパソコンとロボットを接続し、プログラムを転送して、ロボットの方で「スタート」するとプログラムが実行される仕組みです。</p>

<p>プログラミングのパートでは、講師のスタッフの方から度々「お題」が出され、受講生が自分で考えてプログラミングをしていきます。</p>

<p>お題は、「まっすぐ走って少し曲がる」という簡単なものから、「ジグザグ走行する」「黒い線まで進んでバックする」など難易度が上がっていきます。</p>

<p>ウチの子も自分で組み立てた命令通りにロボットが動くのが楽しかったらしく、とても熱中していました。たまに躓いたりしましたが、サポートしてくれるスタッフの方や私のヒントを得て、自分で考えてプログラミングしていました。</p>

<p>最終課題は、「カベにぶつかったら反転して黒い線に沿ってゴールまで走る」というお題でタイムレースです。</p>

<p>プログラムを作って転送して走らせ、うまく行かなかったらプログラムを見なおして修正、また転送して走らせる。何度も繰り返してやっと期待した動きをするようになりました。</p>

<p><img src="http://distilleryimage1.ak.instagram.com/98679bf4647b11e3904b12c0ac24ae25_8.jpg" alt="" /></p>

<p>そしてタイムトライアルの結果は、２位！
本人も大変満足気でした。</p>

<p>最後は全員で記念撮影して終わり。
すこし予定時間をオーバーしていましたが、誰も帰りたそうなそぶりを見せない程、みんな熱中していました。</p>

<h2>親としての感想</h2>

<p>私もプログラムが大好きで、仕事でも趣味でもしているくらいなので、子供に何とかこの楽しさを伝えたい、と常々思っていた所に、このような機会があって参加してみてとても良かったです。</p>

<p>途中で飽きたりしないか心配でしたが、始まってみるとそんな心配は杞憂で、最後まで熱中して参加していました。
これで子供が「ものづくりの楽しさ」を少しでも感じてもらえたらいいなあ、と思います。</p>

<p>このブログのタイトル「Experiments Never Fail」は、「試すということに失敗などない（＝失敗を恐れるな）」という意味ですが、これは自分の座右の銘であり子供に伝えたいことでもあります。
今回の教室を通じて、それを感じてもらえたかなあ、と思います。</p>

<h2>レゴ マインドストーム についての感想</h2>

<p>教育用とうたっている通り、大変良いプロダクトだと思いました。</p>

<p>パーツを組み立ててモノを作るハードウェアの側面と、プログラミングをして動かすというソフトウェアの側面が両立しています。</p>

<p>特にプログラミングの方。</p>

<p>応用的な動きをさせるにはまず「ループ」を配置するんですね。次にそのループの離脱条件を組み込みます（例：タッチセンサーにモノが触れたら）。
これってまさに一般的なプログラミングでいう「メインループ」だよなあ、と。
そのループの中で、ロボットに命令を実行させたり、逆にロボットからの通知で条件分岐したり。</p>

<p>プログラミングの基本は十分にまなべる教材だと思いました。</p>

<p>自宅に帰ってからさっそく「今日使ったロボット欲しい」と言われ、値段を調べたらギョッ！としましたが（<sup>_<sup>;）</sup></sup>
もうちょっと手頃な価格帯で、代替品を探したいと思います。</p>

<h2>家族ロボット教室 について</h2>

<p>家族ロボット教室は、富士通コンピュータテクノロジーが震災復興事業として、これまでは当方地方で20回程も開催されて来たものだそうです。</p>

<ul>
<li><a href="http://jp.fujitsu.com/group/fct/contribution/familyrobot/">震災復興支援 家族ロボット教室 : 富士通コンピュータテクノロジーズ</a></li>
</ul>


<p>今回、たまたま支店が豊橋にあったとの事で東北以外で初開催だったそうです。偶然とはいえありがたいことです。</p>

<p>スタッフの方も地元社員の方が中心だったようですが、特に不慣れな様子もなく、子供を常にサポートしてくれました。どうもありがとうございました。</p>

<p>全国に広げられるのかは分かりませんが、小学生(３年以上)のお子さんがおられる方にはおすすめです。近くで開催されたら参加されると良いと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin で Windows Azure モバイルサービスを使う(その2:認証編)]]></title>
    <link href="http://amay077.github.io/blog/2013/12/18/using-azure-mobile-services-in-xamarin-2/"/>
    <updated>2013-12-18T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/18/using-azure-mobile-services-in-xamarin-2</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/40bd5918284fd40d0edc">前回</a> は、Microsoft の BaaS である Azureモバイルサービスをとりあえず使ってみる所まで紹介しました。</p>

<p>今回は、OAuth による認証、Twitter や Facebook でログインする機能について触れてみます。</p>

<!--more-->


<p>前回用意したサンプルの続きとして進めます。</p>

<p>認証を組み込むためのチュートリアルはこちら</p>

<ul>
<li><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-xamarin-ios/">Get started with authentication (Xamarin iOS) | Mobile Dev Center</a></li>
</ul>


<p>英語版だからと謝罪してくれるのは Microsoft だけですね。</p>

<h2>1. モバイルサービスに認証を設定する</h2>

<blockquote><p>Register your app for authentication and configure Mobile Services</p></blockquote>

<p>のところです。</p>

<p>まずは https://manage.windowsazure.com にアクセスし、モバイル サービス から、前回作った名前をクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_01.png" alt="" /></p>

<p>次に上部メニューからダッシュボードを選択します。表示されるページの左下の方にある「モバイルサービスURL」の値をコピーしておきます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_02.png" alt="" /></p>

<p>次に、どのサービスの認証を利用するかを決めます（Microsoft, Facebook, Twitter, Google）。この説明では Twitter を使うことにします。</p>

<p>Twitter での操作方法は下を開きます。</p>

<ul>
<li><a href="http://www.windowsazure.com/ja-jp/develop/mobile/how-to-guides/register-for-twitter-authentication/">モバイル サービスでの Twitter ログイン用のアプリケーションの登録</a></li>
</ul>


<p>説明が充実してるので上記に従ってください。要は「コンシューマ キー」と「コンシューマー シークレット」が得られれば OK です。</p>

<p>ではマネージメントポータルの説明に戻ります。</p>

<blockquote><ol>
<li>Back in the Management Portal</li>
</ol>
</blockquote>

<p>です。</p>

<p>上部メニューの ID をクリック、その後、「twitter 設定」に先ほど取得した コンシューマ キー とコンシューマ シークレット を貼り付けて、一番下にある「保存」をクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_03.png" alt="" /></p>

<p>続いて、テーブルに権限を与えます</p>

<blockquote><p>Restrict permissions to authenticated users</p></blockquote>

<p>のところ。</p>

<p>まず上部メニューの データ → TodoItem をクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_04.png" alt="" /></p>

<p>次に、アクセス許可 をクリックし、全ての項目で「認証されたユーザーのみ」を選択します。その後「保存」します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_05.png" alt="" /></p>

<p>マネージメントポータル側の設定は以上です。
Twitter での認証設定を追加し、またテーブルには、認証されたユーザーでしかアクセスできない権限を設定しました。</p>

<p>結果、前回動かしたサンプルプログラムはこの設定を行う事で動作しなくなります。(401エラー)</p>

<p>次に Xamarin Studio でコードを変更していきます。</p>

<h2>2. アプリケーションに認証を追加する</h2>

<blockquote><p>Add authentication to the app</p></blockquote>

<p>のところです。</p>

<ol>
<li>〜 7. まであります。流れは説明通りですが、クラス名や大文字小文字が微妙に違うので注意が必要です。(<code>TodoService</code> は <code>QSTodoService</code> と読み替える必要があるなど)</li>
</ol>


<p>これらを修正したソース２つ <code>QSTodoService.cs</code> と <code>QSTodoListViewController.cs</code> を gist に貼り付けました。</p>

<ul>
<li><a href="https://gist.github.com/amay077/7960424">gist - QSTodoListViewController.cs and QSTodoService.cs</a></li>
</ul>


<p>修正前との差分が見たい方は <a href="https://gist.github.com/amay077/7960424/revisions">Revisions</a> で見られます。</p>

<p>あ、今回は Twitter なので、
<code>MobileServiceAuthenticationProvider.MicrosoftAccount</code> を忘れずに
<code>MobileServiceAuthenticationProvider.Twitter</code> に置き換えてくださいね。</p>

<p>これでコードの修正は終わりです。</p>

<ol>
<li>動かしてみる</li>
</ol>


<p>さて、iOS シミュレータ で動かしてみましょう。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_06.gif" alt="" /></p>

<p>こんな感じで、Twitter による認証機能をアプリに組み込むことができました。</p>

<p>今日は以上です。次回は Push 通知を行ってみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSS4G 開発者の為の、図形演算ライブラリガイド]]></title>
    <link href="http://amay077.github.io/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev/"/>
    <updated>2013-12-16T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev</id>
    <content type="html"><![CDATA[<p>これは <a href="http://atnd.org/events/45511">FOSS4G Advent Calendar 2013</a> と、<a href="http://qiita.com/advent-calendar/2013/xamarin">Xamarin Advent Calendar 2013</a>  のクロスポストになります。</p>

<p>地図に関するシステムを作っていますと、必ず必要になるのが図形と図形の演算です。(結合 とか、分割とか、そういうの）</p>

<!--more-->


<p>私にとっては自分で実装するのは、とても大変な部類なのですが、今日では、いろいろなオープンソースライブラリが存在していて、それを使わせて頂いています。</p>

<p>今日は、それらの紹介をします。</p>

<h2>図形演算ライブラリ達</h2>

<h3>JTS Topology Suite (JTS)</h3>

<ul>
<li>http://sourceforge.net/projects/jts-topo-suite/</li>
<li>言語：Java</li>
<li>ライセンス：LGPL</li>
</ul>


<p>これがなければ死んでいた案件多し。いろいろな言語に移植され、事実上標準のライブラリ。LGPL ということだけが要注意であり少し残念。</p>

<h3>GEOS</h3>

<ul>
<li>http://trac.osgeo.org/geos/</li>
<li>言語：C++</li>
<li>ライセンス：LGPL</li>
</ul>


<p>JTS を C++ に移植したライブラリ。なので機能、ライセンスともに JTS とほとんど一緒。osgeo のツールをビルドする時に出てくること多い。</p>

<h3>Net Topology Suite (NTS)</h3>

<ul>
<li>https://code.google.com/p/nettopologysuite/</li>
<li>言語：C#</li>
<li>ライセンス：LGPL</li>
</ul>


<p>JTS を .NET に移植したライブラリ。最初見た頃は、Not Implemented  な機能が多かったけど、だいぶ揃ってきたのかな。</p>

<h3>Esri Geometry API for Java</h3>

<ul>
<li>https://github.com/Esri/geometry-api-java</li>
<li>言語：Java</li>
<li>ライセンス：Apache 2.0</li>
</ul>


<p>この間の FOSS4GJ 2013 Tokyo で教えてもらった、Yet Another 図形演算ライブラリ。GIS の世界シェアトップである ESRI社がオープンソースで公開しています。だから品質は折り紙つき（のハズだ）。Apache ライセンスなのも嬉しい。</p>

<h3>Clipper</h3>

<ul>
<li>http://www.angusj.com/delphi/clipper.php</li>
<li>言語：Delphi、C++、C#、Python、Perl、Ruby、Haskell</li>
<li>ライセンス：Boost Software License</li>
</ul>


<p>名前の通り Clip(つまり AND(Intersection)演算)と Offset(Buffer の片側だけ)に特化したライブラリ。</p>

<h3>Boost:Geometry</h3>

<ul>
<li>http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html</li>
<li>言語：C++</li>
<li>ライセンス：Boost Software License</li>
</ul>


<p>そういえば、C++ の拡張ライブラリである Boost にも Geometry が入ったのでしたね。Screenshot がなかなか圧巻です。</p>

<h3>DotSpatial</h3>

<ul>
<li>http://dotspatial.codeplex.com/</li>
<li>言語：C#</li>
<li>ライセンス：LGPL</li>
</ul>


<p>ライブラリというよりはアプリケーションなのかな？ソースコードの中に <code>DotSpatial.Topology</code> などが見えます。</p>

<h3>JSTS Topology Suite</h3>

<ul>
<li>https://github.com/bjornharrtell/jsts</li>
<li>言語：JavaScript</li>
<li>ライセンス：LGPL</li>
</ul>


<p>探してみたらやっぱりあった JTS の JavaScript への移植版。ライセンスは(ry</p>

<h3>GeoScript</h3>

<ul>
<li>http://geoscript.org/</li>
<li>言語：JavaScript</li>
<li>ライセンス：MIT</li>
</ul>


<p>JavaScript製のライブラリ。最近は D3.js による視覚表現が流行ってきたので、内部ではこのようなライブラリが使われているのでしょうか。</p>

<h2>試しに使ってみよう</h2>

<p>Xamarin Advent Calendar と絡めるために無理やり Xamarin Studio で、という事は必然的に Net Topology Suite を使ってみます。</p>

<p>Xamarin Studio は、Android/iOS アプリを作るためだけじゃなくて、コンソールアプリとかも作ることができますよ、と言いたいだけです。</p>

<h3>準備</h3>

<p>まず Xamarin Studio で C# → コンソールアプリのプロジェクトを作ります。</p>

<p>次に、まず NTS を参照に追加しますが、Nuget という仕組みを使います。
Xamarin Studio に Nuget を導入する手順は、</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-nuget-addin">mrward / monodevelop-nuget-addin</a></li>
</ul>


<p>を参考にしてください。</p>

<h3>コードを書く</h3>

<p>こんな感じです。</p>

<figure class='code'><figcaption><span>Program.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">GeoAPI.Geometries</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NetTopologySuite</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">TopologyTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="n">NtsGeometryServices</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">gf</span> <span class="p">=</span> <span class="n">service</span><span class="p">.</span><span class="n">CreateGeometryFactory</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">polygonA</span> <span class="p">=</span> <span class="n">gf</span><span class="p">.</span><span class="n">CreatePolygon</span><span class="p">(</span><span class="k">new</span> <span class="n">Coordinate</span><span class="p">[]</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">34.0</span><span class="p">,</span> <span class="m">136.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">34.0</span><span class="p">,</span> <span class="m">138.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">37.0</span><span class="p">,</span> <span class="m">138.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">37.0</span><span class="p">,</span> <span class="m">136.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">34.0</span><span class="p">,</span> <span class="m">136.0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">polygonB</span> <span class="p">=</span> <span class="n">gf</span><span class="p">.</span><span class="n">CreatePolygon</span><span class="p">(</span><span class="k">new</span> <span class="n">Coordinate</span><span class="p">[]</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">36.0</span><span class="p">,</span> <span class="m">137.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">35.0</span><span class="p">,</span> <span class="m">137.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">35.0</span><span class="p">,</span> <span class="m">140.0</span><span class="p">),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Coordinate</span><span class="p">(</span><span class="m">36.0</span><span class="p">,</span> <span class="m">137.0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">polygonA</span><span class="p">.</span><span class="n">Intersection</span><span class="p">(</span><span class="n">polygonB</span><span class="p">).</span><span class="n">ToConsole</span><span class="p">(</span><span class="s">&quot;Intersection&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">polygonA</span><span class="p">.</span><span class="n">Union</span><span class="p">(</span><span class="n">polygonB</span><span class="p">).</span><span class="n">ToConsole</span><span class="p">(</span><span class="s">&quot;Union&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">polygonA</span><span class="p">.</span><span class="n">SymmetricDifference</span><span class="p">(</span><span class="n">polygonB</span><span class="p">).</span><span class="n">ToConsole</span><span class="p">(</span><span class="s">&quot;SymmetricDifference&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">polygonA</span><span class="p">.</span><span class="n">Difference</span><span class="p">(</span><span class="n">polygonB</span><span class="p">).</span><span class="n">ToConsole</span><span class="p">(</span><span class="s">&quot;Difference&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">polygonB</span><span class="p">.</span><span class="n">Buffer</span><span class="p">(</span><span class="m">0.5</span><span class="p">).</span><span class="n">ToConsole</span><span class="p">(</span><span class="s">&quot;Buffer&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">GeomExtensions</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ToConsole</span><span class="p">(</span><span class="k">this</span> <span class="n">IGeometry</span> <span class="n">geom</span><span class="p">,</span> <span class="kt">string</span> <span class="n">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">tag</span> <span class="p">+</span> <span class="s">&quot; - &quot;</span> <span class="p">+</span> <span class="n">geom</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Intersection(AND)、Union(OR)、SymmeticDifference(XOR)、Difference(A - B)、Buffer(ふくらます)について試しています。</p>

<p>実行すると、コンソールに結果の座標群がずらーと出力されます。</p>

<h2>見える化してよ</h2>

<p>プログラムによる視覚化は、、、ごめんなさい面倒だったので作りませんでした。</p>

<p>その代わり、GeoJSON 化して GitHub にアップして視覚化しました。</p>

<p>まず演算対象の <code>geometryA</code> と <code>geometryB</code> です。(外側の枠は気にしないでください)</p>

<ul>
<li>https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/01_polygonA.geojson"></script>


<ul>
<li>https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/02_polygonB.geojson"></script>


<h3>Intersection(AND)</h3>

<ul>
<li>https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/03_polygonA_intersection_B.geojson"></script>


<h3>Union(OR)</h3>

<ul>
<li>https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/04_polygonA_union_B.geojson"></script>


<h3>SymmetricDifference(XOR)</h3>

<ul>
<li>https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/05_polygonA_symmetricdifference_B.geojson"></script>


<h3>Difference(A - B)</h3>

<ul>
<li>https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/06_polygonA_difference_B.geojson"></script>


<h3>Buffer(Bを膨らます)</h3>

<ul>
<li>https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson</li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/07_geometryB_buffer.geojson"></script>


<p>いやー 便利ですね GitHub 。大量のマーカーは自動的にクラスター化までしてくれるそうですよ。</p>

<ul>
<li><a href="https://github.com/blog/1541-geojson-rendering-improvements">GeoJSON rendering improvements</a>。</li>
</ul>


<p>こちらは、 Leaflet.js、OpenStreetMap、<a href="https://www.mapbox.com/maki/">Maki Project</a> などの FOSS4G が使われています。いいですね。</p>

<p>さて、なんの話か分からなくなってきたので、こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin で Windows Azure モバイルサービスを使う(その１)]]></title>
    <link href="http://amay077.github.io/blog/2013/12/14/using-azure-mobile-services-in-xamarin-1/"/>
    <updated>2013-12-14T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/14/using-azure-mobile-services-in-xamarin-1</id>
    <content type="html"><![CDATA[<p>Xamarin で BaaS を使うことについて、 <a href="http://qiita.com/koji_yusa/items/a6878bef10577ee744b5">koji_yusa さん</a>や <a href="http://qiita.com/kochizufan/items/c91b3a59a56d8fc54bb7">kochizufan さん</a> が、Parse の使用方法について書いてくれました。</p>

<!--more-->


<p>BaaS の中では Parse が一番知名度が高いでしょう。しかし！Microsoft も BaaS を提供しています。</p>

<p>Azure の名を冠しているため、「どうせ IaaS でしょ」とスルーする人が多いんじゃないかと思うので、今回は Microsoft の BaaS である「Azure モバイルサービス」について書きます。</p>

<h2>Azureモバイルサービス vs Parse</h2>

<ul>
<li><a href="http://www.windowsazure.com/ja-jp/pricing/details/mobile-services/">Windows Azure モバイルサービス - 料金詳細</a></li>
<li><a href="https://parse.com/plans">Parse - Pricing</a></li>
</ul>


<p>実際のところは、Parse に比べて Azure の方がスペックは低いです。無料版では、API呼び出し回数は、Azure が50万回に対して、Parse は100万回、ストレージは、Azyreが20MB(!)に対して Parse が1GB などです。</p>

<p>唯一、Azure にのみある機能は「スケジュールされたジョブ」、いわゆる cron みたいなジョブの定期呼び出し機能です。無料版では1時間に1回の利用に限定されるようですが、日時処理には十分使えるでしょう。</p>

<p><a href="http://mb.cloud.nifty.com/price.htm">Nifty の BaaS</a> と比べても劣勢ですね、あれれ？</p>

<h2>Azure モバイルサービスを Xamarin から使う</h2>

<p>Microsoft と Xamarin との提携により、Xamarin から Azure モバイルサービスは、簡単に利用することができます。提携前からライブラリの提供など対応は充実していましたが、提携により Microsoft のサイトでチュートリアルが公開されるなど、より充実しました。</p>

<p>そのチュートリアルを辿ってみます。</p>

<p>ちなみに環境は Mac + Xamarin Studio です。Win + Visual Studio でも同じ手順ですが、iOS 用のサンプルなので、iOS ならビルドと実行の為に Mac が必要です。Win しかないなら Android 用に置き換えて試せます。</p>

<h3>1. Windows Azure にサインアップする</h3>

<p>モバイルサービスを利用するには、まず Windows Azure に登録しなければなりません。本人確認のために、クレジットカードや携帯電話番号が必要になるのが煩わしいかもですが、勝手に請求されたりはしませんのでご安心を。</p>

<p>手順は↓が詳しいので割愛します。</p>

<ul>
<li><a href="http://wordpress-web.azurewebsites.net/guide">Windows Azureに登録する | 初心者でも30分でできる　ビジネスで使える！WordPressでWebサイト</a></li>
</ul>


<h3>2. モバイルサービスを作成する</h3>

<p>サインアップできたら Windows Azure マネージメントポータルを開きます。迷ったらここ。アドレスは、</p>

<ul>
<li>https://manage.windowsazure.com/</li>
</ul>


<p>です。</p>

<p>下のような画面になるので、左メニューから モバイルサービス → 新しいモバイル サービスを作成する と進みます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_01.png" alt="" /></p>

<p>URL に任意のIDを入力します(世界で一意になる必要があります)。また、地域を「東アジア」にします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_02.png" alt="" /></p>

<p>続いて SQL Server の設定をします。ログイン名に任意のユーザー名、パスワードに任意のパスワードを設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_03.png" alt="" /></p>

<p>ウィザードを終わると、マネージメントポータルに戻ります。しばらくの「作製中…」の後、状態が「準備完了」となり、これでモバイルサービスは作成完了です。</p>

<h3>3. Xamarin.iOS アプリケーションからモバイルサービスを使ってみる</h3>

<p>作成したモバイルサービスをクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_04.png" alt="" /></p>

<p>ここから、一気です。</p>

<ol>
<li>まずプラットフォームで「Xamarin」を選択し、</li>
<li>「新しい XAMARIN アプリケーションを作成する」を展開、</li>
<li>「TodoItem テーブルを作成する」をクリックして「作成されました」となるまで待ち、</li>
<li>Xamarin.iOS 用のサンプルアプリケーションをダウンロードします。</li>
</ol>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_05.png" alt="" /></p>

<p>ダウンロードした zip ファイルを解答し、Xamarin Studio で開きます。
参照 や Components を見ると、Azure Mobile Service 用のライブラリが組み込まれている事が分かります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_06.png" alt="" /></p>

<p>Debug で iPhone シミュレータで動かしてみます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_07.gif" alt="" /></p>

<p>上の動画のように適当なアイテムを追加した後、ブラウザのマネージメントポータルで追加したデータを確認してみます。</p>

<p>上部のメニュー から データ → TodoItem と進むと、追加されたデータが確認できます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_08.gif" alt="" /></p>

<p>以上です。Xamarin.iOS で Azure モバイルサービスにデータを登録するサンプルが手に入りました。</p>

<h3>4. サンプルのコードを眺めてみる</h3>

<p>これで終わってもアレなので、コードを見てみます。
まず前述した Azure Mobile Service 用のライブラリが組みこまれていますが、これは、 Xamarin の Components ストアで提供されている、</p>

<ul>
<li><a href="http://components.xamarin.com/view/azure-mobile-services">Azure Mobile Services / Components / Xamarin</a></li>
</ul>


<p>です。これを主に使っているのは <code>QSTodoService.cs</code> です。</p>

<p><code>QSTodoService.cs</code> を見てみると、まず NameSpace から。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Microsoft.WindowsAzure.MobileServices</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にコンストラクタなど。</p>

<p><code>MobileServiceClient</code> がメインクラスですが、これを使う前に <code>CurrentPlatform.Init()</code> が必要です(DI だか IoC だかですかね)。</p>

<p>そして <code>MobileServiceClient.GetTable&lt;ToDoItem&gt;()</code> をすることで Azure 上のテーブルを取得しています。まだデータは読み込みません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">MobileServiceClient</span> <span class="n">client</span><span class="p">;</span>
</span><span class='line'><span class="n">IMobileServiceTable</span><span class="p">&lt;</span><span class="n">ToDoItem</span><span class="p">&gt;</span> <span class="n">todoTable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**省略*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">QSTodoService</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CurrentPlatform</span><span class="p">.</span><span class="n">Init</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Initialize the Mobile Service client with your URL and key</span>
</span><span class='line'>  <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MobileServiceClient</span> <span class="p">(</span><span class="n">applicationURL</span><span class="p">,</span> <span class="n">applicationKey</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create an MSTable instance to allow us to work with the TodoItem table</span>
</span><span class='line'>  <span class="n">todoTable</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">GetTable</span> <span class="p">&lt;</span><span class="n">ToDoItem</span><span class="p">&gt;</span> <span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>データの読み込みは、<code>RefreshDataAsync</code> にて。さりげなく async で。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ToDoItem</span><span class="p">&gt;</span> <span class="n">Items</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">async</span> <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ToDoItem</span><span class="p">&gt;&gt;</span> <span class="n">RefreshDataAsync</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This code refreshes the entries in the list view by querying the TodoItems table.</span>
</span><span class='line'>      <span class="c1">// The query excludes completed TodoItems</span>
</span><span class='line'>      <span class="n">Items</span> <span class="p">=</span> <span class="k">await</span> <span class="n">todoTable</span>
</span><span class='line'>          <span class="p">.</span><span class="n">Where</span> <span class="p">(</span><span class="n">todoItem</span> <span class="p">=&gt;</span> <span class="n">todoItem</span><span class="p">.</span><span class="n">Complete</span> <span class="p">==</span> <span class="k">false</span><span class="p">).</span><span class="n">ToListAsync</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">MobileServiceInvalidOperationException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">@&quot;ERROR {0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">Items</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はこんなところで。</p>

<p>次回は、 Azure モバイルサービスの続きで、このサンプルに認証周りの機能を実装してみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で ViewController の名称を変える]]></title>
    <link href="http://amay077.github.io/blog/2013/12/13/rename-viewcontroller-with-xamarin-ios/"/>
    <updated>2013-12-13T00:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/12/13/rename-viewcontroller-with-xamarin-ios</id>
    <content type="html"><![CDATA[<p>今日も小ネタです。</p>

<p>Xamarin.iOS の SingleView Application とか(storyboard じゃないやつ)でプロジェクトを作ると、唯一の ViewController の名称が 「プロジェクト名ViewController.cs(.xib)」ってなるんですけど、なんかカッコ悪い。</p>

<!--more-->


<p>MainViewController とか、StartupViewController にしたいですね。その方法です。</p>

<h2>1. プロジェクトを作る</h2>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_ios_rename_viewcontoller_01.png" alt="" /></p>

<p>「RenameTest」という名称でプロジェクトを作ると、ViewController は <code>RenameTestViewController.cs</code> になります。</p>

<h2>2. クラス名をリファクタ機能で変更</h2>

<p><code>RenameTestViewController.cs</code> を開いてクラス名のところで右クリック→リファクタ。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_ios_rename_viewcontoller_02.png" alt="" /></p>

<p><code>MainViewController</code> に変更します。</p>

<p>これにより以下のようにファイルが変更されます。(git status を晒すことでスペースを稼ごう…)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status
</span><span class='line'> On branch master
</span><span class='line'> Changes to be committed:
</span><span class='line'>  modified:   AppDelegate.cs
</span><span class='line'>  renamed:    RenameTestViewController.cs -&gt; MainViewController.cs
</span><span class='line'>  renamed:    RenameTestViewController.designer.cs -&gt; MainViewController.designer.cs
</span><span class='line'>  modified:   RenameTest.csproj</span></code></pre></td></tr></table></div></figure>


<h2>3. xib ファイル名を変更する</h2>

<p><code>RenameTestViewController.xib</code> はリファクタに追従しないので、手動でファイル名を変更します。</p>

<p>それから、<code>MainViewController</code> のコンストラクタで、リテラルに xib の名称を指定しているのでそこも修正します。</p>

<figure class='code'><figcaption><span>MainViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">RenameTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainViewController</span> <span class="p">:</span> <span class="n">UIViewController</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">MainViewController</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="err">“</span><span class="n">MainViewController</span><span class="s">&quot;, null) // ← ココ！</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Xcode との連携確認</h2>

<p>.xib ファイルをダブルクリックすると Xcode が起動します。これは OK。けどファイル一覧を見てみると…</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_ios_rename_viewcontoller_03.png" alt="" /></p>

<p><code>RenameTestViewController.h</code> ってファイルができてる！
<code>MainViewController.h</code> になってほしいのですが。。。</p>

<p>Xamarin Studio にもどって、「RenameTestViewController」 が残っているところを探します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_ios_rename_viewcontoller_04.png" alt="" /></p>

<p>お前らか！</p>

<p><code>MainViewController.designer.cs</code> は、マニュアルで修正してはいけないのですが、試しに直してみます。</p>

<p><code>MainViewController.xib</code> 内の方も古い名前は抹殺しておきます。
これは Xamarin Studio ではソースコードエディタで開くか、別なテキストエディタで編集します。(これも推奨されない)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_ios_rename_viewcontoller_05.png" alt="" /></p>

<p>どちらも直したら、再度 <code>MainViewController.xib</code> を実行して Xcode を起動。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_ios_rename_viewcontoller_06.png" alt="" /></p>

<p>やったー、ようやく <code>RenameTestViewController</code> を抹殺できました。この状態で Xamarin 側との outlet の連携など、問題ないようです。</p>

<p>まあ、Xcode 用のプロジェクトファイルは Xamarin Studio が自動生成するもの(obj ディレクトリに作成される)で、名前が元のままでも問題はないです。</p>

<p>以上、手順をまとめてみましたが、経験的に、些細な変更でアプリが起動できなくなったりするので、こまめにコミットしておく事をおすすめします。</p>

<p>Storyboard のプロジェクトだったら、<a href="http://qiita.com/amay077/items/716742474bce343c5729">以前書いた</a>ように Xamarin Studio だけで完結できるので簡単ですが、まだα版です。はやくリリースされるといいですね。</p>
]]></content>
  </entry>
  
</feed>
