<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-10T19:52:25+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin ハンズオン浜松に参加しました #JXUG と #jaghama]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu/"/>
    <updated>2016-07-10T18:32:39+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://jaghama.connpass.com/event/33735/">Xamarinハンズオン浜松 #JXUG #jaghama &ndash; connpass</a></li>
</ul>


<!--more-->


<p>　日本Androidの会 浜松支部の市川(<a href="https://twitter.com/macha1972">@macha1972</a>)さんからのご相談を受けて、JXUG の田淵さんに講師を依頼、 <a href="https://groups.google.com/forum/#!forum/android-hamamatsu">日本Android浜松支部(#jaghama)</a>と <a href="http://jxug.org/">Japan Xamarin Users Group (#jxug)</a> の共催という形で、 Xamarin 勉強会（ハンズオン）を浜松市で開催しました。</p>

<h2>プレイベント「さわやかを食べる会」</h2>

<p>　兼ねてより「さわやかに行きたい！」という声が聞かれていた（僕も食べたかった！）ので、プレイベントとして「さわやかを食べる会」も行いました。</p>

<p>　言い出しっぺだったので、浜松駅からさわやかまでの送迎の為の車を出しました。</p>

<p>久しぶりのさわやかだったので、定番のげんこつを外せず今回は断念した さわやかバーガー のメニュー</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_01.jpg" alt="" /></p>

<p>げんこつハンバーグ第一形態</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_02.jpg" alt="" /></p>

<p>げんこつハンバーグ第二形態</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_03.jpg" alt="" /></p>

<p>久しぶりだった、やっぱり旨かった、肉を喰ってるッ！って感じがした。</p>

<h2>Xamarin ハンズオン</h2>

<p><a href="http://jxug.connpass.com/event/30152/">JXUGC #14 Xamarin ハンズオン 名古屋大会</a> でもサポートスタッフをさせていただいてたので、だいたいの要領は同じ。</p>

<p>当時にくらべて、Xamarin も Visual Studio もバージョンアップしていて、導入時のエラーはだいぶ減ってきたかなあという印象。</p>

<p>それでも、「Android SDK で Android N を入れているとビルドエラーになる」とか、新しいハマりポイントも出てきたので、やっぱり要注意。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これ、5/30名の確率でハマってる。Frequently Asked Questions にしてよいでしょう？レベル <a href="https://t.co/DXklIE2FBq">https://t.co/DXklIE2FBq</a> <a href="https://twitter.com/hashtag/JXUG?src=hash">#JXUG</a> <a href="https://twitter.com/hashtag/xamarin?src=hash">#xamarin</a> <a href="https://twitter.com/hashtag/jaghama?src=hash">#jaghama</a></p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href="https://twitter.com/amay077/status/751653596861566976">2016年7月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>このへんは、</p>

<ul>
<li><a href="https://github.com/ytabuchi/XamarinHOL/issues">Issues · ytabuchi/XamarinHOL</a></li>
</ul>


<p>に上げておいて、継続的に改良していけるとよいな。</p>

<p><a href="https://github.com/ytabuchi/XamarinHOL">ハンズオン資料</a>が素晴らしいので、躓くのはほとんど最初だけだよねー、ということで、時間の最後らへんは、</p>

<p>田淵さんからT(enpura)ポイントをもらったり、</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/amay077">@amay077</a> さんに public Command(Action execute, Func&lt;bool&gt; canExecute); を教えていただいた！！！！！Tポイント!!! <a href="https://twitter.com/hashtag/JXUG?src=hash">#JXUG</a></p>&mdash; 田淵 義人＠エクセルソフト (@ytabuchi) <a href="https://twitter.com/ytabuchi/status/751682059186216960">2016年7月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>「そこで Rx ですよ！」とか言っていた。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">田淵さんが「2つのデータのいずれかが変わった時に、画面のとある項目を更新する必要がある」と言われたので、<br>「そこで Rx ですよ」とだけ言っておいた。 <a href="https://twitter.com/hashtag/jxug?src=hash">#jxug</a></p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href="https://twitter.com/amay077/status/751691630172712960">2016年7月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>スパルタだったけど、時間的にも少し余裕があったかな。皆さん完走できていたと思います。</p>

<h2>LT</h2>

<p>先日より開発中の Xamarin.Forms.GoogleMaps を Qiita のスライドモードを使って LT しました。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/feb5353bf8fb8b8c866d">Xamarin.Forms 用の地図ライブラリつくった &ndash; Qiita</a></li>
</ul>


<h2>懇親会、アフターイベント</h2>

<p>終わったら懇親会、やっぱ地方はいいな！なんとなく落ち着くのです（車出したのでお酒は飲んでいません）。</p>

<p>会の途中、流れでアプリ紹介タイムになり、 <a href="https://twitter.com/fxxk_authority">しんす</a> さんの Multi Function Display というアプリがおもしろそうだった（他の方紹介できずごめんなさい）。</p>

<ul>
<li><a href="https://www.microsoft.com/ja-jp/store/apps/multi-function-display/9nblggh6268l">Multi Function Display – Microsoft ストアの Windows アプリ</a></li>
</ul>


<p>夜、車のダッシュボードにおいて、速度とかをフロンドガラスに写り込ませて見られるのだそうで、カッコいい！MADOSMA の使いみちに困っていたので使ってみます！</p>

<p>　懇親会の後、数名の方でラーメンを食べに行くとのこと。お腹もいい感じだったので帰ろうかなと思っていたのですが、 <strong>「三太」</strong> に行くと聞いて手のひら返し、ご一緒させていただきました。浜松来たらほぼ必ず行くんですよ、三太。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">俺の中の浜松のソウルフード「三太のラーメン」の誘惑に負けた <a href="https://twitter.com/hashtag/jxug?src=hash">#jxug</a> <a href="https://twitter.com/hashtag/jaghama?src=hash">#jaghama</a> (@ 三太 モール街店 in 浜松市, 静岡県) <a href="https://t.co/rhxGxhqfyZ">https://t.co/rhxGxhqfyZ</a></p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href="https://twitter.com/amay077/status/751746459469541376">2016年7月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>約30名も集まっていただいて感謝！</p>

<p>学生さん多かった印象、休憩時間に「もしかしてみなさんは昭和生まれなんですか？」とぶっ込まれた時は、場が軽く凍りましたねｗ</p>

<p>東京のどでかい勉強会もいいけど、地方の十数名くらいの勉強会の方がどっちかというと落ち着きます（^ ^）</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">さわやかうまかった。次は 生しらす か 桜エビ を食べたいです。</p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href="https://twitter.com/amay077/status/751617505202843648">2016年7月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[転職してました]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/08/changed-jobs/"/>
    <updated>2016-07-08T02:42:39+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/08/changed-jobs</id>
    <content type="html"><![CDATA[<p>気がついたら</p>

<!--more-->


<p>転職していました、 7/1 から？</p>

<p>転職しましたが、何も変わっていません、仕事内容も環境も待遇も。</p>

<p>全社員フルリモートの会社になったので、相変わらず家でゴロゴロしています。</p>

<p>今後ともどうぞよろしくお願いします。</p>

<ul>
<li><a href="https://nepula.net/pc/">Nepula ネプラ｜基幹システムをクラウド化、収益化</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms のバージョンを 1.2 から 2.3 に上げた時のエラー対処法]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/06/version-up-xamarin-forms-project-from-1-2-to-2-3/"/>
    <updated>2016-07-06T23:59:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/06/version-up-xamarin-forms-project-from-1-2-to-2-3</id>
    <content type="html"><![CDATA[<p>プロジェクトで使ってる Xamarin.Forms のバージョンを「1.2.3.6257」から「2.3.0.107」に上げたら、ビルドでエラーが発生するようになった。</p>

<!--more-->


<p>ググッてみると、「Xamarin Studio を再起動」とか「ソリューションを開き直せ」とか書いてある。
ホンマかいな？と思いながら実施すると、確かになんか変化が。</p>

<p>エラーメッセージが変わっただけだけど。</p>

<blockquote><p>Error initializing task XamlG: Not registered task XamlG.</p></blockquote>

<p>とか、</p>

<blockquote><p>Error initializing task FixedCreateCSharpManifestResourceName: Not registered task FixedCreateCSharpManifestResourceName.</p></blockquote>

<p>調べたときに見た情報の中には .csproj ファイルがどーのこーの書いてあったので、開いてみると、何やら以前のバージョンが残ってた。</p>

<p>ので、その行を削除してソリューションを開き直し、ビルドしたらエラーはなくなった。</p>

<figure class='code'><figcaption><span>xxx.csproj</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">&quot;$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>これ削除→  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">&quot;..\packages\Xamarin.Forms.1.2.3.6257\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets&quot;</span> <span class="na">Condition=</span><span class="s">&quot;Exists(&#39;..\packages\Xamarin.Forms.1.2.3.6257\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets&#39;)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">&quot;..\packages\Microsoft.Bcl.Build.1.0.21\build\Microsoft.Bcl.Build.targets&quot;</span> <span class="na">Condition=</span><span class="s">&quot;Exists(&#39;..\packages\Microsoft.Bcl.Build.1.0.21\build\Microsoft.Bcl.Build.targets&#39;)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">&quot;..\packages\Xamarin.Forms.2.3.0.107\build\portable-win+net45+wp80+win81+wpa81+MonoAndroid10+MonoTouch10+Xamarin.iOS10\Xamarin.Forms.targets&quot;</span> <span class="na">Condition=</span><span class="s">&quot;Exists(&#39;..\packages\Xamarin.Forms.2.3.0.107\build\portable-win+net45+wp80+win81+wpa81+MonoAndroid10+MonoTouch10+Xamarin.iOS10\Xamarin.Forms.targets&#39;)&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラーは、ね。</p>

<h2>参考</h2>

<ul>
<li><a href="https://rksoftware.wordpress.com/2016/04/24/001-16/">Xamarin Studio がビルドエラーでビルドできなくなった話 | rksoftware</a></li>
<li><a href="http://stackoverflow.com/questions/27873185/error-error-initializing-task-xamlg-not-registered-task-xamlg">xamarin &ndash; error : Error initializing task XamlG: Not registered task XamlG &ndash; Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/34501301/error-compiling-xamarin-forms-new-project">Error compiling Xamarin Forms new project &ndash; Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms 向けの地図ライブラリ「Xamarin.Forms.GoogleMaps」をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/"/>
    <updated>2016-06-27T23:59:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms で使える地図ライブラリは、公式が出している</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.Maps/">Xamarin.Forms.Maps</a> &ndash; Maps models and renderers for Xamarin.Forms</li>
</ul>


<p>があるのですが、非常に機能が少ないです（ピンがおけるだけで、図形の描画すらできません）。</p>

<!--more-->


<p>なので、別な選択肢としての「Xamarin.Forms向け地図ライブラリ」を開発し始めました。</p>

<p>それがこちら</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/">Xamarin.Forms.GoogleMaps</a> &ndash; Yet another Maps library for Xamarin.Forms that optimized for Google maps.</li>
</ul>


<p>です。</p>

<p>iOS では MapKit に代わり <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a> を使用し、 Android/iOS 共に Google Maps に特化することで、API の共通化を容易にし、恐らくAPI共通化の足枷になっているであろう UWP(Bing maps) のサポートは最小限に留めています。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_01.png" alt="screenshot1" /></p>

<h2>現在の機能</h2>

<p>現在のバージョンは 1.1.0 。
公式の Xamarin.Forms.Maps に比べて、ライン・ポリゴン・円を追加できるようになりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_02.png" alt="screenshot2" /></p>

<p>詳しい比較は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/wiki/Xamarin.Forms.Maps-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83">Xamarin.Forms.Maps との比較 &ndash; Xamarin.Forms.GoogleMaps Wiki</a></li>
</ul>


<p>にあります。</p>

<h2>サンプルプログラム</h2>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">Xamarin.Forms.GoogleMaps/XFGoogleMapSample &ndash; github</a></li>
</ul>


<p>にあります。</p>

<p>Google Maps の APIキーを Android / iOS それぞれで取得する必要があります。</p>

<ul>
<li>Android &ndash;  <a href="http://www.buildinsider.net/mobile/xamarintips/0020">Xamarin.Androidで地図を表示するには？（Google Maps使用） &ndash; Build Insider</a></li>
<li>iOS &ndash; <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS  |  Google Developers</a> の「クイック スタート ステップ」
をそれぞれ参照してください。</li>
</ul>


<h2>オープンソース</h2>

<p><a href="http://open.xamarin.com/">Xamarin Open Source SDK</a> により、 Xamarin.Forms のソースコードもオープンソースになったので、 <a href="https://github.com/xamarin/Xamarin.Forms/tree/master/Xamarin.Forms.Maps">Xamarin.Forms/Xamarin.Forms.Maps &ndash; github</a> などを Fork して作りました。</p>

<p>このライブラリ自体もオープンソースであり、</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>
</ul>


<p>で開発しています。（スターを付けてもらえると作者がよろこびます）</p>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues">要望、コメントなど</a>もらえると嬉しいです。よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms の画面(Page)のライフサイクルイベントについて]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles/"/>
    <updated>2016-06-08T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles</id>
    <content type="html"><![CDATA[<p>ちょっと誤解してた＆情報がなかったのでまとめてみました。</p>

<!--more-->


<h2>モバイルアプリでの「画面」の基本的なライフサイクルイベント</h2>

<p>まあ Android と iOS についてですが。</p>

<p>画面が表示される時のイベント（コールバック）は、簡潔には以下のようになります。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume|</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause|</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy|</td>
</tr>
</tbody>
</table>


<p>厳密にはもっと細かく、〜される前と後が iOS と Android で微妙に異なるのでだいたいこんな感じという程度と思って下さい。</p>

<p>もう少し細かいイベントは以前調べた以下を参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/52a0b0da97fe455abc08">iOS と Android で画面表示時のコールバックを比較する &ndash; Qiita</a></li>
</ul>


<h2>Xamarin.Forms での画面のライフサイクルイベント</h2>

<p>Xamarin.Forms では、上表のライフサイクルイベントは、アプリケーション
(Application) と、画面(Page) のイベントに分かれています。</p>

<p>表に、Xamarin.Forms を追加してみました。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
<th>Xamarin.Forms</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnAppearing(">Page.OnAppearing</a>/)|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnResume(">Application.OnResume</a>/) <strong>※要注意</strong> |</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnSleep(">Application.OnSleep</a>/)</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnDisappearing(">Page.OnDisappearing</a>/)|</td>
</tr>
</tbody>
</table>


<p>画面のロード時（<code>viewDidLoad/onCreate</code>）に相当するのは、Xamarin.Forms では <code>OnAppearing</code>、逆にアンロード時は <code>OnDisAppearing</code> です（名称が <code>viewDidAppear</code> に似てるので、画面の表示時かと勘違いしてました）。</p>

<p>画面の表示／非表示時のイベントは、画面でなく Application クラスの <code>OnResume</code>, <code>OnSleep</code> で提供されます。</p>

<p>要注意なのは <code>OnResume</code> です。これ、画面が表示される <strong>初回はイベントが発生しません</strong>。
一度、アプリを背面に退避し、再度前面に持ってきたときに初めて <code>OnResume</code> が呼び出されます。iOS や Android の <code>viewDidAppear / OnResume</code> と同じだと思ってつかうとハマります。</p>

<p>基本的には、 <code>OnAppearing</code> でリソースの確保を、 <code>OnDisAppearing</code> で解放をすればよさそうです。</p>

<p>GPS など、電池消費の激しいリソースを使う場合は、アプリが背面へ隠れたら直ちにそのリソースを解放した方がよいです。その場合は <code>OnResume-OnSleep</code> を使いますが、前述の通り、画面初回表示時は <code>OnResume</code> が走らないので、少し工夫が必要です。</p>

<h2>画面が回転された時</h2>

<p>端末を横向きに回転すると、Android では Activity が破棄されて再度生成される事が知られています。</p>

<p>Xamarin.Forms では Android でもそのような事はなく、 <code>Page.OnSizeAllocated</code> が呼び出されるだけです(iOS も当然同じ)。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.xamarin.com/guides/xamarin-forms/working-with/app-lifecycle/">Working with the App Lifecycle &ndash; Xamarin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[de:code 2016 に参加した感想]]></title>
    <link href="http://blog.amay077.net/blog/2016/05/27/impression-of-decode16/"/>
    <updated>2016-05-27T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/05/27/impression-of-decode16</id>
    <content type="html"><![CDATA[<p>Microsoft の開発者向けイベント <a href="https://www.microsoft.com/ja-jp/events/decode/2016/">de:code 2016</a> に参加させてもらいましたので感想を書きます。</p>

<!--more-->


<p>Microsoft のカンファレンスに参加するのは何年ぶりでしょう、パシフィコ横浜でやってた Tech・ED とか Tech・Days 以来です。</p>

<p>ここ数年 Android や iOS もモバイルアプリ開発ばかりやってきて、 Xamarin で C# に戻ってきて〜って感じだったので、 「Xamarin 以外の Microsoft テクノロジーを広く浅く知る」 という目的で参加しました。</p>

<h1>セッションの感想</h1>

<h2>Day1</h2>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/keynote.aspx">Keynote</a></h3>

<p>なんかこういう全体像まとめるの苦手、というか何番煎じなので、他の人のまとめをみてくれい（爆</p>

<p>とりあえず、
<strong>「りんな が想像以上に自然すぎて、LINE で会話してるのをカミさんに見られたら、完全に誤解されそう」</strong>
です。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-013">DEV-013 まだまだ進化が止まらない！開発者のための Microsoft Azure 最新機能</a></h3>

<p>Azure の現在の提供機能を知りたくて。</p>

<p>Scale Sets、Batch Service、Container Service、Service Fabric、Azure Function など、だいたい AWS を後追いして遜色ない感じになってるのかなー、と。</p>

<p>Region は AWS や Google より多い（日本にも２つある）のは初めて知った。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#CLT-006">CLT-006 HoloLens 概要 〜未来を見る新しい方法〜</a></h3>

<p>期待値の高い HoloLens の概要を知った。
AR や VR との対比で MR(複合現実：Mixed Reality)という。
Google Glass(AR)、 Oculus Rift(VR) は体験したことがあるので、HoloLens も体験すると、ものすごくオドロキがあるんだろうな。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">HoloLens でスプラトゥーンやりたい <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/734998372906471424">2016年5月24日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とツイートしたが、その時は VR(仮想現実) の文脈で言ってたことにあとで気づいた。
MR:複合現実で考えると、目の前にある現実のもの（机とか家の壁とか）にインクで色が塗れる、「でもそれどうやって多人数対戦型ゲームになるんだ？」とかまだまだ発想力が乏しい。</p>

<p>（例のおさわり会、２周目やってほしいです。。。）</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-020">DEV-020 Bot Framework &amp; Cognitive Services 〜自動応答ソリューション開発に挑戦〜</a></h3>

<p>Bot Framework と Cognitive Services を使ってBOTを作る様子を見た。
まだ理解できていない感じ、どこまでプログラムしないといけないのか、とか。</p>

<h2>Day2</h2>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#ARC-003">ARC-003 モダン Web：たった今と、ほんの少し未来のはなし</a></h3>

<p>あんまりWeb界隈に詳しくないけど、Twitterで流れてくる情報はウォッチしてたので、だいたい知ってはいた感じ。
セッション時間足りないよなあと思いつつも、react.js や仮想DOM についての話も聞きたかった。</p>

<p>今後の要素として Web Components, Progressive Web Apps, Native Assembly があったが Safari が軒並み「動作：×」になってて、以前見かけた「将来 Safari が IE のようになる」ってツイート思い出した、そうなんでしょうか？</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-011">DEV-011 TypeScript 〜Any browser, Any host, Any OS. Open Source〜</a></h3>

<p>TypeScript も存在は知りつつ放置してたので最新情報を収集。
Visual Studio Code で C# ライクにコードが書けて、ちょうど今仕事で Javascript を書いてるので、すぐにでも使ってみようと思った。
tsc が出力する Javascript コードを参考にして Javascript を書いてもいいかな、とも思った。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#SNR-018">SNR-018 Azure と NEST で始める Elastic Stack</a></h3>

<p>全文検索の Elasticsearch 周りのセッション。
仕事で Apache Solr を知って、その後 <a href="http://qiita.com/amay077/items/9fb99ab9e6801033977d">Elasticsearch を知ってためして</a>、<a href="http://qiita.com/amay077/items/ca1ce05ac0d295e7c323">Auto-Rebalancing に感動して</a> 仕事でも採用されて現在に至る。</p>

<p>Azure との関連はこじつけｗに近かったが、 .NET のクライアントライブラリがあるのは知らなかった。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#CHK-005">CHK-005 All about 機械学習！ 〜機械学習は魔法の杖か、単なる Big Data のはけ口か〜</a></h3>

<p>タイトルは釣りｗ
実際は、聴講者が登壇者へ質問を投げつけていくチョークトーク。
スピーカーお二人が R&amp;D と実務としてデータ解析を行われている方だったので、とても説得力があった。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">データマイニングについて。「陳腐化したデータのなかに宝物なんてない」 <a href="https://twitter.com/hashtag/roomH?src=hash">#roomH</a> <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/735329131051778048">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>データマイニングとの違いとは？という問いに対して。
「人が」「時間をかけて」「データを解析」し、結果が出てから実装していては遅いし、そういう時代は終わった。だからこその機械学習、解析まで機械同士でやってくれと。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Q:どのくらい勉強しなければならないのか？<br>A:時間軸次第。２～３年先には機械学習もパターン化すると予想。その後にはアルゴリズムを選択する必用もなくなると思う。 <a href="https://twitter.com/hashtag/roomH?src=hash">#roomH</a> <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/735333613085020160">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>エンジニアが機械学習についてどこまで学習する必要があるのか？という問いに対して。識者の方々が、割と短い期間の内に、機械学習がコモディティ化すると予想されていて、ちょっと驚きと安心。わかりました勉強しませんｗ いろいろな機械学習のツールやサービスを知って、使うフェーズに入っているんだなーと思った。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Q. 機械学習は人間の役割の置き換えになるのか？<br>人間の経験や感覚は、正しい確率が高いわけではない。測定可能なデータをお元に推測ができる機械学習は、多くの場で有用だろう。（筆者意訳）<a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a> <a href="https://twitter.com/hashtag/RoomH?src=hash">#RoomH</a></p>&mdash; dz づ (@dz_) <a href="https://twitter.com/dz_/status/735337240327524352">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>機械学習によって仕事を奪われる人をどうやって説得する？という問いに対して。
かしこい人ほど &ldquo;カンの妥当性の低さ&rdquo; を自認しているので、ニーズはあるよなー、と思った。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-002">DEV-002 .NET Core / ASP.NET Core が実現するクロスプラットフォーム .NET の今と未来</a></h3>

<p>「.NET Framework はマルチプラットフォームにできます（やらないけどな）」と言ってた時代がなつかしい、実際に Mac や Linux で「動く」 .NET の話。</p>

<p>Xamarin は Mono を使っているけれど、今後は .NET Core に寄せていく(と思われる)ので、今後も要チェック。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Mac + Xamarin Studio で普通に <a href="https://t.co/KM1FpPjJ4s">https://t.co/KM1FpPjJ4s</a> Webアプリが作れてちょっと感動した。 <a href="https://twitter.com/hashtag/roomB?src=hash">#roomB</a> <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/735344072546783232">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>実際のところ、VS より Xamarin Studio の方が機能が少なくて軽量なので、サクッと Webアプリ作るには Xamarin Studio でいいじゃん？とか思った。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-023">DEV-023 Xamarin Deep Dive &ndash; Xmarin.Forms の可能性</a></h3>

<p>「Xamarin.Forms？まだ早いでしょ」派の人間だけど、「なかなかイケるらしい」という噂を聞いてたので参加した。
りんなセッションに客を取られたもののほぼ満員だった。</p>

<p>(Alpha版だから？)相変わらずイレギュラーな動作はするものの、 Behavior, Effects, Previewer など、だいぶ使えるようになってきた感じ。</p>

<p>DataPages は、カスタマイズできると強そう。Workbooks は良いぞ！</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/RoomF?src=hash">#RoomF</a> <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a><br>Xamarin Workbooks ！<br>「実行できる仕様書」みたいなやつ！<a href="https://t.co/4gkVcVzALR">https://t.co/4gkVcVzALR</a> <a href="https://t.co/SLSfKMYHoE">pic.twitter.com/SLSfKMYHoE</a></p>&mdash; ちょまど@MS入社して2ヶ月 (@chomado) <a href="https://twitter.com/chomado/status/735377175935913984">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="https://blog.xamarin.com/browse-through-the-evolve-2016-mobile-app-source-code/">Evolve アプリ</a> も Xamarin.Forms を使ってるので、ロックイン覚悟でそろそろ本格的に使ってみますか、という気になった（ただし Mac でな）。</p>

<h3><a href="https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DOO-012">DOO-012 FinTech だけじゃモッタイ無い！ブロックチェーンとクラウドが作る未来</a></h3>

<p>FinTech とか ブロックチェーン などのバズワードを追ってなかったので聴講。
何気に一番の発見だった。
ブロックチェーン と プログラムを動かす事 が関係あるとは思ってなかった。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ブロックチェーンの今後として契約と履行がある。履行＝プログラムの実行、なので開発者もブロックチェーンについて知っておいた方がよい。 <a href="https://twitter.com/hashtag/roomG?src=hash">#roomG</a> <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/735396922966564864">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>知らないワードのオンパレードだったが、開発者としても今後ウォッチしていかないといけない事が分かって、聞いてよかった。</p>

<p>Smart Contract, Ethereum およびこれらの要素を利用したサービス、ビジネスについてウォッチ必須。</p>

<p>とりあえず、 <strong>Smart Contract Conference</strong> というイベントが開催されるそうなので、これは是非行きたい。</p>

<h1>その他の感想</h1>

<h2>Xamarin!Xamarin!Xamarin!</h2>

<p>Xamarin のセッションが４つも！Day2は常にどこかでセッションやってる感じでしたね。
そのどれもが満員だった模様で関心の高さが伺えました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">もう Xamarin だけで 1day イベントやったら感 <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/735302315146498048">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>って感じですね（スピーカーワンチャンある？）。</p>

<h2>Google や Apple の開発者向けイベントと比べて</h2>

<p>まず 米国の <a href="https://build.microsoft.com/">//build</a> というイベントの後に、国内でも公式なイベントとして de:code を開催してくれる、これは素直にありがたいです。</p>

<p>「技術者は英語を聞けて読めて米国から発信される最新情報をキャッチアップすべき」という意見には賛同しつつも、全ての人がそうはなれない訳で、そういった方々にもキチンと企業として情報発信していく、それを専門とするエヴァンジェリストが国内にたくさん居るのはマイクロソフトの良いところかなと思います。</p>

<p>エヴァンジェリストの方々の多様性にも驚きました。踊ったり、コスプレしたり、漫画描いたり、プレゼンの神だったり…。その多様な活動が話題になることも含めて、今の Google や Apple にはできない、効果の高いことだと思います。</p>

<p>ただ、開発者向けイベントには、その全てが最先端テクノロジーを利用して行われる事を期待してしまうのですが、</p>

<ol>
<li>公式なイベントアプリがない（<a href="https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched">Google I/O にはある</a>）</li>
<li>参加証を紙で用意しないといけない</li>
<li>アンケートも紙で書かないといけない</li>
</ol>


<p>あたりが残念、今後「変化」を期待したいところです。</p>

<p>特に 1. に関しては、Microsoft が買収した Xamarin の単体のイベント &ldquo;Evolve&rdquo; でも Win/Android/iOS全対応の <a href="https://blog.xamarin.com/download-the-xamarin-evolve-2016-conference-app/">公式アプリ</a> を用意している（Microsoft の技術をふんだんに使って）わけなので、 mobile first をうたうなら、このくらいやって欲しかったなあという印象です（これは build もそうですが）。</p>

<p>大抵のイベントアプリには、</p>

<ul>
<li>聞きたいセッションをお気に入り登録する機能（Azure で管理）</li>
<li>フロアマップ</li>
<li>セッションへのフィードバックを送る機能</li>
</ul>


<p>があります。アプリがあるだけでもイベント運営がいろいろ改善しそうな気がします。</p>

<p>また、技術コミュニティ/関連企業が主催する Android や iOS の国内イベントでは、有志の開発者がコミュニティ主導でイベントアプリを開発しています。</p>

<ul>
<li><a href="http://konifar.hatenablog.com/entry/2016/02/11/031257">オープンソースでDroidKaigiのカンファレンスアプリ作ってる &ndash; Konifar&rsquo;s WIP</a></li>
<li><a href="https://github.com/tryswift/trySwiftApp">tryswift/trySwiftApp: try! Swift Conference App</a></li>
</ul>


<p>こういった動きができるととても良いと思います（そのためにはイベント情報を Microsoft がオープンデータにしてくれる必要があるわけですが）。</p>

<h2>あと感じたことをだらだら書く</h2>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">「○年後は○○だ！」とか明確なビジョンが見えなくても、数年後にはなんとなく思ってたような事やってるし、その為の情報を仕入れにこういうイベントに参加するんだよな。そしてそれは会社ではなく個人の問題。だから来年も来ます。 <a href="https://twitter.com/hashtag/decode16?src=hash">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href="https://twitter.com/amay077/status/735414344226242561">2016年5月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>参加者はスーツの人が多かったですね。
高額なイベントだし、業務の一環で参加しているとしたら当然会社へ戻って報告の義務があるのでしょう、スライドをカメラでパシャパシャ撮って、一生懸命メモ取ってる人も居ました（かくいう自分も、会社のカネで参加した Tech・ED はそうでしたね）。
会社のカネで参加した人は感想をブログに書くのは抵抗があるのでしょうね。明確にそれを禁止する会社だとしたら残念な会社だと思います。</p>

<p>幸い私の勤め先はじゃんじゃん情報発信してけ的なスタンスだったので良かったですが、それでもこういうイベントは個人(の目的)として参加しています、好きでエンジニアやってるんで。</p>

<p>あと、明確な目標を持つ・決めるのって苦手で、それより
「目を閉じてなんとなく”匂い”のする方に手探りで歩いていたら、なんとなく望んでいた事になってた気がする」
って感じですかね。”匂いを嗅ぐ”のがこういうイベントで、ストリーミングとかではなかなかできないですね。</p>

<p>最後に、こういうイベントではぼっちな事が多かったんですが、Xamarin について数年前からブログに書いてた関連で、 JXUG というコミュニティの皆さんと仲良くさせてもらい、現地でもあいさつ、お話できました。</p>

<p>これについては KeyNote で伊藤執行役が、</p>

<blockquote><p>「エンジニアがコミュニティに参加することを制限したり、就業時間以外や休日に限定したり、会社名を伏せて参加するといった体質を持っていることにも問題がある。日本のエンジニアが、もっと自由に情報交換をしたり、スキルを磨ける環境を作ることに、日本マイクロソフトとしても支援をしたい」</p></blockquote>

<p>− from   <a href="http://cloud.watch.impress.co.jp/docs/news/20160525_758975.html">「日本のデベロッパーには国境を越えてほしい」～Microsoft・グッゲンハイマーCVP &ndash; クラウド Watch</a></p>

<p>と言われているので、会社のカネかどうかに関係なく、じゃんじゃんアウトプットしていきましょう。</p>

<p>ではまた来年！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin 勉強会 #JXUG 13 で発表してきました]]></title>
    <link href="http://blog.amay077.net/blog/2016/05/08/presentation-in-xamarin-jxug-13/"/>
    <updated>2016-05-08T01:18:43+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/05/08/presentation-in-xamarin-jxug-13</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://jxug.connpass.com/event/29734/">JXUGC #13 東京 緊急開催 Xamarin のすべて！ &ndash; connpass</a></li>
</ul>


<!--more-->


<p>で、 <strong>「DroidKaigi2016 アプリを Xamarin に移植した話」</strong> というタイトルで登壇してきました。</p>

<p>その資料です。</p>

<script async class="speakerdeck-embed" data-id="a005a4a951d047948aa9985497736e0d" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>動画はこちら</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=9oPwHJ4Zc9I">JXUGC #13 東京その３ &ndash; YouTube</a></li>
</ul>


<h2>補足など</h2>

<p>ライブラリ関係のもう少し細かい話は、</p>

<ul>
<li><a href="http://qiita.com/amay077/items/09b442da6ac22269e8e0">DroidKaigi2016アプリを Xamarin.Android に移植した話 &ndash; Qiita</a></li>
</ul>


<p>に書いてます。</p>

<p>伝えたかったのは、Xamarin でも Androidネイティブ／iOSネイティブアプリ開発 の知識も要るよということなのですが、そのためには、</p>

<ul>
<li>DroidKaigi も try!Swift も参加しようぜ！</li>
<li>難しいならそれに携わっている人たちをフォローしとこうぜ！</li>
<li><a href="http://potatotips.connpass.com/">potatotips</a> っていうiOS/Android開発Tips共有会もあるし東京いいなあ！</li>
</ul>


<p>ってことです。
Android にしても iOS にしても、所詮は他人の土俵なんで、その土俵に入って情報収集・質問しないと欲しい情報は得られないです（<strong>まだ</strong> 日本語情報が少ない、とかそういう問題じゃないと思います）。</p>

<p>慣れないOS・慣れない開発環境とかも、最初はツラいんですが、しばらく使い続けれいれば、その内良いトコ取りできるようになります。そういう選択ができるのも Xamarin だけなんで。</p>

<p>正直、 Java とか Swift を専門でやってきたネイティブアプリ開発の人たちに「C# やろうぜ！」って言っても、彼らの現状にあまりメリットないし、各言語に愛着もあるだろうし難しいと思いますから、こちらから歩み寄っていく感じで！</p>

<h2>その他</h2>

<ul>
<li>資料は <a href="http://www.decksetapp.com/">Deckset</a> という Markdown でプレゼン資料生成するツールで作ってます</li>
<li>Slideshare に PDF アップしたら日本語表示できなかったので Speaker Deck にせざるを得なかった</li>
<li>次なんかやるときは <a href="https://transiru.net/">Transiru</a> 使います</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Workbooks とかいうやつ]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/"/>
    <updated>2016-04-29T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks</id>
    <content type="html"><![CDATA[<p><a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> が開催中されました。</p>

<!--more-->


<p>build での予告どおり、Xamarin.Android/iOS などがついにオープンソースになった、などのエキサイティングな発表のまとめは</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/evolve2016">【速報】Evolve 2016 で発表されたエキサイティング情報まとめ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>その Keynote でデモされていた Xamarin Workbooks というツールがなかなかすごいので紹介。</p>

<h2>なにこれ？</h2>

<p>ひとことでいうと、</p>

<p><strong>Xcode の Playground みたいなやつ + Markdown</strong></p>

<p>まだ意味わかんないですね？</p>

<p>こういうことです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_01.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_02.gif" alt="" /></p>

<ul>
<li>Markdown でドキュメントが書ける(このツール自体はリッチなエディタである)</li>
<li>&#8220;`csharp〜&#8220;` で囲まれたコードブロックは、そのまま iOSシミュレータなどでインタラクティブに、Instant に実行できる。</li>
</ul>


<p>上記の Workbook の実ファイルは、これ↓です。</p>

<ul>
<li><a href="https://gist.github.com/amay077/793b5df4aad0098ffe6d9c12a491ee9a">Xamarin Workbooks を使ってみるテスト。 HowToUseMapKit.workbook で保存して Xamarin Inspector で File->Open してね。</a></li>
</ul>


<p>みてわかる通りまんま Markdown ですね。</p>

<h2>Let&rsquo;s try!</h2>

<p>しかも iOS だけじゃなく、Android, Mac, Windows(WPF) に全対応！
Mac でも Windows でも試せるみたいです。</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/workbooks/">Xamarin Workbooks &ndash; Xamarin</a></li>
</ul>


<p>スタンドアロンなアプリとして実行可能なようなので、サクッと使ってみよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveProperty で2度押し防止(Using使ったやつ)]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/07/disable-duplicate-press-button-using-reactiveproperty/"/>
    <updated>2016-04-07T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/07/disable-duplicate-press-button-using-reactiveproperty</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://tamafuyou.hatenablog.com/entry/2016/04/06/213633">ReactivePropertyで2度押し防止 &ndash; 眠いしお腹すいたし(´・ω・`)</a></li>
</ul>


<p>を拝見しまして、前から気になってたので考えてみました。</p>

<!--more-->


<p>先に別件。</p>

<p>ReactiveCommand は <code>IObservable&lt;T&gt;</code>、そしてロジックの方も <code>IObservable&lt;T&gt;</code> で作ることが多いのですが、その場合「ボタンをクリックした時に、ロジックを実行する」というコードは大抵以下のようになります。</p>

<figure class='code'><figcaption><span>MainViewModel.cs </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ReactiveCommand</span> <span class="n">TestCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">IsBusy</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;(</span><span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">TestCommand</span> <span class="p">=</span> <span class="n">IsBusy</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">x</span><span class="p">).</span><span class="n">ToReactiveCommand</span><span class="p">();</span>
</span><span class='line'>        <span class="n">TestCommand</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// log(&quot;ボタンが押されたよ&quot;);</span>
</span><span class='line'>            <span class="n">IsBusy</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">SomeLogicAsObservable</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">__</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// log(&quot;処理が実行されたよ&quot;);</span>
</span><span class='line'>                <span class="n">IsBusy</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">// ほんとは OnCompleted と OnError でやるべき</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// なんか重い非同期な処理</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;</span> <span class="n">SomeLogicAsObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="n">Unit</span><span class="p">.</span><span class="n">Default</span><span class="p">),</span>
</span><span class='line'>                <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">3</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうコードを書いていていつも「なんかカッコ悪いなー」と思っていました。
そう思う点は、<code>Subscribe</code> を2回書いていること。ボタンがクリックされた事の購読の中でさらにロジックが実行された事を購読している点です。
どちらも Stream なのだから、うまくマージできないかなと思っていました。</p>

<p>これの解決も一緒に考えてみました。</p>

<p>はい、</p>

<figure class='code'><figcaption><span>MainViewModel.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ReactiveCommand</span> <span class="n">TestCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">IsBusy</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;(</span><span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">TestCommand</span> <span class="p">=</span> <span class="n">TestCommand</span> <span class="p">=</span> <span class="n">IsBusy</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">x</span><span class="p">).</span><span class="n">ToReactiveCommand</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TestCommand</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">UsingIsBusy</span><span class="p">(</span><span class="n">SomeLogicAsObservable</span><span class="p">()))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="cm">/* log(&quot;ボタンが押されてロジックが実行されたよ&quot;) ※ */</span> <span class="p">});</span>
</span><span class='line'>            <span class="c1">// ※ロジックがたくさん OnNext を呼んでいたらここもたくさん呼ばれるから注意</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">UsingIsBusy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IObservable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">observable</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Using</span><span class="p">(</span>
</span><span class='line'>            <span class="p">()</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">IsBusy</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Disposable</span><span class="p">.</span><span class="n">Create</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">IsBusy</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">observable</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// なんか重い非同期な処理</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;</span> <span class="n">SomeLogicAsObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="n">Unit</span><span class="p">.</span><span class="n">Default</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">3</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>IsBusy</code> の ON/OFF を <code>Observable.Using</code> に任せるようにしました。これは、第2引数に指定した <code>IObservable&lt;T&gt;</code> が完了または失敗した時にリソースを解放してくれる C# の <code>using 句</code> のようなもので、ここでは第2引数にロジックの <code>IObservable&lt;T&gt;</code> を渡すことで、ロジックが完了したら自動的に <code>IsBusy.Value = false</code> が実行されます。</p>

<p>次に「<code>Subscribe</code>を2回してる問題」は、ボタンがクリックされた<code>IObserbale&lt;T&gt;</code> から <code>SelectMany</code> で繋いであげることで解決しています。</p>

<p>このコードの要注意は、<code>IsBusy.Value = false</code> が実行されるのがUIスレッドとは限らないので、View側でバインドするまでに <code>ObserveOnUIDispatcher</code> などをしてあげないといけないことです（少なくとも Xamarin.Android + ReactiveProperty ではそうでした。WPFだと気にしないのでしょうか？）。</p>

<p>もう少し汎用性を高めて、「<code>IsBusy プロパティを持った ReactiveCommand</code>」のようなものを作ったら便利なのかもしれないです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハムスターを飼い始めました]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/06/started-keep-a-hamster/"/>
    <updated>2016-04-06T22:44:25+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/06/started-keep-a-hamster</id>
    <content type="html"><![CDATA[<p>ハムスターを飼い始めました（子供が）。
２月からかな、初めてです。</p>

<!--more-->


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/started_keep_a_hamster_02.jpg" alt="image02" /></p>

<p>ジャンガリアンです。</p>

<p>ハムスターはストレスに弱い生き物なのであまり構い過ぎるのはよくない、しかし観たい！というわけで、Webカメラを使ってケージの様子を観察することにしました。</p>

<ul>
<li><a href="http://com.nicovideo.jp/community/co2173122">伊藤くんのハムスター中継-ニコニコミュニティ</a></li>
</ul>


<p>にインスパイアされまして。</p>

<h2>配信先</h2>

<p>はじめは家庭内でのみ見られるようにしてたんですが、だんだんと外出先からも観たくなり、オンラインの配信サイトを使うようになりました。</p>

<p>まずは <a href="http://www.ustream.tv/">UStream.tv</a> で配信していたのですが、無料プランでは画質が悪いようで、<a href="https://www.youtube.com/live">YouTube Live</a> に乗り換えました。</p>

<p>以前は一般人にはLive配信を解放してなかったのですね。今では有効な電話番号があれば（SNSで認証できました）だれでも使用できるようです。残念だったのは 050 のIP電話番号では認証できないことですね。</p>

<p>YouTube Live は、(たぶん12時間ごとに)動画を自動アーカイブしてくれるし、その容量に制限はないようだし、Live中も最大4時間前から「おっかけ再生」ができます。</p>

<p>（が、アーカイブは＜長い時は２〜３日＞時間がかかるし、アーカイブされない場合もあるし、おっかけ再生もなぜか２時間前からしかできませんが。。）</p>

<p>ニコニコ生放送は、30分置きに「枠」を撮り直さないといけないようだったので試していません。</p>

<h2>配信機材</h2>

<p>家庭内、UStream を使っていた時は iPad や Surface Pro3 搭載のカメラで配信していました。</p>

<p>しかしこちらもよりよい画質を求めて、またハムスターは夜行性なのである程度の暗所でもキレイに映るように Webカメラを買いました。</p>

<p>これです、</p>

<ul>
<li><a href="http://www.amazon.co.jp/Logicool-%E3%83%AD%E3%82%B8%E3%82%AF%E3%83%BC%E3%83%AB-HD-%E3%82%A6%E3%82%A7%E3%83%96%E3%82%AB%E3%83%A0-c920r/dp/B0158F77Z2">Logicool ロジクール HD プロ ウェブカム c920r: パソコン・周辺機器</a></li>
</ul>


<p>PC は Surface Pro 3 を使っています、こんな感じです。</p>

<p><img src="https://pbs.twimg.com/media/CfB5Q5eUIAAtdMM.jpg" alt="image01" /></p>

<p>Surface Pro 3 をこんな事に使っちゃうなんて、贅沢でしょうか。画質うんぬん言うわりには、通信は無線LANなんですよね（-_&ndash;;）</p>

<h2>ソフトウェア</h2>

<p>YouTube Live では、 <a href="https://obsproject.com/">Open Broadcast Software</a> （通称OBS）を使っています。</p>

<p>はじめはなんか有償アプリの無償機能みたいなの使ってたんですが、やはり画質に限度があるので。</p>

<p>それから配信する映像に「日付と時刻」をオーバーレイさせたかったので、<a href="https://obsproject.com/forum/resources/snaz.96/">Snaz</a> というソフトを使って実現させました。</p>

<h2>こんな感じ</h2>

<p>今のところこんな感じで配信しています。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/started_keep_a_hamster_01.png" alt="image02" /></p>

<p>アドレスはここでは公開しませんが、適当なキーワードで検索すれば見つかるのでしょう。</p>

<h2>これからやりたい事</h2>

<p>前出のとおり、ハムスターは夜行性なので、昼間はエサか水を摂るためにたま（数時間毎）にしか出てきません。それ以外の時間は巣穴で寝ているかくつろいでいます。夜は２時間くらい活発に動いているようです。</p>

<p>ハムスターの巣穴にセンサーを設置して、「巣穴から出てきたらスマホにPush通知を送る」とかやってみたいです。</p>

<p>Rasberry Pi が買ったまま放置されているし、 <a href="https://dev.botframework.com/">Microsoft Bot Framework</a> とかいう気になる技術も発表されました。</p>

<p>センサーでなく画像認識、機械学習・ディープラーニングという分野の勉強の題材としてもよいかもしれません。</p>

<p>ハムスターを飼うのも初めてなら、Live配信をするのも初めてなので、いろいろググりながら試行錯誤しています。こういう時間は楽しいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収された結果]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/"/>
    <updated>2016-04-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/4aa25db9509216cf5bf0">Xamarin が Microsoft に買収されたので、今後を勝手に予想</a> の答え合わせなんですが…</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/xamarin-for-all/">Xamarin for Everyone | Xamarin Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/ms-xamarin">【速報】Xamarin のこれからについて！ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p><strong>Xamarin は無料ですべての Visual Studio に同梱されることになりました！</strong></p>

<p><strong>Mac では Xamarin Studio が無料で使えるようになりました！！</strong> <a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#%E8%BF%BD%E8%A8%98-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0">※注</a></p>

<p>というか、 <strong>Xamarin のコアライブラリがオープンソースになりました！！！</strong></p>

<p>今日も仕事が手につきませんね！</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎◎◎</h2>

<p>期待以上でしたね。
プロダクトとしては無償になります。
すべての機能が制約なしに使えます。
ソースコードが MIT Lisence なオープンソースになります。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → ◎</h2>

<blockquote><p>OSS として公開、のような可能性があるなら嬉しいかも。</p></blockquote>

<p>これ当たりましたね。Xamarin.Mac の人もこれで一安心。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎◎◎</h2>

<p>これも上2つど同様にオープンソースに。
正直しばらくはプロプラエタリでいくかなーと思ってたので、完全に期待以上でした。
UIデザイナーは・・・Evolve？</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ◎</h2>

<p>これも無償化。ここのソースコードはOSSなのかな？ → OSSにはならないようです（もちろん元々OSSであるMonoDevelop以外のXamarin固有のプラグインのこと） &ndash; <a href="https://www.xamarin.com/faq#xpq7">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a>
とりあえずMacでの開発者には嬉しい。</p>

<p>そして、ありがとう、<a href="https://www.xamarin.com/faq#xpq6">さよなら Xamarin Studio for Windows</a></p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ？</h2>

<p>まあ、消える流れですよね。。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎◎</h2>

<p>Visual Studio Team Services に同梱されるとのことです。
<a href="https://www.visualstudio.com/ja-jp/products/visual-studio-team-services-pricing-vs.aspx">その価格</a> を見ると、今までよりグッと使いやすくなりました。</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → ◎◎</h2>

<blockquote><p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。</p></blockquote>

<p>これハズレましたね。</p>

<p><a href="http://hockeyapp.net/features/">HockeyApp</a> というサービスに統合されるとのことです。</p>

<p>HockeyApp って知らなかったのですが、ログ収集・解析の他に、DeployGate のような配布機能も持っているみたいですね。これは嬉しい。</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ？</h2>

<p>Build2016 では予想通り全く触れられませんでした。さて未来は？</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → ？</h3>

<p>Build2016 では Windows上で動く iOS Simulator のデモを行っていました。</p>

<p>Miguel de Icaza曰く</p>

<blockquote><p>&ldquo;Have touch and no need to turn to your Mac&rdquo;</p></blockquote>

<p>だそうですよ。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ？</h3>

<p>これは特に情報ありませんでした。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ？</h3>

<p>Windows の Android エミュレータ上でアプリが動いているところで、コードを変更すると、 <strong>即座にアプリに変更が適用される</strong> という謎のデモを行っていました。</p>

<p>Xamarin（もとい Microsoft ）の中の人曰く、</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これだよこれがインスタントプログラミングだよ!</p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/715566438203809792">2016年3月31日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです。（Android Studio さん聴いてる？）</p>

<p>Keynote Day 2 の動画あったのでデモ見られます→ <a href="https://www.youtube.com/watch?v=WC7ijoFzjEg&amp;feature=youtu.be&amp;t=16m">Microsoft Build 2016 | Keynote Day 2 (HD) &ndash; YouTube</a> （このデモの後ほどなくして &ldquo;making Xamarin available at no extra charge.&rdquo; →大歓声、ですね）</p>

<h1>まとめ</h1>

<p>ということで、総じて言えば、皆さんの期待にすべて応える感じで、Xamarin のパワーを活かして開発者を増やしていきたいという意思が表れていましたね。</p>

<p>本当に想像以上でした。
Indie ライセンス買ったばかりだけど、そのお金返せとは言いません、ありがとう Xamarin！！</p>

<h2>【追記】 to 企業の人、無料になると言ったな、あれは Visual Studio Pro 以上を持ってる人のみだ</h2>

<p>Mac しか使ってない企業が自社のアプリを Xamarin を使って開発・配布する場合、 Xamarin Studio を使うことになります。</p>

<p><a href="https://store.xamarin.com/">Store &ndash; Xamarin</a> の Xamarin Studio にある Small teams をクリックすると <a href="https://www.visualstudio.com/support/legal/mt171547">MICROSOFT VISUAL STUDIO COMMUNITY 2015</a> が表示され、以下のような記述があります。</p>

<blockquote><ol>
<li><p>インストールおよび使用に関する権利。</p></li>
<li><p>組織ライセンス。お客様が組織である場合、お客様のユーザーは以下の条件で本ソフトウェアを使用することができます。</p></li>
<li><p>お客様がエンタープライズである場合、お客様の従業員および契約社員は本ソフトウェアを使用して、お客様のアプリケーションを開発またはテストすることはできません。ただし、上記で許可されているオープンソースおよび教育目的の場合を除きます。「エンタープライズ」とは、合計で (a) 250 台を超えるコンピューターがある、もしくは 250 人を超えるユーザーがいる、 または (b) 年間収益が 100 万米ドル (もしくは他の通貨での相当額) を超える、組織およびその関連会社のことです。「関連会社」とは、組織を (過半数所有により) 支配している法人、組織が支配している法人、または組織と共通の支配下にある法人を意味します。</p></li>
</ol>
</blockquote>

<p><del>組織（企業）での利用で、250人を超えるユーザー(=配布スマホ台数ということになるでしょう)が居る場合は、使用できない、と読み取れます。</del>
<a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#comment-2297416c6d83b3593425">コメント</a>で教えていただきました。日本語の <a href="https://www.microsoft.com/ja-jp/dev/products/community.aspx">Visual Studio Community のページ</a> には、ユーザー数に関する記述はないので、この点（配布スマホ台数）に関しては気にしなくてもよさそうです。</p>

<p>また、 Xamarin の FAQ &ndash; <a href="https://www.xamarin.com/faq#xpq8">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a> には、以下の記述があります。</p>

<blockquote><p>Xamarin Studio will follow the Visual Studio pricing rules. There is Xamarin Studio Community Edition available for download on the Mac. You’ll need to be a Visual Studio Enterprise subscriber to unlock Visual Studio Enterprise features in Xamarin Studio.</p></blockquote>

<p>Xamarin Studio は、Visual Studio の価格体系に従う、とのことなので、ライセンス条項も同じだと解釈すれば、 Visual Studio Profesional 以上のライセンスがあれば、 Mac + Xamarin Studio で企業のアプリを開発・配布して問題ないと言えます。
<del>Macオンリー企業には、ツールとしてでなくライセンスとしての Visual Studio Pro 以上が必要ということなるのでしょうか。</del></p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/04/21/123000">【お知らせ】Xamarin ライセンスの移管について &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>によると、 企業向け開発する場合、 Windows ＋ Visual Studio は Visual Studio Pro単品購入で可能、Mac + Xamarin Studio には Visual Studio Pro <strong>MSDN Subscription</strong> が必要とのことです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava でズンドコキヨシ(window or buffer 使用)]]></title>
    <link href="http://blog.amay077.net/blog/2016/03/13/zundoko-with-rxjava/"/>
    <updated>2016-03-13T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/03/13/zundoko-with-rxjava</id>
    <content type="html"><![CDATA[<p>調子に乗って RxJava でもやってみた。</p>

<!--more-->




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから<br>「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた</p>&mdash; てくも (@kumiromilk) <a href="https://twitter.com/kumiromilk/status/707437861881180160">2016年3月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><a href="http://qiita.com/amay077/items/85dfc4bd194f57c52c57">C# と Reactive Extensions でズンドコキヨシ</a></li>
</ul>


<p>がんばって <a href="http://reactivex.io/documentation/operators/window.html"><code>Observable.window</code></a> を使ってみた。</p>

<figure class='code'><figcaption><span>zondoko.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// なんちゃってラムダ使用。あと Android。</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doZondoko</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">PATTERN</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;どこ&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">K</span> <span class="o">=</span> <span class="s">&quot;キ・ヨ・シ！&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span> <span class="c1">// ※ の Observable&lt;List&lt;String&gt;&gt; を直列に連結</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">500</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">_</span> <span class="o">-&gt;</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="s">&quot;ずん&quot;</span> <span class="o">:</span> <span class="s">&quot;どこ&quot;</span><span class="o">)</span> <span class="c1">// ランダムに ずん or どこ</span>
</span><span class='line'>            <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">PATTERN</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="mi">1</span><span class="o">)</span> <span class="c1">// 要素数5のWindowを1ずつズラしてく</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">window</span> <span class="o">-&gt;</span> <span class="n">window</span><span class="o">.</span><span class="na">toList</span><span class="o">()))</span> <span class="c1">// Observable&lt;Observable&lt;String&gt;&gt; を Observable&lt;List&lt;String&gt;&gt; に変換 ※</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">window</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">sequenceEqual</span><span class="o">(</span><span class="n">window</span><span class="o">,</span> <span class="n">PATTERN</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// パターンと一致していたら…</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">says</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>                <span class="n">says</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">window</span><span class="o">);</span>
</span><span class='line'>                <span class="n">says</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">K</span><span class="o">);</span>                      <span class="c1">// キ・ヨ・シ！を追加</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">says</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">Collections</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">emptyList</span><span class="o">()));</span> <span class="c1">// 終了判定用の空リスト</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">window</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">})</span>
</span><span class='line'>        <span class="o">.</span><span class="na">takeWhile</span><span class="o">(</span><span class="n">says</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">says</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>  <span class="c1">// 空リストになるまで繰り返す</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">says</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">dump</span><span class="o">(</span><span class="n">says</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** リストとリストの要素一致 */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">sequenceEqual</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">listA</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">listB</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterA</span> <span class="o">=</span> <span class="n">listA</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterB</span> <span class="o">=</span> <span class="n">listB</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">iterA</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">iterB</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">iterA</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">!=</span> <span class="n">iterB</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(!</span><span class="n">iterA</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">iterB</span><span class="o">.</span><span class="na">hasNext</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** リスト内容をダンプ */</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">dump</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">StringBuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">toString</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">b</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;, &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>どこ, ずん, どこ, どこ, ずん<br/>
ずん, どこ, どこ, ずん, どこ<br/>
どこ, どこ, ずん, どこ, ずん<br/>
どこ, ずん, どこ, ずん, どこ<br/>
ずん, どこ, ずん, どこ, どこ<br/>
どこ, ずん, どこ, どこ, ずん<br/>
ずん, どこ, どこ, ずん, ずん<br/>
どこ, どこ, ずん, ずん, ずん<br/>
どこ, ずん, ずん, ずん, ずん<br/>
ずん, ずん, ずん, ずん, どこ, キ・ヨ・シ！</p></blockquote>

<p>「window(5, 1) &ndash;> toList &ndash;> concat してるならそれは <code>buffer(5, 1)</code> やんけ」というのを <a href="http://qiita.com/do6gop/items/c4941f6fb2bdc1c0c0f1">こちら</a> で知って、 <code>buffer</code> 版も書いてみた。</p>

<figure class='code'><figcaption><span>Zondoko_buffer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doZondoko</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">PATTERN</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;ずん&quot;</span><span class="o">,</span> <span class="s">&quot;どこ&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">K</span> <span class="o">=</span> <span class="s">&quot;キ・ヨ・シ！&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">500</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">_</span> <span class="o">-&gt;</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="s">&quot;ずん&quot;</span> <span class="o">:</span> <span class="s">&quot;どこ&quot;</span><span class="o">)</span> <span class="c1">// ランダムに ずん or どこ</span>
</span><span class='line'>        <span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">PATTERN</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="mi">1</span><span class="o">)</span> <span class="c1">// 要素数5のBufferを1ずつズラしてく</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">buf</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">sequenceEqual</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="n">PATTERN</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// パターンと一致していたら…</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">says</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>                <span class="n">says</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>                <span class="n">says</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">K</span><span class="o">);</span>                      <span class="c1">// キ・ヨ・シ！を追加</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">says</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">Collections</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">emptyList</span><span class="o">()));</span> <span class="c1">// 終了判定用の空リスト</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">})</span>
</span><span class='line'>        <span class="o">.</span><span class="na">takeWhile</span><span class="o">(</span><span class="n">says</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">says</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>  <span class="c1">// 空リストになるまで繰り返す</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">says</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">dump</span><span class="o">(</span><span class="n">says</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84">さまざまなズンドコキヨシ</a></li>
<li><a href="http://qiita.com/shunsugai@github/items/971a15461de29563bf90">ズンドコキヨシまとめ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# と Reactive Extensions でズンドコキヨシ]]></title>
    <link href="http://blog.amay077.net/blog/2016/03/12/zundoko-with-reactive-extensions/"/>
    <updated>2016-03-12T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/03/12/zundoko-with-reactive-extensions</id>
    <content type="html"><![CDATA[<p>流行り？に乗っていくスタイル。</p>

<!--more-->




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから<br>「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた</p>&mdash; てくも (@kumiromilk) <a href="https://twitter.com/kumiromilk/status/707437861881180160">2016年3月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<figure class='code'><figcaption><span>Zondoko.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">random</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">K</span> <span class="p">=</span> <span class="s">&quot;キ・ヨ・シ！&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">PATTERN</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;ずん&quot;</span><span class="p">,</span> <span class="s">&quot;ずん&quot;</span><span class="p">,</span> <span class="s">&quot;ずん&quot;</span><span class="p">,</span> <span class="s">&quot;ずん&quot;</span><span class="p">,</span> <span class="s">&quot;どこ&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromMilliseconds</span><span class="p">(</span><span class="m">100</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">()</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">?</span> <span class="s">&quot;ずん&quot;</span> <span class="p">:</span> <span class="s">&quot;どこ&quot;</span><span class="p">)</span> <span class="c1">// ランダムに ずんorどこ</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Scan</span><span class="p">(</span><span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(),</span> <span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="c1">// 最大５つのQueueに貯める</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="n">PATTERN</span><span class="p">.</span><span class="n">Count</span><span class="p">)</span> <span class="p">{</span> <span class="n">queue</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="m">0</span><span class="p">);}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">queue</span> <span class="p">=&gt;</span> <span class="n">queue</span><span class="p">.</span><span class="n">SequenceEqual</span><span class="p">(</span><span class="n">PATTERN</span><span class="p">)</span> <span class="p">?</span> <span class="c1">// パターンと一致したら…</span>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">Concat</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">Last</span><span class="p">()),</span>   <span class="c1">// Queueの最後</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="n">K</span><span class="p">),</span>              <span class="c1">// + キ・ヨ・シ！</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">))</span> <span class="p">:</span> <span class="c1">// + 空文字(終了判定用)</span>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">Last</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TakeWhile</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>  <span class="c1">// 空文字になるまで繰り返す</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">x</span><span class="p">),</span>
</span><span class='line'>        <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;complete!!&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>どこ<br/>
どこ<br/>
ずん<br/>
ずん<br/>
ずん<br/>
どこ<br/>
どこ<br/>
どこ<br/>
ずん<br/>
どこ<br/>
ずん<br/>
ずん<br/>
ずん<br/>
ずん<br/>
どこ<br/>
キ・ヨ・シ！<br/>
complete!!</p></blockquote>

<p><code>SelectMany</code> に頼ってるのが気に入らない。。。</p>

<ul>
<li>RxJava 版はこちら &ndash; <a href="http://qiita.com/amay077/items/2c8575753e37fcc94f87">RxJava でズンドコキヨシ(window 使用)</a></li>
<li><a href="http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84">さまざまなズンドコキヨシ</a></li>
<li><a href="http://qiita.com/shunsugai@github/items/971a15461de29563bf90">ズンドコキヨシまとめ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava の Observable を Android DataBinding の ObservableField に変換する]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/27/convert-rxjava-observable-to-android-databinding-observablefield/"/>
    <updated>2016-02-27T01:19:03+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/27/convert-rxjava-observable-to-android-databinding-observablefield</id>
    <content type="html"><![CDATA[<p>　Android DataBinding で View とバインドできるデータクラスは <code>BaseObservable</code> から派生したクラスか、<code>ObservableField&lt;T&gt;</code> 型のフィールドのみです。</p>

<!--more-->


<p>　RxJavaベースの API やモデルクラスを使用している場合、更新通知は <code>rx.Observable&lt;T&gt;</code> を <code>subscribe</code> することで受けられるわけですが、それを View にバインドするには、<code>ObservableField&lt;T&gt;</code> に変換してあげなければなりません。</p>

<p>　結果、下のような Utility 関数を作ることになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * rx.Observable から ObservableField への変換をおこなう</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ObservableField</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">toObservableField</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">source</span><span class="o">,</span> <span class="n">CompositeSubscription</span> <span class="n">subscriptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ObservableField</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">field</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObservableField</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subscriptions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>            <span class="c1">// TODO onError も拾ったほうがいい</span>
</span><span class='line'>            <span class="n">source</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Action1</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">T</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">})</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">field</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　しかしこの方法はスマートでないと感じます。
　どうせ <code>ObservableField</code> も同じような概念のオブジェクトで、View が購読開始-終了をしているにすぎないはずなので、同じタイミングで、<code>rx.Observable&lt;T&gt;</code> の subscribe/unsubscribe をさせてあげれば良いはずです。</p>

<p>　ということで作ってみたのがこの <code>rx.Observable&lt;T&gt;</code> を <code>ObservableField&lt;T&gt;</code> に変換するクラス。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.databinding.ObservableField</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.Observable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.Subscription</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.functions.Action1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RxField</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ObservableField</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Subscription</span><span class="o">&gt;</span> <span class="n">sucscriptionMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Subscription</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RxField</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">observable</span> <span class="o">=</span> <span class="n">observable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RxField</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span> <span class="n">T</span> <span class="n">defaultValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">defaultValue</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">observable</span> <span class="o">=</span> <span class="n">observable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">addOnPropertyChangedCallback</span><span class="o">(</span><span class="n">OnPropertyChangedCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">addOnPropertyChangedCallback</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sucscriptionMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">callback</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(),</span> <span class="n">observable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Action1</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">set</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">removeOnPropertyChangedCallback</span><span class="o">(</span><span class="n">OnPropertyChangedCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sucscriptionMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">callback</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Subscription</span> <span class="n">subscription</span> <span class="o">=</span> <span class="n">sucscriptionMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">callback</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>            <span class="n">subscription</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'>            <span class="n">sucscriptionMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">callback</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">removeOnPropertyChangedCallback</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// TODO should be readonly, because cannot set value to observable</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">tObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">observable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　<code>ObservableField</code> は、View から購読されると <code>addOnPropertyChangedCallback</code> が呼ばれ、購読解除されると <code>removeOnPropertyChangedCallback</code> が呼ばれます(るはずです)。</p>

<p>　なので、このタイミングで <code>rx.Observable&lt;T&gt;</code> を <code>subscribe()</code>、<code>subscription.unsubscribe()</code> してあげます。購読者(View)が複数になる可能性があるので、 subscription は Map で管理しています。</p>

<p>　で、<code>rx.Observable&lt;T&gt;</code> の値が変わった時(<code>onNext()</code>)に、<code>ObservableField</code> の <code>set(value)</code> を呼んであげれば、<code>ObservableField</code> 側の変更通知(<code>notifyChanged</code>)が飛んで、View が更新されます。</p>

<p>　使い方はこんな感じで → <a href="https://github.com/amay077/StopWatchSample/tree/qiita_20160226/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java#L51-L67">StopWatchSample/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java</a>
　</p>

<h2>双方向には対応してません</h2>

<p>　この実装は、<code>rx.Observable</code> の更新を <code>ObservableField</code> 通知するだけです。逆方向（<code>ObservableField</code> の変更を <code>rx.Observable</code> に適用する）は対応していません。そもそも <code>rx.Observable</code> は値を設定できないので、それをしたければ <code>rx.Observable</code> の代わりに <code>rx.Subject</code> が必要です。</p>

<p><a href="http://qiita.com/amay077/items/b5c788bb3ee9ff84d9b4">Android Data Binding + MVVMパターンのサンプルを書いてみた</a> で作成したアプリに、これを適用してみたので、ご参考まで。</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/tree/qiita_20160226/StopWatchAppAndroid">StopWatchSample/StopWatchAppAndroid &ndash; github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収されたので、今後を勝手に予想]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft/"/>
    <updated>2016-02-26T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft</id>
    <content type="html"><![CDATA[<p>いやー起きたら驚きました。いつも午前中は仕事があまり捗らないのですが(ぉぃ、今日はさらに手につきませんでした。</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/a-xamarin-microsoft-future/">A Xamarin + Microsoft Future | Xamarin Blog</a></li>
<li><a href="http://blogs.microsoft.com/blog/2016/02/24/microsoft-to-acquire-xamarin-and-empower-more-developers-to-build-apps-on-any-device/">Microsoft to acquire Xamarin and empower more developers to build apps on any device &ndash; The Official Microsoft Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/02/25/084553">【速報】Xamarin が Microsoft に買収されました &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>続報は、 <a href="http://build.microsoft.com/">3/30-4/1 の Build 2016</a> と <a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> を待てとのことですが、企業としての Xamarin は、様々な製品やツールを展開していますので、MS買収によって、それらが今後どうなるのか、勝手に予想してみます。（個人の主観と希望を多分に含みます。 ○とか△は、今後の継続性(MSから見たら買収効果)を示してます）</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎</h2>

<p>　Android SDK や iOS SDK(CocoaTouch) を C# から呼び出す、現在主力のプロダクト。
　
　Microsoft とのパートナーシップにより、すでに Visual Studio に半ば組み込まれていますが、それがさらに推し進められて、完全統合（追加インストールなし）されると思われます。</p>

<p>　完全統合されたからと言って、 iOSアプリをデバッグ、デプロイするには Mac が必要なわけで、厳密には「Visual Studio だけで開発できる」ことにはならないと思います。</p>

<p>　Xamarin という「ブランド」は、いつか表示されなくなってしまうのかも知れません。。。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → △</h2>

<p>　C# で Mac のデスクトップアプリが開発できるというプロダクト。
　現在も、お世辞にも「存在感がある」とは言えないプロダクトで、買収によって今後が不安なもののひとつ。</p>

<p>　Microsoft も、ここに投資するメリットはあまり感じてないのではないでしょうか？
　OSS として公開、のような可能性があるなら嬉しいかも。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎</h2>

<p>　Xamarin.Android/iOS とは異なり、「単一のコードで複数のプラットフォーム向けのアプリを開発できる」プロダクト。</p>

<p>　画面は XAML(と言っても WPF とは異なる)で記述し、Android/iOS/Windows(UWP) の <code>Activity/ViewController/Window</code> は、<code>Page</code> というクラスに抽象化されます。</p>

<p>　登場以来 Xamarin が最も注力してきたプロダクトで、Microsoft のマルチデバイス戦略にもフィットします(説明しやすいし、デモ受けもしやすいしね)。</p>

<p>　長らくUIエディタがない状態が続いていますが、買収によりいよいよ？ <a href="https://build.microsoft.com/">Build 2016</a> と <a href="https://evolve.xamarin.com/">Evolve 2016</a> が楽しみです。</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ○</h2>

<p>　<a href="http://www.monodevelop.com/">MonoDevelop</a> という OSS の統合開発環境に Xamarin プロダクト向けの Addin を加えたもの。</p>

<p>　Windows では、あえてこれを使用する必要は無いに等しいですが、Mac では、重要なIDEになります。
　実際、 「Android と iOS アプリだけ」を開発する場合は、Mac の方が何かと都合が良いわけで、 <strong>Mac + Xamarin Studio がベストチョイス</strong> なわけです。</p>

<p>　<a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">Roslyn 対応</a> も進んでいるし、ほとんどは OSS だし、非Windows開発者向けのIDEを引っ込めるメリットは Microsoft にはないでしょう。（Windows版の Xamarin Studio は微妙かも）</p>

<p>　(遠い)将来的には、<a href="https://www.visualstudio.com/ja-jp/products/code-vs.aspx">Visual Studio Code</a>からの流れで、 Visual Studio のようなものが Mac に登場すると良いなあ、と思います。</p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ×</h2>

<p>　Xamarin で使えるライブラリを有償/無償で公開できるストアなんですが、Xamarin が <a href="http://www.atmarkit.co.jp/fdotnet/chushin/nuget_01/nuget_01_01.html">nuget</a> に対応して以来、徐々に影が薄くなり、同じライブラリでも nuget の方が新しい、なんてこともザラになってきました。</p>

<p>　「ライブラリを販売できる」というエコシステムも機能している感じがしないので、徐々になくなっていくのではないでしょうか（誰か困る人いるんだろうか？）。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎</h2>

<p>　クラウド上に実際のAndroid/iOSデバイスが用意されており、それを使用してテストが行える「デバイスファーム」としてのサービス、それから、<a href="https://developer.xamarin.com/guides/testcloud/calabash/introduction-to-calabash/">Carabash</a> という自動テスティングフレームワークを指します。</p>

<p>　元々は <a href="http://techcrunch.com/2013/04/16/xamarin-launches-test-cloud-automated-mobile-ui-testing-platform-acquires-mobile-test-company-lesspainful/">LessPainful という企業が提供していたサービスを Xamarin が買収した</a> したものです。</p>

<p>　<a href="https://aws.amazon.com/jp/device-farm/">Amazon</a> や <a href="https://developers.google.com/cloud-test-lab/">Google</a> もデバイスファームをサービスしているのに対し、 Azure はまだないようなので、これは Microsoft にとってメリット大だと思います。</p>

<p>　お値段高めで知られる同サービスなので、今後の値付けが気になります。
　</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → △</h2>

<p>　<a href="https://try.crashlytics.com/">Crashlytics</a> のようなクラッシュログ収集・解析サービスです。
　なんだか、 Microsoft には <a href="https://azure.microsoft.com/ja-jp/services/application-insights/">Visual Studio Application Insights</a> というサービスがプレビュー版で出ているようで、丸かぶりですね。</p>

<p>　独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。（実戦投入してるので、ちょっとどうしようかな…）</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ×</h2>

<p>　Java で iOS アプリが開発できる(CocoaTouch がよびだせる)という、まるで Xamarin のような製品だなあと思っていたら、実際に <a href="https://xamarin.com/pr/xamarin-acquires-robovm">Xamarin が買収してしまった</a> プロダクト。</p>

<p>　買収以来特に動きもなく Xamarin の製品ラインナップに載ることもなく「？」な状態が続いていました。</p>

<p>　そんな感じで、さらに Microsoft が Java を推すか？…可能性は低いと思います。</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → △</h3>

<p>　Xamarin 社が提供する高速Androidエミュレータ。</p>

<p>　Microsoft は <a href="https://www.visualstudio.com/ja-jp/features/msft-android-emulator-vs.aspx">Visual Studio Emulator for Android</a> を持っていますからこれも丸かぶり。しかも VSエミュの方が多機能じゃないかな。</p>

<p> 　唯一、Mac向けには残すかも知れませんね。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ○</h3>

<p>　Xcode の Instruments みたいなのを作っちゃいました、というもの(今は Androidアプリのみ対応)。</p>

<p>　既に Visual Studio とも連携してるみたいだし、これは継続進化でしょう。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ○</h3>

<p>　Android SDK の <a href="http://developer.android.com/intl/ja/tools/testing-support-library/index.html">Testing Support Library</a> に含まれる <a href="https://www.youtube.com/watch?v=uA54T6R8nhs">UIAutomator Viewer</a> のようなもの。これも Visual Studio の機能とは競合しないと思うので、継続されるでしょう。</p>

<h2>価格</h2>

<p>　みなさんが一番期待しているのは価格でしょう。今は BUSINESS EDITION(Android/iOS) で<a href="https://store.xamarin.com/">年間20万円超</a>（個人向けなら月約5000円から）。</p>

<p>　Microsoft もここの売上をアテにしてるとは到底思えないので、恐らく何らかの改善があるのではないかと思います。
　無難なところでは 「MSDN Subscription に含まれる」でしょうか。</p>

<p>　完全無料化されて、 Visual Studio Community でも使用可能、になるととても嬉しいですね。</p>

<h1>まとめ</h1>

<p>　2年前の投稿、<a href="http://qiita.com/amay077/items/2e86b44e5f274a34b2e9">マカーの人が Xamarin について勘違いしていそうな５つのこと</a> で、以下のように書きました。</p>

<blockquote><p>私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。(中略) Evolve2014 には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。</p></blockquote>

<p>　「中立な立場の方が良いのでは？」という個人の意見は変わっていません、今度の Evolve にも <a href="https://blog.xamarin.com/join-apple-co-founder-steve-wozniak-at-xamarin-evolve-2016/">Apple の Steve Wozniak が参加する</a> と話題になっているのですが、さすが Microsoft のイベントには来られないよなー、と思います。</p>

<p>　とはいえ、「いずれ・・・」と思っていたのも事実で、「ついにXデーが来たかー」、という感想です。
　マイクロソフトももはやガチガチのプロプライエタリというよりはかなりオープンな企業になっていますし、それには Xamarin（というか Mono）の活動も少なからず影響を与えていたと思います（<a href="https://msdn.microsoft.com/ja-jp/library/dn878908(v=vs.110">.NETがオープンソース化される</a>.aspx)とは、数年前誰が予想していたでしょうか）。
　上でまとめて来たように、マイクロソフトにとってメリットの多い買収なので、少なくとも飼い殺しのような事にはならないでしょう。</p>

<p>　個人的にも、「Xamarin が加わった新しい Microsoft」に期待して、Xamarin.Android を始めとした Xamarin 製品群を使い続けますし、Qiita を始め Tips の投稿もしていくつもりです。
　
(おまけ)</p>

<p>今回の買収劇のオチは、</p>

<p><strong>「MSを助ける製品の販売代理店として頑張って活動していたら、その製品がMSに買収されてなくなっちゃった」</strong></p>

<p>という<a href="https://twitter.com/ytabuchi/status/702634391957217280">某さん</a>でしょうかw
　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docomo から MNP で IIJ mio に移行した]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/24/good-bye-docomo-and-hello-iij/"/>
    <updated>2016-02-24T00:40:46+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/24/good-bye-docomo-and-hello-iij</id>
    <content type="html"><![CDATA[<p>　今月、スマートフォンを docomo から解約し、MNP で IIJ mio（BIC SIM） に移行した。</p>

<!--more-->


<p>　docomo の端末は、2年前のお正月に EDION で、当時新機種だった Xperia Z1f の一括0円セールをやっていたので飛びついたもの。それまでは au を使っていたけど、月々のコストが高いので脱庭を考えていた。その時 <a href="http://blog.amay077.net/blog/2013/08/28/au-vs-ipphone-with-mvno/">MVNO に移行しようか考えたこともあった</a> けど、当時は au 回線のMVNOに選択肢はなかったので、docomo を2年間踏み台にして、MVNO にしようと思っていた(SOFTBANK はすでに眼中になかった)。今回それを実行したことになる。</p>

<p>　docomo の2年間は、Xperia Z1f が一括0円で入手できて、その月々サポートが毎月の料金を相殺してくれたので、月4,000円未満で運用できていた。私は2台持ちとかしないので、この金額に抑えられたのは本当にラッキーだった。</p>

<p>　そのまま docomo で機種変という道もあったけど、月々サポートは終了するわ、通話定額の高額プランに変更しないといけないわで、予定通り2年間でさよならした。</p>

<p>　MNP する直前の数ヶ月で、ちょっとした気づきがあったので、書いておこうと思う。</p>

<h2>キャリアの端末補償サービスを利用したら Xperia Z1f が Xperia Z3 compact になった！</h2>

<p>　docomo の <a href="https://www.nttdocomo.co.jp/support/trouble/delivery/hoshyo_02/index.html">ケータイ補償サービス</a> というのに加入していると、月々500円(2年総額12,000円)で、端末故障時には5,000円(今は7,500円らしい)で、リフレッシュ品とやらに交換してくれる。</p>

<p>　この「故障時」というのは相当ゆるいらしく、私も Z1f の電池持ちが悪くなってきたという理由で利用したが、何の問題もなく交換できた。</p>

<p>　ここで大きなサプライズがあって、オンラインで交換申請の手続きを進めていくと、 <strong>Xparia Z1f の交換用端末がなく、代替端末を選択してください</strong> とのこと。「Galaxy とかだったら嫌だなー」と思いながら代替機一覧を見ると何とその中に <strong>Xperia Z3 compact</strong> があった！もう完全にそれ一択。色は選べなかったけど問題ではない。Xperia Z3 compact は現在でも中古市場で 40,000〜50,000円 する優良端末。これがケータイ補償サービスのおかげで 18,000円 で機種変できたということになる。</p>

<p>　もともとは、Z1f をリフレッシュ品に交換して、MVNO移行後も使い続けるつもりだったが、いかんせん非力感は否めないので、いつか端末を替えなければと思っていたが、Xperia Z3 compact ならあと2年戦えそうだ。</p>

<p>　というわけで MVNO 利用時の最大の問題である端末の入手コストを、大幅に減らすことができた。</p>

<p>　「交換機がなくて上位機種に代替」というケースは稀だと思うが、そうでなくても前述の通り、ケータイ補償サービスの利用審査? はゆるいっぽいので、利用しないと損なのではないかと思う。</p>

<h2>契約更新月が実質25か月目だった罠</h2>

<p>　docomo の契約はいわゆる「2年縛り」。契約日が1月3日だったので、2年後の1月4日だったらMNP可能かと思ったら違った。</p>

<p><a href="https://www.nttdocomo.co.jp/charge/data_xi/data_plan_ninen/notice/">docomo のサイト</a> より引用</p>

<blockquote><p>契約期間は2年間（24か月）とし、 <strong>お申込み当日から翌月末日</strong> まで（ただし、お申込みが1日の場合は、当月末日まで）を1か月目とします。</p></blockquote>

<p>　「お申込み当日から翌月末日を1か月目とします」というのがクセもので、1月3日の契約の場合、2月が1ヶ月目になる。そこから24ヶ月、2年後の1月末日が契約最終日となり、2月が更新可能月となる。1月3日に契約した身としてはほとんど <strong>「2年縛り＝25ヶ月縛り」</strong> だった。</p>

<p>　しかも、月々サポートは上記のようなことはなく、契約日の月を1ヶ月目として処理されていく。なので、 <strong>「25ヶ月縛りの最終月は月々サポートが効かない(終了している) ので、それまでより高い利用料を請求される」</strong> ことになる。なんか損した気分だった。</p>

<h2>IIJ mio （というか BIC SIM）を選んだ理由</h2>

<p>　最近は MVNO でググっても、アフィ目的の比較サイトばかりで、有用な情報がなかなか得られなくなってしまった感がある。</p>

<p>　IIJ を選んだ強い理由はない。 <a href="http://k-tai.impress.co.jp/cda/article/keyword/36137.html">MVNE</a> だから、という点と、 docomo WiFi をそれなりに利用していて、それに変わる公衆無線LANサービスが使いたかったから。<a href="http://www.biccamera.com/bc/c/service/bicsim/onsei.jsp">BIC SIM</a> は <a href="http://wi2.co.jp/jp/300/">Wi2 300</a> の利用権が特典だったのでこれにした。</p>

<p>　プランも、おそらく大多数の人が利用しているであろう「音声通話付きSIM 3GB 1,600円/月」。 docomo でも月々のデータ使用量は2GB未満だった（何せ在宅勤務で家から出ないので）。</p>

<h2>MNP 後に行ったこと</h2>

<h3>テザリングの有効化</h3>

<p>　悪しき docomo の亡霊さんは、 すでに知られている方法でお祓いした。一応、 Android アプリ開発者なので。</p>

<ul>
<li><a href="http://app-roid.com/blog-entry-1498.html">ドコモ版XPERIA Z3（SO-01G）でMVNOのIIJmioでテザリングを有効化させる手順 Approid大好き</a></li>
</ul>


<h3>docomo プリインアプリを無効化</h3>

<p>　電話帳やら、メールやら、オートGPSとか。root取らないと消せないので「無効」状態に。なんか電池持ちが良くなった気がする？</p>

<h3>みおぽん アプリ</h3>

<p>　高速通信を ON/OFF できるのは良い。試しに OFF 状態で Google Play Music をストリーミング再生してみたが、切れることなく再生できた。常用OFFでもそんなに困らないのではないか説。</p>

<h2>MVNO向け端末補償サービスを検討中</h2>

<p>　前出のとおり、うまく Xperia Z3 compact を入手できたわけだが、キャリアの補償サービスのようなものは MVNO では、MVNOが販売する端末を買わない限り期待できない。</p>

<p>　中古のスマホでも補償してくれるサービスがいくつかあるので、それらを検討しているところ。私は割と安心を求めるタイプらしい。検討中の中で最有力なのがこれ:</p>

<ul>
<li><a href="http://www.next-bb.com/terminal/">NEXT BB 端末補償サービス</a></li>
</ul>


<p>　月々600円と他サービスより高いが、「盗難」「紛失」も補償対象なのがポイント。キャリアの補償サービスに近い内容なのはこれくらいしかない。</p>

<p>　docomo 月々4000円が、 月々1600円 になったことを考えれば、600円足しても・・・と思うが、もうしばらく情報収集してみるつもり。</p>

<p>　とりあえず４年来の希望であった MVNO への移行が無事に出来てホッ。</p>

<p>　<a href="http://tozaiuser.hatenablog.jp/entry/2016/01/10/154245">総務省の介入で逆に高くなっちゃった</a> ３キャリアに戻ることは、たぶんないのだろうなあ、未来の状況次第だけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2016アプリを Xamarin.Android に移植した話]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/"/>
    <updated>2016-02-24T00:19:01+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android</id>
    <content type="html"><![CDATA[<p>　DroidKaigi2016 の開催前、<a href="https://github.com/konifar/droidkaigi2016">公式アプリが有志によって開発中</a> とのツイート(だったかな？)を見て、ふとこれを「Xamarin.Android に移植してみよう」と思い、夜な夜なぼちぼちと始めました。</p>

<!--more-->


<p>　後付けですが、移植するにあたり調査したかったのは主に、</p>

<ul>
<li>Android-Java の OSSライブラリがどのくらい Xamarin.Android でも利用可能か？</li>
<li>(勉強をサボっていた)Xamarin.Android での Material Design の適用方法</li>
</ul>


<p>です。</p>

<h2>Xamarin.Android について(知らない人向け)</h2>

<p>　Xamarin.Android は、Android API(Javaクラスライブラリを含む)の薄いラッパーで、クラス・メソッド名などは殆どそのままに、言語が Java から C# になったようなものです。
　なので、 <code>activity_main.xml</code> などのリソースファイルもほぼそのまま転用可能です。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/3232064cc8880c809aee">Xamarin.Android で作った HelloWorld のソースを眺めてみる</a></li>
</ul>


<p>　尚、 Xamarin.Forms というワンソースで複数プラットフォームで動作するアプリを開発できるフレームワークとは別のものです。</p>

<h2>Android プロジェクトの Xamarin.Android への移植方法</h2>

<p>すごく大雑把に、以下のような手順で移植します。</p>

<ol>
<li>Androidプロジェクト(以下 Java と表記)の <code>/res</code> 以下を Xamarin.Androidプロジェクト(以下 Xamarin)配下にコピー</li>
<li>Java のソースコード群を、 package構成を崩さずに Xamarin.Android で再構成（結局のところコードの書き直し）</li>
<li>Java側で使われているOSSライブラリと同等のものを、nuget・Xamarin Components で探してXamarin側に追加（なければ <code>.jar</code> ファイルを入手して Xamarin で使えるように Binding Library を作成）</li>
<li>あとはひたすら try and error and error and error&hellip;</li>
</ol>


<h2>Android Data Binding を、Xamarin ではどうしたか？</h2>

<p>　DroidKaigi2016 のアプリには <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">DataBinding</a> が使われています。ただ、 <code>BaseObservable</code> や <code>ObservalbeField</code> によるガッツリとした OneWay/TwoWay のデータバインディングではなく、POJOなデータクラスを使う <a href="https://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingmode(v=vs.110">OneTime</a>.aspx) なものしかなかったので、Xamarin への移植に際しては <a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> や、 <a href="https://github.com/MvvmCross/MvvmCross">MVVMCross</a> などのデータバインディング機能に頼る必要はありませんでした。</p>

<p>　一方、Android Data Binding のもう一つの(副次的な)機能である View binding(<code>findViewById</code> が要らなくなるアレ)の対応は大変でした。</p>

<p>　まず、<code>activity_main.xml</code> などのデータバインド範囲を括る <code>&lt;layout&gt;&lt;/layout&gt;</code> ですが、このタグは Xamarin Studio は解釈してくれないのでエラーになります。このタグはもれなくコメントアウトが必要でした。また、カスタムデータバインディングが使われている箇所も同じくです。
　なので当然、Android Studio(gradle)が生成する <code>DataBinding</code> クラスも使用できません。
　仕方ない(というか始めからわかっていましたが) <code>ActivityMainBinding</code> などに相当するクラスを必要を満たす範囲で自作しました。レガシーな <code>FindViewByID()</code> を使って。</p>

<p>　Windowsアプリ開発の世界では、「DSL で記述された画面レイアウトからUI要素変数を自動生成する」ことは、IDE である Visual Sutdio が普通に行ってくれます。Xamarinアプリ開発のIDEである Xamarin Studio も、iOS の <code>.storyboard</code> ファイルを読んで、自動的に <code>HogeViewController.designer.cs</code> にUI要素変数を生成してくれます。
　Xamarin.Android でも <code>MainActivity.designer.cs</code> とか生成してくれてもいいのになー、とは頭の片隅で思い続けています。(自作Plug-inとかでなんとかできるのかな？)</p>

<h2>DroidKaigi2016 で使われているJavaライブラリを、Xamarinではどうしたか？</h2>

<p>　DroidKaigi2016アプリでは非常にたくさんのOSSライブラリが<a href="https://github.com/konifar/droidkaigi2016#libraries">使用されており</a>、それを眺めるだけでも非常に勉強になります。このソースを読んで初めて知ったものが何個もありました。
　アプリを Xamarin.Android へ移植するにあたり、これらにどのように対応したかを記します。</p>

<h3>Android Support Libraries</h3>

<p> これらは、nuget パッケージが用意されています。要注意なのは、Xamarin Component にも<a href="https://components.xamarin.com/view/xamandroidsupportdesign">同じものが存在</a>していて、大抵はそちらの方が古くて動かない、ということです。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.CustomTabs/">Xamarin.Android.Support.CustomTabs</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.Design/">Xamarin.Android.Support.Design</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v4/">Xamarin.Android.Support.v4</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/">Xamarin.Android.Support.v7.AppCompat</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.CardView/">Xamarin.Android.Support.v7.CardView</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.RecyclerView/">Xamarin.Android.Support.v7.RecyclerView</a></li>
</ul>


<h3><a href="http://google.github.io/dagger/">Dagger2</a></h3>

<p>　Dependency Injection を Annotation ベースで行うライブラリ。
　これはないかなーと思いましたがありました。Dagger(短剣) に対して、その名も Stiletto(短剣)ｗ</p>

<ul>
<li><a href="http://stiletto.bendb.com/">Stiletto</a> &ndash; Stiletto is a .NET port of Dagger, the lightweight Android dependency injector from Square.</li>
</ul>


<p>　使い方も殆ど一緒。どうも Dagger1 相当の機能のようですが、アプリ側は少しの修正で対応できました。
　もっとも Dagger すら使ったことがなかったので、その理解に少々時間を要しました。
　Stiletto は、Xamarin.iOS でも使えるようですが、残念ながら PCL対応していなさそう。PCL対応のプルリクを送るのは今後やってみたいことの一つです。</p>

<h3><a href="http://square.github.io/retrofit/">Retrofit2</a></h3>

<p>　RESTful API のクライアントをサクッと作れるライブラリ。これも Xamarin 用に移植してくれてる方がいます。</p>

<ul>
<li><a href="http://paulcbetts.github.io/refit/">Refit by paulcbetts</a> &ndash; Refit is a library heavily inspired by Square&rsquo;s Retrofit library</li>
</ul>


<p>　こちらも、 Xamarin.iOS でも利用可能、PCL対応済み、カンペキです。</p>

<h3><a href="http://square.github.io/picasso/">Picasso</a></h3>

<p>　多機能且つ使いやすい Image Loader の Picasso。これは Xamarin の人が nuget パッケージを用意してくれています。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Square.Picasso">Square.Picasso</a></li>
</ul>


<p>Picasso が依存している <code>Square.OkHttp</code>, <code>Square.OkIO</code> も nuget パッケージが用意されていて、一緒に追加されます。</p>

<h3><a href="https://github.com/gfx/Android-Orma">Android-Orma</a></h3>

<p>　DroidKaigi当日には、作者 @gfx さんによる即席ランチセッションも聴けたORMライブラリ。若いライブラリなのでさすがに Xamarin版はありません。
　Xamarin.Android での ORMライブラリといえば <a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/part_3_using_sqlite_orm/">SQLite.NET</a> が有名ですが、使い方が面倒そうだったのと、このアプリのデータ構造と量で、リレーショナルDB使うこともないだろうと、 Key-Value Store である Akavache を使いました。これは以前 Qiita に書いたのでそちらを。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/356ad0028b7e6fbf089f">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する</a></li>
</ul>


<p>　とはいえ、移植の際には、かなり強引な実装をしてしまいました。パフォーマンス悪いのは私の実装が原因です。</p>

<h3><a href="https://github.com/ReactiveX/RxJava">RxJava</a></h3>

<p>　これはもう説明不要でしょう。本家 Rx.NET を使用します。</p>

<ul>
<li><a href="https://github.com/Reactive-Extensions/Rx.NET">Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET</a></li>
</ul>


<h3><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></h3>

<p>　これを使う最大の理由である <code>AndroidSchedulers.mainThread()</code> は、 Rx.NET では、 <code>observable.ObserveOn(SynchronizationContext.Current)</code> で代用できるので、不要でした。</p>

<h3><a href="https://github.com/JakeWharton/ThreeTenABP">ThreeTenABP</a></h3>

<p>　これも .NET の日付時刻系クラス(<code>DateTime</code>, <code>DateTimeOffset</code>, <code>TimeSpan</code>) で特に問題ありませんでした。しかし恥ずかしながらこのライブラリも知りませんで、Java では必須になりそうですね。</p>

<h3><a href="http://facebook.github.io/stetho/">Stetho</a></h3>

<p>　デバッグを強力に支援してくれるライブラリですね。これも知りませんでした。移植の時にはとりあえず関係なさそう、と思って代替品は探していません（汗</p>

<h3><a href="https://github.com/LyndonChin/AndroidFlowLayout">AndroidFlowLayout</a></h3>

<p>　View をいい感じに並べてくれるライブラリ。Xamarin.Android用の nuget パッケージがありました。</p>

<ul>
<li><a href="https://www.nuget.org/packages/AndroidFlowLayout/">AndroidFlowLayout &ndash; NuGet Gallery</a></li>
</ul>


<h3>Google Play services</h3>

<p>　Map とか、Analytics とか。こちらも nuget に一通りパッケージが揃っています。Xamarin Components より優先的に使いましょう。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Maps/">Xamarin Google Play Services &ndash; Maps &ndash; NuGet Gallery</a>　</li>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Analytics/">Xamarin Google Play Services &ndash; Analytics &ndash; Maps &ndash; NuGet Gallery</a>　</li>
</ul>


<h3><a href="https://github.com/jd-alexander/LikeButton">LikeButton</a></h3>

<p>　Facebook の いいね!、Twitter の Fav! のようなボタンを提供してくれるライブラリ。押した時のアニメーションがイイ感じです。
　これの Xamarin 版は探してもなかったので、 LikeButton の <code>.jar</code> ファイルを入手して、自前で Java Binding Library プロジェクトを作って使用しています。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin/tree/master/LikeButton">DroidKaigi2016Xamarin/LikeButton · amay077/DroidKaigi2016Xamarin</a></li>
</ul>


<p>　これを nuget に放流するのはやりたいことの2つ目。いくつかやったら <a href="https://resources.xamarin.com/open-source-contributor.html">Xamarin から subscription もらえる</a>だろうか。。。</p>

<h3><a href="https://github.com/johncarl81/parceler">parceler</a></h3>

<p>　Parcel のことが大嫌いじゃなくなるライブラリ。移植に際しては、ModelクラスはPOCO(POJOの.NET版と思ってください)にしたかったので直接の代替品は探しませんでした。
　ModelクラスのParcel化はなんと <a href="http://www.newtonsoft.com/json">JSON.NET</a> でJSONを介しちゃいました。悪手ですがパフォーマンスが気になる程でないならいいでしょ。</p>

<h3><a href="https://try.crashlytics.com/">Crashlytics</a></h3>

<p>　クラッシュレポート解析サービスですね。Xamarin なら <a href="https://xamarin.com/insights">Xamarin Insights</a> がビルトインで使えるので、通常はそうするでしょう。Crashlytics 自体の Xamarin.Android 用ライブラリは、今のところ<a href="https://twittercommunity.com/t/xamarin-and-fabric/37289/13">存在しないみたい</a>です。</p>

<h3><a href="https://github.com/opacapp/multiline-collapsingtoolbar">multiline-collapsingtoolbar</a></h3>

<p>　 Android Design Support Library の <code>CollapsingToolbarLayout</code> って、タイトルが複数行あると、展開しても表示されない(!)んですね。なんじゃそら！ってのを解決してくれるライブラリです。
　 Xamarin.Android向けのは探したけど見つかりませんでした。移植に際してクリティカルじゃなかったので、複数行にならない <code>CollapsingToolbarLayout</code> のままです。これも nuget パッケージ化したら需要あるかも。</p>

<h3><a href="https://github.com/ozodrukh/CircularReveal">CircularReveal</a></h3>

<p>　Lollipop で追加された CircularReveal アニメーションを、それ以前のOSでも行えるライブラリです。
　これもクリティカルでないので、Xamarin版には移植していません。</p>

<h2>まとめ</h2>

<p>　DroidKaigi2016 の公式アプリは、ホストの @konifar さんはじめ、 <a href="https://github.com/konifar/droidkaigi2016/graphs/contributors">35名</a> の精鋭有志の皆さんによる爆速開発で、 2/13 に v1.00 がリリース、イベント当日もアップデートされ、私も便利に利用させていただきました。
　
　一方、私の Xamarin.Android への移植は今やっと &ldquo;とりあえず&rdquo; 終わったばかり。
　しかも、移植の元にしたのが 2/10 付けのソースですが、その日から現在に至るまで本家にマージされた <strong>Pull Request の数は 200超！</strong> 。
　「これが若さか…。」これらの Xamarin版への移植はおじさんにはとても行う気が起きません。DroidKaigi2016公式アプリの Contributors の皆さんを尊敬します。
　
　が、ひとまず動くようになったので、ソースを公開します。モダンな Androidアプリを Xamarin.Android で実現する例としては有用だと思います。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin">amay077/DroidKaigi2016Xamarin: DroidKaigi2016 アプリをこっそりXamarinに移植</a></li>
</ul>


<p>（できればこれを、 プラットフォーム非互換にできる箇所はPCLへ移動、各画面にViewModelを置いてMVVM化、Xamarin.iOS対応、Xamarin.Forms対応とか、いろいろと育てていきたいと思っているのですが、DroidKaigi参加直後で、あれもこれもやりたい病なので、実現は未定です。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava で Observable の並列処理を直列化する]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava/"/>
    <updated>2016-02-08T01:16:02+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava</id>
    <content type="html"><![CDATA[<p><code>rx.Observable&lt;T&gt;</code> のオペレータは、通常は非同期で、並列に処理されます。</p>

<!--more-->


<p>例えば以下のような場合:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ランダムにスリープした後 x を onNext する</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">fatTask</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">sleep</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span> <span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000L</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;fatTask(&quot;</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&quot;) - start.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>            <span class="n">subscriber</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
</span><span class='line'>        <span class="o">},</span> <span class="n">sleep</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力:<br/>
fatTask(1) &ndash; start.<br/>
fatTask(2) &ndash; start.<br/>
fatTask(3) &ndash; start.<br/>
fatTask(4) &ndash; start.<br/>
fatTask(5) &ndash; start.<br/>
onNext &ndash; 3<br/>
onNext &ndash; 5<br/>
onNext &ndash; 4<br/>
onNext &ndash; 2<br/>
onNext &ndash; 1<br/></p></blockquote>

<p>fatTask は 1,2,3,4,5 の順で <em>完了を待たずに</em> 呼びだされます。
が、それぞれ処理にかかる時間が異なるので、 <code>onNext</code> が呼ばれる順は 1〜 とは限りません。</p>

<p>ソースとなる Stream の順番を崩したくない場合は、 <code>fatTask(1)</code> が完了してから <code>fatTask(2)</code> を開始する、というように直列化しなければなりません。</p>

<h2>Observable.Concat(concatWith)</h2>

<p>これを行うのが <code>Observable.Concat</code> です(RxJava では <code>Observable.concatWith</code> のようですね)。
複数の <code>Observable</code> を順に（完了してから次へ）処理していきます。</p>

<h3>使い方</h3>

<p><code>toList</code> で一旦ただの <code>List</code> にしてから、<code>concatWith</code> で数珠つなぎにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toList</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">list</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// fatTask(1).contat(fatTask(2)).contat(fatTask(3))... </span>
</span><span class='line'>            <span class="c1">// にする（fold 使えれば…)</span>
</span><span class='line'>            <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">task</span> <span class="o">=</span> <span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">task</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="na">concatWith</span><span class="o">(</span><span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">task</span><span class="o">;</span>
</span><span class='line'>        <span class="o">})</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力<br/>
fatTask(1) &ndash; start.<br/>
onNext &ndash; 1<br/>
fatTask(2) &ndash; start.<br/>
onNext &ndash; 2<br/>
fatTask(3) &ndash; start.<br/>
onNext &ndash; 3<br/>
fatTask(4) &ndash; start.<br/>
onNext &ndash; 4<br/>
fatTask(5) &ndash; start.<br/>
onNext &ndash; 5<br/></p></blockquote>

<p><code>fatTask(1)</code> の完了を待ってから、次の <code>fatTask(2)</code> が実行されています。</p>

<p>※
Rx.NET では、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Concat</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IObservable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">sources</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、複数の <code>IObservable</code> を一括で渡せるのですが、 RxJava にはないようで、、、。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">concatEager</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">sources</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>というのがあったんですが、期待通りうごいてくれず、 Eager? なんでしょう？</p>

<h2>ソースが無限リストだったら？</h2>

<p><code>toList</code> で一旦ただの List にしているのが非常に気に入らないですね。
<code>range(1, 5)</code> が <code>interval(1, TimeUnit.SECONDS)</code> のように無限の Stream だったら使えません。</p>

<p>そこで、 <code>concat</code> には、こんな overload もあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">concat</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">observables</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observable<T> を通知する Observable？ ややこしいですがこう使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 2. を concat する</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
</span><span class='line'>        <span class="c1">// 1. Observable&lt;Long&gt;</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>            <span class="c1">// 2. Long を Observable&lt;Integer&gt; に変換 </span>
</span><span class='line'>            <span class="c1">//    → Observable&lt;Observable&lt;Integer&gt;&gt; になる</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">intValue</span><span class="o">())))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力<br/>
fatTask(0) &ndash; start.<br/>
onNext &ndash; 0<br/>
fatTask(1) &ndash; start.<br/>
onNext &ndash; 1<br/>
fatTask(2) &ndash; start.<br/>
onNext &ndash; 2<br/>
…つづく<br/></p></blockquote>

<p>無限リストながら、並列処理せずに順序通り動いてくれます。</p>

<p><code>interval</code> の値を単純に <code>map</code> で <code>Observable&lt;Integer&gt;</code> に変換してやります。するとこれは <code>Observable&lt;Observable&lt;Integer&gt;&gt;</code> になり、<code>concat</code> 可能になります。 <code>flatMap</code> だと平坦化されちゃうのでただの <code>map</code> です。</p>

<h2>まとめ</h2>

<p>Observable は普通は非同期で並列処理。
非同期ながら直列化したい場合は <code>Observable.concat</code> でできます。</p>

<ol>
<li>GPS から緯度経度を取得</li>
<li>なんか重い計算を行う</li>
<li>結果をテキストファイルに書き出す</li>
</ol>


<p>みたいな処理をするとき 3. を 1. の順序と同じにしたいのでこれを使います。</p>

<p>はじめ自分は <code>flatMap</code> で繋いでいくだけですべて直列化されているのかなーと勘違いしていたので、これを知った時は目からウロコでした。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.introtorx.com/content/v1.0.10621.0/12_CombiningSequences.html">Intro to Rx &ndash; Combining sequences</a></li>
<li><a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX &ndash; Concat operator</a></li>
<li><a href="http://blog.okazuki.jp/entry/20120219/1329663635">Reactive Extensions再入門 その４１「どんどん合成するよ」 &ndash; かずきのBlog@hatena</a></li>
<li><a href="https://twitter.com/neuecc/status/695604984763650050">https://twitter.com/neuecc/status/695604984763650050</a> &ndash; @neuecc さんありがとうございます！</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava の ImmediateScheduler と TrampolineScheduler の違い]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/05/difference-immediatescheduler-and-trumpolinescheduler/"/>
    <updated>2016-02-05T01:30:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/05/difference-immediatescheduler-and-trumpolinescheduler</id>
    <content type="html"><![CDATA[<p>RxJava のスケジューラの中に <a href="http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html"><code>TrampolineScheduler</code></a> というのがあり、<a href="https://twitter.com/amay077/status/693341525464346624">なんじゃこれ？</a>とつぶやいたところ、 <a href="http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html">Rx.NET の <code>CurrentThreadScheduler</code> と同じっぽい</a> と教えてもらいました。</p>

<!--more-->


<p>その流れで、類似の Scheduler である <a href="http://reactivex.io/RxJava/javadoc/rx/schedulers/ImmediateScheduler.html">ImmediateScheduler</a> との違いについて語られているトピックを紹介してもらいました。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/amay077">@amay077</a> この辺読みとくと良いと思います（tranpolineというキーワードも登場します） <a href="https://t.co/A5TzOiobsC">https://t.co/A5TzOiobsC</a></p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/693396949643317248">2016, 1月 30</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>CurrentThreadScheduler vs ImmediateScheduler</h1>

<ul>
<li><a href="https://social.msdn.microsoft.com/Forums/en-US/7f75482f-eff2-4938-9491-47fe870989e8/currentthreadscheduler-vs-immediatescheduler?forum=rx">CurrentThreadScheduler vs ImmediateScheduler</a></li>
</ul>


<p>紹介してもらったこのディスカッションを、頑張って翻訳してみました（めちゃくちゃなとこは訂正願います）。
RxJava では <code>CurrentThreadScheduler</code> を <code>TrampolineScheduler</code> に読み替えてください。</p>

<p>－－訳ここから－－</p>

<h2>Ohad 氏の質問</h2>

<blockquote><p>Hi
ImmediateScheduler&rsquo;s Schedule method is pretty straightforward &ndash; it simply invokes the action.
In contrast, CurrentThreadScheduler seems more involved &ndash; it creates something called a trampoline, which in turn iterates over an action queue, sleeping between invocations of items in the queue and so forth</p></blockquote>

<p>やあ、
<code>ImmediateScheduler.Schedule</code> メソッドは単純をアクションを呼び出します。
対照的に、 <code>CurrentThreadScheduler</code> は複雑に見えます。トランポリンと呼ばれるものを作り、それはアクション・キューで、順次スリープの間に呼び出されます。</p>

<blockquote><p>I&rsquo;ve been trying to follow the code with reflector but I&rsquo;m having a hard time understanding the difference. As far as I can tell, CurrentThreadSchedule&rsquo;s schedule method calls Trampoline &rsquo;s Run method, which will end up blocking the current thread until the queued action is performed (on the current thread as well) &ndash; apparently just like in the case of ImmediateScheduler</p></blockquote>

<p>私はコードを追ってみましたが、理解するのに苦労しています。分かる範囲では、 <code>CurrentThreadSchedule.Schedule</code> メソッドは <code>Trampoline.Run</code> メソッドを呼び出しています。これは現在のスレッドを、キューのアクションが実行されるまで(カレントスレッドも同様に)ブロックしようとします。 &ndash; どうも <code>ImmediateScheduler</code> のようにみえます。</p>

<blockquote><p>I realize I&rsquo;m missing something, so an explanation would be really appreciated
Thanks !</p></blockquote>

<p>何か理解が足りないと思うので、説明してもらえると嬉しいです。</p>

<blockquote><p>EDIT &ndash; In the meantime I&rsquo;ve found a couple of resources that may shed light on the subject, if anyone&rsquo;s interested:</p></blockquote>

<p>２つのリソースを見つけました。何かの手がかりになれば。</p>

<p><a href="http://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx">http://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx</a></p>

<p><a href="http://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx">http://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx</a></p>

<h2>Dave 氏の回答</h2>

<blockquote><p>Hi,</p>

<p>The trampoline seems to serve three purposes:</p></blockquote>

<p>やあ、
トランポリンは３つの目的を持っているように見えます。</p>

<blockquote><p>1- Prevents dead-locks from scheduler reentrancy.</p></blockquote>

<p>1- スケジューラーの割り込みからデッドロックを防ぎます。</p>

<blockquote><p>2- Prevents infinite loops in observables that require recursion through scheduler reentrancy.</p></blockquote>

<p>2- スケジューラーの割り込みを使った再帰が必要な Observable の無限ループを防ぎます。</p>

<blockquote><p>3- Cooperative single-threaded multitasking; I guess it&rsquo;s similar to the proposed async/await feature in C# 5.0.  Calling CurrentThreadScheduler.Schedule is sort of like using await when the currently executing code was also scheduled via CurrentThreadScheduler.</p></blockquote>

<p>3- シングルスレッドでの「<a href="http://www.sophia-it.com/content/%E3%83%8E%E3%83%B3%E3%83%97%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF">協調的マルチタスキング</a>」; 私は C# 5.0 に提案されている async/await に近いものだと思います。<code>CurrentThreadScheduler.Schedule</code> の呼び出しは、現在実行中のコードも <code>CurrentThreadScheduler</code> でスケジュールされていたときに await を使用するようなものです。（訳注: C# の async/await は協調的マルチタスキングではないと思います。これは async/await 登場以前に予想で書かれたものかと。</p>

<blockquote><p>In the observable world, calling Subscribe should be an asynchronous operation.  There&rsquo;s a problem if the scheduling of an observable dead-locks or blocks the current thread indefinitely because it attempts to execute immediately and never completes.</p></blockquote>

<p>Observable の世界では、<code>Subscribe</code> の呼び出しは、非同期処理で行わなければなりません。Observable のスケジューリングがデッドロックまたはカレントスレッドを無期限にブロックする場合、すぐに実行しようとしても完了しないので、問題になります。</p>

<blockquote><p>Ignore the type of scheduler for a moment and consider a scheduled action that eventually, through some sequence of method calls, uses the same scheduler to schedule another action.</p></blockquote>

<p>ちょっとこのスケジューラを無視して、いずれは、いくつかのシーケンスは別のアクションをスケジュールするために、同じスケジューラを使用することを考えてみてください。</p>

<blockquote><p>With the ImmediateScheduler, the inner action is executed immediately.</p></blockquote>

<p><code>ImmediateScheduler</code> では、”内側のアクション” はすぐに実行されます。</p>

<blockquote><ul>
<li>If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it&rsquo;s released by the outer action, then these actions dead-lock.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションが、内側のアクションが依存しているリソースを取得した場合、
内側のアクションは外側のアクションがリソースを開放するまでそれを取得できず、これらのアクションはデッドロックします。</li>
</ul>


<blockquote><ul>
<li>If the outer action depends upon the inner action, and the inner action depends upon the outer action, then this could result in an infinite loop that never yields control to other actions.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションは内部アクションに依存し、内部アクションは外側の行動に依存している場合、他のアクションに制御が移らない無限ループになります。</li>
</ul>


<blockquote><p>For example: Observable.Return(1).Repeat().Take(1)</p></blockquote>

<p>例: <code>Observable.Return(1).Repeat().Take(1)</code></p>

<blockquote><p>By default, Return uses the ImmediateScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return.  Because there&rsquo;s no trampoline in Return, this pattern repeats itself, blocking the current thread indefinitely.  Calling Subscribe on this observable never returns.  See <a href="https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx">this discussion</a> for more information.</p></blockquote>

<p>既定では、<code>Return</code> は <code>ImmediateScheduler</code> を使って <code>OnNext(1)</code> そして <code>OnCompleted()</code> を呼び出します。 <code>Repeat</code> はどんな並列性も使用しません、なのですぐに <code>OnCompleted</code> を検知して、すぐに <code>Return</code> を再購読します。なぜなら、 <code>Return</code> にはトランポリンがないので、このパターンは自分自身を繰り返し、無期限に現在のスレッドをブロックし続けます。この Observable を <code>Subscribe</code> すると処理が返ってきません。詳細については、<a href="https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx">この説明</a>を参照してください。</p>

<blockquote><p>With the CurrentThreadScheduler, the inner action is scheduled (queued) for execution when the outer action ends.  Conceptually, inner actions are bounced on the trampoline until the current thread is ready to execute them.</p></blockquote>

<p><code>CurrentThreadScheduler</code> では、内側のアクションは、外側のアクションが終了された時に実行されるようにスケジュールされます。コンセプトとしては、内側のアクションは、現在のスレッドが実行可能になるまでトランポリンの上で跳ねます。</p>

<blockquote><ul>
<li>If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it&rsquo;s released by the outer action, then these actions do not dead-lock because the inner action is not executed until the outer action completes.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションが、内側のアクションが依存しているリソースを取得し、内側のアクションは外側のアクションによってそれらが解放されるまで取得できない場合、これらのアクションはデッドロックしません、なぜなら。内側のアクションは外側のアクションが終了するまで実行されないためです。</li>
</ul>


<blockquote><ul>
<li>If the outer action recurses when the inner action completes, then there won&rsquo;t be an immediately infinite loop because the inner action does not complete until the outer action completes first.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションが内側のアクションが終了した時に再帰的な場合、無限ループになりません。なぜなら、内側のアクションは外側のアクションが完了するまで完了しないためです。</li>
</ul>


<blockquote><p>For example: Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)</p></blockquote>

<p>例: <code>Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)</code></p>

<blockquote><p>Here, Return is using the CurrentTheadScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return; however, this second subscription to Return schedules its (inner) actions on the trampoline because it&rsquo;s still executing on the OnCompleted callback from the first scheduled (outer) action, thus the repetition does not occur immediately.  This allows Repeat to return a disposable to Take, which eventually calls OnCompleted, cancels the repetition by disposing Repeat, and ultimately the call from Subscribe returns.</p></blockquote>

<p>ここでは、 <code>Return</code> は <code>CurrentTheadScheduler</code> を使って <code>OnNext(1)</code> そして <code>OnCompleted()</code> を呼び出します。 <code>Repeat</code> はどんな並列性も使用しません、なのですぐに <code>OnCompleted</code> を検知して、すぐに <code>Return</code> を再購読します。しかし、この２回目の <code>Return</code> の購読（内側のアクション）はトランポリンの上にあります、なぜなら、最初にスケジュールされたアクション（外側のアクション）の <code>OnCompleted</code> コールバックの上でまだ実行中であるからです、なので繰り返しはすぐに発生しません。
これは、<code>Repeat</code> は <code>Take</code> に disposable(subscription) を返すことができます、それはやがて <code>OnCompleted</code> を呼び出し、<code>Subscribe</code> の返値から <code>Repeat</code> の破棄により繰り返しをキャンセルします。</p>

<blockquote><p>Keep in mind that the examples with Return and Repeat do not introduce any concurrency.  When you call Subscribe, it will not return until the observable completes regardless of which of these schedulers you choose.  With the ImmediateScheduler, Take calls OnCompleted but it cannot cancel the repetition, so Subscribe blocks indefinitely.  Alternatively, the CurrentThreadScheduler allows for cooperative single-threaded multitasking between the Return and Repeat operators, thus allowing Take to cancel the repetition without having to introduce any concurrency.</p></blockquote>

<p>覚えておいて欲しいのは、 <code>Return</code> → <code>Repeat</code> はどんな並列性も使用しないことです。<code>Subscribe</code> を呼び出すと、あなたが選択した Scheduler に関係なく、Observable が終了するまで処理を返しません。 <code>ImmediateScheduler</code> では、<code>Take</code> は <code>OnCompleted</code> を呼び出しますが、繰り返しをキャンセルできません。なので <code>Subscribe</code> は無期限にブロックしてしまいます。代わりに <code>CurrentThreadScheduler</code> は <code>Return</code> と <code>Repeat</code> 操作の間、協調的マルチタスキングが可能になります、なので、並行性を使用することなく、繰り返しをキャンセルすることができます。</p>

<p>－－訳ここまで－－</p>

<h1>つまり？</h1>

<p><code>ImmediateScheduler</code> が処理をただ単に(割り込んで)実行するだけであるのに対し、 <code>CurrentScheduler</code>(<code>TrampolineScheduler</code>) は、擬似的なマルチタスクを行う（懐かしの VB の <a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1112681621"><code>DoEvents</code></a> かぁ？）ことでデッドロックを防いでいる、と理解しました。</p>

<p>Dave 氏の回答にあった例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">Repeat</span><span class="p">().</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(...);</span>
</span><span class='line'><span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hoge&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>を実行すると、確かに処理が帰ってこない、<code>Debug.WriteLine</code> へ進まないんです。</p>

<p>これはヤバい、<code>ImmediateScheduler</code> マジやべえと。
で、 RxJava でも同じだよねえと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// just が ImmediateScheduler 使うのか不安だったから subscribeOn しているよ</span>
</span><span class='line'><span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">immediate</span><span class="o">()).</span><span class="na">repeat</span><span class="o">().</span><span class="na">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">subscribe</span><span class="o">(...);</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Hoge&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いて実行してみたら、処理が帰ってくる！ <code>Log.debug</code> も実行される！
なんだこの違いは？改善されているのか、試し方が悪いのか。。。</p>

<p>なんだかモヤモヤした終わりかたですが、今回は <code>ImmediateScheduler</code> はちょっと要注意だというところまでです。</p>

<blockquote><p>In the observable world, calling Subscribe should be an asynchronous operation.</p></blockquote>

<p>との言葉通り、Rx.NET/RxJava を使うときは非同期にしたい事が全てだと思いますが、オペレータによっては既定で <code>ImmediateScheduler</code> を使うものもあるので、必ず <code>subscribeOn/observeOn</code> をするクセをつけておいた方がいいのかな？と思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Data Binding + MVVMパターンのサンプルを書いてみた]]></title>
    <link href="http://blog.amay077.net/blog/2016/01/28/creating-android-databinding-with-mvvm-pattern-sample/"/>
    <updated>2016-01-28T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/01/28/creating-android-databinding-with-mvvm-pattern-sample</id>
    <content type="html"><![CDATA[<p><code>notifyPropertyChanged</code> とか、<a href="https://ufcpp.wordpress.com/2009/12/28/inotifypropertychanged-%E3%81%AE%E5%AE%9F%E8%A3%85/">どこかで見たことのある</a>機能が満載の <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">Android Data Binding</a> ですが、登場以来あまり追えてなかったのでやっとサンプルをつくってみました。</p>

<!--more-->


<p>といっても</p>

<ul>
<li><a href="http://qiita.com/amay077/items/8464a22e3063642112ed">RxJava + MVVM パターンで作るストップウォッチアプリ &ndash; Qiita</a></li>
</ul>


<p>で作ったストップウォッチアプリを Data Binding 化しただけです。</p>

<p><a href="http://qiita.com/amay077/items/8464a22e3063642112ed#model-viewmodel-viewmvvm-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B">前回</a> との違いを図に示します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_03.png" alt="" /></p>

<ul>
<li>View-ViewModel で全面的に使用していた <code>rx.Observable&lt;T&gt;</code> の代わりに、<code>ObservableField&lt;T&gt;</code> を使用。</li>
<li>View側で「オレオレDataBinding」を実装していた箇所を、Android の Data Binding に置き換え。つまりバインディングの定義はレイアウトxmlへ記述。</li>
<li>Model は相変わらず <code>rx.Observable&lt;T&gt;</code> のまま。なので ViewModel で <code>rx.Observable&lt;T&gt;</code> → <code>ObservableField&lt;T&gt;</code> へ変換。</li>
<li>メソッドとのバインドに <code>Command</code> を使用していたが、Android Data Binding の <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html#binding_events">Binding Events</a> に置き換え。</li>
<li>ListView とデータ群のバインディングの方法が分からなかったので、<a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html#custom_setters">カスタムBinding</a>で対応。(listItem のバインディングじゃなくて、リストの件数の増減を反映させるやつ。)</li>
<li>ArrayAdapter 使ってたんだけどこいつは Binding に対応していない？ので Adapter を自作。</li>
</ul>


<h2>MainActivity のバインディングの定義</h2>

<p><code>activity_main.xml</code> はこんな感じ。</p>

<p><code>@{ }</code> で  <code>MainViewModel</code> に用意した <code>ObservableField&lt;T&gt;</code> または、イベントハンドラとバインドしてます。</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;layout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">xmlns:app=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;variable</span> <span class="na">name=</span><span class="s">&quot;viewModel&quot;</span>
</span><span class='line'>            <span class="na">type=</span><span class="s">&quot;com.amay077.stopwatchapp.viewmodel.MainViewModel&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>        <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>        <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>        <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span> <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="na">android:id=</span><span class="s">&quot;@+id/textTime&quot;</span>
</span><span class='line'>            <span class="na">tools:text=</span><span class="s">&quot;00:00.000&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@{viewModel.formattedTime}&quot;</span>
</span><span class='line'>            <span class="na">android:textSize=</span><span class="s">&quot;50sp&quot;</span>
</span><span class='line'>            <span class="na">android:gravity=</span><span class="s">&quot;center_horizontal&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/buttonStartStop&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@{viewModel.runButtonTitle}&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel.onClickStartOrStop}&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/buttonLap&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Lap&quot;</span>
</span><span class='line'>            <span class="na">android:enabled=</span><span class="s">&quot;@{viewModel.isRunning}&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel.onClickLap}&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Switch</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/switchVisibleMillis&quot;</span>
</span><span class='line'>            <span class="na">android:checked=</span><span class="s">&quot;@{viewModel.isVisibleMillis}&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel.onClickToggleVisibleMillis}&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;小数点以下を表示&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ListView</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/listLaps&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">app:formattedLaps=</span><span class="s">&quot;@{viewModel}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'><span class="nt">&lt;/layout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ListView で <code>app:formattedLaps="@{viewModel}"</code> としているところだけが特殊で、これは <code>MainActivity.java</code> に定義したカスタムSetter を呼び出します。</p>

<p><code>MainActivity.java</code> はこんな感じ。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="cm">/* final */</span>  <span class="n">MainViewModel</span> <span class="n">_viewModel</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CompositeSubscription</span> <span class="n">_subscriptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompositeSubscription</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ActivityMainBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_viewModel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MainViewModel</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">binding</span><span class="o">.</span><span class="na">setViewModel</span><span class="o">(</span><span class="n">_viewModel</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ■ViewModel からの Message の受信（省略）</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * ListView と ViewModel のカスタムバインディング</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * TODO 本当は viewModel.formattedLaps とバインドしたい</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@BindingAdapter</span><span class="o">(</span><span class="s">&quot;formattedLaps&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setFormattedLaps</span><span class="o">(</span><span class="n">ListView</span> <span class="n">listView</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MainViewModel</span> <span class="n">viewModel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">LapAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LapAdapter</span><span class="o">(</span><span class="n">listView</span><span class="o">.</span><span class="na">getContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// formattedLaps が変化した時に呼ばれるイベントで、Adapterを洗い替え。</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="o">.</span><span class="na">formattedLaps</span><span class="o">.</span><span class="na">addOnPropertyChangedCallback</span><span class="o">(</span><span class="k">new</span> <span class="n">android</span><span class="o">.</span><span class="na">databinding</span><span class="o">.</span><span class="na">Observable</span><span class="o">.</span><span class="na">OnPropertyChangedCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPropertyChanged</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">databinding</span><span class="o">.</span><span class="na">Observable</span> <span class="n">sender</span><span class="o">,</span> <span class="kt">int</span> <span class="n">propertyId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">viewModel</span><span class="o">.</span><span class="na">formattedLaps</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// バインド時に値を更新</span>
</span><span class='line'>        <span class="n">adapter</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>        <span class="n">adapter</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">viewModel</span><span class="o">.</span><span class="na">formattedLaps</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_viewModel</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>オレオレBindingがごっそり消えてスッキリ。
<code>setFormattedLaps</code> がカスタムSetterで、この中で <code>MainViewModel.formatterLaps</code> を監視し、値が変わったら Adapter を総入れ替えしてます。が、これが正しいやり方かわからない。
<a href="https://android.googlesource.com/platform/frameworks/data-binding/+/android-6.0.0_r7/extensions/baseAdapters/src/main/java/android/databinding/adapters">extensions/baseAdapters/src/main/java/android/databinding/adapters</a> にはそれらしいのがないでござるよ。。。</p>

<h2>ViewModel 側</h2>

<p>この辺みてください。大したことはやってないです。（急に雑になったw）</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java">StopWatchSample/MainViewModel.java</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/ObservableUtil.java">StopWatchSample/ObservableUtil.java</a></li>
</ul>


<p><code>ObservableUtil.toObservableField</code> とか、もうどっかの誰かがやってそうだし、事実上標準の何かが出てきそうな気がすごくします。</p>

<h2>おまけ</h2>

<h3>Messenger を RxJava ベースにした</h3>

<ul>
<li><a href="http://qiita.com/yyaammaa/items/57d8baa1e80346e67e47">OttoからRxJavaへの移行ガイド &ndash; Qiita</a></li>
<li><a href="http://qiita.com/kubode/items/a4ece37834446c9a39c8">Android &ndash; RxJavaでEventBusを作った &ndash; Qiita</a></li>
</ul>


<p>らしいので、自作してた <code>Messenger</code> を <a href="https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/frameworks/messengers/Messenger.java">RxJava ベースにしてみました</a>。
ViewModel→Viewの通知
にしか使ってないので、あまり <code>rx.Observable&lt;T&gt;</code> にする旨味はなかったですね。あ、<code>ofType</code> って便利ですね。</p>

<h2>まとめ</h2>

<p>今回作ったアプリの全ソースは</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/tree/android_data_binding_v1_20160128/StopWatchAppXamarin/StopWatchApp.Android">StopWatchApp.Android</a></li>
</ul>


<p>です。</p>

<p>.NETアプリケーション開発では、ViewModel を View にバインドすることが殆どなので、典型的な例としてやってみました。</p>

<p>レイアウトに直接バインドを定義できるので、コードビハインド(Javaのソース)はスッキリしますが、個人的にはあまり好きではありません。
コードビハインドに(<code>textTime.SetBinding(v =&gt; v.Text, viewModel.Time)</code> みたく)書いた方が、定義情報がまとまっていて管理しやすい、デバッグしやすいと思うからです。（同じ理由で、xmlに直接記述する <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html#expression_language">Expression Language</a> も好きではありません。）
が、今のところ、Android Data Binding では、レイアウトXMLでしかバインディングを定義できないようですね。</p>

<p>ともあれ、<a href="https://github.com/gueei/AndroidBinding">AndroidBinding</a> とか Butter Knife はこれで駆逐されていく（前者はすでに息してなさそうですが）と思うので、新しいアプリ開発では積極的に使っていこうかなと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">Data Binding Guide | Android Developers</a></li>
<li><a href="http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6#after-listview">Android &ndash; Butter Knife、今までありがとう。 Data Binding、これからよろしく。 &ndash; Qiita</a></li>
<li><a href="http://tech.recruit-mp.co.jp/mobile/android-data-binding/">[Android] – Data Bindingつかってみた – NET BIZ DIV. TECH BLOG</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
