<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2014-04-04T15:36:49+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin でビルドを自動化するには Business 版以上が必要です]]></title>
    <link href="http://amay077.github.io/blog/2014/04/04/command-line-building-requires-buisiness-license/"/>
    <updated>2014-04-04T15:31:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/04/04/command-line-building-requires-buisiness-license</id>
    <content type="html"><![CDATA[<p>Xamarin でも、リリース用アプリのビルド→署名→テストとか、自動化したいじゃないですか。</p>

<!--more-->


<p>Win/Visual Studio の場合は <code>msbuild</code>、Mac/Xamarin Studio の場合は <code>xbuild</code> でそれが可能との情報を得て試してみたところ、、、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xbuild HogeAppAndroid.csproj
</span><span class='line'>
</span><span class='line'>XBuild Engine Version 3.2.6.0
</span><span class='line'>Mono, Version 3.2.6.0
</span><span class='line'>Copyright <span class="o">(</span>C<span class="o">)</span> Marek Sieradzki 2005-2008, Novell 2008-2011.
</span><span class='line'>
</span><span class='line'>Build started 2014/04/04 13:13:59.
</span><span class='line'>__________________________________________________
</span><span class='line'>Project <span class="s2">&quot;...HogeAppAndroid/HogeAppAndroid/HogeAppAndroid.csproj&quot;</span> <span class="o">(</span>default target<span class="o">(</span>s<span class="o">))</span>:
</span><span class='line'>  Target _SetLatestTargetFrameworkVersion:
</span><span class='line'>: error XA9008: Building from the <span class="nb">command</span>-line requires a Business License.
</span><span class='line'>  Task <span class="s2">&quot;ResolveSdks&quot;</span> execution -- FAILED
</span><span class='line'>  Done building target <span class="s2">&quot;_SetLatestTargetFrameworkVersion&quot;</span> in project <span class="s2">&quot;...HogeAppAndroid/HogeAppAndroid/HogeAppAndroid.csproj&quot;</span>.-- FAILED
</span><span class='line'>Done building project <span class="s2">&quot;...HogeAppAndroid/HogeAppAndroid/HogeAppAndroid.csproj&quot;</span>.-- FAILED
</span></code></pre></td></tr></table></div></figure>


<p><strong>“Building from the command-line requires a Business License.”</strong></p>

<p>だそうです。</p>

<p>Starter Edition, Indie Edition では、コマンドラインからのビルドは許可されていないようです。</p>

<ul>
<li><a href="https://store.xamarin.com/">Store - Xamarin</a></li>
</ul>


<p>の比較表ではちょっと分からなかったな。。。</p>

<p>Win/Visual Studio な人は自動的に Business Edition 以上だから問題ないのですが、個人だから Business版買えないよ、Starter/Indie だけど (なんちゃって)CI とかやりたいよ、という人はあきらめるしかないみたいです。</p>

<p>…手動でやります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で FromEventPattern を使うときの注意点]]></title>
    <link href="http://amay077.github.io/blog/2014/04/03/notice-for-fromeventpattern-in-xamarin-ios/"/>
    <updated>2014-04-03T15:29:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/04/03/notice-for-fromeventpattern-in-xamarin-ios</id>
    <content type="html"><![CDATA[<p>Reactive Extensions の <code>FromEventPattern</code> を使うと、イベントを <code>IObservable</code> に変換できて、複数のイベントに時系列な関係を与えたり、他のストリーム処理とシームレスに扱えたりします。</p>

<!--more-->


<ul>
<li><a href="http://www.atmarkit.co.jp/fdotnet/introrx/introrx_02/introrx_02_02.html">イベント・プログラミングとRx － ＠IT</a></li>
</ul>


<p>Xamarin .iOS でも .Android でもこの機能を使うことができて大変便利ですが、Xamarin.iOS の場合 AOT による制限に気をつける必要があります。</p>

<p>以下は、なんの変哲もない、「ボタンを押したらタイトルを ”Clicked!” に変える」コードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">MyButton</span><span class="p">.</span><span class="n">TouchUpInside</span> <span class="p">+=</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">MyButton</span><span class="p">.</span><span class="n">SetTitle</span><span class="p">(</span><span class="s">&quot;Clicked!&quot;</span><span class="p">,</span> <span class="n">UIControlState</span><span class="p">.</span><span class="n">Normal</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを FromEventPattern を使うとこう書けます。</p>

<figure class='code'><figcaption><span>DoesNotWorkOnDevice.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">(</span><span class="n">MyButton</span><span class="p">,</span> <span class="s">&quot;TouchUpInside&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">MyButton</span><span class="p">.</span><span class="n">SetTitle</span><span class="p">(</span><span class="s">&quot;Clicked!&quot;</span><span class="p">,</span> <span class="n">UIControlState</span><span class="p">.</span><span class="n">Normal</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコード、iOSシミュレータでは正常に動作しますが、 <strong>実機では、ビルドは通りますが動作しません。</strong> 実行時にこんなエラーがでます。</p>

<blockquote><p>System.InvalidOperationException: Could not find event &#8216;TouchUpInside&#8217; on object of type &#8216;MonoTouch.UIKit.UIButton&#8217;.</p></blockquote>

<p><code>TouchUpInside</code> が無いと言われます。</p>

<p>これは AOT により生成されたコードに、このイベントが含まれないのだと推測します。イベント名を文字列リテラルで指定しているので、そこまでの解析は期待できないですよね。</p>

<p>シミュレータで動作したのは、この場合は AOT でなく JIT で動作しているため。以下でも言及されています。</p>

<ul>
<li><a href="http://www.buildinsider.net/mobile/insidexamarin/05">Xamarin.iOSの仕組みとアプリケーションの構成 - Build Insider</a></li>
</ul>


<blockquote><p>対象がiOSシミュレーターである場合と、iOSデバイスである場合とで、大きく異なる。iOSシミュレーターは、エミュレーターではなく、あくまでMac OS Xが動作しているx86 CPUの上で動作している仮想マシンであり、アプリケーションはJITによって動作する。iOSデバイスはARMであり、iOSデバイス用にビルドされたアプリケーションはAOTによってARMのCPU命令に変換されており、ARM上でしか動作しない。</p></blockquote>

<p>Xamarin.iOS では実機で動作させないと安心ならないと言われる所以です。</p>

<p>さて、このケースでは、FromEventPattern の別なオーバーロードを使うことで解決です。</p>

<figure class='code'><figcaption><span>WorkOnDevice.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">(</span>
</span><span class='line'>  <span class="n">h</span> <span class="p">=&gt;</span> <span class="n">MyButton</span><span class="p">.</span><span class="n">TouchUpInside</span><span class="p">+=</span><span class="n">h</span><span class="p">,</span>
</span><span class='line'>  <span class="n">h</span> <span class="p">=&gt;</span> <span class="n">MyButton</span><span class="p">.</span><span class="n">TouchUpInside</span><span class="p">-=</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">MyButton</span><span class="p">.</span><span class="n">SetTitle</span><span class="p">(</span><span class="s">&quot;Clicked!&quot;</span><span class="p">,</span> <span class="n">UIControlState</span><span class="p">.</span><span class="n">Normal</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xamarin.iOS の制限事項は以下に。</p>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/limitations/">Limitations | Xamarin</a></li>
</ul>


<p>これまでこの制限に引っかかった事がなかったのですが、初めて引っかかりました。</p>

<p>メソッドを文字列リテラルで書いた時点で私の負けです、本当にありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android で Intent を受けとるには？]]></title>
    <link href="http://amay077.github.io/blog/2014/04/01/receive-intent-by-xamarin-android/"/>
    <updated>2014-04-01T15:26:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/04/01/receive-intent-by-xamarin-android</id>
    <content type="html"><![CDATA[<p>例えば、他のアプリからテキストを「送る」して、自作の Xamarin アプリでそれを受け取りたい時。</p>

<!--more-->


<p>普通の Android アプリ開発だと <code>AndroidManifest.xml</code> にこう書く。</p>

<figure class='code'><figcaption><span>AndroidManifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>  <span class="na">android:name=</span><span class="s">&quot;com.example.intenttest.MainActivity&quot;</span>
</span><span class='line'>  <span class="na">android:label=</span><span class="s">&quot;@string/app_name&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.LAUNCHER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.SEND&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;text/plain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xamarin.Android では、Activity のソースファイルの属性として、以下のように書く。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Activity(Label = &quot;MainActivity&quot;, MainLauncher = true)]</span>
</span><span class='line'><span class="na">[IntentFilter (new []</span><span class="p">{</span> <span class="n">Intent</span><span class="p">.</span><span class="n">ActionSend</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">Categories</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]{</span> <span class="n">Intent</span><span class="p">.</span><span class="n">CategoryDefault</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">DataMimeType</span> <span class="p">=</span> <span class="s">&quot;text/plain&quot;</span> <span class="p">)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">Activity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>テキストでない場合は、mimetype を適宜変更する。省略したら動作しなかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ to Objects と Java8-Stream API の対応表]]></title>
    <link href="http://amay077.github.io/blog/2014/03/20/linq-to-objects-vs-java8-stream-api/"/>
    <updated>2014-03-20T15:15:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/20/linq-to-objects-vs-java8-stream-api</id>
    <content type="html"><![CDATA[<p>Java8 で <code>filter</code> や <code>map</code> が使えるようになったー！
というわけで .NET の LINQ to Objects との対応表を作ってみました。</p>

<!--more-->


<ul>
<li>LINQ - <a href="http://msdn.microsoft.com/ja-jp/library/system.linq.enumerable(v=vs.110">Enumerable クラス (System.Linq)</a>.aspx)</li>
<li>Java8 - <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">Stream (Java Platform SE 8 )</a></li>
</ul>


<p>の比較です。</p>

<p>Java の方は</p>

<ul>
<li><a href="http://download.java.net/jdk8/docs/api/java/util/stream/Collectors.html">Collectors (Java Platform SE 8 )</a></li>
</ul>


<p>も使います。</p>

<p>まだ試したものは少ないので間違ってるかもしれない ＆ カテゴライズが適当 なので、編集リクエストしてもらえるとありがたいです。</p>

<table>
<thead>
<tr>
<th></th>
<th> 機能 </th>
<th> LINQ </th>
<th> Java8 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <strong>【基本的なやつ】</strong> </td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td> 抽出 </td>
<td> Where </td>
<td> filter </td>
</tr>
<tr>
<td></td>
<td> 射影 </td>
<td> Select </td>
<td> map </td>
</tr>
<tr>
<td></td>
<td> 並べ替え </td>
<td> OrderBy / OrderByDescending </td>
<td> sorted </td>
</tr>
<tr>
<td></td>
<td> 後続を並べ替え </td>
<td> ThenBy / ThenByDescending </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 平坦化して射影 </td>
<td> SelectMany </td>
<td> flatMap </td>
</tr>
<tr>
<td></td>
<td> <strong>【抽出系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> ｎ件飛ばす </td>
<td> Skip </td>
<td> skip </td>
</tr>
<tr>
<td></td>
<td> 条件を満たすまで飛ばす </td>
<td> SkipWhile </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> ｎ件まで流す </td>
<td> Take </td>
<td> limit </td>
</tr>
<tr>
<td></td>
<td> 条件を満たすまで流す </td>
<td> TakeWhile </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> <strong>【合成系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> 連結 </td>
<td> Concat </td>
<td> concat </td>
</tr>
<tr>
<td></td>
<td> 積集合 </td>
<td> Intersect </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 和集合 </td>
<td> Union </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 差集合 </td>
<td> Except </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 内部結合 </td>
<td> Join </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 外部結合</td>
<td> GroupJoin </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 並びを逆にする </td>
<td> Reverse </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 2つの値を揃えて流す </td>
<td> Zip </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> <strong>【グループ化、集計系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> 重複を無くす </td>
<td> Distinct </td>
<td> distinct </td>
</tr>
<tr>
<td></td>
<td> 畳み込み </td>
<td> Aggregate </td>
<td> reduce </td>
</tr>
<tr>
<td></td>
<td> グループ化 </td>
<td> GroupBy </td>
<td> Collectors.groupingBy </td>
</tr>
<tr>
<td></td>
<td> 平均 </td>
<td> Average </td>
<td> IntStream.average /  Collectors.summarizingXXX </td>
</tr>
<tr>
<td></td>
<td> 件数 </td>
<td> Count / LongCount </td>
<td> count </td>
</tr>
<tr>
<td></td>
<td> 最大 </td>
<td> Max </td>
<td> max </td>
</tr>
<tr>
<td></td>
<td> 最小 </td>
<td> Min </td>
<td> min </td>
</tr>
<tr>
<td></td>
<td> 合計 </td>
<td> Sum </td>
<td> IntStream.sum / Collectors.summarizingXXX</td>
</tr>
<tr>
<td></td>
<td> 先頭 </td>
<td> First / FirstOrDefault </td>
<td> findFirst </td>
</tr>
<tr>
<td></td>
<td> 終端 </td>
<td> Last / LastOrDefault </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> とりあえず値を得る </td>
<td> </td>
<td> findAny </td>
</tr>
<tr>
<td></td>
<td> 集計用の汎用関数？ </td>
<td> </td>
<td> collect </td>
</tr>
<tr>
<td></td>
<td> 1件の値を得る </td>
<td> Single / SingleOrDefault </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 空なら既定値を返す </td>
<td> DefaultIfEmpty </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 全データが条件にマッチするか？ </td>
<td> All </td>
<td> allMatch </td>
</tr>
<tr>
<td></td>
<td> いずれかのデータが条件にマッチするか？ </td>
<td> Any </td>
<td> anyMatch </td>
</tr>
<tr>
<td></td>
<td> いずれかのデータも条件にマッチしないか？ </td>
<td> </td>
<td> noneMatch </td>
</tr>
<tr>
<td></td>
<td> <strong>【生成系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> 空っぽ </td>
<td> Empty </td>
<td> empty </td>
</tr>
<tr>
<td></td>
<td> 範囲を生成 </td>
<td> Range </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 繰り返す </td>
<td> Repeat </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 無限リスト生成 </td>
<td> </td>
<td> generate / iterate </td>
</tr>
<tr>
<td></td>
<td> <strong>【その他】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> </td>
<td> SequenceEqual </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 列挙 </td>
<td> ToList().ForEach </td>
<td> forEach </td>
</tr>
<tr>
<td></td>
<td> なんか Action を挟む(デバッグ用？) </td>
<td> </td>
<td> peek </td>
</tr>
</tbody>
</table>


<p>ううむ、合成系の機能はほとんどないようです…ので自力でやるしか。
以下、サンプル。</p>

<h2>サンプル</h2>

<p>LINQ の方は Mac+Mono(Xamarin) で試しています（ぼそり</p>

<h3>抽出(Where)、並べ替え(OrderBy)、射影(Select)</h3>

<p>0〜9 を、偶数値だけ抽出して、降順にソートして、値を10倍して、出力。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">*</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">).</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">-</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">80</span> <span class="mi">60</span> <span class="mi">40</span> <span class="mi">20</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>平坦化して射影(SelectMany)</h3>

<p>1〜5のリストから、「n×10から始まるn件」のリストを生成。(結果見たほうが分かりやすいな（<sup>_<sup>;)</sup></sup></p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">10</span> <span class="p">*</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">).</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="o">,</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">).</span><span class="na">boxed</span><span class="o">())</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">20</span> <span class="mi">21</span>
</span><span class='line'><span class="mi">30</span> <span class="mi">31</span> <span class="mi">32</span>
</span><span class='line'><span class="mi">40</span> <span class="mi">41</span> <span class="mi">42</span> <span class="mi">43</span>
</span><span class='line'><span class="mi">50</span> <span class="mi">51</span> <span class="mi">52</span> <span class="mi">53</span> <span class="mi">54</span>
</span></code></pre></td></tr></table></div></figure>


<h3>抽出系(Take, Skip)</h3>

<p>1〜10のリストの3件飛ばして、5件取得。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Skip</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 無限リストでも limit あるから大丈夫</span>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">x</span><span class="o">-&gt;</span> <span class="n">x</span><span class="o">++)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>LINQ には件数でなく条件を指定できる <code>TakeWhile</code> <code>SkipWhile</code> がありますが、Java にはなさそうなので <code>filter</code> で代用しないといけなさそう。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">SkipWhile</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">TakeWhile</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="m">9</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>連結(Concat)</h3>

<p>2つのリストをつなげる</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">}.</span><span class="n">Concat</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span> <span class="m">30</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">10</span> <span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
</span><span class='line'>  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="na">stream</span><span class="o">(),</span>
</span><span class='line'>  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span><span class="mi">20</span><span class="o">,</span><span class="mi">10</span><span class="o">).</span><span class="na">stream</span><span class="o">())</span>
</span><span class='line'><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんで static メソッドやねん…。</p>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">30</span> <span class="mi">20</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h3>積集合(Intersect)、和集合(Union)、差集合(Except)</h3>

<p>積集合：2つのリストから重複をなくす。
和集合：2つのリストをマージする。
差集合：リスト1を基準にリスト2との差分を得る。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">list1</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">list2</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">8</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1</span><span class="p">.</span><span class="n">Intersect</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1</span><span class="p">.</span><span class="n">Union</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1</span><span class="p">.</span><span class="n">Except</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 自力で実現かよｗ</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">list2</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">x</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">(),</span>
</span><span class='line'>  <span class="n">list2</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">noneMatch</span><span class="o">(</span><span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">x</span><span class="o">)))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">list2</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">noneMatch</span><span class="o">(</span><span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">x</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="c1">// 積</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">8</span> <span class="mi">7</span> <span class="c1">// 和</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="c1">// 差</span>
</span></code></pre></td></tr></table></div></figure>


<h3>内部結合(Join)</h3>

<p>商品マスタと売上テーブルを INNER JOIN する的な。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">master</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Apple&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Grape&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">sales</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">100</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">200</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">300</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">400</span> <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">master</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="n">sales</span><span class="p">,</span>
</span><span class='line'>  <span class="n">outer</span><span class="p">=&gt;</span><span class="n">outer</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
</span><span class='line'>  <span class="n">inner</span><span class="p">=&gt;</span><span class="n">inner</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">o</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Sales</span> <span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 自力</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">master</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Apple&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;Grape&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">sales</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">200</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">300</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">400</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">master</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">outer</span> <span class="o">-&gt;</span> <span class="n">sales</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">inner</span> <span class="o">-&gt;</span> <span class="n">outer</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">==</span> <span class="n">inner</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">z</span><span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">outer</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span> <span class="n">z</span><span class="o">.</span><span class="na">getValue</span><span class="o">())))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span> <span class="n">Name</span> <span class="o">=</span> <span class="n">Apple</span><span class="o">,</span> <span class="n">Sales</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">Name</span> <span class="o">=</span> <span class="n">Grape</span><span class="o">,</span> <span class="n">Sales</span> <span class="o">=</span> <span class="mi">200</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">Name</span> <span class="o">=</span> <span class="n">Grape</span><span class="o">,</span> <span class="n">Sales</span> <span class="o">=</span> <span class="mi">300</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>外部結合(GroupJoin)</h3>

<p>商品マスタと売上テーブルを OUTER JOIN する的な。結合先のテーブルに行が見つからなかったものは null になる。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">master</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Apple&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Grape&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">5</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Orange&quot;</span> <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">sales</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]</span> <span class="p">{</span>  <span class="c1">// Orange は無い</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">100</span><span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">200</span><span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">400</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">master</span><span class="p">.</span><span class="n">GroupJoin</span><span class="p">(</span><span class="n">sales</span><span class="p">,</span>
</span><span class='line'>  <span class="n">outer</span><span class="p">=&gt;</span><span class="n">outer</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
</span><span class='line'>  <span class="n">inner</span><span class="p">=&gt;</span><span class="n">inner</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">o</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">FirstOfSales</span> <span class="p">=</span> <span class="n">i</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="p">=&gt;(</span><span class="kt">int?</span><span class="p">)</span><span class="n">x</span><span class="p">.</span><span class="n">Sales</span><span class="p">).</span><span class="n">FirstOrDefault</span><span class="p">()</span> <span class="p">})</span> <span class="c1">// 無かったら null にしたいので null許容型にしてから FirstOrDefault</span>
</span><span class='line'><span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>たぶん普通は First じゃなくて Sum とか使うんだろう。</p>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// これも自力</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">master</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Apple&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;Grape&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">5</span><span class="o">,</span> <span class="s">&quot;Orange&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">sales</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">200</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">300</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">400</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">master</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">outer</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;(</span><span class="n">outer</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span>
</span><span class='line'>  <span class="n">sales</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">inner</span><span class="o">-&gt;</span><span class="n">inner</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">==</span> <span class="n">outer</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span> <span class="c1">// Id でフィルタ</span>
</span><span class='line'>      <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">x</span><span class="o">.</span><span class="na">getValue</span><span class="o">())</span> <span class="c1">// Sales だけに射影</span>
</span><span class='line'>      <span class="o">.</span><span class="na">findFirst</span><span class="o">()))</span> <span class="c1">// 同一Id中の先頭</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[.</span><span class="na">NET</span><span class="o">]</span>
</span><span class='line'><span class="o">{</span> <span class="n">Name</span> <span class="o">=</span> <span class="n">Apple</span><span class="o">,</span> <span class="n">FirstOfSales</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">Name</span> <span class="o">=</span> <span class="n">Grape</span><span class="o">,</span> <span class="n">FirstOfSales</span> <span class="o">=</span> <span class="mi">200</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">Name</span> <span class="o">=</span> <span class="n">Orange</span><span class="o">,</span> <span class="n">FirstOfSales</span> <span class="o">=</span> <span class="o">}</span> <span class="c1">// 相手が居ないやつは null になる</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">Java</span><span class="o">]</span>
</span><span class='line'><span class="n">Apple</span><span class="o">=</span><span class="n">Optional</span><span class="o">[</span><span class="mi">100</span><span class="o">]</span>
</span><span class='line'><span class="n">Grape</span><span class="o">=</span><span class="n">Optional</span><span class="o">[</span><span class="mi">200</span><span class="o">]</span>
</span><span class='line'><span class="n">Orange</span><span class="o">=</span><span class="n">Optional</span><span class="o">.</span><span class="na">empty</span> <span class="c1">// Option だから empty になるのは良い</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2つの値を揃えて流す(Zip)</h3>

<p>２つのリストの値をひとつずつセットにして流す。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">arr1</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span> <span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">arr2</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;hoge&quot;</span><span class="p">,</span> <span class="s">&quot;fuga&quot;</span><span class="p">,</span> <span class="s">&quot;piyo&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr1</span><span class="p">.</span><span class="n">Zip</span><span class="p">(</span><span class="n">arr2</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span>  <span class="k">new</span> <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ToList</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// FIXME どうやるの？ Streams.zip はどこいった？</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">hoge</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">fuga</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">piyo</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>重複を無くす(Distinct)</h3>

<p>重複する数値リストから重複をなくす。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Distinct</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">).</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">distinct</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>畳み込み</h3>

<p>いろいろな集計の素、畳み込み。言語により fold とか reduce とか aggregate とか、いろいろな呼び名がありますね。
よい例が浮かなかったので Max を実装してみました。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">max</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Aggregate</span><span class="p">(</span><span class="n">Int32</span><span class="p">.</span><span class="n">MinValue</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Math</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">max</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">).</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<h3>グループ化</h3>

<p>リストの要素をキーにしてグループ化する。Salesは合計を計算する。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sales</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">100</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">200</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">300</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Sales</span> <span class="p">=</span> <span class="m">400</span> <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">sales</span><span class="p">.</span><span class="n">GroupBy</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="p">(</span><span class="n">Id</span><span class="p">,</span> <span class="n">groupedSales</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span><span class="n">Id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SumOfSales</span> <span class="p">=</span> <span class="n">groupedSales</span><span class="p">.</span><span class="n">Sum</span><span class="p">(</span> <span class="n">element</span> <span class="p">=&gt;</span> <span class="n">element</span><span class="p">.</span><span class="n">Sales</span><span class="p">)</span> <span class="c1">// Sales は合計する</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>（LINQ ではありませんが、 <code>List.LookUp</code> を使って実現することもできるようです → <a href="http://qiita.com/amay077/items/9d2941283c4a5f61f302#comment-82388821b902ad7999b0">コメント:2014/03/22 00:29</a>）</p>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// javafx に Pair があったので Tuple 代わりに使っちゃった</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">200</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">300</span><span class="o">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">400</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">getKey</span><span class="o">()))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">entrySet</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span> <span class="c1">// group化の結果が Map なので、エントリを Stream 化</span>
</span><span class='line'>  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="c1">// Key が Id に相当</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">summingInt</span><span class="o">(</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">y</span><span class="o">.</span><span class="na">getValue</span><span class="o">()))))</span> <span class="c1">// Value が List なのでまた Stream 化して合計を得る</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Collectors.groupingBy 使わずに Map.merge を使ったほうが分かりやすい気も。。。</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
</span><span class='line'>  <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(),</span>
</span><span class='line'>  <span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">map</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">item</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">),</span> <span class="c1">// 同じキーの値を加算してく</span>
</span><span class='line'>  <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">left</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">right</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">v</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java の方、カオスすぎる…。.NET の <code>IGrouping</code> を Map でやってるからだな。</p>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[.</span><span class="na">NET</span><span class="o">]</span>
</span><span class='line'><span class="o">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">SumOfSales</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">SumOfSales</span> <span class="o">=</span> <span class="mi">500</span> <span class="o">}</span> <span class="c1">// ID=2 の Sales が合計されている</span>
</span><span class='line'><span class="o">{</span> <span class="n">Id</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="n">SumOfSales</span> <span class="o">=</span> <span class="mi">400</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">Java</span><span class="o">]</span>
</span><span class='line'><span class="mi">1</span><span class="o">=</span><span class="mi">100</span>
</span><span class='line'><span class="mi">2</span><span class="o">=</span><span class="mi">500</span>
</span><span class='line'><span class="mi">3</span><span class="o">=</span><span class="mi">400</span>
</span></code></pre></td></tr></table></div></figure>


<h3>合計(Sum)、最大(Max)、最小(Min)、平均(Average)、件数(Count)、先頭(First)、終端(Last)</h3>

<p>集計いろいろ。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">list1</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">10</span><span class="p">);</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Sum={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">Sum</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Max={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">Max</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Min={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">Min</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Count={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">Count</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;First={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">First</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Last={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">Last</span><span class="p">());</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Average={0}&quot;</span><span class="p">,</span> <span class="n">list1</span><span class="p">.</span><span class="n">Average</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">);</span>
</span><span class='line'><span class="n">IntSummaryStatistics</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">summarizingInt</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">));</span> <span class="c1">// Max,Min,Count,Average が取得できる</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sum=&quot;</span> <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">getSum</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Max=&quot;</span> <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">getMax</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Min=&quot;</span> <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">getMin</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Count=&quot;</span> <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">getCount</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;First=&quot;</span> <span class="o">+</span> <span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findFirst</span><span class="o">().</span><span class="na">orElse</span><span class="o">(-</span><span class="mi">1</span><span class="o">));</span> <span class="c1">// summarizing では取れない</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Last=&quot;</span> <span class="o">+</span> <span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">sorted</span><span class="o">((</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">y</span><span class="o">-</span><span class="n">x</span><span class="o">).</span><span class="na">findFirst</span><span class="o">().</span><span class="na">orElse</span><span class="o">(-</span><span class="mi">1</span><span class="o">));</span> <span class="c1">// 微妙</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Average=&quot;</span> <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">getAverage</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Average=&quot;</span> <span class="o">+</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">).</span><span class="na">average</span><span class="o">());</span> <span class="c1">// 型指定 Stream なら average, sum がある（結果は Option に包まれる）</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Sum</span><span class="o">=</span><span class="mi">45</span>
</span><span class='line'><span class="n">Max</span><span class="o">=</span><span class="mi">9</span>
</span><span class='line'><span class="n">Min</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">Count</span><span class="o">=</span><span class="mi">10</span>
</span><span class='line'><span class="n">First</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">Last</span><span class="o">=</span><span class="mi">9</span>
</span><span class='line'><span class="n">Average</span><span class="o">=</span><span class="mf">4.5</span>
</span></code></pre></td></tr></table></div></figure>


<p>…疲れた。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity がメモリリークしにくくなってる件]]></title>
    <link href="http://amay077.github.io/blog/2014/03/19/android-memory-leaks-improvements/"/>
    <updated>2014-03-19T15:12:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/19/android-memory-leaks-improvements</id>
    <content type="html"><![CDATA[<p>2009年の情報なんですけどね。</p>

<!--more-->


<ul>
<li><a href="http://android-developers.blogspot.jp/2009/01/avoiding-memory-leaks.html">Avoiding memory leaks | Android Developers Blog</a></li>
<li><a href="http://d.hatena.ne.jp/androidzaurus/20090121/1232519066">Avoiding memory leaks （超訳） - Android Zaurusの日記</a></li>
<li><a href="http://tomokey.blogspot.jp/2011/05/android.html">暇なメモ帳: Androidのソースコードレビュー(メモリリーク)</a></li>
</ul>


<p>Android でメモリリークする典型的なパターンとして上で紹介されているものがあって、日頃はこうならないように気をつけて実装をしているわけです。</p>

<p>また、メモリリークの調査方法もたくさん情報があります。</p>

<ul>
<li><a href="http://rainbowdevil.jp/?p=1187">Androidでメモリリークの調査と、そのヒープダンプから画像を抽出する » RainbowDevilsLand</a></li>
<li><a href="http://tlync.hateblo.jp/entry/20111220/1324372308">富豪的 Android プログラマの為の Eclipse Memory Analyzer Tool 入門 - sandbox</a></li>
</ul>


<p>日頃、Xamarin.Android を触っているので、「Xamarin でも同じようにリークするよね」と思いやってみたところ全然リークしなかったので、もしや Android-Java でもリークしないんじゃ？と考え、試してみたのが以下の内容です。</p>

<h2>試した</h2>

<p>以下の2つのパターンについて試しました</p>

<ol>
<li>Avoiding memory leaks の 2番目の例。Activity への強参照を持った Drawable を static なメンバにキープしちゃう件。画面が回転した時に、Activity がリークしてしまう、とされる。</li>
<li>暇なメモ帳さんの「問題3」＋α。非static な Inner クラスが Activity の強参照を持ってる、且つ、このオブジェクトを Activity の static メンバにしちゃう。</li>
</ol>


<h2>結論</h2>

<p>から言うと、</p>

<p><strong>1. はリークせず、2. はリークしました。</strong></p>

<p>あれれ？</p>

<h2>パターン1のテストコード</h2>

<p>ほぼ元コードのコピペだけど、クラスが破棄された(<code>finalize</code>)時にログ吐くようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Drawable</span> <span class="n">sBackground</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onCreate:&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Leaks are bad&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sBackground</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sBackground</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDrawable</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">ic_launcher</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">setBackgroundDrawable</span><span class="o">(</span><span class="n">sBackground</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">button</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onDestroy:&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;finalize:&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">finalize</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>確認手順</h3>

<ol>
<li>このアプリを実行。Android2.3 のエミュレータ(4.0 の実機でも試した)。</li>
<li>画面を回転させる（Ctrl+F11）</li>
<li>DDMS から GC を走らせる</li>
<li>LogCat を収集</li>
</ol>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/improve_activity_leaks_02.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/264530/qiita/improve_activity_leaks_03.png" alt="" /></p>

<p>Logcat の出力結果はこう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.539</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">382</span><span class="o">):</span> <span class="nl">onCreate:</span><span class="mi">1079076320</span>
</span><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">29</span><span class="o">:</span><span class="mf">15.979</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">382</span><span class="o">):</span> <span class="nl">onDestroy:</span><span class="mi">1079076320</span>
</span><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">29</span><span class="o">:</span><span class="mf">15.989</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">382</span><span class="o">):</span> <span class="nl">onCreate:</span><span class="mi">1079106528</span> <span class="err">←横画面の</span><span class="n">Activity</span>
</span><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">29</span><span class="o">:</span><span class="mf">33.939</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">382</span><span class="o">):</span> <span class="nl">finalize:</span><span class="mi">1079076320</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちゃんと GC を走らせた後、 Activity の <code>finalize</code> が呼ばれています。
MAT でも確認したけど、リークは発見できませんでした。</p>

<h2>パターン2のテストコード</h2>

<p>こんな実装は早々お目にかからないと思うけど、非static な Inner クラスのインスタンスを、Activity の static メンバにしちゃうぞ、と。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">SomeInnerClass</span> <span class="n">innerClass</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onCreate&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">innerClass</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">innerClass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeInnerClass</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onDestroy&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;finalize&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">finalize</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">SomeInnerClass</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>確認手順</h3>

<p>パターン1と同じです。</p>

<p>Logcat の出力結果はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">42</span><span class="o">:</span><span class="mf">55.289</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">476</span><span class="o">):</span> <span class="n">onCreate</span>
</span><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mf">05.369</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">476</span><span class="o">):</span> <span class="n">onDestroy</span>
</span><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">19</span> <span class="mi">21</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mf">05.549</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">476</span><span class="o">):</span> <span class="n">onCreate</span>
</span></code></pre></td></tr></table></div></figure>


<p>ご覧のとおり、<code>finalize</code> が呼ばれない、つまり Activity がリークしています。</p>

<h2>考察っぽいの</h2>

<p>パターン2 がリークするのは当然と言えます。
Activity への強参照を持ったオブジェクトを、static フィールドで保持し続けてしまうので、Activity が破棄されない。</p>

<p>パターン1 も同じ理屈だと思うのですが（少なくとも冒頭の記事の説明ではそう）。これがリークしないのは、Android SDK が改善された(例えば、今まで Activity の強参照を持ってたのが弱参照に変わった)とか、Dalvik の GC が改善されたとかでしょうか？</p>

<p>まあ4年も経てば常識も変わるということで、Activity に関しては以前ほど神経質にならなくてもいいかもしれませんが、メモリリークの可能性が消えることは有り得ないので、このアンチパターンはこれからも遵守していかないといけませんね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ふたつの Iterator を LINQ で]]></title>
    <link href="http://amay077.github.io/blog/2014/03/19/pair-iterator-implements-by-linq/"/>
    <updated>2014-03-19T00:33:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/19/pair-iterator-implements-by-linq</id>
    <content type="html"><![CDATA[<p>ふたつの Iterator を LINQ で</p>

<ul>
<li><a href="http://d.hatena.ne.jp/Nagise/20140315/1394884271">ふたつのIterator - プログラマーの脳みそ</a></li>
</ul>


<p>を拝見しました。</p>

<!--more-->


<p>コメントで「Zip じゃん」というのがあり、「確かに！」と思ったのでやってみました。</p>

<h2>C＃ の場合</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// using using System.Linq;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">arr1</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span> <span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">arr2</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;hoge&quot;</span><span class="p">,</span> <span class="s">&quot;fuga&quot;</span><span class="p">,</span> <span class="s">&quot;piyo&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr1</span><span class="p">.</span><span class="n">Zip</span><span class="p">(</span><span class="n">arr2</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span>  <span class="k">new</span> <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ToList</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ForEach</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">{</span> <span class="n">x</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">hoge</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="n">x</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">fuga</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="n">x</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">piyo</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>うむ、シンプル。要素数が違ってても少ない方に合わせてくれます。</p>

<h2>Java の場合</h2>

<p><a href="https://code.google.com/p/reactive4java/">reactive4java</a> というライブラリがありまして、これは Java で Reactive Extensions を実現するライブラリなのですが、LINQ的な機能が <code>Interactive</code> というクラスで提供されています。</p>

<p>これを使うと Zip ができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//import hu.akarnokd.reactive4java.base.Func2;</span>
</span><span class='line'><span class="c1">//import hu.akarnokd.reactive4java.interactive.Interactive;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">array1</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">array2</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;hoge&quot;</span><span class="o">,</span> <span class="s">&quot;fuga&quot;</span><span class="o">,</span> <span class="s">&quot;piyo&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">zippedIter</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">Interactive</span><span class="o">.</span><span class="na">zip</span><span class="o">(</span><span class="n">array1</span><span class="o">,</span> <span class="n">array2</span><span class="o">,</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">Func2</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">invoke</span><span class="o">(</span><span class="n">Integer</span> <span class="n">x</span><span class="o">,</span> <span class="n">String</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">zippedIter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">zippedIter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;StartupActivity&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;x=%d, y=%s&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">first</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">second</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ああ、Android で試したので <code>Pair</code> とか使ってしまった。
普通の Java の場合は自作の Tuple などに置き換えを。</p>

<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">=</span><span class="n">hoge</span>
</span><span class='line'><span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">y</span><span class="o">=</span><span class="n">fuga</span>
</span><span class='line'><span class="n">x</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">y</span><span class="o">=</span><span class="n">piyo</span>
</span></code></pre></td></tr></table></div></figure>


<p>C# より冗長ですけど、いい感じで利用できるのではと思います。</p>

<p>reactive4java が Java8 のラムダ式に対応してくれると、上のコードはもっと簡潔に書けます。</p>

<p><a href="https://code.google.com/p/reactive4java/wiki/Reactive4Java8">Reactive4Java8</a> には、対応してる感じが見られますが、<a href="https://code.google.com/p/reactive4java/">Top ページ</a> によると、どうやら、「reactive4java の開発は終了し、<a href="https://github.com/Netflix/RxJava">RxJava</a> の開発に参加するつもりだ」みたいなことが書いてあります。</p>

<p>また、RxJava でなく reactive4java を使う利点として、<code>Interactive</code> 機能群の存在を挙げています。
単純に LINQ 的な機能を Java で使いたいならば、 reactive4java はまだまだ役に立つと思います。</p>

<p>最後に、もしあなたが Android 開発をしていて、Java の冗長さに嫌気がさしているなら、<a href="http://xamarin.com/csharp"><strong>Xamarin へどうぞ</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS アプリでアラート出してボタンが押されるまで待つ？方法を Objective-C と Xamarin.iOS で比べてみた]]></title>
    <link href="http://amay077.github.io/blog/2014/03/10/using-uialertview-objc-vs-xamarin/"/>
    <updated>2014-03-10T22:09:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/10/using-uialertview-objc-vs-xamarin</id>
    <content type="html"><![CDATA[<p>なんか割とニーズがあるみたいで。</p>

<!--more-->


<ul>
<li><a href="http://teapipin.blog10.fc2.com/blog-entry-224.html">【Objective-C】アラート（UIAlertView）でボタンを押すまで次の処理を待つ方法 - creativi.tea</a></li>
<li><a href="http://cocoadays.blogspot.jp/2011/05/ios.html">Cocoaの日々: [iOS] 非同期処理を同期処理に変える</a></li>
<li><a href="http://qiita.com/edo_m18/items/cb1d9061d91e572b58eb">[Objective-C] UIAlertViewを同期処理する - Qiita </a></li>
</ul>


<h2>Objective-C の場合</h2>

<p><code>UIAlertView</code> は、結果を受け取るのが deletgate で、 Objective-C では、(Blocks を使わなければ) 受け取りが別メソッドになってしまう、しかも複数のアラートの結果が同じメソッドに飛んでくるので、tag値で分岐…とかいろいろで、ホントに使うのが面倒ですね。</p>

<p>さらに、「アラートの結果を受け取ってから、次の処理を行う」という処理を素直に記述したいと思うと、上で示したような「アラートを表示して、結果が得られるまで while で待つ」というなんとも不格好なコードになってしまいます。下にも書いてみました。（あ、メンバ変数も使わざるを得ないし。）</p>

<figure class='code'><figcaption><span>HogeViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">HogeViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">_buttonIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">buttonTouchUp:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="nb">nil</span>
</span><span class='line'>                                <span class="nl">message:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;なにか押して&quot;</span><span class="p">,</span><span class="s">@&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                               <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                      <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;Cancel&quot;</span>
</span><span class='line'>                      <span class="nl">otherButtonTitles:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ボタンが押されるまで待つ</span>
</span><span class='line'>    <span class="n">_buttonIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">_buttonIndex</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span>
</span><span class='line'>         <span class="nl">runUntilDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSinceNow:</span><span class="mf">0.5f</span><span class="p">]];</span> <span class="c1">// 0.5秒</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">label1</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d 番目のボタンを押したね&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">_buttonIndex</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span><span class="o">*</span><span class="p">)</span><span class="n">alertView</span> <span class="nl">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">buttonIndex</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_buttonIndex</span> <span class="o">=</span> <span class="n">buttonIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[NSRunLoop runUntilDate]</code> なんて VB6 の <code>DoEvents</code> ですもんねなつかしい。</p>

<h2>Xamarin.iOS(C#) の場合</h2>

<p>Objective-C ではややこしかった「アラートを出す→ボタンを押す→次の処理へ」という流れ、 Xamarin.iOS と C# ならこんなにシンプルに書けます。</p>

<figure class='code'><figcaption><span>HogeViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">async</span> <span class="k">void</span> <span class="nf">OnButtonTouch</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">buttonIndex</span> <span class="p">=</span> <span class="k">await</span> <span class="n">MsgBox</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;なにか押して&quot;</span><span class="p">,</span> <span class="s">&quot;Cancel&quot;</span><span class="p">,</span> <span class="s">&quot;OK&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">label1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">buttonIndex</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;番目を押したね&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">MsgBox</span><span class="p">(</span><span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">cancelButtonTitle</span><span class="p">,</span> <span class="k">params</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">buttons</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">comp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TaskCompletionSource</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UIAlertView</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="n">cancelButtonTitle</span><span class="p">,</span> <span class="n">buttons</span><span class="p">);</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">+=</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">comp</span><span class="p">.</span><span class="n">TrySetResult</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">ButtonIndex</span><span class="p">);</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">Show</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">comp</span><span class="p">.</span><span class="n">Task</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>VB6 が懐かしくて <code>MsgBox</code> ってメソッドにしちゃいましたよ。</p>

<p><code>MsgBox</code> は、Task を返す <strong>非同期な</strong> メソッドです。この非同期処理が終了するのは、<code>TaskCompletionSource.TrySetResult</code> が呼び出された時、つまりアラートのボタンが押された時です。この非同期処理の戻り値はもちろん押したボタンのインデックスです。</p>

<p>非同期メソッドである <code>MsgBox</code> を呼び出す側には、キーワード <code>await</code> が付いています。
これをつけると、次行以降の処理は、非同期の MsgBox が完了した後、順次実行されます、つまり待っているわけではなく、どちらかというと、 <strong>処理を後続に付け足す</strong> 感じ。
さらに、この後続処理はUIスレッドで実行されるので、UIパーツへのアクセスも問題ありません。</p>

<p><code>async</code> はメソッド内で <code>await</code> を使うときにつけるお約束。</p>

<p>async/await は一見、ただの同期処理に見えるので理解して使う必要がありますが、Objective-C のコードに比べて、とても簡潔に、流れるように書くことができるのが分かると思います。</p>

<p><strong>C# の非常に強力な言語機能は、<a href="https://xamarin.com/">Xamarin</a> を選択する大きな理由の一つです。</strong></p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/4613071/messagebox-show-and-dialogresult-equivalent-in-monotouch">c# - Messagebox.Show and DialogResult equivalent in MonoTouch - Stack Overflow</a></li>
<li><a href="http://ufcpp.wordpress.com/2012/11/12/asyncawait%e3%81%a8%e5%90%8c%e6%99%82%e5%ae%9f%e8%a1%8c%e5%88%b6%e5%be%a1/">async/awaitと同時実行制御 | ++C++; // 未確認飛行 C ブログ</a></li>
<li><a href="http://www.slideshare.net/bleistift/asyncawait2">async/await不要論</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin によるクロスプラットフォームモバイルアプリ開発、資料と補足]]></title>
    <link href="http://amay077.github.io/blog/2014/02/27/slides-from-my-xamarin-introduction/"/>
    <updated>2014-02-27T21:40:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/02/27/slides-from-my-xamarin-introduction</id>
    <content type="html"><![CDATA[<p>2/26 の <a href="http://atnd.org/events/47898">うずらインキュベータ</a> という勉強会で、Xamarin の話をしました。</p>

<!--more-->




<iframe src="http://www.slideshare.net/slideshow/embed_code/31674661" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/amay077/xamarin-31674661" title="Xamarin によるクロスプラットフォームモバイルアプリ開発" target="_blank">Xamarin によるクロスプラットフォームモバイルアプリ開発</a> </strong> from <strong><a href="http://www.slideshare.net/amay077" target="_blank">amay 077</a></strong> </div></p>

<p>45分という長い時間話すのは勉強会では初めてだったのですが、なんとか説明し切ることができました。（ちょっとデモが中途半端になってしまいましたが）</p>

<p>資料は <a href="http://qiita.com/tags/xamarin">Qiita に書いてきた</a> 内容のまとめみたいなものですが、少し補足します。</p>

<h2>Xamarin で作った経験あるの？</h2>

<p>仕事では、まだ無いです（<sup>_<sup>;）</sup></sup>
個人アプリでは「<a href="https://itunes.apple.com/us/app/fu-shifoto/id806913229">富士フォト</a>」というのを iOS 用は Xamarin.iOS で作りました。<a href="https://play.google.com/store/apps/details?id=com.amay077.android.fujiphoto">Android</a> は Java ですが Xamarin 化したいな。</p>

<h2>Win+Visual Studio ではダメなの？</h2>

<p>個人の見解ですから（<sup>_<sup>;）</sup></sup>
私も元々は Windowsの開発がメインで Visual Studio の強力さは知っていますが、iOS やるならどういう形にせよ Mac+Xcode を扱わないといけないので、慣れておいた方がよいかなと。</p>

<p>また、Microsoft との提携以降、Microsoft のエバンジェリストさんや MVP の方々が Visual Studio + Xamarin の話をものすごく展開されているので、そちらにお任せした次第です。</p>

<h2>実行モデルのとこ</h2>

<p>JavaSE が .NET に置き換わる図になっていますが、実際には少し違っていて、JavaSE のラッパもあります。例えば文字列型には、<code>System.String</code> と <code>Java.Lang.String</code> があります。当然、理由がなければ前者を使った方がよいわけですが。</p>

<p>iOS のスタックに関しては、実はどこからどこまでが「CocoaTouch」なのかよく分かってません。</p>

<h2>他のクロスプラットフォーム開発ツールとの比較</h2>

<p>Titanium, AIR については2年くらい前に少し触ったことがあります。PhoneGap と DelphiXE についてはスペックを見て＆詳しい方からの情報を元にしてます。</p>

<p>Titanium は次期 <a href="http://titanium-mobile.jp/38">Ti.Next</a> では JavaScriptCore を使ってすんごく速くなるそうですし、AIR も当時よりだいぶ <a href="http://www.slideshare.net/pik256/dev-sumi2014-13c4rev">高速になったらしい</a> です。</p>

<h2>C# のとこ</h2>

<p>https://xamarin.com/csharp よりは悪意のないコードかとｗ
（Objective-C と比較しようとすると Obj-C の方が画面に入らないので Java との比較にしました。）</p>

<p>こんなところで。
何かおかしなところがあったらコメント頂けるとありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手抜きカラー選択ダイアログを作る]]></title>
    <link href="http://amay077.github.io/blog/2014/02/27/make-shoddy-colorpicker/"/>
    <updated>2014-02-27T21:38:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/02/27/make-shoddy-colorpicker</id>
    <content type="html"><![CDATA[<p>Android で「定められた色リストから１つ選択する」ダイアログを作ります。</p>

<!--more-->


<h2>さっそくコード</h2>

<p><code>AlertDialog</code> には自作の <code>Adapter</code> が設定できるので、「項目値を背景色にする Adapter」を作って設定すれば OK でした。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="n">_colors</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span> <span class="o">};</span> <span class="c1">// 色リスト</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">ID_COLOR_PICKER</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 背景に色リストを適用する ListAdapter</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ColorListAdapter</span> <span class="kd">extends</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">ColorListAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Integer</span><span class="o">[]</span> <span class="n">colors</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_1</span><span class="o">,</span> <span class="n">colors</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">TextView</span> <span class="n">view</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">parent</span><span class="o">);</span>
</span><span class='line'>          <span class="n">view</span><span class="o">.</span><span class="na">setBackgroundColor</span><span class="o">(</span><span class="n">getItem</span><span class="o">(</span><span class="n">position</span><span class="o">));</span>
</span><span class='line'>          <span class="n">view</span><span class="o">.</span><span class="na">setTextColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">TRANSPARENT</span><span class="o">);</span> <span class="c1">// 色値が表示されないように隠す</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button1</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">showDialog</span><span class="o">(</span><span class="n">ID_COLOR_PICKER</span><span class="o">);</span> <span class="c1">// ダメよ直接 Dialog.show() しちゃ</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Dialog</span> <span class="nf">onCreateDialog</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">ID_COLOR_PICKER:</span>
</span><span class='line'>          <span class="n">ColorListAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorListAdapter</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">_colors</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="n">AlertDialog</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;Select color&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">,</span> <span class="k">new</span> <span class="n">DialogInterface</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">DialogInterface</span> <span class="n">dialog</span><span class="o">,</span> <span class="kt">int</span> <span class="n">which</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span>
</span><span class='line'>                              <span class="s">&quot;You picked index=&quot;</span> <span class="o">+</span> <span class="n">which</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}).</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onCreateDialog</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>キャストしてるところがちょっと不安ですけど、まあいいでしょう。</p>

<h2>動かしてみる</h2>

<p>こんな感じです。だいぶ味気ないけど、要件は満たします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/making_shoddy_color_picking_dialog_01.png" alt="" /></p>

<h2>Xamarin でも作ってみる</h2>

<p>本題とまったく関係ありませんが、同じものを Xamarin.Android で作ると、こうなります。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Activity(Label = &quot;ColorPickerSample&quot;, MainLauncher = true)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">Activity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">readonly</span> <span class="n">Color</span><span class="p">[]</span> <span class="n">_colors</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="n">ID_COLOR_PICKER</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ColorListAdapter</span> <span class="p">:</span> <span class="n">ArrayAdapter</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">ColorListAdapter</span><span class="p">(</span><span class="n">Context</span> <span class="n">context</span><span class="p">,</span> <span class="n">Color</span><span class="p">[]</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">Android</span><span class="p">.</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">SimpleListItem1</span><span class="p">,</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">View</span> <span class="nf">GetView</span><span class="p">(</span><span class="kt">int</span> <span class="n">position</span><span class="p">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="p">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">view</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="n">GetView</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="n">convertView</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">as</span> <span class="n">TextView</span><span class="p">;</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">SetBackgroundColor</span><span class="p">(</span><span class="k">new</span> <span class="n">Color</span><span class="p">(</span><span class="n">GetItem</span><span class="p">(</span><span class="n">position</span><span class="p">)));</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">SetTextColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Transparent</span><span class="p">);</span> <span class="c1">// 色値が表示されないように隠す</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>        <span class="n">SetContentView</span><span class="p">(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">Main</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">myButton</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Click</span> <span class="p">+=</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">ShowDialog</span><span class="p">(</span><span class="n">ID_COLOR_PICKER</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="n">Dialog</span> <span class="nf">OnCreateDialog</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ID_COLOR_PICKER</span><span class="p">:</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">adapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ColorListAdapter</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_colors</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="n">AlertDialog</span><span class="p">.</span><span class="n">Builder</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">SetTitle</span><span class="p">(</span><span class="s">&quot;Select color&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">SetAdapter</span><span class="p">(</span><span class="n">adapter</span><span class="p">,</span>
</span><span class='line'>                        <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Toast</span><span class="p">.</span><span class="n">MakeText</span><span class="p">(</span>
</span><span class='line'>                            <span class="k">this</span><span class="p">,</span> <span class="s">&quot;You picked index=&quot;</span> <span class="p">+</span> <span class="n">e</span><span class="p">.</span><span class="n">Which</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                            <span class="n">ToastLength</span><span class="p">.</span><span class="n">Long</span><span class="p">).</span><span class="n">Show</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="n">OnCreateDialog</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Android API は同じなのでほとんど同じ、言語仕様の特性で少しコンパクトになりますかね。</p>

<p>では、また。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVMフレームワーク「ReactiveUI」を Xamarin.iOS で使ってみる]]></title>
    <link href="http://amay077.github.io/blog/2014/02/27/using-reactiveui-on-xamarin-ios/"/>
    <updated>2014-02-27T21:34:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/02/27/using-reactiveui-on-xamarin-ios</id>
    <content type="html"><![CDATA[<p>ReactiveUI は、Reactive Extensions を全面的に取り入れた クロスプラットフォームな MVVMフレームワークです。</p>

<!--more-->


<ul>
<li><a href="http://www.reactiveui.net/">ReactiveUI</a></li>
</ul>


<p>作者は GitHub の中の人 <a href="http://twitter.com/xpaulbettsx">Paul Betts</a> 氏、<a href="http://xamarin.com/mvp">Xamarin の MVP</a> でもあります。</p>

<p>元々は WPF, Silverlight, WinRT, Windows Phone に対応していましたが、Xamarin.iOS や Xamarin.Android, Xamarin.Mac にも <a href="http://blog.paulbetts.org/index.php/2013/03/12/reactiveui-4-5-is-released/">対応が進んで来た</a> ので、使ってみる事にしました。</p>

<p>Visual Studio + WPF 等なら、nuget から取得できて楽なんでしょうけども、なにせ Mac なので、Xamarin Studio のみでいきます。</p>

<h2>とりあえず使ってみる</h2>

<p>Github が公開した <a href="http://log.paulbetts.org/open-source-githubs-xamarin-starter-apps/">GitHub&#8217;s Xamarin starter apps</a>, これに ReactiveUI も含まれているので、こちらを Clone して Xamarin Studio で開いてビルド、すぐ動きます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_reactiveui_01.png" alt="" /></p>

<p>これ、ViewModel側で UUID を生成して、View側の Label にバインドしているのですが、何ともシンプル過ぎて…。</p>

<p>それでもこのフレームワークの構成を知るには十分です。</p>

<h2>ReactiveUI に必要なもの</h2>

<p>ソリューションツリーを見ると次の4つのプロジェクトがあります。</p>

<ul>
<li>Starter-Core-Android</li>
<li>Starter-Core-iOS</li>
<li>Starter-Android</li>
<li>Starter-iOS</li>
</ul>


<h3>ViewModel-Model層</h3>

<p>Starter-Core-xxx は、ディレクトリ的には同じ場所にあり、Android用とiOS用のプロジェクトファイル(.csproj)が用意してあるだけです。ここはアプリケーションの ViewModel-Model層になります。PCL化はされていないようですね(その内、とサイトに書いてありました)。</p>

<p>サンプルで用意されてる ViewModel を見てみます。</p>

<figure class='code'><figcaption><span>TestViewModel.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">ReactiveUI</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Runtime.Serialization</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Starter.Core.ViewModels</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [DataContract]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TestViewModel</span> <span class="p">:</span> <span class="n">ReactiveObject</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">_TheGuid</span><span class="p">;</span>
</span><span class='line'><span class="na">        [DataMember]</span> <span class="k">public</span> <span class="kt">string</span> <span class="n">TheGuid</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_TheGuid</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">RaiseAndSetIfChanged</span><span class="p">(</span><span class="k">ref</span> <span class="n">_TheGuid</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">TestViewModel</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">TheGuid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">().</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MvvmCross とか、他の MVVM-FW とだいたい同じですね(そりゃそうだ)。
基底クラスの <code>ReactiveObject</code> が、BaseViewModel的な役割をします。(が、Reactive を冠しているだけに、随所で Rx の力が発揮される、はずです←まだ分かってない)</p>

<p>このコードでは、TestViewModel の生成と同時に、Guid を生成して、<code>TheGuid</code> プロパティに設定しています。</p>

<h3>View層</h3>

<p>Starter-Android, Starter-iOS はそれぞれの View層になります。</p>

<p>Starter-iOS の TestViewController.cs を見てみます。</p>

<figure class='code'><figcaption><span>TestViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">Starter.Views</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">TestViewController</span> <span class="p">:</span> <span class="n">ReactiveViewController</span><span class="p">,</span> <span class="n">IViewFor</span><span class="p">&lt;</span><span class="n">TestViewModel</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">     [省略]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">ViewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">ViewDidLoad</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">OneWayBind</span><span class="p">(</span><span class="n">ViewModel</span><span class="p">,</span> <span class="n">vm</span> <span class="p">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">TheGuid</span><span class="p">,</span> <span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">.</span><span class="n">TheGuid</span><span class="p">.</span><span class="n">Text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">ViewModel</span> <span class="p">=</span> <span class="k">await</span> <span class="n">BlobCache</span><span class="p">.</span><span class="n">LocalMachine</span><span class="p">.</span><span class="n">GetOrCreateObject</span><span class="p">(</span><span class="s">&quot;TestViewModel&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">TestViewModel</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TestViewModel</span> <span class="n">_ViewModel</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">TestViewModel</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_ViewModel</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">RaiseAndSetIfChanged</span><span class="p">(</span><span class="k">ref</span> <span class="n">_ViewModel</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">     [省略]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIViewController</code> ではなく <code>ReactiveViewController</code> から派生させてます。この辺もよくあるやり方。<code>IViewFor</code> は、今はスルーで。</p>

<p>バインドは <code>this.OneWayBind</code> で。
ViewModel の TheGuid プロパティを、View の TheGuidラベルの Text プロパティへ単方向(OneWay)バインドしてます。</p>

<p>TestViewModel の生成は、ここでは Akavache というストレージライブラリの生成を待ってから行っていますが、Akavache を使わない場合は普通に <code>this.ViewModel = new TestViewModel()</code> で OK でしょう。</p>

<p>これで、TestViewModelの生成 → Guidの生成 → vm.TheGuidプロパティへ設定 → vm より TheGuid の変更が通知される → View側のBindingが変更を検知 → Viewのラベルを書き換える、という流れになります。</p>

<h2>ちょっと拡張してみる</h2>

<h3>双方向バインディング</h3>

<p>ViewModel→View だけでなく、View→ViewModel もやってみましょう。</p>

<p>まず TestViewModel にプロパティを追加します。
プロパティは <code>MyName</code> とします。
初期値として &#8220;Enter your name&#8221; とでも設定しましょうか。</p>

<figure class='code'><figcaption><span>TestViewModel.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">Starter.Core.ViewModels</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [DataContract]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TestViewModel</span> <span class="p">:</span> <span class="n">ReactiveObject</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">_TheGuid</span><span class="p">;</span>
</span><span class='line'><span class="na">        [DataMember]</span> <span class="k">public</span> <span class="kt">string</span> <span class="n">TheGuid</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_TheGuid</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">RaiseAndSetIfChanged</span><span class="p">(</span><span class="k">ref</span> <span class="n">_TheGuid</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">string</span> <span class="n">_myName</span><span class="p">;</span>
</span><span class='line'><span class="na">        [DataMember]</span> <span class="k">public</span> <span class="kt">string</span> <span class="n">MyName</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_myName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">RaiseAndSetIfChanged</span><span class="p">(</span><span class="k">ref</span> <span class="n">_myName</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">TestViewModel</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">TheGuid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">().</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">MyName</span> <span class="p">=</span> <span class="s">&quot;Enter your name&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に Interface Builder で TestViewController に、UITextField と UILabel を追加し、Outlet を &#8220;MyText&#8221;, &#8220;MyLabel&#8221; とします。これで Xamarin.iOS から <code>MyText</code>, <code>MyLabel</code> でインスタンスにアクセスできるはず、ですよね。</p>

<p><code>MyText</code>, <code>MyLabel</code> に、vm.MyName をバインドします。</p>

<figure class='code'><figcaption><span>TestViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">Starter.Views</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">TestViewController</span> <span class="p">:</span> <span class="n">ReactiveViewController</span><span class="p">,</span> <span class="n">IViewFor</span><span class="p">&lt;</span><span class="n">TestViewModel</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">     [省略]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">ViewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">ViewDidLoad</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">OneWayBind</span><span class="p">(</span><span class="n">ViewModel</span><span class="p">,</span> <span class="n">vm</span> <span class="p">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">TheGuid</span><span class="p">,</span> <span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">.</span><span class="n">TheGuid</span><span class="p">.</span><span class="n">Text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">ViewModel</span><span class="p">,</span> <span class="n">vm</span><span class="p">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">MyName</span><span class="p">,</span> <span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">.</span><span class="n">MyText</span><span class="p">.</span><span class="n">Text</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">OneWayBind</span><span class="p">(</span><span class="n">ViewModel</span><span class="p">,</span> <span class="n">vm</span> <span class="p">=&gt;</span> <span class="n">vm</span><span class="p">.</span><span class="n">MyName</span><span class="p">,</span> <span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">.</span><span class="n">MyLabel</span><span class="p">.</span><span class="n">Text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">ViewModel</span> <span class="p">=</span> <span class="k">await</span> <span class="n">BlobCache</span><span class="p">.</span><span class="n">LocalMachine</span><span class="p">.</span><span class="n">GetOrCreateObject</span><span class="p">(</span><span class="s">&quot;TestViewModel&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">TestViewModel</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">     [省略]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>編集できる <code>MyText</code> は <code>this.Bind</code> を使って双方向バインドします。プロパティの値を表示するだけの <code>MyLabel</code> は、 <code>this.OneWayBind</code> で。</p>

<p>これで動かしてみます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_reactiveui_02.gif" alt="" /></p>

<p>UITextField への入力が、vm.MyName へ適用され、その変更を MyLabel に表示させる、という流れです。</p>

<p>今日はこの辺で。まだ全然 Reactive じゃないですが、次回以降、Command の実装やバインディングについて試してみようと思います。</p>

<p>ここまでのコードは、</p>

<ul>
<li>https://github.com/amay077/starter-mobile/tree/N_plus_1</li>
</ul>


<p>に置いておきます。徐々に進化させていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MvvmCross だけじゃない！クロスプラットフォームMVVMフレームワーク「QuickCross」を試す]]></title>
    <link href="http://amay077.github.io/blog/2014/02/11/introduce-quickcross/"/>
    <updated>2014-02-11T19:47:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/02/11/introduce-quickcross</id>
    <content type="html"><![CDATA[<p><a href="http://amay077.github.io/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework/">以前、MvvmCross を紹介しました</a> が、Xamarin で使える同種のフレームワークはまだいくつかあります。</p>

<!--more-->


<p>今回は、その中の一つ、「QuickCross」を見てみます</p>

<ul>
<li><a href="https://github.com/MacawNL/QuickCross">MacawNL/QuickCross</a></li>
</ul>


<h2>なぜ他のMVVMフレームワークが必要なのか？</h2>

<p><a href="https://github.com/MacawNL/QuickCross#why-another-cross-platform-mvvm-framework">Why another cross-platform Mvvm framework?</a> にて、MvvmCross があるのになぜ？という事を説明しています。</p>

<p>要約すると、MvvmCross は、高機能だが Fat で複雑で、拡張が大変であるのに対し、QuickCross は、軽量で生産性が高く、拡張が簡単である、との事です。</p>

<h2>主な機能</h2>

<p><a href="https://github.com/MacawNL/QuickCross#features">Features</a> より。</p>

<ul>
<li>Xamarin.iOS, Xamarin.Android, Windows Phone, Windows Store Apps に対応。</li>
<li>バイナリは使ってない！Snippet と、プロジェクトにソースコードの追加を行うだけです。</li>
<li>ViewModel や View の追加は package manager console からコマンドを実行して行います。</li>
<li>いくつかのコードスニペットを提供します。</li>
<li>以下略…</li>
</ul>


<h2>仕組み</h2>

<p><img src="https://raw.github.com/MacawNL/QuickCross/master/assets/quickcross_pattern.png" alt="" />
via https://github.com/MacawNL/QuickCross#features</p>

<p>Navigator って概念があるのが MvvmCross と違うとこですかね。</p>

<h2>使い方</h2>

<p><a href="https://github.com/MacawNL/QuickCross#getting-started">Getting Started</a> を見てください。</p>

<p>Nuget の Package manager console を使う必要があるので、Mac と Xamarin Studio 、そして Indie Edition では試せません、残念。
Visual Studio ＋ Xamarin Business Edition以上を使ってる方、試してみてください。</p>

<h2>サンプルを動かしてみた</h2>

<p>Getting Started は試せませんでしたが、github に含まれるサンプルは Mac + Xamarin Studio でも動かせました。</p>

<p><a href="https://github.com/MacawNL/QuickCross/blob/master/QuickCross.ios.sln">QuickCross.ios.sln</a> を Xamarin Studio で開いて実行したところ↓</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/introduce_quickcross_01.png" alt="" /></p>

<p>MvvmCross と同じく、ViewModel などは Shared プロジェクトの方にあります。
Shared プロジェクトは PCL にできるんじゃないかなーと思いやってみましたが、</p>

<ul>
<li>Profile147(.NET4.0) では <code>System.Windows.Input.ICommand</code> が無いと言われ</li>
<li>Profile78(.NET4.5) では、この<a href="https://bugzilla.xamarin.com/show_bug.cgi?id=17247">バグ</a> にエンカウント</li>
</ul>


<p>してビルドできませんでした、残念。</p>

<h2>まとめ</h2>

<p>MvvmCross は確かに大規模すぎて使うのが大変です。拡張するには Plugin を自作する事になりますし。
QuickCross は、すべてのソースコードがプロジェクトにあるので、カスタマイズが手軽に行えそうだというのは分かりました。</p>

<p>Xamarin Starter Edition の場合、64kbyte までのバイナリ制限があるので、MvvmCross は使えませんが、QuickCross なら使えるかも知れません。</p>

<p>ただ残念なのは、Nuget の Package Manager Console を使う必要があるために、Visual Studio が必要で、その為には Xamarin も Business Edition 以上が必要になってしまう所です。</p>

<p>Xamarin Studio のみでも使えるくらい Lightweight だったら、もっと試してみたくなるフレームワークです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS と Android で画面表示時のコールバックを比較する]]></title>
    <link href="http://amay077.github.io/blog/2014/01/29/displaying-view-lifecycle-comparison-ios-android/"/>
    <updated>2014-01-29T15:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/29/displaying-view-lifecycle-comparison-ios-android</id>
    <content type="html"><![CDATA[<p>モバイル開発における画面のライフサイクル、重要ですね。
iOS と Android で「ざっくりとは同じでしょ？」などと思っていましたが、調べてみたら結構違ってました。</p>

<!--more-->


<p>と言うのも、こちら</p>

<ul>
<li><a href="http://blog.jarinosuke.com/entry/uiviewcontroller_view_coding_pattern">メモリ管理・レイアウトの観点からみた UIViewController の view の扱い - jarinosuke blog</a></li>
</ul>


<p>のエントリが大変参考になったので、「Android と比べるとどうか？」と興味が沸いたのです。</p>

<h2>画面が表示される時</h2>

<p>iOS/Android の <code>UIViewController</code>, <code>Activity</code> に備わってるコールバックの、画面表示時での発生順をそれぞれ調べて発生順に並べてみました。同じような意味のコールバックは横に並べて書きました。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>クラスが生成された時</td>
<td>init</td>
<td>ctor(コンストラクタ)</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面がロードされる前</td>
<td>loadView</td>
<td>onCreate</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>(画面が再度開始される前)</td>
<td></td>
<td>onRestart ※停止状態(onStop)から復帰する時のみ</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面が開始される前</td>
<td></td>
<td>onStart</td>
</tr>
<tr>
<td></td>
<td>5</td>
<td>画面がロードされた後</td>
<td>viewDidLoad</td>
<td>onPostCreate</td>
</tr>
<tr>
<td></td>
<td>6</td>
<td>画面が表示され始める前</td>
<td></td>
<td>onResume ※一時停止(Pause)からの復帰はここから</td>
</tr>
<tr>
<td></td>
<td>7</td>
<td>画面が表示され始めた後</td>
<td></td>
<td>onPostResume</td>
</tr>
<tr>
<td></td>
<td>8</td>
<td>UIの配置が行われる前</td>
<td>viewWillLayoutSubviews</td>
<td></td>
</tr>
<tr>
<td></td>
<td>9</td>
<td>UIの配置が行われた後</td>
<td>viewDidLayoutSubviews</td>
<td></td>
</tr>
<tr>
<td></td>
<td>10</td>
<td>画面が表示される直前</td>
<td> viewWillAppear </td>
<td></td>
</tr>
<tr>
<td></td>
<td>11</td>
<td>画面が表示された直後</td>
<td>viewDidAppear</td>
<td></td>
</tr>
<tr>
<td></td>
<td>12</td>
<td>画面にフォーカスが移った直後</td>
<td></td>
<td>onWindowFocusChanged(true) ※表示される度に呼ばれる</td>
</tr>
</tbody>
</table>


<h3>onCreate は生成前？後？</h3>

<p>iOS というか CocoaTouch の命名文化って、will とか did とか、時系列が明確に分かるものが多いので良いですね。
それに比べて Android は…。 onCreate は前？後？ onPostCreate があるので「前」ですね。</p>

<h3>UIパーツのサイズはいつ決まるのか？</h3>

<p>iOS の方は 9. <code>viewDidLayoutSubviews</code> の時です。
冒頭で紹介したエントリにも以下のように書かれています。</p>

<blockquote><p>self.view の subviews.frame の調整、すなわちレイアウト処理は全てここで記述するべきです。</p></blockquote>

<p>Android の方は問題です。
<code>Button</code> などの生成は <code>onCreate</code> で行うのが一般的ですが、この時点では、まだレイアウトされていません。なので大抵の場合 <code>button1.Height = 0</code> です。
では、いつのタイミングで <code>button1.Height</code> に適切な値が格納されるかと言うと…、 12. <code>onWindowFocusChanged(true)</code> まで待たないといけません。しかもこのコールバックは、Focus が変わる度に呼ばれるので、「最初の１回」だけを取得しようと思ったら別のフラグが必要になります、あーめんどい。</p>

<p>続きは</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4393612/when-can-i-first-measure-a-view">android - When Can I First Measure a View? - Stack Overflow</a></li>
</ul>


<p>で。私は <code>View.post</code> する方法が一番簡単だと思いました。</p>

<h3>onResume/onPostResume の命名が&#8230;</h3>

<p>「画面が表示され始める前/画面が表示され始めた後」なんて無理やりな名前を付けてしまいました。
特に <code>onPostResume</code> は無理がありすぎ。
名前からは <code>viewDidAppear</code> に相当するとも捉えられますが、まだこの時点ではレイアウトが完了していないという、中途半端なタイミングです。何のために使えば良いのでしょう？</p>

<h3>回転したらどうなるの？</h3>

<p>iOS の場合は、8.<code>viewWillLayoutSubviews</code> からやり直しです。つまり、ここに適切に縦横対応のレイアウト処理を記述しておけば、<code>didRotateFromInterfaceOrientation</code>など、他のコールバックでの処理は通常必要ないと思います。</p>

<p>Android の場合は、AndroidManifest.xml への設定なしだと、なんと 1.コンストラクタ からやりなおしです。とその前に当然 <code>onDestroy</code> や <code>OnSaveInstanceState</code> が呼ばれるわけですが、、、それはまた別の機会に。</p>

<h2>まとめっぽいもの</h2>

<p>iOS プログラミングでは今まで <code>viewDidLoad</code> で、UIパーツを生成してレイアウト処理してるプログラムが多いように思いますが、それは間違いで、「loadView で生成して、viewDidLayoutSubviews でレイアウト」とするのが最も効率的なようです。</p>

<p>Android でも、onCreate でレイアウト処理するとハマることがありそうです(<a href="http://qiita.com/amay077/items/070ac1db6b52dd03505f">実際ありました</a>)。ちょっと注意しといた方がよさそうです。</p>

<p>「画面が破棄される時」「メモリが足りなくなった時」「回転した時」とか、書くこと沢山あるんですけど、ありすぎてもうダメです。</p>

<h2>参考</h2>

<h3>iOS</h3>

<ul>
<li><a href="https://developer.apple.com/library/ios/Documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instm/UIViewController">UIViewController Class Reference</a></li>
<li><a href="http://blog.jarinosuke.com/entry/uiviewcontroller_view_coding_pattern">メモリ管理・レイアウトの観点からみた UIViewController の view の扱い - jarinosuke blog</a></li>
<li><a href="https://gist.github.com/shinyaohira/6482235">iOS View Controllerプログラミングガイド</a></li>
</ul>


<h3>Android</h3>

<ul>
<li><a href="http://developer.android.com/training/basics/activity-lifecycle/starting.html">Starting an Activity | Android Developers</a></li>
<li><a href="http://developer.android.com/reference/android/app/Activity.html">Activity | Android Developers</a></li>
<li><a href="http://qiita.com/amay077/items/070ac1db6b52dd03505f">moveCamera(CameraUpdateFactory.newLatLngBounds(… で落ちる</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C と Java と C# でクロージャ的な書き方の比較]]></title>
    <link href="http://amay077.github.io/blog/2014/01/29/closure-like-statement-comparison-with-objc-java-csharp/"/>
    <updated>2014-01-29T15:52:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/29/closure-like-statement-comparison-with-objc-java-csharp</id>
    <content type="html"><![CDATA[<p>クロージャとかラムダとか匿名** とか名前はいろいろですけど、各言語の書き方と動き（特に変数の扱い）について比べてみました。</p>

<p>ついでに非同期処理の例にもなってしまいました。</p>

<!--more-->


<h3>Objective-C</h3>

<p>Blocks を使います。</p>

<figure class='code'><figcaption><span>Obj-C</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">__block</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">q_global</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">q_global</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// できない(コンパイルエラー</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// できる</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dispValue:</span><span class="n">z</span><span class="p">];</span> <span class="c1">// self の参照カウンタが+1される</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通に宣言した変数を Block の中で使うと、自動的に「キャプチャ」され、変数の複製される。この変数には、 Block 内では代入できずコンパイルエラーとなる。
<code>__block</code> を付けた変数は、Block 内外で同じ実体を参照でき、代入もできる。
<code>self</code> やプロパティを Block 内で使用すると参照カウンタがインクリメントされ、明示的に release しないとリークする。
あるいは、Block 外で <code>__weak</code> を付けた変数に代入しておくと、これは参照カウンタがインクリメントされない。</p>

<h3>Java 6 (Android ベースなので…)</h3>

<p>匿名クラスです。</p>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span><span class='line'><span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span> <span class="c1">// できない(コンパイルエラー</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span> <span class="c1">// できない(コンパイルエラー</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">typeName</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">()[</span><span class="mi">0</span><span class="o">].</span><span class="na">getName</span><span class="o">();</span> <span class="c1">// Runnable になる</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java は匿名クラスの実装中に使える変数はかなり制限がある。
普通に宣言した変数は、匿名クラス内では使えない(コンパイルエラー)。
<code>final</code> を付けて宣言した変数は、匿名クラス内では参照のみ可能。ちょうど Objective-C の通常変数を Block 内で使った時と同じ。
Obj-C の <code>self</code> にあたる <code>this</code> は匿名クラス内では、その匿名クラスを示す。</p>

<h3>C＃</h3>

<p>ラムダ式です。</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'><span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">StartNew</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span> <span class="c1">// OK</span>
</span><span class='line'>    <span class="n">y</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span> <span class="c1">// これはダメ、const だから。</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">z</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">typeName</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>C# はかなりゆる〜い印象。
普通に宣言した変数を、ラムダ式の中でも自由に read/write できてしまう。write できちゃうのはこわい。
<code>this</code> は、ラムダ式の外側のクラスを示す。
　</p>

<h2>所感</h2>

<p>個人的には、Java のガチガチなのが好きかも。できる事が限定されているのでミスしにくい。
Objective-C は、ローカル変数は良いけど、self とか使っちゃうミス起こしそう。
C# は、普通に書き換えられて超不安、という感じ。なるべく const 使うようにしたい。
　
　
　</p>

<p>しかし記述量は C# が一番少ないですね、Xamarin いいよ Xamarin。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C の Dictionary は、キーに基本データ型が使えないのね ]]></title>
    <link href="http://amay077.github.io/blog/2014/01/28/cannot-using-int-type-in-objc-dictionary/"/>
    <updated>2014-01-28T15:49:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/28/cannot-using-int-type-in-objc-dictionary</id>
    <content type="html"><![CDATA[<p>Obj-C 慣れないもので、こんな所でハマってた。
くやしいので他の言語と比較しておく。
当然ながら Dictionary に限った話でない（はず）。</p>

<!--more-->


<h3>Objective-C</h3>

<figure class='code'><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">NSMutableDictionary</span><span class="o">*</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">dic</span> <span class="nl">setObject:</span><span class="s">@&quot;hoge&quot;</span> <span class="nl">forKey:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">]];</span> <span class="c1">// これは OK</span>
</span><span class='line'><span class="p">[</span><span class="n">dic</span> <span class="nl">setObject:</span><span class="s">@&quot;huga&quot;</span> <span class="nl">forKey:</span><span class="err">@</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// これも OK (@1 は NSNumber のリテラル構文なので)</span>
</span><span class='line'><span class="p">[</span><span class="n">dic</span> <span class="nl">setObject:</span><span class="s">@&quot;piyo&quot;</span> <span class="nl">forKey:</span><span class="mi">2</span><span class="p">];</span> <span class="c1">// これはダメ（落ちる</span>
</span></code></pre></td></tr></table></div></figure>


<p>キーと値が他の言語と逆なのにまずハマって、
キーに int型 の値を入れてたのに気づかずまたハマった。
せめてコンパイルエラーにして欲しいよ。
言語仕様上、型指定できないのでキーも値もどんな型でも突っ込めちゃう、こわい。</p>

<h3>Java</h3>

<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span> <span class="c1">// これはダメ(コンパイルできない)</span>
</span><span class='line'><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="s">&quot;hoge&quot;</span><span class="o">);</span> <span class="c1">// OK</span>
</span><span class='line'><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;piyo&quot;</span><span class="o">);</span> <span class="c1">// これも OK（へー</span>
</span></code></pre></td></tr></table></div></figure>


<p>int と Integer ってのがあって、int を使って HashMap を宣言できない。
これはコンパイル時に分かるので良いけど、int と Integer の変換が必要なことがしばしば。</p>

<h3>C＃</h3>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">dic</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span> <span class="c1">// 型推論＆Generic</span>
</span><span class='line'><span class="n">dic</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="s">&quot;hoge&quot;</span><span class="p">);</span> <span class="c1">// OK</span>
</span><span class='line'><span class="n">dic</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="s">&quot;piyo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">dic</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="s">&quot;huga&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>一番スッキリ書けますね。
　
　
　</p>

<p>…Xamarin いいよ、Xamarin</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac に入れてるアプリ一覧]]></title>
    <link href="http://amay077.github.io/blog/2014/01/24/my-favorite-apps-in-mac/"/>
    <updated>2014-01-24T15:47:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/24/my-favorite-apps-in-mac</id>
    <content type="html"><![CDATA[<p>環境移行するときの為の備忘録。
あんまりカスタマイズしない方だったけど３０超えてた。</p>

<!--more-->


<h2>カスタマイズ</h2>

<ol>
<li>XtraFinder : 標準Finderのタブよりこっちの方が好き。フォルダから Terminal を開けるのが地味に便利。</li>
<li>Sublime Text 2 : 常用テキストエディタ</li>
<li>CopyPath : Finder で選択したファイルのパスをクリップボードにコピる</li>
<li>ClipMenu : クリップボード履歴と定型文呼び出し</li>
<li>FreeMemory : メモリ解放してくれる系からテキトーに選んだ</li>
<li>Google IME : ATOK 買うお金がない</li>
</ol>


<h2>ブログ書く時</h2>

<ol>
<li>Kobito : Qiita 投稿＆Markdown エディタとして</li>
<li>Skitch : スクショ撮り＆注釈入れに</li>
<li>ImageOptim : 画像圧縮</li>
<li>LICEcap : スクリーンをGIFアニメとして記録できる、便利</li>
</ol>


<h2>クラウドストレージ</h2>

<ol>
<li>Dropbox : おなじみ</li>
<li>Bitcasa : 無制限Bytes/$10/Month プラン（既得権益♪）</li>
</ol>


<p>Evernote、Google Drive、Skydrive は Web で十分。</p>

<h2>チャットとか電話とか</h2>

<ol>
<li>Skype : 主にお仕事連絡用</li>
<li>Line : 家族連絡用</li>
<li>Linphone : 050plus の発着信に使ってたけど最近使えなくなった(泣</li>
</ol>


<h2>ブラウザ</h2>

<ol>
<li>Google Chrome : 常用</li>
<li>Firefox : 主にテスト用ですね</li>
</ol>


<h2>プログラム開発のお仕事で使う</h2>

<ol>
<li>Xamarin Studio : Xamarin 推しですから</li>
<li>SourceTree : git/hg、SVN も git-svn でやってる</li>
<li>Brackets : Web開発はこれで</li>
<li>Eclipse : 仕方なく</li>
<li>Xcode : 仕方なく</li>
<li>astah community : UML 描くのに</li>
<li>MacWinZipper : 日本語が化けないZIP圧縮/解凍ツール</li>
</ol>


<h2>その他</h2>

<ol>
<li>VMware Fusion : Windows 使う時はこれで</li>
<li>Sophos Anti-Virus : 一応のセキュリティ担保</li>
<li>Fitbit Connect : Fitbix Flex 買ったら付いてきた</li>
<li>Keynote : 買ったけど最近使ってないなあ</li>
<li>VLC : 定番</li>
<li>HandBrake : 定番</li>
<li>Cyberbuck : FTP とか S3 とか</li>
<li>radikoro : たまにラジオ聴いてる</li>
</ol>


<p>Word や Excel は、VMware の Windows で使ってます。Office の Mac版使うよりストレス溜まりません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewController の ViewDidLoad で this が nil になった件]]></title>
    <link href="http://amay077.github.io/blog/2014/01/18/viewcontroller-is-nil-when-viewdidload/"/>
    <updated>2014-01-18T18:18:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/18/viewcontroller-is-nil-when-viewdidload</id>
    <content type="html"><![CDATA[<p>Xamarin Studio + Xcode で Storyboard でアプリを作っていた。複数ある画面の内、ある一つの画面に遷移すると落ちる現象に見舞われていろいろ調べていた。</p>

<!--more-->


<p>Xamarin Studio で該当画面の ViewController の ViewDidLoad にブレークポイントを仕掛けて停止させ、ウォッチしてみたところ、なんと this が「nil」になっていた。</p>

<p>これのおかげで、ViewController に配置した UILabel などにもアクセスできない。</p>

<p>ViewController を作りなおしてみたり、呼び出し方法を変えてみたりいろいろやってみたけど解消せず。</p>

<p>30分ほど悪戦苦闘した後、実機にインストールされている該当アプリを一旦削除し、Xamarin Studio も終了させた後に再起動、ソリューションをクリーンして再ビルドして実行してみたところ、問題が解消した。</p>

<p>なにがしかのトラブルが起きた時は、まずは端末内のアプリを消してみると良いのかも知れない。（これまでの経験的に）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Component for iOS の CoordinateBounds について]]></title>
    <link href="http://amay077.github.io/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk/"/>
    <updated>2014-01-16T18:05:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk</id>
    <content type="html"><![CDATA[<p>すごくニッチな話ですけど、Xamarin Components にある Google Maps を Xamarin.iOS で使った。</p>

<!--more-->


<ul>
<li><a href="http://components.xamarin.com/view/googlemapsios">Google Maps /Components</a></li>
</ul>


<p>このライブラリの中に <code>CoordinateBounds</code> という「領域」を表すクラスがある。これは <a href="https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja">GMSCoordinateBounds</a> の Binding だ。</p>

<p>で、CoordinateBounds には <code>Including</code> (<a href="https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja#a63cffdf310ca19c6bab74c9a4034aadd">includingCoordinate</a>) というメソッドがあって、これを呼ぶと指定した座標が入るように領域を拡幅してくれる、便利だ。</p>

<p>で、最初はこのクラスをこう使っていた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">bounds</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CoordinateBounds</span><span class="p">();</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">34d</span><span class="p">,</span> <span class="m">134d</span><span class="p">));</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">33d</span><span class="p">,</span> <span class="m">133d</span><span class="p">));</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">35d</span><span class="p">,</span> <span class="m">135d</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>動かしてみて、この使い方だと <code>bounds</code> から期待した結果が得られないことに気づいた。範囲が -180〜+180 になってしまった。</p>

<p>正しくはこう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">bounds</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CoordinateBounds</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">34d</span><span class="p">,</span> <span class="m">134d</span><span class="p">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">33d</span><span class="p">,</span> <span class="m">133d</span><span class="p">));</span>
</span><span class='line'><span class="n">bounds</span><span class="p">.</span><span class="n">Including</span><span class="p">(</span><span class="k">new</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="m">35d</span><span class="p">,</span> <span class="m">135d</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと結果は、正しく [33,133 - 35,135] を返す。</p>

<p>処理上、生成時に２つの座標が揃ってないケースだったので、「あ、デフォルトコンストラクタあるじゃん」と使ってたらハマった。本家 iOS 版の方には引数無しの initXXX は無かった。</p>

<p>Objective-C の仕様上 alloc して init しないのを防げない、んだっけ？
だから、Xamarin.iOS の Binding でデフォルトコンストラクタを隠せないのかな？
突っ込んで調べてないけど、Binding ライブラリを使う時は注意しましょう、ちゃんと本家のAPIリファレンスを見ましょう、というお話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS でエラー “Failed to load AOT module ... in aot-only mode”]]></title>
    <link href="http://amay077.github.io/blog/2014/01/16/failed-to-load-aot-module-in-aot-only-mode/"/>
    <updated>2014-01-16T15:14:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/16/failed-to-load-aot-module-in-aot-only-mode</id>
    <content type="html"><![CDATA[<p>Xamarin.iOS で Binding プロジェクトをプロジェクトに追加して実機で実行したら、起動時に落ちるようになってしまった。</p>

<!--more-->


<p>Xamarin.iOS で Binding プロジェクトをプロジェクトに追加して実機で実行したら、起動時に落ちるようになってしまった。</p>

<p>ログには、</p>

<blockquote><p>Failed to load AOT module ‘/xxx/Hoge.dll.dylib&#8217; in aot-only mode.</p></blockquote>

<p>というエラーが出ていた。</p>

<p>実機からアプリを削除して、
ソリューションを「再ビルド」したら直った。小ネタ過ぎる。</p>

<h2>参考</h2>

<ul>
<li><a href="http://monotouch.2284126.n4.nabble.com/Failed-to-load-AOT-module-in-aot-only-mode-td4602614.html">MonoTouch - Failed to load AOT module &#8230; in aot-only mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で特定の画面だけ向きを固定する時ハマったこと]]></title>
    <link href="http://amay077.github.io/blog/2014/01/07/touble-by-lock-orientation-of-specific-viewcontroller/"/>
    <updated>2014-01-07T18:11:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/07/touble-by-lock-orientation-of-specific-viewcontroller</id>
    <content type="html"><![CDATA[<p>画面A,B があって B だけ横向き固定にしたい。</p>

<ul>
<li><a href="http://stackoverflow.com/a/12588038">uiviewcontroller - iOS 6 ViewController is rotating but shouldn&#8217;t - Stack Overflow</a></li>
<li><a href="http://qiita.com/yusuga_/items/8cc82376edb40e09f0e7">iPhone - UIViewController iOS6での画面回転への対応 - Qiita [キータ]</a></li>
</ul>


<p>これを Xamarin.iOS でやりたい。</p>

<!--more-->


<p>Storyboard を Interface Builder で開いて、NavigationController のカスタムクラスを <code>MyNavigationController</code> とした。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/viewcontroller_orientaion_lock_in_xamarin_ios_01.png" alt="" /></p>

<p>すると、Xamarin Studio 側にも <code>MyNavigationController.cs</code> ができるので、Stackoverflow の通り、以下のように実装した。</p>

<figure class='code'><figcaption><span>MyNavigationController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// This file has been autogenerated from a class added in the UI designer.</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.Foundation</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.UIKit</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MyNavigationController</span> <span class="p">:</span> <span class="n">UINavigationController</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="nf">MyNavigationController</span> <span class="p">(</span><span class="n">IntPtr</span> <span class="n">handle</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientation</span> <span class="nf">PreferredInterfaceOrientationForPresentation</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">ViewControllers</span><span class="p">.</span><span class="n">Last</span><span class="p">().</span><span class="n">PreferredInterfaceOrientationForPresentation</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientationMask</span> <span class="nf">GetSupportedInterfaceOrientations</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">ViewControllers</span><span class="p">.</span><span class="n">Last</span><span class="p">().</span><span class="n">GetSupportedInterfaceOrientations</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">ShouldAutorotate</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">ViewControllers</span><span class="p">.</span><span class="n">Last</span><span class="p">().</span><span class="n">ShouldAutorotate</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、横固定にしたい画面Bを以下のように実装。</p>

<figure class='code'><figcaption><span>BViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// This file has been autogenerated from a class added in the UI designer.</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.Foundation</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.UIKit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">BViewController</span> <span class="p">:</span> <span class="n">UIViewController</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="nf">PhotoPreviewViewController</span> <span class="p">(</span><span class="n">IntPtr</span> <span class="n">handle</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientation</span> <span class="nf">PreferredInterfaceOrientationForPresentation</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">UIInterfaceOrientation</span><span class="p">.</span><span class="n">LandscapeLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">UIInterfaceOrientationMask</span> <span class="nf">GetSupportedInterfaceOrientations</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">UIInterfaceOrientationMask</span><span class="p">.</span><span class="n">LandscapeLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">ShouldAutorotate</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで動かしてみたものの、一向に画面が固定されない。
しばらく悩んだ後、<code>MyNavigationController</code> のコンストラクタにブレークポイントを仕掛けてデバッグしてみたとても止まらない。
よくよくアプリケーション出力のコンソールを見てみると、</p>

<blockquote><p>Unknown class MyNavigationController in InterfaceBuilder file.&#8221;</p></blockquote>

<p>と出力されていることに気づいた。
なんか、.storyboard と C# クラスの関連付けがうまくいってないらしい。</p>

<p>ソリューションをクリアして、再ビルドしたらこのエラーは消え、画面Bの向きが固定されるようになった！</p>

<p>(ただ、縦画面のまま画面Bに遷移すると縦画面で固定されてしまう。これは実装が何か足りない気がする。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NHK紅白の Android/iPhone アプリが .NET/Xamarin 製だったということ]]></title>
    <link href="http://amay077.github.io/blog/2014/01/02/nhk-kouhaku-utagassen-apps-made-by-xamarin/"/>
    <updated>2014-01-02T11:27:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/01/02/nhk-kouhaku-utagassen-apps-made-by-xamarin</id>
    <content type="html"><![CDATA[<p>新年あけましておめでとうございます。
今年も Xamarin 推しで参ります、よろしくお願いします。</p>

<!--more-->


<p>2013年大晦日の紅白歌合戦、NHK が iPhone/Android 用のアプリを配信していました。</p>

<ul>
<li><a href="http://www1.nhk.or.jp/kouhaku/app/">紅白アプリ｜第64回NHK紅白歌合戦</a></li>
<li><a href="http://weekly.ascii.jp/elem/000/000/192/192769/">紅白で「イェーガー！」と叫ぶために曲を見逃さないiPhoneアプリ、NHK紅白</a></li>
</ul>


<p>なんとこのアプリ、Xamarin 製だったとのこと。
紅白あんまり興味なかったのでノーチェックでしたわー。</p>

<blockquote class="twitter-tweet" lang="ja"><p>紅白アプリXamarinなんか</p>&mdash; ゆたか (@tmyt) <a href="https://twitter.com/tmyt/statuses/413092620567470080">2013, 12月 17</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>iPhoneの紅白アプリ、MvvmCross使ってるってことは、Xamarinで作ってるってこと？！ <a href="http://t.co/cTWPz2cp9E">pic.twitter.com/cTWPz2cp9E</a></p>&mdash; 菊池紘 (@kikuchy) <a href="https://twitter.com/kikuchy/statuses/417977438597959680">2013, 12月 31</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>このツイートを RT した後、ソッコーで Android 版を入れてみましたら、確かにクレジットに MvvmCross やら ActionBarSherlock for Xamarin やらならんでいました。</p>

<h2>開発してるのは…</h2>

<p>開発は、<a href="http://www.fenrir-inc.com/">スレイプニル</a> で有名なフェンリルさんのようですね。</p>

<ul>
<li><a href="http://biz.fenrir-inc.com/application_development/casestudy_app/nhk_kouhaku.html">フェンリル株式会社 | スマートフォンアプリ開発 実績 NHK 紅白</a></li>
</ul>


<p>2年連続で作っておられるようですが、おととしから Mono(MonoTouch/Mono for Android) 製だったのかな？いやスゴいです！</p>

<h2>使われているライブラリ</h2>

<p>せっかくなので、Android/iOSアプリ両方の著作権表示から、使われている OSS ライブラリを列挙してみます。(<a href="http://nkzn.hatenablog.jp/entry/2013/12/30/010956">こちらのエントリ</a>にインスパイアされました)
当然ですが、すべて .NET/Mono で動作するライブラリばかりです。(ActionBar と Nimbus を除く)</p>

<h3>MvvmCross</h3>

<ul>
<li>https://github.com/MvvmCross/MvvmCross</li>
<li>クロスプラットフォームMVVMフレームワーク。<a href="http://qiita.com/amay077/items/c4227663b5a5e540dc13">こちらでも</a> 紹介しました</li>
</ul>


<h3>Json.NET</h3>

<ul>
<li>http://james.newtonking.com/json</li>
<li>.NET/Mono で JSON を扱うための事実上標準ライブラリ</li>
</ul>


<h3>SocketIO4Net.Client</h3>

<ul>
<li>http://socketio4net.codeplex.com/</li>
<li>WebSocket4Net と組み合わせて使うっぽい？ライブラリ</li>
</ul>


<h3>WebSocket4Net</h3>

<ul>
<li>http://websocket4net.codeplex.com/</li>
<li>.NET で WebSocket 使うためのライブラリ。</li>
</ul>


<h3>SuperSocket.ClientEngine</h3>

<ul>
<li>http://clientengine.codeplex.com/</li>
<li>ソケット通信用ライブラリっぽい。</li>
</ul>


<h3>MvxSettings</h3>

<ul>
<li>https://github.com/jamesmontemagno/Mvx.Plugins.Settings かな？</li>
<li>設定情報をストアするための、MvvmCross のプラグイン</li>
</ul>


<h3>ActionBarSherlock for Xamarin</h3>

<ul>
<li>http://components.xamarin.com/view/XamarinActionBarSherlock</li>
<li>スライドメニュー(NavigationDrawer) を実現するライブラリ。そういえばちょっと変わったスライドメニューでしたね。</li>
</ul>


<h3>AsyncOAuth</h3>

<ul>
<li>http://neue.cc/2013/02/27_398.html</li>
<li>C#/LINQ の神であらせられる <a href="http://neue.cc/2013/02/27_398.html">@neuecc</a> さん作の 非同期OAuthライブラリ</li>
</ul>


<h3>Nimbus</h3>

<ul>
<li>http://nimbuskit.info/</li>
<li>iOS の UIパーツがいろいろ拡張されてる的なライブラリ？Xamarin.iOS で Binding して使ってるのかなあ？</li>
</ul>


<h3>Html Agility Pack</h3>

<ul>
<li>http://htmlagilitypack.codeplex.com/</li>
<li>HTMLパーサライブラリ</li>
</ul>


<p>生放送のテレビ番組向けアプリということで、リアルタイム通信に注力された様子が、使用されたと思われるライブラリからも伺えます。</p>

<h2>これは強力すぎる Xamarin 導入事例ですね</h2>

<p>日本の最も有名なテレビ番組のスマホアプリに Xamarin が使われていたというのは大きな導入事例になること必至です。
アプリの性質上、期間限定となる可能性もあります。できればこのまま公開しつづけて欲しいですが、Xamarin を上司や提案先に紹介されたい場合は、お早めに、またキャプチャを多く撮っておかれる事をおすすめします。</p>

<p>最後に、今年が Xamarin 普及元年とならん事を近くの神社にお祈りして、新年最初のエントリの締めとします。</p>
]]></content>
  </entry>
  
</feed>
