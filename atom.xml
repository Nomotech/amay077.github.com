<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-02-24T00:24:54+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2016アプリを Xamarin.Android に移植した話]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/"/>
    <updated>2016-02-24T00:19:01+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android</id>
    <content type="html"><![CDATA[<p>　DroidKaigi2016 の開催前、<a href="https://github.com/konifar/droidkaigi2016">公式アプリが有志によって開発中</a> とのツイート(だったかな？)を見て、ふとこれを「Xamarin.Android に移植してみよう」と思い、夜な夜なぼちぼちと始めました。</p>

<!--more-->


<p>　後付けですが、移植するにあたり調査したかったのは主に、</p>

<ul>
<li>Android-Java の OSSライブラリがどのくらい Xamarin.Android でも利用可能か？</li>
<li>(勉強をサボっていた)Xamarin.Android での Material Design の適用方法</li>
</ul>


<p>です。</p>

<h2>Xamarin.Android について(知らない人向け)</h2>

<p>　Xamarin.Android は、Android API(Javaクラスライブラリを含む)の薄いラッパーで、クラス・メソッド名などは殆どそのままに、言語が Java から C# になったようなものです。
　なので、 <code>activity_main.xml</code> などのリソースファイルもほぼそのまま転用可能です。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/3232064cc8880c809aee">Xamarin.Android で作った HelloWorld のソースを眺めてみる</a></li>
</ul>


<p>　尚、 Xamarin.Forms というワンソースで複数プラットフォームで動作するアプリを開発できるフレームワークとは別のものです。</p>

<h2>Android プロジェクトの Xamarin.Android への移植方法</h2>

<p>すごく大雑把に、以下のような手順で移植します。</p>

<ol>
<li>Androidプロジェクト(以下 Java と表記)の <code>/res</code> 以下を Xamarin.Androidプロジェクト(以下 Xamarin)配下にコピー</li>
<li>Java のソースコード群を、 package構成を崩さずに Xamarin.Android で再構成（結局のところコードの書き直し）</li>
<li>Java側で使われているOSSライブラリと同等のものを、nuget・Xamarin Components で探してXamarin側に追加（なければ <code>.jar</code> ファイルを入手して Xamarin で使えるように Binding Library を作成）</li>
<li>あとはひたすら try and error and error and error&hellip;</li>
</ol>


<h2>Android Data Binding を、Xamarin ではどうしたか？</h2>

<p>　DroidKaigi2016 のアプリには <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">DataBinding</a> が使われています。ただ、 <code>BaseObservable</code> や <code>ObservalbeField</code> によるガッツリとした OneWay/TwoWay のデータバインディングではなく、POJOなデータクラスを使う <a href="https://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingmode(v=vs.110">OneTime</a>.aspx) なものしかなかったので、Xamarin への移植に際しては <a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> や、 <a href="https://github.com/MvvmCross/MvvmCross">MVVMCross</a> などのデータバインディング機能に頼る必要はありませんでした。</p>

<p>　一方、Android Data Binding のもう一つの(副次的な)機能である View binding(<code>findViewById</code> が要らなくなるアレ)の対応は大変でした。</p>

<p>　まず、<code>activity_main.xml</code> などのデータバインド範囲を括る <code>&lt;layout&gt;&lt;/layout&gt;</code> ですが、このタグは Xamarin Studio は解釈してくれないのでエラーになります。このタグはもれなくコメントアウトが必要でした。また、カスタムデータバインディングが使われている箇所も同じくです。
　なので当然、Android Studio(gradle)が生成する <code>DataBinding</code> クラスも使用できません。
　仕方ない(というか始めからわかっていましたが) <code>ActivityMainBinding</code> などに相当するクラスを必要を満たす範囲で自作しました。レガシーな <code>FindViewByID()</code> を使って。</p>

<p>　Windowsアプリ開発の世界では、「DSL で記述された画面レイアウトからUI要素変数を自動生成する」ことは、IDE である Visual Sutdio が普通に行ってくれます。Xamarinアプリ開発のIDEである Xamarin Studio も、iOS の <code>.storyboard</code> ファイルを読んで、自動的に <code>HogeViewController.designer.cs</code> にUI要素変数を生成してくれます。
　Xamarin.Android でも <code>MainActivity.designer.cs</code> とか生成してくれてもいいのになー、とは頭の片隅で思い続けています。(自作Plug-inとかでなんとかできるのかな？)</p>

<h2>DroidKaigi2016 で使われているJavaライブラリを、Xamarinではどうしたか？</h2>

<p>　DroidKaigi2016アプリでは非常にたくさんのOSSライブラリが<a href="https://github.com/konifar/droidkaigi2016#libraries">使用されており</a>、それを眺めるだけでも非常に勉強になります。このソースを読んで初めて知ったものが何個もありました。
　アプリを Xamarin.Android へ移植するにあたり、これらにどのように対応したかを記します。</p>

<h3>Android Support Libraries</h3>

<p> これらは、nuget パッケージが用意されています。要注意なのは、Xamarin Component にも<a href="https://components.xamarin.com/view/xamandroidsupportdesign">同じものが存在</a>していて、大抵はそちらの方が古くて動かない、ということです。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.CustomTabs/">Xamarin.Android.Support.CustomTabs</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.Design/">Xamarin.Android.Support.Design</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v4/">Xamarin.Android.Support.v4</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/">Xamarin.Android.Support.v7.AppCompat</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.CardView/">Xamarin.Android.Support.v7.CardView</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.RecyclerView/">Xamarin.Android.Support.v7.RecyclerView</a></li>
</ul>


<h3><a href="http://google.github.io/dagger/">Dagger2</a></h3>

<p>　Dependency Injection を Annotation ベースで行うライブラリ。
　これはないかなーと思いましたがありました。Dagger(短剣) に対して、その名も Stiletto(短剣)ｗ</p>

<ul>
<li><a href="http://stiletto.bendb.com/">Stiletto</a> &ndash; Stiletto is a .NET port of Dagger, the lightweight Android dependency injector from Square.</li>
</ul>


<p>　使い方も殆ど一緒。どうも Dagger1 相当の機能のようですが、アプリ側は少しの修正で対応できました。
　もっとも Dagger すら使ったことがなかったので、その理解に少々時間を要しました。
　Stiletto は、Xamarin.iOS でも使えるようですが、残念ながら PCL対応していなさそう。PCL対応のプルリクを送るのは今後やってみたいことの一つです。</p>

<h3><a href="http://square.github.io/retrofit/">Retrofit2</a></h3>

<p>　RESTful API のクライアントをサクッと作れるライブラリ。これも Xamarin 用に移植してくれてる方がいます。</p>

<ul>
<li><a href="http://paulcbetts.github.io/refit/">Refit by paulcbetts</a> &ndash; Refit is a library heavily inspired by Square&rsquo;s Retrofit library</li>
</ul>


<p>　こちらも、 Xamarin.iOS でも利用可能、PCL対応済み、カンペキです。</p>

<h3><a href="http://square.github.io/picasso/">Picasso</a></h3>

<p>　多機能且つ使いやすい Image Loader の Picasso。これは Xamarin の人が nuget パッケージを用意してくれています。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Square.Picasso">Square.Picasso</a></li>
</ul>


<p>Picasso が依存している <code>Square.OkHttp</code>, <code>Square.OkIO</code> も nuget パッケージが用意されていて、一緒に追加されます。</p>

<h3><a href="https://github.com/gfx/Android-Orma">Android-Orma</a></h3>

<p>　DroidKaigi当日には、作者 @gfx さんによる即席ランチセッションも聴けたORMライブラリ。若いライブラリなのでさすがに Xamarin版はありません。
　Xamarin.Android での ORMライブラリといえば <a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/part_3_using_sqlite_orm/">SQLite.NET</a> が有名ですが、使い方が面倒そうだったのと、このアプリのデータ構造と量で、リレーショナルDB使うこともないだろうと、 Key-Value Store である Akavache を使いました。これは以前 Qiita に書いたのでそちらを。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/356ad0028b7e6fbf089f">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する</a></li>
</ul>


<p>　とはいえ、移植の際には、かなり強引な実装をしてしまいました。パフォーマンス悪いのは私の実装が原因です。</p>

<h3><a href="https://github.com/ReactiveX/RxJava">RxJava</a></h3>

<p>　これはもう説明不要でしょう。本家 Rx.NET を使用します。</p>

<ul>
<li><a href="https://github.com/Reactive-Extensions/Rx.NET">Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET</a></li>
</ul>


<h3><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></h3>

<p>　これを使う最大の理由である <code>AndroidSchedulers.mainThread()</code> は、 Rx.NET では、 <code>observable.ObserveOn(SynchronizationContext.Current)</code> で代用できるので、不要でした。</p>

<h3><a href="https://github.com/JakeWharton/ThreeTenABP">ThreeTenABP</a></h3>

<p>　これも .NET の日付時刻系クラス(<code>DateTime</code>, <code>DateTimeOffset</code>, <code>TimeSpan</code>) で特に問題ありませんでした。しかし恥ずかしながらこのライブラリも知りませんで、Java では必須になりそうですね。</p>

<h3><a href="http://facebook.github.io/stetho/">Stetho</a></h3>

<p>　デバッグを強力に支援してくれるライブラリですね。これも知りませんでした。移植の時にはとりあえず関係なさそう、と思って代替品は探していません（汗</p>

<h3><a href="https://github.com/LyndonChin/AndroidFlowLayout">AndroidFlowLayout</a></h3>

<p>　View をいい感じに並べてくれるライブラリ。Xamarin.Android用の nuget パッケージがありました。</p>

<ul>
<li><a href="https://www.nuget.org/packages/AndroidFlowLayout/">AndroidFlowLayout &ndash; NuGet Gallery</a></li>
</ul>


<h3>Google Play services</h3>

<p>　Map とか、Analytics とか。こちらも nuget に一通りパッケージが揃っています。Xamarin Components より優先的に使いましょう。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Maps/">Xamarin Google Play Services &ndash; Maps &ndash; NuGet Gallery</a>　</li>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Analytics/">Xamarin Google Play Services &ndash; Analytics &ndash; Maps &ndash; NuGet Gallery</a>　</li>
</ul>


<h3><a href="https://github.com/jd-alexander/LikeButton">LikeButton</a></h3>

<p>　Facebook の いいね!、Twitter の Fav! のようなボタンを提供してくれるライブラリ。押した時のアニメーションがイイ感じです。
　これの Xamarin 版は探してもなかったので、 LikeButton の <code>.jar</code> ファイルを入手して、自前で Java Binding Library プロジェクトを作って使用しています。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin/tree/master/LikeButton">DroidKaigi2016Xamarin/LikeButton · amay077/DroidKaigi2016Xamarin</a></li>
</ul>


<p>　これを nuget に放流するのはやりたいことの2つ目。いくつかやったら <a href="https://resources.xamarin.com/open-source-contributor.html">Xamarin から subscription もらえる</a>だろうか。。。</p>

<h3><a href="https://github.com/johncarl81/parceler">parceler</a></h3>

<p>　Parcel のことが大嫌いじゃなくなるライブラリ。移植に際しては、ModelクラスはPOCO(POJOの.NET版と思ってください)にしたかったので直接の代替品は探しませんでした。
　ModelクラスのParcel化はなんと <a href="http://www.newtonsoft.com/json">JSON.NET</a> でJSONを介しちゃいました。悪手ですがパフォーマンスが気になる程でないならいいでしょ。</p>

<h3><a href="https://try.crashlytics.com/">Crashlytics</a></h3>

<p>　クラッシュレポート解析サービスですね。Xamarin なら <a href="https://xamarin.com/insights">Xamarin Insights</a> がビルトインで使えるので、通常はそうするでしょう。Crashlytics 自体の Xamarin.Android 用ライブラリは、今のところ<a href="https://twittercommunity.com/t/xamarin-and-fabric/37289/13">存在しないみたい</a>です。</p>

<h3><a href="https://github.com/opacapp/multiline-collapsingtoolbar">multiline-collapsingtoolbar</a></h3>

<p>　 Android Design Support Library の <code>CollapsingToolbarLayout</code> って、タイトルが複数行あると、展開しても表示されない(!)んですね。なんじゃそら！ってのを解決してくれるライブラリです。
　 Xamarin.Android向けのは探したけど見つかりませんでした。移植に際してクリティカルじゃなかったので、複数行にならない <code>CollapsingToolbarLayout</code> のままです。これも nuget パッケージ化したら需要あるかも。</p>

<h3><a href="https://github.com/ozodrukh/CircularReveal">CircularReveal</a></h3>

<p>　Lollipop で追加された CircularReveal アニメーションを、それ以前のOSでも行えるライブラリです。
　これもクリティカルでないので、Xamarin版には移植していません。</p>

<h2>まとめ</h2>

<p>　DroidKaigi2016 の公式アプリは、ホストの @konifar さんはじめ、 <a href="https://github.com/konifar/droidkaigi2016/graphs/contributors">35名</a> の精鋭有志の皆さんによる爆速開発で、 2/13 に v1.00 がリリース、イベント当日もアップデートされ、私も便利に利用させていただきました。
　
　一方、私の Xamarin.Android への移植は今やっと &ldquo;とりあえず&rdquo; 終わったばかり。
　しかも、移植の元にしたのが 2/10 付けのソースですが、その日から現在に至るまで本家にマージされた <strong>Pull Request の数は 200超！</strong> 。
　「これが若さか…。」これらの Xamarin版への移植はおじさんにはとても行う気が起きません。DroidKaigi2016公式アプリの Contributors の皆さんを尊敬します。
　
　が、ひとまず動くようになったので、ソースを公開します。モダンな Androidアプリを Xamarin.Android で実現する例としては有用だと思います。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin">amay077/DroidKaigi2016Xamarin: DroidKaigi2016 アプリをこっそりXamarinに移植</a></li>
</ul>


<p>（できればこれを、 プラットフォーム非互換にできる箇所はPCLへ移動、各画面にViewModelを置いてMVVM化、Xamarin.iOS対応、Xamarin.Forms対応とか、いろいろと育てていきたいと思っているのですが、DroidKaigi参加直後で、あれもこれもやりたい病なので、実現は未定です。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava で Observable の並列処理を直列化する]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava/"/>
    <updated>2016-02-08T01:16:02+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava</id>
    <content type="html"><![CDATA[<p><code>rx.Observable&lt;T&gt;</code> のオペレータは、通常は非同期で、並列に処理されます。</p>

<!--more-->


<p>例えば以下のような場合:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ランダムにスリープした後 x を onNext する</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">fatTask</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">sleep</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span> <span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">()</span> <span class="o">*</span> <span class="mi">10000L</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;fatTask(&quot;</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&quot;) - start.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>            <span class="n">subscriber</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
</span><span class='line'>        <span class="o">},</span> <span class="n">sleep</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力:<br/>
fatTask(1) &ndash; start.<br/>
fatTask(2) &ndash; start.<br/>
fatTask(3) &ndash; start.<br/>
fatTask(4) &ndash; start.<br/>
fatTask(5) &ndash; start.<br/>
onNext &ndash; 3<br/>
onNext &ndash; 5<br/>
onNext &ndash; 4<br/>
onNext &ndash; 2<br/>
onNext &ndash; 1<br/></p></blockquote>

<p>fatTask は 1,2,3,4,5 の順で <em>完了を待たずに</em> 呼びだされます。
が、それぞれ処理にかかる時間が異なるので、 <code>onNext</code> が呼ばれる順は 1〜 とは限りません。</p>

<p>ソースとなる Stream の順番を崩したくない場合は、 <code>fatTask(1)</code> が完了してから <code>fatTask(2)</code> を開始する、というように直列化しなければなりません。</p>

<h2>Observable.Concat(concatWith)</h2>

<p>これを行うのが <code>Observable.Concat</code> です(RxJava では <code>Observable.concatWith</code> のようですね)。
複数の <code>Observable</code> を順に（完了してから次へ）処理していきます。</p>

<h3>使い方</h3>

<p><code>toList</code> で一旦ただの <code>List</code> にしてから、<code>concatWith</code> で数珠つなぎにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toList</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">list</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// fatTask(1).contat(fatTask(2)).contat(fatTask(3))... </span>
</span><span class='line'>            <span class="c1">// にする（fold 使えれば…)</span>
</span><span class='line'>            <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">task</span> <span class="o">=</span> <span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">task</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="na">concatWith</span><span class="o">(</span><span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">task</span><span class="o">;</span>
</span><span class='line'>        <span class="o">})</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力<br/>
fatTask(1) &ndash; start.<br/>
onNext &ndash; 1<br/>
fatTask(2) &ndash; start.<br/>
onNext &ndash; 2<br/>
fatTask(3) &ndash; start.<br/>
onNext &ndash; 3<br/>
fatTask(4) &ndash; start.<br/>
onNext &ndash; 4<br/>
fatTask(5) &ndash; start.<br/>
onNext &ndash; 5<br/></p></blockquote>

<p><code>fatTask(1)</code> の完了を待ってから、次の <code>fatTask(2)</code> が実行されています。</p>

<p>※
Rx.NET では、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Concat</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IObservable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">sources</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、複数の <code>IObservable</code> を一括で渡せるのですが、 RxJava にはないようで、、、。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">concatEager</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">sources</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>というのがあったんですが、期待通りうごいてくれず、 Eager? なんでしょう？</p>

<h2>ソースが無限リストだったら？</h2>

<p><code>toList</code> で一旦ただの List にしているのが非常に気に入らないですね。
<code>range(1, 5)</code> が <code>interval(1, TimeUnit.SECONDS)</code> のように無限の Stream だったら使えません。</p>

<p>そこで、 <code>concat</code> には、こんな overload もあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">concat</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">observables</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observable<T> を通知する Observable？ ややこしいですがこう使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 2. を concat する</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
</span><span class='line'>        <span class="c1">// 1. Observable&lt;Long&gt;</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>            <span class="c1">// 2. Long を Observable&lt;Integer&gt; に変換 </span>
</span><span class='line'>            <span class="c1">//    → Observable&lt;Observable&lt;Integer&gt;&gt; になる</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">fatTask</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">intValue</span><span class="o">())))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力<br/>
fatTask(0) &ndash; start.<br/>
onNext &ndash; 0<br/>
fatTask(1) &ndash; start.<br/>
onNext &ndash; 1<br/>
fatTask(2) &ndash; start.<br/>
onNext &ndash; 2<br/>
…つづく<br/></p></blockquote>

<p>無限リストながら、並列処理せずに順序通り動いてくれます。</p>

<p><code>interval</code> の値を単純に <code>map</code> で <code>Observable&lt;Integer&gt;</code> に変換してやります。するとこれは <code>Observable&lt;Observable&lt;Integer&gt;&gt;</code> になり、<code>concat</code> 可能になります。 <code>flatMap</code> だと平坦化されちゃうのでただの <code>map</code> です。</p>

<h2>まとめ</h2>

<p>Observable は普通は非同期で並列処理。
非同期ながら直列化したい場合は <code>Observable.concat</code> でできます。</p>

<ol>
<li>GPS から緯度経度を取得</li>
<li>なんか重い計算を行う</li>
<li>結果をテキストファイルに書き出す</li>
</ol>


<p>みたいな処理をするとき 3. を 1. の順序と同じにしたいのでこれを使います。</p>

<p>はじめ自分は <code>flatMap</code> で繋いでいくだけですべて直列化されているのかなーと勘違いしていたので、これを知った時は目からウロコでした。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.introtorx.com/content/v1.0.10621.0/12_CombiningSequences.html">Intro to Rx &ndash; Combining sequences</a></li>
<li><a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX &ndash; Concat operator</a></li>
<li><a href="http://blog.okazuki.jp/entry/20120219/1329663635">Reactive Extensions再入門 その４１「どんどん合成するよ」 &ndash; かずきのBlog@hatena</a></li>
<li><a href="https://twitter.com/neuecc/status/695604984763650050">https://twitter.com/neuecc/status/695604984763650050</a> &ndash; @neuecc さんありがとうございます！</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava の ImmediateScheduler と TrampolineScheduler の違い]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/05/difference-immediatescheduler-and-trumpolinescheduler/"/>
    <updated>2016-02-05T01:30:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/05/difference-immediatescheduler-and-trumpolinescheduler</id>
    <content type="html"><![CDATA[<p>RxJava のスケジューラの中に <a href="http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html"><code>TrampolineScheduler</code></a> というのがあり、<a href="https://twitter.com/amay077/status/693341525464346624">なんじゃこれ？</a>とつぶやいたところ、 <a href="http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html">Rx.NET の <code>CurrentThreadScheduler</code> と同じっぽい</a> と教えてもらいました。</p>

<!--more-->


<p>その流れで、類似の Scheduler である <a href="http://reactivex.io/RxJava/javadoc/rx/schedulers/ImmediateScheduler.html">ImmediateScheduler</a> との違いについて語られているトピックを紹介してもらいました。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/amay077">@amay077</a> この辺読みとくと良いと思います（tranpolineというキーワードも登場します） <a href="https://t.co/A5TzOiobsC">https://t.co/A5TzOiobsC</a></p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/693396949643317248">2016, 1月 30</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>CurrentThreadScheduler vs ImmediateScheduler</h1>

<ul>
<li><a href="https://social.msdn.microsoft.com/Forums/en-US/7f75482f-eff2-4938-9491-47fe870989e8/currentthreadscheduler-vs-immediatescheduler?forum=rx">CurrentThreadScheduler vs ImmediateScheduler</a></li>
</ul>


<p>紹介してもらったこのディスカッションを、頑張って翻訳してみました（めちゃくちゃなとこは訂正願います）。
RxJava では <code>CurrentThreadScheduler</code> を <code>TrampolineScheduler</code> に読み替えてください。</p>

<p>－－訳ここから－－</p>

<h2>Ohad 氏の質問</h2>

<blockquote><p>Hi
ImmediateScheduler&rsquo;s Schedule method is pretty straightforward &ndash; it simply invokes the action.
In contrast, CurrentThreadScheduler seems more involved &ndash; it creates something called a trampoline, which in turn iterates over an action queue, sleeping between invocations of items in the queue and so forth</p></blockquote>

<p>やあ、
<code>ImmediateScheduler.Schedule</code> メソッドは単純をアクションを呼び出します。
対照的に、 <code>CurrentThreadScheduler</code> は複雑に見えます。トランポリンと呼ばれるものを作り、それはアクション・キューで、順次スリープの間に呼び出されます。</p>

<blockquote><p>I&rsquo;ve been trying to follow the code with reflector but I&rsquo;m having a hard time understanding the difference. As far as I can tell, CurrentThreadSchedule&rsquo;s schedule method calls Trampoline &rsquo;s Run method, which will end up blocking the current thread until the queued action is performed (on the current thread as well) &ndash; apparently just like in the case of ImmediateScheduler</p></blockquote>

<p>私はコードを追ってみましたが、理解するのに苦労しています。分かる範囲では、 <code>CurrentThreadSchedule.Schedule</code> メソッドは <code>Trampoline.Run</code> メソッドを呼び出しています。これは現在のスレッドを、キューのアクションが実行されるまで(カレントスレッドも同様に)ブロックしようとします。 &ndash; どうも <code>ImmediateScheduler</code> のようにみえます。</p>

<blockquote><p>I realize I&rsquo;m missing something, so an explanation would be really appreciated
Thanks !</p></blockquote>

<p>何か理解が足りないと思うので、説明してもらえると嬉しいです。</p>

<blockquote><p>EDIT &ndash; In the meantime I&rsquo;ve found a couple of resources that may shed light on the subject, if anyone&rsquo;s interested:</p></blockquote>

<p>２つのリソースを見つけました。何かの手がかりになれば。</p>

<p><a href="http://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx">http://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx</a></p>

<p><a href="http://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx">http://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx</a></p>

<h2>Dave 氏の回答</h2>

<blockquote><p>Hi,</p>

<p>The trampoline seems to serve three purposes:</p></blockquote>

<p>やあ、
トランポリンは３つの目的を持っているように見えます。</p>

<blockquote><p>1- Prevents dead-locks from scheduler reentrancy.</p></blockquote>

<p>1- スケジューラーの割り込みからデッドロックを防ぎます。</p>

<blockquote><p>2- Prevents infinite loops in observables that require recursion through scheduler reentrancy.</p></blockquote>

<p>2- スケジューラーの割り込みを使った再帰が必要な Observable の無限ループを防ぎます。</p>

<blockquote><p>3- Cooperative single-threaded multitasking; I guess it&rsquo;s similar to the proposed async/await feature in C# 5.0.  Calling CurrentThreadScheduler.Schedule is sort of like using await when the currently executing code was also scheduled via CurrentThreadScheduler.</p></blockquote>

<p>3- シングルスレッドでの「<a href="http://www.sophia-it.com/content/%E3%83%8E%E3%83%B3%E3%83%97%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF">協調的マルチタスキング</a>」; 私は C# 5.0 に提案されている async/await に近いものだと思います。<code>CurrentThreadScheduler.Schedule</code> の呼び出しは、現在実行中のコードも <code>CurrentThreadScheduler</code> でスケジュールされていたときに await を使用するようなものです。（訳注: C# の async/await は協調的マルチタスキングではないと思います。これは async/await 登場以前に予想で書かれたものかと。</p>

<blockquote><p>In the observable world, calling Subscribe should be an asynchronous operation.  There&rsquo;s a problem if the scheduling of an observable dead-locks or blocks the current thread indefinitely because it attempts to execute immediately and never completes.</p></blockquote>

<p>Observable の世界では、<code>Subscribe</code> の呼び出しは、非同期処理で行わなければなりません。Observable のスケジューリングがデッドロックまたはカレントスレッドを無期限にブロックする場合、すぐに実行しようとしても完了しないので、問題になります。</p>

<blockquote><p>Ignore the type of scheduler for a moment and consider a scheduled action that eventually, through some sequence of method calls, uses the same scheduler to schedule another action.</p></blockquote>

<p>ちょっとこのスケジューラを無視して、いずれは、いくつかのシーケンスは別のアクションをスケジュールするために、同じスケジューラを使用することを考えてみてください。</p>

<blockquote><p>With the ImmediateScheduler, the inner action is executed immediately.</p></blockquote>

<p><code>ImmediateScheduler</code> では、”内側のアクション” はすぐに実行されます。</p>

<blockquote><ul>
<li>If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it&rsquo;s released by the outer action, then these actions dead-lock.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションが、内側のアクションが依存しているリソースを取得した場合、
内側のアクションは外側のアクションがリソースを開放するまでそれを取得できず、これらのアクションはデッドロックします。</li>
</ul>


<blockquote><ul>
<li>If the outer action depends upon the inner action, and the inner action depends upon the outer action, then this could result in an infinite loop that never yields control to other actions.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションは内部アクションに依存し、内部アクションは外側の行動に依存している場合、他のアクションに制御が移らない無限ループになります。</li>
</ul>


<blockquote><p>For example: Observable.Return(1).Repeat().Take(1)</p></blockquote>

<p>例: <code>Observable.Return(1).Repeat().Take(1)</code></p>

<blockquote><p>By default, Return uses the ImmediateScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return.  Because there&rsquo;s no trampoline in Return, this pattern repeats itself, blocking the current thread indefinitely.  Calling Subscribe on this observable never returns.  See <a href="https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx">this discussion</a> for more information.</p></blockquote>

<p>既定では、<code>Return</code> は <code>ImmediateScheduler</code> を使って <code>OnNext(1)</code> そして <code>OnCompleted()</code> を呼び出します。 <code>Repeat</code> はどんな並列性も使用しません、なのですぐに <code>OnCompleted</code> を検知して、すぐに <code>Return</code> を再購読します。なぜなら、 <code>Return</code> にはトランポリンがないので、このパターンは自分自身を繰り返し、無期限に現在のスレッドをブロックし続けます。この Observable を <code>Subscribe</code> すると処理が返ってきません。詳細については、<a href="https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx">この説明</a>を参照してください。</p>

<blockquote><p>With the CurrentThreadScheduler, the inner action is scheduled (queued) for execution when the outer action ends.  Conceptually, inner actions are bounced on the trampoline until the current thread is ready to execute them.</p></blockquote>

<p><code>CurrentThreadScheduler</code> では、内側のアクションは、外側のアクションが終了された時に実行されるようにスケジュールされます。コンセプトとしては、内側のアクションは、現在のスレッドが実行可能になるまでトランポリンの上で跳ねます。</p>

<blockquote><ul>
<li>If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it&rsquo;s released by the outer action, then these actions do not dead-lock because the inner action is not executed until the outer action completes.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションが、内側のアクションが依存しているリソースを取得し、内側のアクションは外側のアクションによってそれらが解放されるまで取得できない場合、これらのアクションはデッドロックしません、なぜなら。内側のアクションは外側のアクションが終了するまで実行されないためです。</li>
</ul>


<blockquote><ul>
<li>If the outer action recurses when the inner action completes, then there won&rsquo;t be an immediately infinite loop because the inner action does not complete until the outer action completes first.</li>
</ul>
</blockquote>

<ul>
<li>外側のアクションが内側のアクションが終了した時に再帰的な場合、無限ループになりません。なぜなら、内側のアクションは外側のアクションが完了するまで完了しないためです。</li>
</ul>


<blockquote><p>For example: Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)</p></blockquote>

<p>例: <code>Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)</code></p>

<blockquote><p>Here, Return is using the CurrentTheadScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return; however, this second subscription to Return schedules its (inner) actions on the trampoline because it&rsquo;s still executing on the OnCompleted callback from the first scheduled (outer) action, thus the repetition does not occur immediately.  This allows Repeat to return a disposable to Take, which eventually calls OnCompleted, cancels the repetition by disposing Repeat, and ultimately the call from Subscribe returns.</p></blockquote>

<p>ここでは、 <code>Return</code> は <code>CurrentTheadScheduler</code> を使って <code>OnNext(1)</code> そして <code>OnCompleted()</code> を呼び出します。 <code>Repeat</code> はどんな並列性も使用しません、なのですぐに <code>OnCompleted</code> を検知して、すぐに <code>Return</code> を再購読します。しかし、この２回目の <code>Return</code> の購読（内側のアクション）はトランポリンの上にあります、なぜなら、最初にスケジュールされたアクション（外側のアクション）の <code>OnCompleted</code> コールバックの上でまだ実行中であるからです、なので繰り返しはすぐに発生しません。
これは、<code>Repeat</code> は <code>Take</code> に disposable(subscription) を返すことができます、それはやがて <code>OnCompleted</code> を呼び出し、<code>Subscribe</code> の返値から <code>Repeat</code> の破棄により繰り返しをキャンセルします。</p>

<blockquote><p>Keep in mind that the examples with Return and Repeat do not introduce any concurrency.  When you call Subscribe, it will not return until the observable completes regardless of which of these schedulers you choose.  With the ImmediateScheduler, Take calls OnCompleted but it cannot cancel the repetition, so Subscribe blocks indefinitely.  Alternatively, the CurrentThreadScheduler allows for cooperative single-threaded multitasking between the Return and Repeat operators, thus allowing Take to cancel the repetition without having to introduce any concurrency.</p></blockquote>

<p>覚えておいて欲しいのは、 <code>Return</code> → <code>Repeat</code> はどんな並列性も使用しないことです。<code>Subscribe</code> を呼び出すと、あなたが選択した Scheduler に関係なく、Observable が終了するまで処理を返しません。 <code>ImmediateScheduler</code> では、<code>Take</code> は <code>OnCompleted</code> を呼び出しますが、繰り返しをキャンセルできません。なので <code>Subscribe</code> は無期限にブロックしてしまいます。代わりに <code>CurrentThreadScheduler</code> は <code>Return</code> と <code>Repeat</code> 操作の間、協調的マルチタスキングが可能になります、なので、並行性を使用することなく、繰り返しをキャンセルすることができます。</p>

<p>－－訳ここまで－－</p>

<h1>つまり？</h1>

<p><code>ImmediateScheduler</code> が処理をただ単に(割り込んで)実行するだけであるのに対し、 <code>CurrentScheduler</code>(<code>TrampolineScheduler</code>) は、擬似的なマルチタスクを行う（懐かしの VB の <a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1112681621"><code>DoEvents</code></a> かぁ？）ことでデッドロックを防いでいる、と理解しました。</p>

<p>Dave 氏の回答にあった例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Observable</span><span class="p">.</span><span class="n">Return</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">Repeat</span><span class="p">().</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(...);</span>
</span><span class='line'><span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hoge&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>を実行すると、確かに処理が帰ってこない、<code>Debug.WriteLine</code> へ進まないんです。</p>

<p>これはヤバい、<code>ImmediateScheduler</code> マジやべえと。
で、 RxJava でも同じだよねえと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// just が ImmediateScheduler 使うのか不安だったから subscribeOn しているよ</span>
</span><span class='line'><span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">immediate</span><span class="o">()).</span><span class="na">repeat</span><span class="o">().</span><span class="na">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">subscribe</span><span class="o">(...);</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Hoge&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いて実行してみたら、処理が帰ってくる！ <code>Log.debug</code> も実行される！
なんだこの違いは？改善されているのか、試し方が悪いのか。。。</p>

<p>なんだかモヤモヤした終わりかたですが、今回は <code>ImmediateScheduler</code> はちょっと要注意だというところまでです。</p>

<blockquote><p>In the observable world, calling Subscribe should be an asynchronous operation.</p></blockquote>

<p>との言葉通り、Rx.NET/RxJava を使うときは非同期にしたい事が全てだと思いますが、オペレータによっては既定で <code>ImmediateScheduler</code> を使うものもあるので、必ず <code>subscribeOn/observeOn</code> をするクセをつけておいた方がいいのかな？と思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Data Binding + MVVMパターンのサンプルを書いてみた]]></title>
    <link href="http://blog.amay077.net/blog/2016/01/28/creating-android-databinding-with-mvvm-pattern-sample/"/>
    <updated>2016-01-28T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/01/28/creating-android-databinding-with-mvvm-pattern-sample</id>
    <content type="html"><![CDATA[<p><code>notifyPropertyChanged</code> とか、<a href="https://ufcpp.wordpress.com/2009/12/28/inotifypropertychanged-%E3%81%AE%E5%AE%9F%E8%A3%85/">どこかで見たことのある</a>機能が満載の <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">Android Data Binding</a> ですが、登場以来あまり追えてなかったのでやっとサンプルをつくってみました。</p>

<!--more-->


<p>といっても</p>

<ul>
<li><a href="http://qiita.com/amay077/items/8464a22e3063642112ed">RxJava + MVVM パターンで作るストップウォッチアプリ &ndash; Qiita</a></li>
</ul>


<p>で作ったストップウォッチアプリを Data Binding 化しただけです。</p>

<p><a href="http://qiita.com/amay077/items/8464a22e3063642112ed#model-viewmodel-viewmvvm-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B">前回</a> との違いを図に示します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_03.png" alt="" /></p>

<ul>
<li>View-ViewModel で全面的に使用していた <code>rx.Observable&lt;T&gt;</code> の代わりに、<code>ObservableField&lt;T&gt;</code> を使用。</li>
<li>View側で「オレオレDataBinding」を実装していた箇所を、Android の Data Binding に置き換え。つまりバインディングの定義はレイアウトxmlへ記述。</li>
<li>Model は相変わらず <code>rx.Observable&lt;T&gt;</code> のまま。なので ViewModel で <code>rx.Observable&lt;T&gt;</code> → <code>ObservableField&lt;T&gt;</code> へ変換。</li>
<li>メソッドとのバインドに <code>Command</code> を使用していたが、Android Data Binding の <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html#binding_events">Binding Events</a> に置き換え。</li>
<li>ListView とデータ群のバインディングの方法が分からなかったので、<a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html#custom_setters">カスタムBinding</a>で対応。(listItem のバインディングじゃなくて、リストの件数の増減を反映させるやつ。)</li>
<li>ArrayAdapter 使ってたんだけどこいつは Binding に対応していない？ので Adapter を自作。</li>
</ul>


<h2>MainActivity のバインディングの定義</h2>

<p><code>activity_main.xml</code> はこんな感じ。</p>

<p><code>@{ }</code> で  <code>MainViewModel</code> に用意した <code>ObservableField&lt;T&gt;</code> または、イベントハンドラとバインドしてます。</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;layout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">xmlns:app=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;variable</span> <span class="na">name=</span><span class="s">&quot;viewModel&quot;</span>
</span><span class='line'>            <span class="na">type=</span><span class="s">&quot;com.amay077.stopwatchapp.viewmodel.MainViewModel&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>        <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>        <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>        <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span> <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="na">android:id=</span><span class="s">&quot;@+id/textTime&quot;</span>
</span><span class='line'>            <span class="na">tools:text=</span><span class="s">&quot;00:00.000&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@{viewModel.formattedTime}&quot;</span>
</span><span class='line'>            <span class="na">android:textSize=</span><span class="s">&quot;50sp&quot;</span>
</span><span class='line'>            <span class="na">android:gravity=</span><span class="s">&quot;center_horizontal&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/buttonStartStop&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@{viewModel.runButtonTitle}&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel.onClickStartOrStop}&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/buttonLap&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Lap&quot;</span>
</span><span class='line'>            <span class="na">android:enabled=</span><span class="s">&quot;@{viewModel.isRunning}&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel.onClickLap}&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Switch</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/switchVisibleMillis&quot;</span>
</span><span class='line'>            <span class="na">android:checked=</span><span class="s">&quot;@{viewModel.isVisibleMillis}&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel.onClickToggleVisibleMillis}&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;小数点以下を表示&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ListView</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/listLaps&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">app:formattedLaps=</span><span class="s">&quot;@{viewModel}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'><span class="nt">&lt;/layout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ListView で <code>app:formattedLaps="@{viewModel}"</code> としているところだけが特殊で、これは <code>MainActivity.java</code> に定義したカスタムSetter を呼び出します。</p>

<p><code>MainActivity.java</code> はこんな感じ。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="cm">/* final */</span>  <span class="n">MainViewModel</span> <span class="n">_viewModel</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CompositeSubscription</span> <span class="n">_subscriptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompositeSubscription</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ActivityMainBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_viewModel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MainViewModel</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">binding</span><span class="o">.</span><span class="na">setViewModel</span><span class="o">(</span><span class="n">_viewModel</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ■ViewModel からの Message の受信（省略）</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * ListView と ViewModel のカスタムバインディング</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * TODO 本当は viewModel.formattedLaps とバインドしたい</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@BindingAdapter</span><span class="o">(</span><span class="s">&quot;formattedLaps&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setFormattedLaps</span><span class="o">(</span><span class="n">ListView</span> <span class="n">listView</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MainViewModel</span> <span class="n">viewModel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">LapAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LapAdapter</span><span class="o">(</span><span class="n">listView</span><span class="o">.</span><span class="na">getContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// formattedLaps が変化した時に呼ばれるイベントで、Adapterを洗い替え。</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="o">.</span><span class="na">formattedLaps</span><span class="o">.</span><span class="na">addOnPropertyChangedCallback</span><span class="o">(</span><span class="k">new</span> <span class="n">android</span><span class="o">.</span><span class="na">databinding</span><span class="o">.</span><span class="na">Observable</span><span class="o">.</span><span class="na">OnPropertyChangedCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPropertyChanged</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">databinding</span><span class="o">.</span><span class="na">Observable</span> <span class="n">sender</span><span class="o">,</span> <span class="kt">int</span> <span class="n">propertyId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">viewModel</span><span class="o">.</span><span class="na">formattedLaps</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// バインド時に値を更新</span>
</span><span class='line'>        <span class="n">adapter</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>        <span class="n">adapter</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">viewModel</span><span class="o">.</span><span class="na">formattedLaps</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_viewModel</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>オレオレBindingがごっそり消えてスッキリ。
<code>setFormattedLaps</code> がカスタムSetterで、この中で <code>MainViewModel.formatterLaps</code> を監視し、値が変わったら Adapter を総入れ替えしてます。が、これが正しいやり方かわからない。
<a href="https://android.googlesource.com/platform/frameworks/data-binding/+/android-6.0.0_r7/extensions/baseAdapters/src/main/java/android/databinding/adapters">extensions/baseAdapters/src/main/java/android/databinding/adapters</a> にはそれらしいのがないでござるよ。。。</p>

<h2>ViewModel 側</h2>

<p>この辺みてください。大したことはやってないです。（急に雑になったw）</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java">StopWatchSample/MainViewModel.java</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/ObservableUtil.java">StopWatchSample/ObservableUtil.java</a></li>
</ul>


<p><code>ObservableUtil.toObservableField</code> とか、もうどっかの誰かがやってそうだし、事実上標準の何かが出てきそうな気がすごくします。</p>

<h2>おまけ</h2>

<h3>Messenger を RxJava ベースにした</h3>

<ul>
<li><a href="http://qiita.com/yyaammaa/items/57d8baa1e80346e67e47">OttoからRxJavaへの移行ガイド &ndash; Qiita</a></li>
<li><a href="http://qiita.com/kubode/items/a4ece37834446c9a39c8">Android &ndash; RxJavaでEventBusを作った &ndash; Qiita</a></li>
</ul>


<p>らしいので、自作してた <code>Messenger</code> を <a href="https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/frameworks/messengers/Messenger.java">RxJava ベースにしてみました</a>。
ViewModel→Viewの通知
にしか使ってないので、あまり <code>rx.Observable&lt;T&gt;</code> にする旨味はなかったですね。あ、<code>ofType</code> って便利ですね。</p>

<h2>まとめ</h2>

<p>今回作ったアプリの全ソースは</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/tree/android_data_binding_v1_20160128/StopWatchAppXamarin/StopWatchApp.Android">StopWatchApp.Android</a></li>
</ul>


<p>です。</p>

<p>.NETアプリケーション開発では、ViewModel を View にバインドすることが殆どなので、典型的な例としてやってみました。</p>

<p>レイアウトに直接バインドを定義できるので、コードビハインド(Javaのソース)はスッキリしますが、個人的にはあまり好きではありません。
コードビハインドに(<code>textTime.SetBinding(v =&gt; v.Text, viewModel.Time)</code> みたく)書いた方が、定義情報がまとまっていて管理しやすい、デバッグしやすいと思うからです。（同じ理由で、xmlに直接記述する <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html#expression_language">Expression Language</a> も好きではありません。）
が、今のところ、Android Data Binding では、レイアウトXMLでしかバインディングを定義できないようですね。</p>

<p>ともあれ、<a href="https://github.com/gueei/AndroidBinding">AndroidBinding</a> とか Butter Knife はこれで駆逐されていく（前者はすでに息してなさそうですが）と思うので、新しいアプリ開発では積極的に使っていこうかなと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">Data Binding Guide | Android Developers</a></li>
<li><a href="http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6#after-listview">Android &ndash; Butter Knife、今までありがとう。 Data Binding、これからよろしく。 &ndash; Qiita</a></li>
<li><a href="http://tech.recruit-mp.co.jp/mobile/android-data-binding/">[Android] – Data Bindingつかってみた – NET BIZ DIV. TECH BLOG</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-Java でリスト操作するなら IxJava が決定版だと思う]]></title>
    <link href="http://blog.amay077.net/blog/2016/01/21/ixjava-the-best-library-of-list-operations/"/>
    <updated>2016-01-21T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/01/21/ixjava-the-best-library-of-list-operations</id>
    <content type="html"><![CDATA[<p>Android では Java8 が使えないため、 &lsquo;Yet another Stream API&rsquo; なライブラリがいくつかあります。</p>

<!--more-->


<ul>
<li><a href="http://qiita.com/tsumuchan/items/8e438a2ea653fa786c23">Androidでリスト操作するなら、Lightweight-Stream-APIが便利 &ndash; Qiita</a></li>
<li><a href="http://qiita.com/k--kato/items/ec7ab8b392fa8bb0a732">JavaにC#のLINQを移植してみた &ndash; jLinqer &ndash; Qiita</a></li>
<li><a href="http://stackoverflow.com/questions/1217228/what-is-the-java-equivalent-for-linq">What is the Java equivalent for LINQ? &ndash; Stack Overflow</a></li>
</ul>


<p>普段 C# を使っているため LINQ to Objects の便利さをなんとか Androidアプリ開発でも享受したい。
そこで個人的に「これだ！」と思っているライブラリが IxJava です。</p>

<ul>
<li><a href="https://github.com/akarnokd/ixjava">akarnokd/ixjava: Interactive Extensions for Java</a></li>
</ul>


<h2>IxJava とは？</h2>

<p>一言でいえば <em>「LINQ to Objects の Java版」</em> です。</p>

<p>README より、</p>

<blockquote><p>Interactive Extensions for Java, the dual of RxJava. Originally implemented in the Reactive4Java framework, now converted to work with RxJava.</p>

<p>The aim is to provide pull-based datastream support with the same naming as in RxJava mainly for the pre-Java-8 world.</p></blockquote>

<p>開発者の akarnokd 氏は、 RxJava の登場以前から <a href="https://code.google.com/p/reactive4java/">Reactive4Java</a> という「Java版Rx」を開発しており、これには大きく２つの機能が含まれていました。</p>

<ul>
<li><code>Reactive&lt;T&gt;</code> : Reactive Extension の Java実装</li>
<li><code>Interactive&lt;T&gt;</code> : LINQ to Objects の Java実装</li>
</ul>


<p>そう、 akarnokd 氏は、Rx と共に LINQ も Java に移植していたのです。
その後、彼は RxJava への参加を表明し、 reactive4java は開発終了となりましたが、RxJava には LINQ 相当の機能は含まれません。
そこで彼は、 <code>Interactive&lt;T&gt;</code> だけを <em>IxJava</em> として切り離し、純粋な <em>「LINQ to Object for Java」</em> として開発続行したのです。</p>

<p>akarnokd 氏は RxJava の <a href="https://github.com/ReactiveX/RxJava/graphs/contributors">Contributors</a> を見ると中心的な開発者であると思われます。そんな彼が開発した ixjava も安心できる品質ではないかと思います。（ちょっと ixjava の知名度が低いのが残念ですが。ただ reactive4java の <code>Interactive&lt;T&gt;</code> を使ってきましたが問題はありません。）</p>

<h2>使い方（Android の場合）</h2>

<h3>導入方法</h3>

<p>Module の <code>build.gradle</code> に以下を追加するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s">&quot;com.github.akarnokd:ixjava:0.90.0&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用例</h3>

<ul>
<li><a href="http://qiita.com/amay077/items/9d2941283c4a5f61f302">LINQ to Objects と Java8-Stream API の対応表 &ndash; Qiita</a></li>
</ul>


<p>のサンプルコードの一部を IxJava で書いてみました。</p>

<h4>抽出(filter)、並べ替え(orderBy)、射影(map)</h4>

<figure class='code'><figcaption><span>ixjava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Ix</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">// 可視性向上の為のなんちゃってラムダ</span>
</span><span class='line'>  <span class="o">.</span><span class="na">orderBy</span><span class="o">(</span><span class="n">x</span><span class="o">-&gt;</span> <span class="o">-</span><span class="n">x</span><span class="o">)</span>  <span class="c1">// OrderByDescending がないので</span>
</span><span class='line'>  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ixjava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//出力</span>
</span><span class='line'><span class="mi">80</span> <span class="mi">60</span> <span class="mi">40</span> <span class="mi">20</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h4>平坦化して射影(flatMap)</h4>

<figure class='code'><figcaption><span>ixjava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Ix</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="err">−</span><span class="o">&gt;</span> <span class="n">Ix</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="o">,</span> <span class="n">x</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ixjava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//出力</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">20</span> <span class="mi">21</span>
</span><span class='line'><span class="mi">30</span> <span class="mi">31</span> <span class="mi">32</span>
</span><span class='line'><span class="mi">40</span> <span class="mi">41</span> <span class="mi">42</span> <span class="mi">43</span>
</span><span class='line'><span class="mi">50</span> <span class="mi">51</span> <span class="mi">52</span> <span class="mi">53</span> <span class="mi">54</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2つの値を揃えて流す(zip)</h4>

<p>Stream API には無いが IxJava にはあるのだよ。</p>

<figure class='code'><figcaption><span>ixjava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Ix</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">zip</span><span class="o">(</span><span class="n">Ix</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;hoge&quot;</span><span class="o">,</span> <span class="s">&quot;fuga&quot;</span><span class="o">,</span> <span class="s">&quot;piyo&quot;</span><span class="o">)),</span>
</span><span class='line'>    <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ixjava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//出力</span>
</span><span class='line'><span class="o">{</span> <span class="n">first</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">second</span> <span class="o">=</span> <span class="n">hoge</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">first</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">second</span> <span class="o">=</span> <span class="n">fuga</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">first</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="n">second</span> <span class="o">=</span> <span class="n">piyo</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Ix<T> のメソッド一覧</h4>

<p>あとはテキトーに抜き出したメソッド一覧を置いておきますね。
RxJava や LINQ とほとんど同じなのでだいたい想像付くと思います。
（何気に <code>toObservable</code> で <code>Observable&lt;T&gt;</code> にも変換できますね。）
あ、あとタイトルには Androidの〜 と書きましたが、普通の Java でもフツーに使えますので。</p>

<ul>
<li>aggregate</li>
<li>all</li>
<li>any</li>
<li>argAndMax</li>
<li>argAndMin</li>
<li>averageBigDecimal</li>
<li>averageBigInteger</li>
<li>averageDouble</li>
<li>averageFloat</li>
<li>averageInt</li>
<li>averageLong</li>
<li>buffer</li>
<li>call</li>
<li>concat</li>
<li>concatWith</li>
<li>concatWithAll</li>
<li>contains</li>
<li>count</li>
<li>countLong</li>
<li>defer</li>
<li>dematerialize</li>
<li>distinct</li>
<li>distinctNext</li>
<li>doOnCompleted</li>
<li>doOnNext</li>
<li>doWhile</li>
<li>empty</li>
<li>endWith</li>
<li>error</li>
<li>filter</li>
<li>filterIndexed</li>
<li>first</li>
<li>flatMap</li>
<li>forEach</li>
<li>from</li>
<li>fromPart</li>
<li>generate</li>
<li>groupBy</li>
<li>into</li>
<li>isEmpty</li>
<li>iterator</li>
<li>join</li>
<li>just</li>
<li>last</li>
<li>map</li>
<li>mapIndexed</li>
<li>materialize</li>
<li>max</li>
<li>maxBy</li>
<li>mayBy</li>
<li>memoize</li>
<li>memoizeAll</li>
<li>min</li>
<li>minBy</li>
<li>minxBy</li>
<li>newBuilder</li>
<li>ofType</li>
<li>orderBy</li>
<li>print</li>
<li>println</li>
<li>prune</li>
<li>publish</li>
<li>range</li>
<li>removeAll</li>
<li>repeat</li>
<li>replay</li>
<li>run</li>
<li>scan</li>
<li>share</li>
<li>skipLast</li>
<li>startWith</li>
<li>subsequent</li>
<li>sumBigDecimal</li>
<li>sumBigInteger</li>
<li>sumDouble</li>
<li>sumFloat</li>
<li>sumInt</li>
<li>sumIntAsDouble</li>
<li>sumLong</li>
<li>sumLongAsDouble</li>
<li>take</li>
<li>takeLast</li>
<li>toArray</li>
<li>toBuilder</li>
<li>toHashMap</li>
<li>toHashMultimap</li>
<li>toList</li>
<li>toMap</li>
<li>toMultimap</li>
<li>toObservable</li>
<li>zip</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Task→Observable 変換でハマったこと]]></title>
    <link href="http://blog.amay077.net/blog/2016/01/16/misunderstood-task-to-observable-conversion/"/>
    <updated>2016-01-16T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/01/16/misunderstood-task-to-observable-conversion</id>
    <content type="html"><![CDATA[<p>.NET の <code>Task&lt;T&gt;</code> は、Reactive Extensions が提供する拡張メソッド <code>ToObservable()</code> で <code>IObservable&lt;T&gt;</code> に変換できます。</p>

<p>なにも考えずに <code>ToObservable()</code> を連発していたら、盛大にハマったのでメモ。</p>

<!--more-->


<h2>Task.Run().ToObservable() とか、意味ないっしょ</h2>

<p>ダメなコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="n">IObservable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">incrementObservable</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Run</span> <span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="p">++;</span>
</span><span class='line'>  <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;increment! - {i}&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="n">ToObservable</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Ready...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">incrementObservable</span> <span class="c1">// インクリメント</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Repeat</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="c1">// ３回繰り返す</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span>
</span><span class='line'>      <span class="n">x</span>  <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;OnNext({x})&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">ex</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;OnError({ex.ToString()})&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;OnCompleted&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>incrementObservable</code> は、副作用ありありですが、外部変数 i を +1 して後続に流す <code>IObservable&lt;int&gt;</code> です。
　これを <code>.Repeat(3)</code> して <code>.Subscribe</code> してますから、
　</p>

<blockquote><p>Ready&hellip;
increment! &ndash; 1
OnNext(1)
increment! &ndash; 2
OnNext(2)
increment! &ndash; 3
OnNext(3)
OnCompleted</p></blockquote>

<p>という出力を期待してました。
が、実際の出力はこう。</p>

<blockquote><p>increment! &ndash; 1
Ready&hellip;
OnNext(1)
OnNext(1)
OnNext(1)
OnCompleted</p></blockquote>

<p>Subscribe する前に Task が実行されてるし、 repeat してるのに increment されない。。。</p>

<p>「・・・ん？ Task.Run().ToObservable() って、タスクを実行した結果を IObservable 化してるだけじゃね？」</p>

<p>コード見たまんまなんですが、これに気づくのに１時間かかりました。。。</p>

<p>期待通り動くのはこう↓。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="n">IObservable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">incrementObservable</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromAsync</span><span class="p">(()=&gt;</span><span class="n">Task</span><span class="p">.</span><span class="n">Run</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="p">++;</span>
</span><span class='line'>  <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;increment! - {i}&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Ready...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">incrementObservable</span> <span class="c1">// インクリメント</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Repeat</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="c1">// ３回繰り返す</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span>
</span><span class='line'>      <span class="n">x</span>  <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;OnNext({x})&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">ex</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;OnError({ex.ToString()})&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;OnCompleted&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Observable.FromAsync</code> で Task の実行そのものを IObservable 化します。
これの結果は正しくこう↓なりました。</p>

<blockquote><p>Ready&hellip;
increment! &ndash; 1
OnNext(1)
increment! &ndash; 2
OnNext(2)
increment! &ndash; 3
OnNext(3)
OnCompleted</p></blockquote>

<h2>Task は１回しか実行できない</h2>

<p>ところで、 <code>Task&lt;T&gt;</code> は一度実行すると、２度目は実行できません。（Furure や Promise もそうだっけ）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">incrementTask</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="p">++;</span>
</span><span class='line'>  <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;increment! - {i}&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">incrementTask</span><span class="p">.</span><span class="n">RunSynchronously</span><span class="p">();</span>
</span><span class='line'><span class="n">incrementTask</span><span class="p">.</span><span class="n">RunSynchronously</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードは２回目の <code>RunSynchronously()</code> で例外がでます。</p>

<p>となると、 <code>incrementTask.ToObservable()</code> したとしても、期待通り動いてくれなさそうです。
（そもそも Task は <code>Start</code> などしないと実行されないので、Observable のチェインの中でいつ呼ぶの？）</p>

<p>というわけで、 <code>Task.ToObservable()</code> は、どういう時に使えばいいのかよくわかりませんでした。だれか教えて下さい。（汗）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava + MVVM パターンで作るストップウォッチアプリ]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/24/creating-stopwatchapp-using-rxjava-and-mvvm-patternn/"/>
    <updated>2015-12-24T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/24/creating-stopwatchapp-using-rxjava-and-mvvm-patternn</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/rxjava">RxJava Advent Calendar 2015 24日目</a> の記事です。</p>

<p>先日、</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/2015/12/20/012007">JXUGC #9 Xamarin.Forms Mvvm 実装方法 Teachathon を開催しました &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>というイベントがありまして、エクセルソフトの田淵さんが作成したストップウォッチのアプリケーション(注:田淵さんはプログラマではないｗ)を、MVVM識者の方々が「MVVMとしてはこうあるべきだ」と叩きまくる、という恐ろしい?ものでした。</p>

<!--more-->


<p>私はこの勉強会には参加できなかったのですが、ストリーミングとか見て、</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">僕もストップウォッチ作ってみるかー</p>&mdash; ジェットあめいカスタム (@amay077) <a href="https://twitter.com/amay077/status/677561989359472640">2015, 12月 17</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>などとつぶやいたらご指名されてしまいました(^^)
このイベントは Xamarin を使ったアプリ製作でしたが、せっかくなので <strong>RxJava + MVVM</strong> で作ってみました。
(ご指名に応えないといけないのでその後 Xamarin版も製作)</p>

<h1>ストップウォッチアプリの仕様</h1>

<p>上記リンクからの引用です。</p>

<ul>
<li>Start/Stop ボタン、Lap ボタン</li>
<li>StartするとラップボタンはEnable.ストップするとDisable

<ul>
<li>スタートしてからの経過時間をXX&#8217;XX.XXXみたいな感じで表示</li>
</ul>
</li>
<li>履歴をListViewで残す</li>
<li>ストップしたら結果をダイアログで出して分岐？</li>
<li>今までのラップよりMin, Maxなどをダイアログに表示して次のページに遷移 ←ここ勝手に Toast に仕様変更しましたｗ</li>
<li>スイッチの切り替えで、ミリ秒の桁を表示/非表示</li>
</ul>


<p>こんな機能を満たすサンプルを</p>

<ol>
<li>RxJava を使った Android アプリ(Java言語)</li>
<li>Reactive Extensions, ReactiveProperty を使った Android アプリ(Xamarin, C#言語)</li>
<li>Reactive Extensions, ReactiveProperty を使った iOS アプリ(Xamarin, C#言語)</li>
</ol>


<p>でそれぞれ作ってみました。</p>

<h1>とりあえず、作ったもの</h1>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_00.gif" alt="つくったもの" /></p>

<p>左は Android-Java製、右は Xamarin.iOS製です。(Xamarin.Android製は省略)</p>

<h1>1. RxJava を使った Android アプリ(Java言語)</h1>

<h2>Model-ViewModel-View(MVVM) で考える</h2>

<p>構成図っぽいものを描くとこんな感じになります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_01.png" alt="クラス図的なの" /></p>

<h3>Model</h3>

<p>　この仕様だと、ストップウォッチの一通りの機能を満たすクラスが Model になります。これを <code>StopWatchModel</code> という名前にしました。</p>

<p>  <strong>「ロジック」は、すべてこの層（このクラス）に書きます。</strong>
　
　例えば、ストップウォッチのタイマーを実行するには、 RxJava で <code>Observable.interval</code> としますが、これを ViewModel層に書いたら「負け」です。
　
また、ストップウォッチの実行は、画面の表示/破棄と連動しなくてよい(画面遷移しても計測し続けるべき)なので、StopWatchModel の生存期間は、アプリケーションの起動時から終了まで、という事になります。</p>

<p>　RxJava を全面的に使いたいので、 StopWatchModel のプロパティは全て <code>Observable&lt;T&gt;</code> にしました。RxJava を使わなかったらプロパティではなくコールバックですね。
　何かメソッドを実行したら、その結果は全て <code>Observable&lt;T&gt;</code> を通じて通知される仕組みです。なので原則として Model のメソッドの戻り値は <code>void</code> です。</p>

<h3>ViewModel</h3>

<p>　しつこいようですが <strong>ここにロジックを書いたら負け</strong> です。
個人としては、条件分岐もしたくない、変数宣言もしたくない、くらいのつもりでいます。もし書いてしまったら「それはModelの方が適切ではないか？」を検討します。</p>

<p>　ViewModel の役割は、Model のプロパティ(コールバック)を、View用に変換して流すこと、Viewのための機能をコマンドとして公開することです。</p>

<p>　例えば、仕様の内、</p>

<blockquote><p>スイッチの切り替えで、ミリ秒の桁を表示/非表示</p></blockquote>

<p>　が、「View用に変換」の良い例になります。
　私の実装では、ミリ秒の桁を表示するか否かの bool 値を、format関数の書式文字列に変換しています。(View側で format して表示しています。)
　↓のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** 時間の表示フォーマット */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">timeFormat</span><span class="o">;</span> <span class="c1">// field</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">timeFormat</span> <span class="o">=</span> <span class="n">_stopWatch</span><span class="o">.</span><span class="na">isVisibleMillis</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">visible</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">visible</span> <span class="o">?</span> <span class="s">&quot;mm:ss.SSS&quot;</span> <span class="o">:</span> <span class="s">&quot;mm:ss&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>RxJava で「変換」とくれば、 <code>map</code> など、 <code>Observable</code> の投影系のメソッドの出番となります。</p>

<p>ViewModel が公開するプロパティも、基本的には <code>Observable&lt;T&gt;</code> になりました。(これはこのアプリの仕様上、OneWayバインディング＜=Modelによるデータの変化をViewに表示する＞だけで済んだためです。TwoWayバインディング＜=Viewからのデータの入力を受け付ける＞が必要な場合は、<code>Subject</code>など、データをセットできる機能が必要になります。)</p>

<p>コマンドとは、Modelのメソッドを呼ぶためのものですが、それに加えて「そのコマンドが実行可能か？」を示すフラグも持ちます。さらにこのフラグも <code>Observable&lt;boolean&gt;</code> で表します。
こうする事で、「機能が利用可能な時のみボタンを Enable にする」のようなバインディングが可能になります。今回の仕様で言えば</p>

<blockquote><p>StartするとラップボタンはEnable.ストップするとDisable</p></blockquote>

<p>に該当します。</p>

<p>コマンドのインターフェースは↓のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** このコマンドが実行可能かを示すフラグの更新を通知するObservable */</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="nf">canExecuteObservable</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** このコマンドの処理を実装する */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は、このインターフェースを ViewModel で匿名クラスを作ることで実装しました。↓のような感じです。この <code>commandLap</code> をラップボタンとバインドさせます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** 経過時間の記録 */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="n">Command</span> <span class="n">commandLap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="nf">canExecuteObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_stopWatch</span><span class="o">.</span><span class="na">isRunning</span><span class="o">;</span> <span class="c1">// 実行中のみ記録可能</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_stopWatch</span><span class="o">.</span><span class="na">lap</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>あ、ViewModel は View とは疎結合に作ります。Viewを参照してはいけないのはもちろん、<code>TextView</code> や <code>Activity</code> などが import されていたら「負け」です。</p>

<p>他には、Viewの状態を保持する役割も担いますが、本アプリの仕様では、それに該当する処理はありませんでした。</p>

<h3>View</h3>

<p>　View層で行うことは、画面要素のレイアウトとViewModelとのバインディングです。それ以外の事は行いません。.NETの世界では、View層において値の変換を行う機能=ValueConverterが存在しますが、ValueConverterを使うべきかViewModelで行うべきかでよく議論になります。
　
　バインディングの実体は、ViewModelのプロパティである <code>Observable&lt;T&gt;</code> を <code>subscribe</code> して、Viewのプロパティにセットしているだけです。前述の通り今回は TwoWay は無いので楽です。TwoWay が出てくるとバインディングのフレームワークにお願いした方がよいです。
　
　例えば、 <code>Observalbe&lt;String&gt;</code> と TextViewのtextプロパティのバインディングは、下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">TextViewBinder</span> <span class="nf">toTextOneWay</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">prop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">_subscriptions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>        <span class="n">prop</span><span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">_textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">x</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span> <span class="c1">// メソッドチェーンで連続して呼べるようにしてるだけ</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>.NETの世界では、このバインディングを画面定義ファイル(.xaml)に直接記述できます。
Androidでも一部のライブラリや、<a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">今後公式にデータバインディングがサポートされる模様</a>ですが、xml でのバンディングの記述は、デバッグしづらくなるので個人的にはそれほどメリットを感じないです。デザイナーとの分業と言っても別な理由で不可能なケースが多いと思います。</p>

<h2>画面遷移や Toast の表示は誰の責務？</h2>

<p>大抵の MVVMフレームワーク に備わっている <code>Messenger</code> という機能を使います。Android界隈の人には「EventBus」と言った方がわかりやすいかも知れません。</p>

<p>ViewModelが「画面遷移を要求するメッセージ」を投げ、それをViewが受信して画面遷移を行います。</p>

<figure class='code'><figcaption><span>メッセージ送信側(MainViewModel.java)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="n">Command</span> <span class="n">commandNextView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// LapActivity へ遷移させる</span>
</span><span class='line'>        <span class="c1">// ほんとは LapViewModel.class を指定すべき(LapActivity は使いたくない)</span>
</span><span class='line'>        <span class="n">messenger</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="n">StartActivityMessage</span><span class="o">(</span><span class="n">LapActivity</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>メッセージ受信側(MainActivity.java)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 画面遷移のメッセージ受信</span>
</span><span class='line'><span class="n">_viewModel</span><span class="o">.</span><span class="na">messenger</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">StartActivityMessage</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Action1</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="kd">final</span> <span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">StartActivityMessage</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">StartActivityMessage</span><span class="o">)</span><span class="n">message</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">m</span><span class="o">.</span><span class="na">activityClass</span><span class="o">);</span>
</span><span class='line'>                <span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は簡単な Messenger を実装しました。VM->Vの通知にしか使わないのでVM毎に一つ持つようにしています。</p>

<h1>2.3. Reactive Extensions, ReactiveProperty を使った Android/iOS アプリ(Xamarin, C#言語)</h1>

<p><a href="https://xamarin.com/">Xamarin</a> は、 C# で Android/iOS が作れるプロダクトです。
RubyMotion のように、CocoaTouch や Android SDK の API をラップし、同じ名称のクラス,メソッドで C# から呼び出せるようにしています。</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/">Xamarin 日本語情報</a></li>
<li><a href="http://qiita.com/amay077/items/2e86b44e5f274a34b2e9">マカーの人が Xamarin について勘違いしていそうな５つのこと &ndash; Qiita</a></li>
</ul>


<p>.NETのオープンソース実装である mono 由来の製品であり、また Microsoft とのパートナーシップも結んでいることから、.NET の資産の多くが利用可能です。</p>

<p>何が言いたいかと言うと、RxJava も MVVM パターンも、元は .NET のアプリケーション開発の分野で発案・成熟してきた考え方であり、豊富な.NET製ライブラリ(今回だと Reactive Extensions と ReactiveProperty)を使って Android/iOS アプリを開発できる、という事です。</p>

<h2>Model-ViewModel-View(MVVM) で考える</h2>

<p>Xamarin でも MVVM の役割はまったく同じですが、
<strong>「Model-ViewModel を Android/iOS で使いまわせる」</strong>
という大きなメリットがあります。</p>

<p>Model と ViewModel からは、プラットフォームに依存するコードは排除できます(すべきです)。
Xamarin(というか .NET) ではプラットフォーム非依存の処理をライブラリ化できます(これを PCL=Portable Class Library と言います)。</p>

<p>Android と iOS でそれぞれに実装が必要なのは、View と、そのバインディングのみです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_02.png" alt="クラス図的なの" /></p>

<h2>Reactive Extensions について</h2>

<p>本家<a href="https://github.com/Reactive-Extensions/Rx.NET">Rx.NET</a>です。RxJava はこの Reactive Extensions を Java にポートしたものです。
RxJava には、いくつか便利なメソッドが追加されています(<code>compose</code> とか)が、殆ど同じです。
また、 C# はラムダ式を標準でサポートしていることから、 retrolambda などに頼らなくても見やすいコードが書けるのは言うまでもないでしょう。</p>

<h2>ReactiveProperty について</h2>

<p><a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> は、Rxの機能を活かしてMVVMパターンの実装を手助けしてくれるライブラリです。</p>

<ul>
<li><a href="http://blog.okazuki.jp/entry/2015/02/22/212827">MVVMとリアクティブプログラミングを支援するライブラリ「ReactiveProperty v2.0」オーバービュー &ndash; かずきのBlog@hatena</a></li>
</ul>


<p>Java版ストップウォッチでは、<code>StopWatchModel</code> や ViewModel のプロパティを全て <code>Observable&lt;T&gt;</code> としましたが、 Xamarin版では <code>ReactiveProperty&lt;T&gt;</code> としています。 <code>ReactiveProperty&lt;T&gt;</code> は <code>Observable&lt;T&gt;</code> から継承しているので、それほど大差はありませんが、<code>Subject</code> のように値の設定をサポートしていたり、バリデーション、エラー通知の仕組みが備わっています。</p>

<p>また、ReactiveProperty は、 Android の View要素とのバインディング機能も持ちます。これを使うとバインディングが以下のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// TextView(textTime) と viewModel.Time のバインド</span>
</span><span class='line'><span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">TextView</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">textTime</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetBinding</span><span class="p">(</span><span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">.</span><span class="n">Text</span><span class="p">,</span>
</span><span class='line'>        <span class="n">_viewModel</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">ObserveOnUIDispatcher</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">ToReactiveProperty</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>iOS のバインディングはありませんが、 <del>ソースの一部を持ってくる事で、殆ど解決します</del> <a href="https://twitter.com/okazuki/status/679256704689684480">ツイートしたら取り込んでもらえました(^^)</a> 。</p>

<h1>作ったアプリのソース</h1>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample">amay077/StopWatchSample</a></li>
</ul>


<p>それぞれ、</p>

<ol>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppAndroid">RxJava を使った Android アプリ(Java言語)</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.Android">Reactive Extensions, ReactiveProperty を使った Android アプリ(Xamarin, C#言語)</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.iOS">Reactive Extensions, ReactiveProperty を使った iOS アプリ(Xamarin, C#言語)</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.Core">Xamarin版アプリの Model, ViewModel</a></li>
</ol>


<p>にあります。</p>

<p>Java版は、</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/models/StopWatchModel.java">StopWatchModel.java</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java">MainViewModel.java</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/views/MainActivity.java">MainActivity.java</a></li>
</ul>


<p>を見るとだいたい分かると思います。</p>

<p>また、Java版 と Xamarin版では、</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/models/StopWatchModel.java">StopWatchModel.java</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Core/Models/StopWatchModel.cs">StopWatchModel.cs</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java">MainViewModel.java</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Core/ViewModels/MainViewModel.cs">MainViewModel.cs</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/views/MainActivity.java">MainActivity.java</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Android/Views/MainActivity.cs">MainActivity.cs</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.iOS/Views/MainViewController.cs">MainViewController.cs</a></li>
</ul>


<p>あたりを見比べるといいと思います。</p>

<h1>まとめ</h1>

<p>MVVM と RxJava はとても相性がよいと感じました。</p>

<p>Model → ViewModel → View と通知を伝搬させるのに、そのまま <code>Observable&lt;T&gt;</code> を繋げればよいのですから。加工が必要なら <code>map</code> などのオペレータを挟むだけ。
これがコールバックだったら…恐ろしくて想像したくありません。</p>

<p>Model が使用するDB層やWebAPIなども RxJava をサポートしていたら、もっと便利になると思います。(Realm は RxJava サポートが追加されたようですね！)</p>

<p>View &ndash; ViewModel のデータバインディングにも RxJava は有効ですが、こちらは、Android公式の Data Binding がどう実装されるかで未来が変わってきそうです。</p>

<p>Android-Java には、まだメジャーな MVVMフレームワークが無いので、登場が待たれるところです。</p>

<h1>おまけ：反省など</h1>

<h2>View か ViewModel か Model か問題</h2>

<p>下は View に書かれている「現在時刻と表示書式文字列のどちらかが更新されたら、時刻をフォーマットして流す」という Observable です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// フォーマットされた時間を表す Observable（time と timeFormat のどちらかが変更されたら更新）</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">formattedTime</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">combineLatest</span><span class="o">(</span>
</span><span class='line'>        <span class="n">_viewModel</span><span class="o">.</span><span class="na">time</span><span class="o">,</span>
</span><span class='line'>        <span class="n">_viewModel</span><span class="o">.</span><span class="na">timeFormat</span><span class="o">,</span> <span class="o">(</span><span class="n">Long</span> <span class="n">time</span><span class="o">,</span> <span class="n">String</span> <span class="n">format</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">SimpleDateFormat</span> <span class="n">sdf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="n">format</span><span class="o">,</span> <span class="n">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="n">time</span><span class="o">));</span>
</span><span class='line'>        <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは、ViewModel に用意すべきだったかも知れません。いやいや、フォーマットされた時間を通知する機能が Model にあってもおかしくないとも言えます。
実際、 <code>LapActivity</code> でも同じコードを書いているので D.R.Y原則にも反します。やっぱ Model に持たせるべきだったと反省。</p>

<h2>Model に戻り値が void でないメソッドを作っちゃった問題</h2>

<blockquote><p>原則として Model のメソッドの戻り値は void です</p></blockquote>

<p>の原則に反して、戻り値で最速、最遅ラップ値を返してしまいました。
Toast表示のためだけに取得できればいいやと思いこうしたのですが、これでは「最速、最遅ラップを常に画面に表示する」という仕様変更があっただけで破綻します。これは悪手でした、反省。</p>

<p>だいたいラップの最大、最小の取得は、 <code>Observable&lt;List&lt;Long&gt;&gt; laps</code>  を <code>map</code> で変換すればよいだけの話ですね。LINQ あるいは Stream API が使えれば <code>List&lt;Long&gt;</code> から min/max を取得するのも簡単ですし。</p>

<h2>Timer を 1ms 間隔にしちゃった問題</h2>

<p><code>Observable.interval(1ms)</code> ってやっちゃいましたが、START の時間を覚えておいて、LAP, STOP された時に、現在時刻との差分を取ればよかったですね。基本的なムダで反省。</p>

<p><a href="http://www.moonmile.net/blog/archives/7627">JXUG で話した MVVM の活用の解説を | Moonmile Solutions Blog</a> より</p>

<blockquote><p>Lap ボタンを押したタイミングで DateTime.Now を取得すればよいわけで、何も定期的に内部データを更新する必要はありません</p></blockquote>

<p>その通りですね。。。</p>

<h2>UIスレッドへの変換をだれがやるのか問題</h2>

<p>今回は、以下のように、自作したバインディングの中で <code>observeOn(AndroidSchedulers.mainThread())</code> 行っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">TextViewBinder</span> <span class="nf">toTextOneWay</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">prop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">_subscriptions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>        <span class="n">prop</span><span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">_textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">x</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを ViewModel で行うこと(ViewModel が公開する Observable は必ずUIスレッドで実行されるというルール)もできます。
が、セオリーが分かっていません。とりあえず View側で observeOn しとけば安全かなと思って上記のようにしているだけです。使用するMVVMフレームワークの仕様にも依存しそうです。</p>

<h2>StopWatchModel のプロパティは Hot？ それとも Cold？</h2>

<p>StopWatchModel の各プロパティである <code>Observable&lt;T&gt;</code> は、 <strong><code>subscribe</code> をトリガーに値が流れ始めるものではないので Hot</strong> ですね。</p>

<p>また、<code>BehaviorSubject</code> を使っているので、 <code>subscribe</code> 時には、その時点の最新の値が流れてきます。</p>

<p>シングルトンの <code>StopWatchModel</code> に対して、 <code>MainActivity</code> に続いて <code>LapActivity</code> でも購読した時に、正しくラップタイム群が表示できるのは、<code>BehaviorSubject</code> であるためですね。</p>

<p><code>refCount</code> してないけど、ちゃんと破棄されているのかは未確認。。。</p>

<h2>Observalbe&lt;List&lt;T>></h2>

<p>ラップタイム群を通知するプロパティは <code>Observalbe&lt;List&lt;T&gt;&gt;</code> にしています。
この場合、List の中身を変更されても通知されないので  <code>Collections.unmodifiableList</code> で変更不可にしてから onNext で通知しています。LAPボタンが押される度に List を作りなおしている感じになります。</p>

<p>ListView とのバインディングも同じで、onNext を受信する度に、ListView を洗い替えしています。
このムダが嫌、大量データでパフォーマンスに問題が出る場合は、.NET にある <a href="https://msdn.microsoft.com/ja-jp/library/ms668604(v=vs.110"><code>ObservableCollection&lt;T&gt;</code></a>.aspx) のような仕組みを作る必要があります。(Rx.NET, RxJava では管轄外かな？)</p>

<p><code>ObservableCollection&lt;T&gt;</code> は、リストへの追加、削除、変更をアイテム毎に通知／監視できます(「 <em>項目X</em> が <em>2番目</em> に <em>追加</em> された」のような)。適切な通知とバインディングを実装すれば、ListView の差分更新が可能です（面倒ですが）。</p>

<h1>参考</h1>

<ul>
<li><a href="http://ugaya40.hateblo.jp/entry/model-mistake">MVVMのModelにまつわる誤解 &ndash; the sea of fertility</a></li>
<li><a href="http://www.moonmile.net/blog/archives/7627">JXUG で話した MVVM の活用の解説を | Moonmile Solutions Blog</a> &ndash; タイマを View/ViewModel/Model に持つそれぞれの理由が解説されています。</li>
<li><a href="http://qiita.com/hide92795/items/f7205c8171826cc2153b">RxJava &ndash; Rxで知っておくと便利なSubjectたち &ndash; Qiita</a></li>
<li><a href="http://qiita.com/amay077/items/4bb6b09a1911b074f50c">RxJava &ndash; Hot Observable と ConnectableObservable について &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hot Observable と ConnectableObservable について]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/17/about-hot-observable-and-connectableobservable/"/>
    <updated>2015-12-17T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/17/about-hot-observable-and-connectableobservable</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/rxjava">RxJava Advent Calendar 2015 17日目</a> の記事です。</p>

<p>空いてたので参加してみました。
普段は Xamarin(C#) + Reactive Extensions + ReactiveProperty で、Reactive + MVVM な Android/iOS両対応アプリを開発しています。</p>

<!--more-->


<h2>Cold vs Hot</h2>

<p>Cold Observable は「あなただけの」Stream、Hot は「みんなの」Stream 。
（私的にはニコ動かニコ生か、みたいに理解してますが、その話はいいや）</p>

<p>Cold は、あなたが subscribe した瞬間からデータが流れ始めます。
Hot は、あなたが subscribe してもデータは流れ始めません(流れるかも知れません？)。</p>

<p>では Hot Observable はいつからデータが流れ始める？Observable が生成された瞬間から？
その答え(の一つ)が <strong>ConnectableObservable</strong> 。</p>

<h2>ConnectableObservable のデータ放流の開始と停止</h2>

<p>Cold Observable を Hot化する publish メソッドの返り値は ConnectableObservable。
Hot は必ず ConnectableObservable。（←これ後で否定します）</p>

<p>ConnectableObservable には connect メソッドがあります。
Hot Observable のデータが流れ始めるのは、このメソッドを呼んだ瞬間から。
なので、どれだけ subscriber が居ようとも connect を呼ばなければデータは流れません。逆に subscriber が居なくても connect を呼べばデータが流れ始めます。</p>

<p>connect メソッドの返り値は Subscription です。
Subscription の unsubscribe メソッドを呼ぶと、データの放流が停止します。これも subscriber が居ようが居まいが停止します。
再度 connect すると、 <strong>最初から</strong> データが流れ出します。再開ではありません。</p>

<h2>実例</h2>

<h3>Cold Observable</h3>

<p>Observable.interval は、一定時間置きにインクリメントされた値を流す <strong>Cold</strong> Observable。
なので、複数の subscriber が居たら、各々に独立した値を流します。</p>

<p>Android の画面にボタンが２つ（buttonSubscribe1 と buttonSubscribe2）並んでるだけのサンプルです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">tickObservable</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 可視性向上の為のなんちゃってラムダ</span>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubscribe1</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonSubscribe1 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tickObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;subscriber1 - onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubscribe2</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonSubscribe2 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tickObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;subscriber2 - onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>結果:<br/>
D/MainActivity: buttonSubscribe1 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 2<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 3<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 5<br/>
D/MainActivity: buttonSubscribe2 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 7<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 8<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 2<br/></p></blockquote>

<p>buttonSubscribe1 を押すとデータ(０から連番)が流れ始めます。
しばらくして buttonSubscribe2 を押すと、1 とは関係なく、また 0 から流れ始めます。</p>

<h3>Hot(Connectable) Observable</h3>

<p>publish で Hot 化します。
connect と unsubscribe を呼ぶためのボタン（buttonConnect, buttonDisConnect）を画面に追加してます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Subscription</span> <span class="n">_connection</span><span class="o">;</span> <span class="c1">// field です</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">final</span> <span class="n">ConnectableObservable</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">tickObservable</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">).</span><span class="na">publish</span><span class="o">();</span> <span class="c1">// publish で Hot化</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubscribe1</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonSubscribe1 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tickObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;subscriber1 - onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubscribe2</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonSubscribe2 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tickObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;subscriber2 - onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonConnect</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonConnect click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">_connection</span> <span class="o">=</span> <span class="n">tickObservable</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span> <span class="c1">// データ放流開始</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonDisConnect</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonDisConnect click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">_connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_connection</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span> <span class="c1">// データ放流停止</span>
</span><span class='line'>        <span class="n">_connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>結果:<br/>
D/MainActivity: buttonSubscribe1 click!<br/>
D/MainActivity: buttonConnect click!      // ←数秒経過している<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 2<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 3<br/>
D/MainActivity: buttonSubscribe2 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 6<br/>
D/MainActivity: buttonDisConnect click!<br/>
-これ以降 onNext は出力されない-<br/></p></blockquote>

<p>buttonSubscribe1 を押しても、まだデータは流れてきません。
数秒後、buttonConnect を押すとデータが流れ始めます。
buttonSubscribe2 を押すと、subscriber2 が増えますが、Hot(みんなの)Observable なので、流れてくる値とタイミングは subscriber1 と全く同じです。</p>

<p>buttonDisConnect を押すと、データの放流が停止されます。(ちなみにもう一度 CONNECT すると、また 0 から値が流れます)
subscriber1, subscriber2 にはもう onNext は呼ばれません。</p>

<p>※サンプルでは onNext しか受信していませんが、 buttonDisConnect を押しても、 subscriber1, subscriber2 の onComplete や onError も呼ばれません。つまり、 <strong>「データの放流が停止されても、 subscriber はそれに気付けない」</strong> ということになります。これはこれでいいんだろか、という感じです。</p>

<h2>ConnectableObservable.refCount について</h2>

<blockquote><p>Hot は必ず ConnectableObservable。（←これ後で否定します）</p></blockquote>

<p>否定始めます。</p>

<p>ConnectableObservable では、データ放流の開始と停止は、 connect と unsubscribe に委ねられていました。</p>

<p>refCount() を使うとそれを自動化できます。(refCount？参照カウントを返すメソッド？そう思っていましたが全然違いました。)
どういうことかと言うと、最初の subscriber が現れたらデータ放流を開始し、誰も subscriber が居なくなったら放流を停止する、というものです。
refCount() の返値はただの Observable です、でも Hot です。はい否定しましたー。</p>

<h3>実例</h3>

<p>publish した Hot Observable を refCount してデータ放流を自動制御してもらいます。
画面には、 buttonConnect, buttonDisConnect に代わり、buttonUnsubscribe1, buttonUnsubscribe2 を用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Subscription</span> <span class="n">_subscription1</span><span class="o">;</span> <span class="c1">// field です</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Subscription</span> <span class="n">_subscription2</span><span class="o">;</span> <span class="c1">// field です</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Subscription</span> <span class="n">_connection</span><span class="o">;</span>    <span class="c1">// field です</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">tickObservable</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">).</span><span class="na">publish</span><span class="o">().</span><span class="na">refCount</span><span class="o">();</span> <span class="c1">// 返値は Connectable ではない</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubscribe1</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonSubscribe1 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">_subscription1</span> <span class="o">=</span> <span class="n">tickObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;subscriber1 - onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubscribe2</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonSubscribe2 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">_subscription2</span> <span class="o">=</span> <span class="n">tickObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;subscriber2 - onNext - &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">));</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonUnsubscribe1</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonUnsubscribe1 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">_subscription1</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_subscription1</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span> <span class="c1">// 1購読終了</span>
</span><span class='line'>        <span class="n">_subscription1</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonUnsubscribe2</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;buttonUnsubscribe2 click!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">_subscription2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_subscription2</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span> <span class="c1">// 2購読終了</span>
</span><span class='line'>        <span class="n">_subscription2</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>結果:<br/>
D/MainActivity: buttonSubscribe1 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 2<br/>
D/MainActivity: buttonSubscribe2 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 3<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 3<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 7<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 7<br/>
D/MainActivity: buttonUnsubscribe1 click!<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 8<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 9<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 10<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 11<br/>
D/MainActivity: buttonUnsubscribe2 click!<br/>
-これ以降 onNext は出力されない-<br/></p></blockquote>

<p>buttonSubscribe1 を押すと、その時点でデータが流れ始めます(refCount による自動制御)。
buttonSubscribe2 を押すと、subscriber1 と同じタイミングで、同じ値を受信できます(Hot だから)。
buttonUnsubscribe1 を押すと、 subscriber1 は購読をやめますが、subscriber2 はまだ受信しています。
buttonUnsubscribe2 を押すと、subscriber2 も購読をやめ、この時点でデータ放流が停止します(refCount による自動制御)。</p>

<p>※ほんとにデータ放流終わってんの？を確認するには、 tickObservable に doOnNext を繋げて確認するとよいと思います。</p>

<h2>まとめ</h2>

<p>Hot Observable は、ほとんどの場合(publish により生成されるので) ConnectableObservable。
ConnectableObservable は、購読者の有無に関係なく connect でデータ放流開始、Subscription.unsubscribe でデータ放流停止。
refCount により購読者の有無に連動したデータ放流の自動制御が可能。この場合 Hot だけど普通の Observable型。</p>

<p>実際に Hot Observable を使う場合は、refCount() しとくのが無難かなー、と思いました。(購読者の unsubscribe を厳密に管理しておけば、という前提で)</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.introtorx.com/content/v1.0.10621.0/14_HotAndColdObservables.html">Intro to Rx &ndash; Hot and Cold observables</a></li>
<li><a href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators">Connectable Observable Operators · ReactiveX/RxJava Wiki</a></li>
<li><a href="http://qiita.com/advent-calendar/2015/rxjava">RxJava Advent Calendar 2015 を書かれた皆さん</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache/"/>
    <updated>2015-12-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/xamarin">Xamarin Advent Calendar 2015 1日目</a> の記事です。</p>

<p>Xamarin Advent Calendar 2015、今日から開始です。
3年目になってもネタに尽きない Xamarin 、まだまだ盛り上がっております。</p>

<p>かくいう自分は、<a href="http://qiita.com/amay077/items/0a3fa3dfac7f29a2807d">前回の投稿</a> が約1年前と、完全に時代遅れになっております（仕事とスプラ&hellip;いえ何でもないです）。
最近のトピックスは他の方にお任せして、1年前からのネタを書きます。</p>

<!--more-->


<p>Xamarin でギョームアプリを開発している時に、Android/iOS で使える ORM を探していたというか、JSON のデータをお手軽に保存・読み出し→インスタンス化できるライブラリないかなーと探していました。</p>

<p>Xamarin の公式ドキュメント</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/">Cross-Platform Data Access &ndash; Xamarin</a></li>
</ul>


<p>には、 SQLite.NET や ADO.NET などが紹介されていますが、どれも面倒そう。そこで使ってみようと思ったのが <a href="http://qiita.com/amay077/items/f14e04d4e86c8a782c15">2年前の投稿</a> でチラッと触れていた Akavache です。</p>

<h1>Akavache とは</h1>

<ul>
<li>akavache/Akavache &ndash; <a href="https://github.com/akavache/Akavache">https://github.com/akavache/Akavache</a></li>
</ul>


<p>以下、README から引用です。</p>

<blockquote><p>Akavache is an asynchronous, persistent (i.e. writes to disk) key-value store created for writing desktop and mobile applications in C#, based on SQLite3. Akavache is great for both storing important data (i.e. user settings) as well as cached local data that expires.</p></blockquote>

<p>(意訳)Akavacheは、C# による、SQLite3 をベースとした非同期で永続的なデスクトップとモバイルアプリケーション向けのキーバリューストアです。 ユーザー設定やキャッシュなどのローカルデータを保存するのに最適です。</p>

<p>バックエンドは SQLite3 なので、まあ得体の知れないデータ形式ではない、と。ちなみに <a href="https://github.com/paulcbetts/AkavacheExplorer">AkavacheExplorer</a> というデータビューアもあります。</p>

<h1>対応プラットフォーム</h1>

<blockquote><p>Akavache is currently compatible with:</p>

<ul>
<li>Xamarin.iOS / Xamarin.Mac 32-bit</li>
<li>Xamarin.Android</li>
<li>.NET 4.5 Desktop (WPF)</li>
<li>Windows Phone 8</li>
<li>WinRT (Windows Store)</li>
<li>Windows Phone 8.1 Universal Apps</li>
</ul>
</blockquote>

<p>ほぼ全てやないかい！</p>

<h1>使ってみよう</h1>

<p>せっかくなので Xamarin.Form で Akavache を使ったアプリを作ってみます。</p>

<h3>1. プロジェクト（ソリューション）の作成</h3>

<p>Xamarin.Forms App で、新しいプロジェクトを作成します。プロジェクト名は AkavacheSample とでもします。</p>

<p>Shared Code: は、&#8217;Use Portable Class Library&#8217; を選択します。</p>

<p>プロジェクトが3つ（AkavacheSample, AkavacheSample.Droid, AkavacheSample.iOS）作成されます。</p>

<h3>2. Akavache と、依存ライブラリの導入</h3>

<p><strong>3つのプロジェクトそれぞれで</strong> 、NuGet(メニュー → プロジェクト → Add NuGet Packages&hellip;) から、以下のパッケージを追加します（執筆時点の Akavache の最新バージョンは 4.1.2 です。）。</p>

<ul>
<li>Akavache.Core</li>
<li>SQLitePCL.raw</li>
<li>Akavache.SQLite3</li>
<li>Akavache</li>
</ul>


<p>検索ボックスに 「sqlite akavache」と入力すると全部表示されると思います(↓こんな感じに)。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_akavache_01.png" alt="" /></p>

<p>追加に失敗する場合は、上のリストの順番で一つずつ追加するとうまくいくと思います。</p>

<h3>3. サンプルアプリの画面を作る</h3>

<p>サンプルアプリの画面レイアウトを作ります。XAML とか面倒なのでコードでバリッと。</p>

<p>AkavacheSample プロジェクトの App.cs を以下のようにします。テキストボックス２つとボタン２つが縦に並んでいるだけの簡単な画面です。</p>

<figure class='code'><figcaption><span>AkavacheSample.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">App</span> <span class="p">:</span> <span class="n">Application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">App</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">nameEntry</span>  <span class="p">=</span> <span class="k">new</span> <span class="n">Entry</span> <span class="p">{</span> <span class="n">Placeholder</span> <span class="p">=</span> <span class="s">&quot;名前を入力&quot;</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">ageEntry</span>   <span class="p">=</span> <span class="k">new</span> <span class="n">Entry</span> <span class="p">{</span> <span class="n">Placeholder</span> <span class="p">=</span> <span class="s">&quot;年齢を入力(数値のみ)&quot;</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">saveButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;保存&quot;</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">loadButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;読み出し&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The root page of your application</span>
</span><span class='line'>        <span class="n">MainPage</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContentPage</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Padding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thickness</span><span class="p">(</span><span class="m">20</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Children</span> <span class="p">=</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">nameEntry</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">ageEntry</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">saveButton</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">loadButton</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 以下省略</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Akavache を使って保存と読み出し</h3>

<p>名前と年齢をひとまとめに保存したいので、Person というクラスを作ります。</p>

<figure class='code'><figcaption><span>Person.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">PersonName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">PersonAge</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはもう、一気に実装するだけです。
保存ボタンを押した時に、入力値を Person に詰めて、Akavache を使って保存します。
読み出しボタンを押した時に、Akavache から Person を読みだし、各テキストボックスにバラして設定します。</p>

<p>Akavache はキー・バリュー・ストアなので、保存・読み出し時のキーを <code>"person"</code> としています。</p>

<figure class='code'><figcaption><span>AkavacheSample.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">App</span> <span class="p">:</span> <span class="n">Application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">App</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">nameEntry</span>  <span class="p">=</span> <span class="k">new</span> <span class="n">Entry</span> <span class="p">{</span> <span class="n">Placeholder</span> <span class="p">=</span> <span class="s">&quot;名前を入力&quot;</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">ageEntry</span>   <span class="p">=</span> <span class="k">new</span> <span class="n">Entry</span> <span class="p">{</span> <span class="n">Placeholder</span> <span class="p">=</span> <span class="s">&quot;年齢を入力(数値のみ)&quot;</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">saveButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;保存&quot;</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">loadButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;読み出し&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">saveButton</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">+=</span> <span class="k">async</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Person に詰めて…</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">PersonName</span> <span class="p">=</span> <span class="n">nameEntry</span><span class="p">.</span><span class="n">Text</span><span class="p">,</span>
</span><span class='line'>                <span class="n">PersonAge</span>  <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt16</span><span class="p">(</span><span class="n">ageEntry</span><span class="p">.</span><span class="n">Text</span><span class="p">)</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 保存</span>
</span><span class='line'>            <span class="k">await</span> <span class="n">BlobCache</span><span class="p">.</span><span class="n">LocalMachine</span><span class="p">.</span><span class="n">InsertObject</span><span class="p">(</span><span class="s">&quot;person&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">loadButton</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">+=</span> <span class="k">async</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Akavache で Person を読み出し</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">loaded</span> <span class="p">=</span> <span class="k">await</span> <span class="n">BlobCache</span><span class="p">.</span><span class="n">LocalMachine</span><span class="p">.</span><span class="n">GetObject</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="s">&quot;person&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// 各テキストボックスに設定</span>
</span><span class='line'>            <span class="n">nameEntry</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">loaded</span><span class="p">.</span><span class="n">PersonName</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ageEntry</span><span class="p">.</span><span class="n">Text</span>  <span class="p">=</span> <span class="n">loaded</span><span class="p">.</span><span class="n">PersonAge</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The root page of your application</span>
</span><span class='line'>        <span class="n">MainPage</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContentPage</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Padding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thickness</span><span class="p">(</span><span class="m">20</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Children</span> <span class="p">=</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">nameEntry</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">ageEntry</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">saveButton</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">loadButton</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 以下省略</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. 動かす！</h3>

<p>Android Player と iOS Simulater で動かしてみた、の図です。(途中、iPhone でキーボード出すのに苦労してるところは無視してください、Take2 の時間が無かったのですｗ)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_akavache_02.gif" alt="" /></p>

<p>さすが Xamarin.Forms だ、(Android でも iPhone で動かしても)何とも無いぜ！</p>

<h1>まとめ</h1>

<p>Akavache を使って保存と読み出しを行う超簡単なサンプルを作ってみました。
作ったサンプルは <a href="https://github.com/amay077/AkavacheSample">GitHub &ndash; amay077/AkavacheSample</a> においておきます。</p>

<p>仕組みは理解できないけど、とても簡単に使えることが分かると思います。
追加されたパッケージを見ると、 JSON.NET とか、Reactive Extensions とかが入っているので、まあだいたい察しが付くかと。。。</p>

<p>ギョームアプリでがっつり使ってますが、今のところパフォーマンスとかデータ破損とか、そういう問題はないです。POCO なオブジェクトをローカル保存するのに、とても役立っています。</p>

<p>というわけで Advent Calendar 初日のネタは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIAlertController を async/await 対応させて便利に使う]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/24/using-uialertcontroller-with-async-await/"/>
    <updated>2014-12-24T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/24/using-uialertcontroller-with-async-await</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2014/xamarin">Xamarin Advent Calendar 2014 23日目</a> の記事です。</p>

<p>　なんか空いてたのでエントリーしましたが、急だったので軽い話です。</p>

<!--more-->


<ul>
<li><a href="http://qiita.com/amay077/items/56abeeaa188f33cd56de">iOS アプリでアラート出してボタンが押されるまで待つ？方法を Objective-C と Xamarin.iOS で比べてみた &ndash; Qiita</a></li>
</ul>


<p>の焼き直しみたいなものです。</p>

<p>　iOS8 では、<code>UIAlertDialog</code> が非推奨になり、代わりに <code>UIAlertController</code> を使えとのこと。</p>

<p>　普通に使うとこうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">button1</span><span class="p">.</span><span class="n">TouchUpInside</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;こんぼう をすてますか？&quot;</span><span class="p">,</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">Alert</span><span class="p">);</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;はい&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">x</span><span class="p">=&gt;</span> <span class="n">label1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;こんぼう をすてました&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;いいえ&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">x</span><span class="p">=&gt;</span> <span class="p">{}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">PresentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>　このくらいなら問題ありません。</p>

<p>　次に、こんぼう をすてる前にもう一度問いかけるようにします。
２つ目の <code>UIAlertController</code> が入れ子になってしまって見づらい、 <strong>残念な感じ</strong> です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">button1</span><span class="p">.</span><span class="n">TouchUpInside</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;こんぼう をすてますか？&quot;</span><span class="p">,</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">Alert</span><span class="p">);</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;はい&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">x</span><span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 念押しの確認ダイアログ（入れ子でつらい</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">alert2</span> <span class="p">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;ほんとうにすてますか？&quot;</span><span class="p">,</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">Alert</span><span class="p">);</span>
</span><span class='line'>            <span class="n">alert2</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;もちろん&quot;</span><span class="p">,</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">_</span><span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">label1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;こんぼう をすてました&quot;</span>
</span><span class='line'>            <span class="p">}));</span>
</span><span class='line'>        <span class="n">alert2</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;やめる&quot;</span><span class="p">,</span>  <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">_</span><span class="p">=&gt;</span> <span class="p">{}));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// アラート２の表示</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">PresentViewController</span><span class="p">(</span><span class="n">alert2</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// アラート１の表示</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;いいえ&quot;</span><span class="p">,</span>  <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">x</span><span class="p">=&gt;</span> <span class="p">{}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">PresentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>　Objective-C や Swift なら、ここで打つ手は今のところ無いでしょう。
しかし <strong>Xamarin には、C# には async/await がありまぁす！</strong>
アラートの表示を async/await（というか Task）対応してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">ShowDialog</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="kt">string</span> <span class="n">button1Title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">button2Title</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">comp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TaskCompletionSource</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">Alert</span><span class="p">);</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">button1Title</span><span class="p">,</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">x</span><span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">comp</span><span class="p">.</span><span class="n">SetResult</span><span class="p">(</span><span class="m">1</span><span class="p">);</span> <span class="c1">// OKボタン</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">AddAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">button2Title</span><span class="p">,</span>  <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">x</span><span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">comp</span><span class="p">.</span><span class="n">SetResult</span><span class="p">(</span><span class="m">0</span><span class="p">);</span> <span class="c1">// Cancel</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">PresentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">comp</span><span class="p">.</span><span class="n">Task</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Task&lt;int&gt;</code> を返すメソッド <code>ShowDialog</code> です。<code>UIAlertController</code> のボタンが押されたら <code>SetResult</code> して Task の値を決定します。</p>

<p>　このメソッドを使う方は、こうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">button1</span><span class="p">.</span><span class="n">TouchUpInside</span> <span class="p">+=</span> <span class="k">async</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">await</span> <span class="n">ShowDialog</span><span class="p">(</span><span class="s">&quot;こんぼう をすてますか？&quot;</span><span class="p">,</span> <span class="s">&quot;はい&quot;</span><span class="p">,</span> <span class="s">&quot;いいえ&quot;</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">await</span> <span class="n">ShowDialog</span><span class="p">(</span><span class="s">&quot;ほんとうにすてますか？&quot;</span><span class="p">,</span> <span class="s">&quot;もちろん&quot;</span><span class="p">,</span> <span class="s">&quot;やめる&quot;</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">label1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;こんぼう をすてました&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんて見やすいコードになったことでしょう。すばらしい！</p>

<p>入れ子でなく、フラットに書けるので、こんな事もできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">button1</span><span class="p">.</span><span class="n">TouchUpInside</span> <span class="p">+=</span> <span class="k">async</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">await</span> <span class="n">ShowDialog</span><span class="p">(</span><span class="s">&quot;こんぼう をすてますか？&quot;</span><span class="p">,</span> <span class="s">&quot;はい&quot;</span><span class="p">,</span> <span class="s">&quot;いいえ&quot;</span><span class="p">)</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">label1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;それをすてるなんてとんでもない！&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">label1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;すてるのをやめました&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんぼうを捨てるのをあきらめるまで、なんどでも聞いてきます。
コールバックスタイルのメソッドでループとか、ベタに書くと頭痛いです。</p>

<p>動かすとこんな感じです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/uialertcontroller_with_async_await_01.gif" alt="" /></p>

<p><code>ShowDialog</code> は拡張メソッドとして作成しておくと、呼び出しに便利かもしれません。
コールバックスタイルの機能を、Task化するパターンはよく使いそうな気がします。<code>TaskCompletionSource</code>、覚えておきましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[図形の移動が、こんなに簡単に実装できる時代になりました]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/13/moving-shapes-its-easy/"/>
    <updated>2014-12-13T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/13/moving-shapes-its-easy</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2014/foss4goss4g">FOSS4G Advent Calendar 2014 12日目</a> の記事です。</p>

<p>　FOSS4G と言えば GIS、GIS と言えば図形編集ですね。図形を追加したり移動したり回転したりできる機能です。面倒なんですよ、これプログラミングするの。</p>

<p>　なにが面倒かというと、色んな状態（マウスの状態＜左/右ボタンが押されている/押されてない、マウスダウン時の座標、現在の座標＞、図形の状態＜選択されている/いない＞）などなどがコードの中に入り乱れて、スパゲッティコードになりがちというか「なります」。</p>

<!--more-->


<p>　例えば「図形の移動」のフローは、</p>

<ol>
<li>図形をマウスダウン（＝選択）</li>
<li>そのままマウスムーブ（＝移動）</li>
<li>マウスボタンを離して終了</li>
</ol>


<p>と、極めて単純なんですね。これが普通にコーディングするとフラグや状態管理の嵐になってしまう。</p>

<p>　と言ってた時代は終わりました。
　例えば、下の画面。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/simply_shape_dragging_using_rx_01.gif" alt="" /></p>

<p>　これは、白い四角形をドラッグで移動できるというスマホアプリの例ですが、これの実装の主要部分はたったの <strong>６行</strong> です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">rectangle</span><span class="p">.</span><span class="n">DownEvent</span><span class="p">()</span> <span class="c1">// 1.図形をマウスダウン</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">rectangle</span><span class="p">.</span><span class="n">MoveEvent</span><span class="p">())</span>  <span class="c1">// 2.そのままマウスムーブ</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">rectangle</span><span class="p">.</span><span class="n">SetX</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">RawX</span><span class="p">);</span> <span class="c1">// 移動の度に図形を移動</span>
</span><span class='line'>        <span class="n">rectangle</span><span class="p">.</span><span class="n">SetY</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">RawY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>　このコードをよく見ると、上に書いたフローと似ているのが分かります。人が考えたままコードに落とし込める。しかもフラグとか状態管理とかのゴミが一切ない。素晴らしい！(3. に該当するコードが必要な気がするけどまあいいや）</p>

<p>　これを実現しているのは<a href="http://ninjinkun.hatenablog.com/entry/introrxja">リアクティブプログラミング</a>という概念。なんでもかんでもストリーム(時系列にデータが降ってくる何か)で捉えよう、イベントでさえも。イベントはストリームであるので、あとはストリームの加工や他のストリームとの合成でどうにかできてしまいます。</p>

<p>　リアクティブ＋図形うんぬんの他の例は、</p>

<ul>
<li><a href="http://act.neue.cc/rxjs/canvas.htm">RxJS + Canvas</a></li>
</ul>


<p>などがあります。これは HTML なのですぐ試せますしコード（Javascript）も見られます。</p>

<p>　リアクティブプログラミング用の著名なライブラリはほとんどオープンソース、リアクティブプログラミング＋FOSS4G で <strong>RxGIS</strong> （なんかカッコいいから言ってみたかっただけ）</p>

<p>　いつかまたGIS作るみたいな仕事があったら、絶対 Rx 使ってつくるぞ！と思ってますのでよろしくお願いします。</p>

<p>（上のコード例の全コードは <a href="https://gist.github.com/amay077/1d22ba8ffa8ad95e9393">gist</a> にあります。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxAndroid でスクリーンセーバー的な機能を作る]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/09/making-like-screensaver-using-rxandroid/"/>
    <updated>2014-12-09T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/09/making-like-screensaver-using-rxandroid</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2014/android">Android Advent Calendar 2014 8日目</a> の記事です。</p>

<p>　例えば◯秒間操作がなかったらパスキーロック画面を表示する、とかそういうの。普通に作るとタイマーを使って面倒な感じになっちゃいますが、<a href="https://github.com/ReactiveX/RxJava">RxJava</a> と <a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a> を使うととても簡単にできます。</p>

<!--more-->


<h2>RxJava + RxAnroid の場合</h2>

<p>　例えば、画面に <code>EditBox</code> と <code>Button</code> があって、「文字列の入力」と「ボタンが押されたか」を監視、◯秒間操作がなかったら××する、という処理をしたい時、RxJava+RxAndroid では以下のように書けます。</p>

<figure class='code'><figcaption><span>MyActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MyActivity&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Subscription</span> <span class="n">_subscription</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_my</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">EditText</span> <span class="n">editName</span> <span class="o">=</span> <span class="o">(</span><span class="n">EditText</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">editName</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">buttonOk</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonOk</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// OnTextChangeEvent や OnClickEvent をただの Void シグナルに変換</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;</span> <span class="n">signalizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">onClickEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 文字入力イベントのストリームと…</span>
</span><span class='line'>        <span class="n">_subscription</span> <span class="o">=</span> <span class="n">ViewObservable</span><span class="o">.</span><span class="na">text</span><span class="o">(</span><span class="n">editName</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">signalizer</span><span class="o">)</span>
</span><span class='line'>                <span class="c1">// ボタン押されたのストリームを合体</span>
</span><span class='line'>                <span class="o">.</span><span class="na">mergeWith</span><span class="o">(</span><span class="n">ViewObservable</span><span class="o">.</span><span class="na">clicks</span><span class="o">(</span><span class="n">buttonOk</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">signalizer</span><span class="o">))</span>
</span><span class='line'>                <span class="c1">// 3秒間なんもなかったらエラーにする</span>
</span><span class='line'>                <span class="o">.</span><span class="na">timeout</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Action1</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Void</span> <span class="n">dummy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// 何かアクションがあったらこっち</span>
</span><span class='line'>                        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;文字が入力されたか、ボタンが押されたよ&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">},</span> <span class="k">new</span> <span class="n">Action1</span><span class="o">&lt;</span><span class="n">Throwable</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// 3秒間何もなかったらこっち</span>
</span><span class='line'>                        <span class="n">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                            <span class="nd">@Override</span>
</span><span class='line'>                            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">MyActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span>
</span><span class='line'>                                    <span class="s">&quot;３秒間何も操作がありませんでした&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">)</span>
</span><span class='line'>                                    <span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                        <span class="o">});</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// イベント系は無限ストリームだから開放してやらないとリークするはず</span>
</span><span class='line'>        <span class="n">_subscription</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　<code>ViewObservable.text(editName)</code> がテキストが入力される度にシグナルを発するストリーム、<code>ViewObservable.clicks(buttonOk)</code>がボタンが押される度にシグナルを発するストリームです。これらを <a href="http://rxmarbles.com/#merge"><code>mergeWith</code></a> で合体させます。</p>

<p>　あとは <a href="https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#timeout"><code>timeout</code></a> につなげるだけ。３秒以内にシグナルがあったら onNext→<code>new Action&lt;Void&gt;()</code>のとこ、3秒以上何も操作がなかったらタイムアウトして onError→<code>new Action&lt;Throwable&gt;()</code> のとこに飛びます。あとはご自由に、ここでは <code>Toast</code> を表示してるだけです。</p>

<p>　注意点は、イベントから生成されたストリームは無限、つまり <code>onComplete</code> は来ない。こういう <code>Observable</code> は自力での購読解除（<code>unsubscribe</code>）が必須です。</p>

<p>これを動かすとこんな感じになります</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make_screensaver_using_rxjava_01.gif" alt="" /></p>

<h2>Xamarin.Android + Rx本家の場合</h2>

<p>　さて Xamarin です。Xamarin では本家の <a href="https://rx.codeplex.com/">Reactive Extensions</a> が使用できます。RxAndroid と同じことをやると下のように書けます、スマート。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Activity(Label = &quot;RxJavaSample&quot;, MainLauncher = true, Icon = &quot;@drawable/icon&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">Activity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set our view from the &quot;main&quot; layout resource</span>
</span><span class='line'>        <span class="n">SetContentView</span><span class="p">(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">Main</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">editName</span> <span class="p">=</span> <span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">EditText</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">editName</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">buttonOk</span> <span class="p">=</span> <span class="n">FindViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">buttonOk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">&lt;</span><span class="n">TextChangedEventArgs</span><span class="p">&gt;(</span><span class="n">editName</span><span class="p">,</span> <span class="s">&quot;TextChanged&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">_</span><span class="p">=&gt;</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Merge</span><span class="p">(</span><span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">(</span><span class="n">buttonOk</span><span class="p">,</span> <span class="s">&quot;Click&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">_</span><span class="p">=&gt;</span><span class="k">true</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Timeout</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="p">{}</span> <span class="p">,</span>
</span><span class='line'>            <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">RunOnUiThread</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">Toast</span><span class="p">.</span><span class="n">MakeText</span><span class="p">(</span><span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;３秒間何も操作がありませんでした&quot;</span><span class="p">,</span> <span class="n">ToastLength</span><span class="p">.</span><span class="n">Short</span><span class="p">).</span><span class="n">Show</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>　Reactive Extensions を使うと、UIイベントをストリームに変換でき、合成・加工・フィルタなどして様々な応用ができます。しかしこれは Rx のパワーのまだ半分。もう半分は、WebAPI とか DB とか、Model 由来のレスポンスもストリーム化できること。どちらも Observable にしたら、あとはそれをつなぐだけでアプリ完成！
　さあみんなで Rx にロックインされましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マカーの人が Xamarin について勘違いしていそうな５つのこと]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin/"/>
    <updated>2014-12-02T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin</id>
    <content type="html"><![CDATA[<p>　今年も始まりました <a href="http://qiita.com/advent-calendar/2014/xamarin">Xamarin Advent Calendar 2014</a> 。
　思えば<a href="http://qiita.com/advent-calendar/2013/xamarin">昨年の Advent Calendar</a> は、5名の方に参加していただいたものの「ほとんど俺」みたいな感じでしたが、今年はたくさん方に登録してもらえてとても嬉しいです。この1年の Xamarin の躍進ぶりを象徴していると思います。</p>

<!--more-->


<p>　そんな Xamarin ですが、Microsoft とのパートナーシップが強力なおかげで、Windows系の開発者には広く知られて（そういう戦略なのは分かります）いますが、普段 Mac で iOS/Android アプリを開発してますみたいな人にはあまりリーチできていないかなあと思います。</p>

<p>　そこで初日の今日は、マカーの人が、勘違い・思い込んでいそうなことをいくつか払拭してみたいと思います。</p>

<h2>Q1. Xamarin を使うには、Visual Studio が必要なんでしょ？</h2>

<p>A1: <strong>必要ありません。</strong> 「Xamarin Studio」という専用の統合開発環境で開発できます。私は Mac + Xamarin Studio で開発していますが、まったく問題を感じていません。
　また、iOSアプリのView部分は、Xcodeと同じ <code>.storyboard</code> ファイルを使用しますが、Xcode を使う必要もありません。Interface Builder と同じ（か部分的にはそれ以上）の機能を持つ <a href="http://developer.xamarin.com/guides/ios/user_interface/designer/">UIデザイナー</a>が、Xamarin Studio には搭載されています。</p>

<h2>Q2. Xamarin を使うには、Windows が必要なんでしょ？</h2>

<p>A2: <strong>必要ありません。</strong> Mac のみで完結します。むしろ Windows だけでは iOSアプリのビルドができないので、<a href="http://developer.xamarin.com/guides/ios/getting_started/installation/windows/introduction_to_xamarin_ios_for_visual_studio/">Mac にリモート接続</a>する必要があり、これがしばしばトラブルになります。（主にデモでｗ
　Microsoft がアピールするとどうしても Windows+Visual Studioの説明になってしまいますが、それはまやかしです（言い切った！</p>

<h2>Q3. Xamarin社って、Microsoft の子分みたいなもんでしょ？</h2>

<p>A3: Xamarin社は独立した企業であり、Microsoftとは対等な立場です（と私は思っています）。「Microsoft に買収されればいいのに」という声をよく聞きますが、私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。Microsoftにとってはモバイル開発者にリーチする重要なピースであり、Xamarin社としても他にないマーケットです。
 また、今年の Xamarin の大イベント <a href="https://evolve.xamarin.com/">Evolve2014</a> には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。
あ、最近の <a href="http://www.publickey1.jp/blog/14/jitnet_core_rutimenet_framework.html">.NETのオープン化</a> の流れは、Xamarin の CTO であり Monoプロジェクトの生みの親であるスーパーハッカー、<a href="https://twitter.com/migueldeicaza">ミゲル・デ・イカザ</a>氏が少なからず関係していると思っています。</p>

<h2>Q4. C# 覚えるのしんどい</h2>

<p>A4. <strong>あなたはあの Objective-C を覚えたのでしょう？</strong></p>

<h2>Q5. Swift の方が C# よりイケてるじゃん？</h2>

<p>A5. 後発である Swift がイケてるのは誰もが認めるところでしょう（かつて Java に対する C# がそうであったように）「Swift は関数型言語だ」という意見には、Xamarin は F# を提案します。<a href="http://blog.xamarin.com/introduction-to-f-with-xamarin/">Xamarinには F# の MVP（勝手に”数学ガール”だと思っている）</a>も居ます(←訂正:Xamarinの人じゃなかったです)し、日本でも <a href="http://www.slideshare.net/kusokuzeshiki/xamarinmvvm-crossf">F#+Xamarin でアプリ開発されている型</a>も居らっしゃいます。</p>

<h1>まとめ</h1>

<p>　ちょっと宗教論争っぽくなりかけたので、ここまでにしておきます。強く主張したいのは、モバイルアプリ開発者なら iOS だけ、Android だけ知っていても良いアプリは作れないでしょう。両方のプラットフォーム、開発言語、哲学を理解する必要があります。 <strong>Xamarin だから Swift を覚えなくていいという事はありません。</strong>
　
　でも、同じ（少なくとも同じような機能をもった）アプリの同じロジックを、異なる言語でそれぞれ書いて、その後数年保守し続ける現状は、本当に最適なのでしょうか？同じコード、あるいは同じバイナリが iOS/Android で動作すれば、保守費用は半分です（SIer みたいな言い方だｗ）。</p>

<p>　「共通にできる選択肢、あるいはプラットフォームの文化にあわせて別々にできる選択肢」を自然な形で提供するのが Xamarin、 Java も Swift も C# も覚えて C# で D.R.Y するのが Xamarin です。</p>

<p>　最後に宣伝ですが、 <strong>Build INSIDER</strong> というWebサイトで「Xamarin逆引きTips」という連載をしています。</p>

<ul>
<li><a href="http://www.buildinsider.net/mobile/xamarintips">Xamarin逆引きTips &ndash; Build Insider</a></li>
</ul>


<p>　これは、.NET Framework は今まであまり使った事がない iOS/Android アプリ開発者をターゲットにしていて、説明もほぼ全てが Mac+Xamarin Studio を使って書いています。興味持ったら読んでもらえると嬉しいです。</p>

<p>　本日まったく登場しなかった Visual Studio や Windows Phone などの話は、明日以降登場すると思いますので、お楽しみに！それでは初日はこの辺で。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms をガチで使うときのプロジェクト構成案]]></title>
    <link href="http://blog.amay077.net/blog/2014/11/14/project-design-using-xamarin-forms/"/>
    <updated>2014-11-14T19:34:02+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/11/14/project-design-using-xamarin-forms</id>
    <content type="html"><![CDATA[<p>　<a href="http://xamarin.com/forms">Xamarin.Forms</a>（以下 XF とします）を本格的に開発に導入してみようと思ってるんだけど、その時のプロジェクト(アセンブリ)構成はこんな感じかな、というのを考えてみた。</p>

<!--more-->


<h2>コンセプト</h2>

<ul>
<li>XF を使う理由は、Viewのワンソース化よりも <em>DataBinding機構が使えること</em></li>
<li>いざという時逃げられるように XF への依存を最小限にする</li>
<li>iOS/Android 対応アプリ開発のこと、他は知らん</li>
<li>MVVM で PCL で、PCL のところを最大化する</li>
</ul>


<h2>プロジェクト構成図</h2>

<p>　角丸四角形がプロジェクトを、矢印は依存を示す。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/project_design_using_xamarin_forms_01.png" alt="" /></p>

<p>左から説明。</p>

<h3>XF.Android, XF.iOS, XF.Core</h3>

<p>　Xamarin.Forms ソリューションを作成するとテンプレで作られるプロジェクト群。
　XF.Core でプラットフォームに依存しないView（ボタンとか）を、XF.Android/XF.iOS でプラットフォーム固有のView（スライドメニューとかNotificationなど）を提供する。
　これらは BindableProperty を介して ViewModel とデータバインディングする。
　XF は他に、ServiceLocator や MessageCenter を提供するが、それらは使用しない（ロックインを防ぐため）
　結局この案では、「XF=View層のみ」となる。</p>

<h3>App.Core</h3>

<p>　アプリのView以外の共通部分のプロジェクト。ViewModel と Model を含む。
　ViewModel から View へシグナルを送るために &ldquo;XFではない&rdquo; Messengerを使う。（MvvmLight とか Prism とかから引っこ抜いてくればいいかな？）
　Model にはビジネスロジックのみを記述し、通信処理やデータI/Oなどのプラットフォーム共通なAPIはModelから直接使い、プラットフォーム固有の機能は、ServiceInterface を使う。
　ServiceInteface は、ServiceLocator によって App.Android/iOS から実体が Inject される。ServiceLocator は &ldquo;XFではない&#8221;…以下略
　Rx を使うので、たぶん Model のメソッドの返り値は全部 IObservable<T> になります。</p>

<h3>App.Android, App.iOS</h3>

<p>　プラットフォーム固有のAPI層。例えば GPS とか、アプリ連携とか、アイテム課金とか。ServiceInterface に定義されている Interface を実装するところ。</p>

<h2>懸案</h2>

<ul>
<li>PUSH通知受信とか、本来は Platform Specific APIs で担当したいが、プラットフォームの都合で、View で受信しなければならない機能の落としどころ。</li>
<li>App.core をもっと分割した方がよい「ViewModelからAPI呼ばないよね？」とか「App.AndroidからModelにアクセスできるのがイヤ」とかを厳格に制限しようと思ったら分割した方が良さそう。</li>
<li>Model から左側を全部 IObservable<T> 化しようと思っているが、Callback→Observable変換をModelでやるか、API層でやるか。&#8221;ビジネス&#8221;ロジックではないので、右側かな。</li>
<li>XF.Core にどれだけ詰め込むか。画面レイアウトもXFでできるだけ頑張る、画面遷移フレームワークもXFで用意する、か？Sketches がどこまで活用できるか？</li>
</ul>


<p>さて、どんなもんでしょ？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「チェックAがONならば、項目Bは入力必須とする」という Validation を RxJava + RxAndroid でやる]]></title>
    <link href="http://blog.amay077.net/blog/2014/11/10/complex-validation-with-rxjava-and-rxandroid/"/>
    <updated>2014-11-10T01:32:20+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/11/10/complex-validation-with-rxjava-and-rxandroid</id>
    <content type="html"><![CDATA[<p>　例えばショッピングサイトとかの発送先指定のフォーム『登録されている住所とは違う住所に送りたい時、「別の住所に送る」をチェックする、すると「住所2」が必須入力となり、入力するまで次へ進めない』的なちょっと込み入ったValidationをReactive ExtensionsのJava版、<a href="https://github.com/ReactiveX/RxJava">RxJava</a>と<a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a>でやってみました。</p>

<!--more-->


<h1>動作イメージ</h1>

<p>　まずいきなり動作結果から。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/complex_validation_with_rxjava_and_rxandroid.gif" alt="" /></p>

<ul>
<li>住所1は入力必須。</li>
<li>住所2は「住所2へ配送する」がチェックされている場合のみ、入力必須。</li>
<li>必須項目が入力されていない場合はボタンを押せない</li>
</ul>


<p>こんな仕様です。</p>

<h1>実装</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_my</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 「注文を確定する」ボタン</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Button</span> <span class="n">buttonSubmit</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">buttonSubmit</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// チェックボックスのON/OFFをObservable化</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">useSecondaryAddress</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">ViewObservable</span><span class="o">.</span><span class="na">input</span><span class="o">((</span><span class="n">CheckBox</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">checkUseSecondary</span><span class="o">),</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="k">new</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">OnCheckedChangeEvent</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">call</span><span class="o">(</span><span class="n">OnCheckedChangeEvent</span> <span class="n">onCheckedChangeEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">onCheckedChangeEvent</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 住所1をObservable化</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">OnTextChangeEvent</span><span class="o">&gt;</span> <span class="n">primaryAddress</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">ViewObservable</span><span class="o">.</span><span class="na">text</span><span class="o">((</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">editPrimaryAddress</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 住所2をObservable化</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">OnTextChangeEvent</span><span class="o">&gt;</span> <span class="n">secondaryAddress</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">ViewObservable</span><span class="o">.</span><span class="na">text</span><span class="o">((</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">editSecondaryAddress</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// チェックボックスと住所2の必須条件をObservable化</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">secondaryIsValid</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">.</span><span class="na">combineLatest</span><span class="o">(</span><span class="n">useSecondaryAddress</span><span class="o">,</span> <span class="n">secondaryAddress</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">Func2</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">,</span> <span class="n">OnTextChangeEvent</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">call</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">useSecondary</span><span class="o">,</span> <span class="n">OnTextChangeEvent</span> <span class="n">secondaryAddress</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">useSecondary</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">return</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">secondaryAddress</span><span class="o">.</span><span class="na">text</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 全部まとめると、</span>
</span><span class='line'>    <span class="c1">//  住所1は入力必須、</span>
</span><span class='line'>    <span class="c1">//  住所2はチェックボックスがONの時だけ入力必須</span>
</span><span class='line'>    <span class="c1">//  必須条件を満たしていたらtrueを流す</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">isValidAll</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">combineLatest</span><span class="o">(</span><span class="n">primaryAddress</span><span class="o">,</span> <span class="n">secondaryIsValid</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">Func2</span><span class="o">&lt;</span><span class="n">OnTextChangeEvent</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">call</span><span class="o">(</span><span class="n">OnTextChangeEvent</span> <span class="n">primaryAddress</span><span class="o">,</span> <span class="n">Boolean</span> <span class="n">isValidSecondary</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">isValidSecondary</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">return</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">primaryAddress</span><span class="o">.</span><span class="na">text</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 購読、監視</span>
</span><span class='line'>    <span class="n">isValidAll</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Observer</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="kd">final</span> <span class="n">Boolean</span> <span class="n">isValid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 必須条件を満たしていたら「注文を確定する」を有効にする</span>
</span><span class='line'>            <span class="n">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">buttonSubmit</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">isValid</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　<code>ViewObservable.xxx</code> で、UI要素をObservable化します。これはRxAndroidの機能。これでテキストの変更とか、チェックボックスの変更のたびに、<code>OnNext</code>が発生するようになります。</p>

<p>　Validationでは、RxJavaの機能である <code>Observable.combineLatest</code>がキモで、こいつに2つのObservableを渡してやると、その片方が値が変化した時に、<code>T3 call(T1 a, T2 b)</code> が呼ばれます。T1、T2 は渡すObservableの型、T3は後続へ流す型で、Validationなので<code>Boolean</code>です。
上記 <code>secondaryIsValid</code> の実装では、「住所2に配送する」のチェックボックスと「住所2」のテキストボックスの2つのObservableを渡していて、</p>

<ul>
<li>「住所2に配送する」がOFFなら <code>true</code> を返す</li>
<li>「住所2に配送する」がONで、且つ「住所2」が空でなければ <code>true</code> を返す</li>
</ul>


<p>としています。</p>

<p>　次に、<code>isValidAll</code> の実装では、「住所1」と <code>secondaryIsValid</code> を渡していて、</p>

<ul>
<li><code>secondaryIsValid</code> が <code>false</code> なら <code>false</code> を返す</li>
<li><code>secondaryIsValid</code> が <code>true</code> で、且つ「住所1」が空でなければ <code>true</code> を返す</li>
</ul>


<p>という実装です。</p>

<p>　んで、こいつ(<code>isValidAll</code>)を購読(<code>subscribe</code>)すると、<code>onNext</code> にValidationの結果が通知されるので、ボタンの<code>Enabled</code>を切り替えます。</p>

<p>　conbimeLatest は、本家Rxなら obsA.CombineLatest(obsB, (tA, tB) => tX).CombineLatest(obsC, (tX, tC) => tY)&hellip; とチェインして書けるのですが、RxJava の combineLatest はなぜか static メソッドしかなくてチェインできません、残念。</p>

<h1>まとめ</h1>

<p>　このレベルだと、すべてのUI要素に変更通知を仕込んで共通な関数を呼ぶ、的な実装で問題ないですが、要素や条件が増えてくると大変です。</p>

<p>　Observable と combineLatest を使うと、制約の一部を(Observableに)部分化できて、それらを組み合わせるのも自由自在(Observableだから)。</p>

<p>Javaなのでかなり長ったらしくて読みづらいコードになってしまいました。</p>

<p><strong><a href="http://xamarin.com/">Xamarin.Android</a> + <a href="https://rx.codeplex.com/">本家Reactive Extensions</a> + <a href="https://reactiveproperty.codeplex.com/">ReactiveProporty</a> なら、相当スッキリするんだけどなあー</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveX と MVVM と DataBinding の関係について図にしてみた]]></title>
    <link href="http://blog.amay077.net/blog/2014/10/30/reactivex-mvvm-databindings-relations/"/>
    <updated>2014-10-30T01:17:39+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/10/30/reactivex-mvvm-databindings-relations</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://connpass.com/event/8680/">ReactiveCocoa Tokyo #rac_tokyo &ndash; connpass</a></li>
<li><a href="http://connpass.com/event/9061/">RxJava Night #rxjnight &ndash; connpass</a></li>
<li><a href="http://mozaic.fm/post/100741841543/10-node-js-sideshow">#10 node.js sideshow | mozaic.fm</a></li>
</ul>


<!--more-->


<p>などなどをいろいろ眺めておりまして（東京うらやましい）、Reactive Extensions とか MVVM とかいろいろ熱い！楽しい！と思っているわけですが、いろいろなライブラリがあって、それらのカバーする範囲がいまいち明確になってない気がしたので、自分なりに整理してみました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/reactive_mvvm_databindings_relations_01.png" alt="" /></p>

<p>MVVM っていうと、Messenger とか DIコンテナ的なものとかもあるわけですが、主に DataBinding と Rx の違いにフィーチャーしたかったので除外しました。</p>

<p>　DataBinding は、<a href="http://www.atmarkit.co.jp/ait/articles/1008/03/news097_3.html">DependencyProperty</a> や <a href="http://blog.falafel.com/learning-xamarin-custom-renderers-in-xamarin-forms/">BindableProperty</a> みたいなものがあるかどうかという感じで考えていて、「XAMLとかのマークアップでバインディング指定できなければならない」という考えではないです。</p>

<p>　View, DataBinding, ViewModel, ReactiveX の各ブロックは基本的にはどの組み合わせでもよくて（特に ReactiveX は他とは別の世界のものなので）、しかし中には ReactiveProperty のように ReactiveX に依存しつつ ViewModel の機能を提供するものがあったり、ReactiveCocoa のように「全部入り」のものがあったりします。また、View と ViewModel を繋ぐためにはなんらかの DataBinding が必要です。</p>

<p>という理解なんですが、あってますかね？</p>

<p>　私は Xamarin 推しの人なので、 <strong>Xamarin.Forms + ReactiveProperty が、MVVM+Rx のパワーをフル活用できて、しかも iOS/Android で大部分のコードが共有できるという最強の組み合わせなんですよ！</strong> というのを言いたいわけです。</p>

<h2>Links</h2>

<ul>
<li>Xamarin.Forms &ndash; <a href="http://xamarin.com/forms">Build a Native Android UI &amp; iOS UI with Xamarin.Forms &ndash; Xamarin</a></li>
<li>Prism &ndash; <a href="http://compositewpf.codeplex.com/releases/view/117297">patterns &amp; practices: Prism &ndash; Download: Prism 5.0 for .NET 4.5</a></li>
<li>MVVM Light Toolkit &ndash; <a href="https://mvvmlight.codeplex.com/">MVVM Light Toolkit &ndash; Home</a></li>
<li>Reactive Extensions &ndash; <a href="https://rx.codeplex.com/">Rx (Reactive Extensions) &ndash; Home</a></li>
<li>ReactiveProperty &ndash; <a href="https://reactiveproperty.codeplex.com/">ReactiveProperty &ndash; MVVM Extensions for Rx &ndash; Home</a></li>
<li>ReactiveUI &ndash; <a href="https://github.com/reactiveui/reactiveui">reactiveui/ReactiveUI</a></li>
<li>MvvmCross &ndash; <a href="https://github.com/MvvmCross/MvvmCross">MvvmCross/MvvmCross</a></li>
<li>RxJava &ndash; <a href="https://github.com/ReactiveX/RxJava">ReactiveX/RxJava</a></li>
<li>RxAndroid &ndash; <a href="https://github.com/ReactiveX/RxAndroid">ReactiveX/RxAndroid</a></li>
<li>android-binding &ndash; <a href="https://github.com/gueei/AndroidBinding">gueei/AndroidBinding</a></li>
<li>ReactiveCocoa &ndash; <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa/ReactiveCocoa</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ボタンを重ねた時の ZOrder に関する Tips]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/23/views-zorder/"/>
    <updated>2014-09-23T00:20:38+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/23/views-zorder</id>
    <content type="html"><![CDATA[<p>Android 開発でボタンを意図的に重ねたい時ってあんまりないんですけど、業務アプリなんか作ってますとたまにありまして。</p>

<!--more-->


<p>具体的には、</p>

<ul>
<li><a href="http://coliss.com/articles/build-websites/operation/css/10-css-breadcrumbs.html">デザインの勉強にもなる、CSSで実装するパンくずのまとめ | コリス</a></li>
</ul>


<p>みたいなパンくずリストを作りたい時。変な形のボタンを作るのは骨が折れるので、ボタンを重ねて、左側の方が手前に表示されるようにしたいわけです。(なぜそうしたいかはたぶん伝わらないので割愛)</p>

<p>つまりはボタンを重ねた時の ZOrder（Z-index）を制御したいわけです。</p>

<p>でいろいろトライ。</p>

<h2>LinearLayout の場合</h2>

<p>LinearLayout で横並びにする場合。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;30dp&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#FF0000&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;AAA&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#00FF00&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;BBB&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginLeft=</span><span class="s">&quot;-10dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#0000FF&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;CCC&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginLeft=</span><span class="s">&quot;-10dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>結果</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_01.png" alt="" /></p>

<p>だめだー。
LinearLayout の Zorder は、並び順と連動してしまうので、右（若しくは下）ほど手前になってしまいます。</p>

<p>ちなみに、「<code>view.bringToFront()</code> を叩けばいいんじゃね？」と思い、<code>buttonA.bringToFront()</code> を実行すると、</p>

<p>じゃん↓</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_02.png" alt="" /></p>

<p>見事に AAA が右端にいったｗ</p>

<h2>RelativeLayout の場合（その１）</h2>

<p>普通に RelativeLayout で、「BはAの右、CはBの右」と制約をつけてみます。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;30dp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/buttonA&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#FF0000&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;AAA&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/buttonB&quot;</span>
</span><span class='line'>        <span class="na">android:layout_toRightOf=</span><span class="s">&quot;@+id/buttonA&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#00FF00&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;BBB&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginLeft=</span><span class="s">&quot;-10dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/buttonC&quot;</span>
</span><span class='line'>        <span class="na">android:layout_toRightOf=</span><span class="s">&quot;@+id/buttonB&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#0000FF&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;CCC&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginLeft=</span><span class="s">&quot;-10dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>結果</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_03.png" alt="" /></p>

<p>んんー、まだダメかー。</p>

<h2>RelativeLayout の場合（その２）</h2>

<p>その１の制約はそのままに、XML上での並び順を C、B、A に変えてみましょう。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;30dp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/buttonC&quot;</span>
</span><span class='line'>        <span class="na">android:layout_toRightOf=</span><span class="s">&quot;@+id/buttonB&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#0000FF&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;CCC&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginLeft=</span><span class="s">&quot;-10dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/buttonB&quot;</span>
</span><span class='line'>        <span class="na">android:layout_toRightOf=</span><span class="s">&quot;@+id/buttonA&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#00FF00&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;BBB&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginLeft=</span><span class="s">&quot;-10dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/buttonA&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#FF0000&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;AAA&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>結果</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_04.png" alt="" /></p>

<p>よしっ！期待した表示になりました。</p>

<h2>まとめ</h2>

<p>　総合しますと、ZOrder は、LinearLayout でも RelativeLayout でも、XMLでは後で記述したものが手前になります。</p>

<p>　LinearLayout は、上から下、または左から右に並べるしかできないので、それに逆らうような ZOrder は付けられません。</p>

<p> RelativeLayout は、制約に基づき描画されるので、XMLの記述順を工夫することで ZOrder をある程度コントロールできます。</p>

<p>以上、誰得Tips でした。</p>

<p>冒頭のようなパンくずリストをAndroidで作る方法教えてください。。。(FragmentBreadCrumbs もパンくずっぽくないじゃないですかぁ)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秋の Xamarin 勉強会いろいろ]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/16/xamarin-user-meetup-in-autum-2014/"/>
    <updated>2014-09-16T00:13:28+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/16/xamarin-user-meetup-in-autum-2014</id>
    <content type="html"><![CDATA[<p>　なんか今年(2014年)の秋は Xamarin についての勉強会がめじろ押しで、嬉しいというか羨ましい限りです。</p>

<p>　ざっとまとめて見ました。あ、ほぼ関東圏です。</p>

<!--more-->


<h2>【9/20・品川】<a href="https://atnd.org/events/55564">Xamarin.iOS でデバイスを超えるプログラミング : ATND</a></h2>

<p>　Xamarin.iOS の、特に Objective-C で作成されたライブラリを Xamarin.iOS で使う「Binding」についてのお話が聞けるのは大変希少です。</p>

<h2>【9/20・品川】<a href="http://kokucheese.com/event/index/215384/">9月20日 .NETラボ 勉強会 2014年9月(東京都)</a></h2>

<p>セッションの一つに</p>

<ul>
<li>「Xamarin.FormsのMVVM」のお話（Microsoft MVP for Visual C# 増田 智明）</li>
</ul>


<p>があります。Xamarin.Forms は iOS/Android/WinPhone でUIを共通化する新しいフレームワークで、且つ、MVVMフレームワークでもあります。これも大変価値のあるセッションです。</p>

<h2>【9/30・渋谷】<a href="http://connpass.com/event/8706/">「Xamarin」って何？ Wエバンジェリストによる特濃「Xamarin」勉強会 &ndash; connpass</a></h2>

<p>「Xamarinって何？」というタイトルの通り、Xamarin を知らない／興味のある方向けのセッションと思います。エクセルソフト田淵さんとMS渡辺さんは Xamarin について各所でプレゼンしまくってるので、これからXamarinを始めてみようという方にはピッタリだと思います。</p>

<h2>【10/18・渋谷】<a href="http://www.wankuma.com/seminar/20141018tokyo92/">Xamarin Day &ndash; わんくま同盟</a></h2>

<p>　わんくま同盟で、一日Xamarinぶち抜きしてくれるとは嬉しい限りですね。
勝手なイメージですが、わんくまはマイクロソフト系開発者が多いと思うので、Windows や Visual Studio での Xamarin 開発についてのセッションが多いのではないでしょうか。</p>

<h2>【10/6-10・アメリカ】<a href="https://evolve.xamarin.com/">Xamarin Evolve 2014</a></h2>

<p>　Xamarin 社主催の年に一度の大イベント「Evolve 2014」です。Apple でいうところの WWDC、Google で言えば I/O のような大きなイベントです。
Microsoft, IBM, Amazon, Salesforce とかなんだこの豪華なスポンサーは！
昨年は KeyNote がライブ配信されたので、今年もあるんじゃないかと思います。新しい Feature の発表もあるかもしれないので、必見です。日本のXamarin開発の第一人者 @iseebi さんも現地で参加されるとのことで、Live で盛り上がりましょう！</p>

<h2>【時期未定】第2回 Japan Xamarin User Group Conference</h2>

<p>日本唯一の Xamarin ユーザーコミュニティ JXUG の第2回コンファレンス、秋くらいに開催されるんじゃないかなーと、期待も込めて書かせて頂きました。</p>

<p>最新情報は <a href="https://www.facebook.com/groups/778386365523431/">Japan Xamarin User Group (JXUG)</a> に参加してチェックしましょう。</p>

<p>　すごい！１年前からは想像もできないくらいに Xamarin が盛り上がってきていて、ひたすら Qiita にネタを投稿してきた身としてはとても嬉しいです。地方在住者にはなかなか参加が厳しいですが、関東から次第に全国にコミュニティが広がっていってくれたらいいなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms で複数ボタンの均等割り付けをする]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/10/xamarin-forms-view-equal-width-and-fill-layouting/"/>
    <updated>2014-09-10T22:57:08+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/10/xamarin-forms-view-equal-width-and-fill-layouting</id>
    <content type="html"><![CDATA[<p>　Android では、例えば画面の幅に対して、複数のボタンを同じ幅でいい感じに Fill させることができます。(これを均等割り付けというのが正しいのかはよくわかりませんが)</p>

<!--more-->


<ul>
<li><a href="http://inujirushi123.blog.fc2.com/blog-entry-106.html">LinearLayout を使って均等割り付け : layout_weight &ndash; 戌印-INUJIRUSHI- （Androidあれこれ） &ndash;</a></li>
<li><a href="http://blog.imho.jp/2011/08/android-linearlayout.html">Androidレイアウトの要点だけ: LinearLayoutでパーツを均等に配置したい | スマートフォン要点だけブログ</a></li>
</ul>


<p>これで画面の解像度が違っても、横向きになっても、同じ幅のボタンで埋まる、という事ができます。</p>

<p><a href="http://xamarin.com/forms">Xamarin.Forms</a> でこれを実現するにはどうしたら良いか、試してみました。</p>

<h2>StackLayout を利用した試み</h2>

<p>Xamarin.Forms では、LinearLayout に相当するレイアウトとして <a href="http://iosapi.xamarin.com/?link=T%3aXamarin.Forms.StackLayout">StackLayout</a> があります。</p>

<p>まずはこれを利用してみます。</p>

<p><code>StackLayout</code> を <code>Orientation = Horizontal</code> とし、<code>Children</code> にボタンを3つ配置しています。ボタンの幅は全て <code>HorizontalOptions = FillAndExpand</code> とします。</p>

<figure class='code'><figcaption><span>App.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">App</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">Page</span> <span class="nf">GetMainPage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>  
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ContentPage</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Orientation</span> <span class="p">=</span> <span class="n">StackOrientation</span><span class="p">.</span><span class="n">Horizontal</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Children</span> <span class="p">=</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;one&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">TextColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Aqua</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;two two&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">TextColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Fuschia</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;three three three&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">TextColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Lime</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　これを iOS/Android 双方で実行すると、こうなりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_view_equal_width_and_fill_layouting_01.png" alt="" /></p>

<p>うーん、そうじゃない（汗
どうやらボタンのテキストが全て表示されるように頑張ってくれちゃうようです。
まあ、これはこれで使える感じもします。</p>

<h2>Grid を利用した試み</h2>

<p>他のレイアウトで考えてみます。Android の TableLayout に相当する <a href="http://iosapi.xamarin.com/?link=T%3aXamarin.Forms.Grid">Grid</a> を使ってみます。</p>

<p>さっきの <code>App.cs</code> の実装を次のように変えます。</p>

<p><code>Grid</code> に1行3列の表を定義します。
列の定義 <code>ColumnDefinition</code> で幅を <code>new GridLength(1, GridUnitType.Star)</code> としているのは、「3列とも同じ比率の幅とする」ことを意味しています。(ということは比率を2:1:1にしたければ、最初の列だけ<code>2</code>にすればOKです)</p>

<figure class='code'><figcaption><span>App.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">App</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">Page</span> <span class="nf">GetMainPage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>  
</span><span class='line'>        <span class="kt">var</span> <span class="n">grid</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Grid</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">RowDefinitions</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">RowDefinition</span><span class="p">()</span> <span class="p">{</span> <span class="n">Height</span> <span class="p">=</span> <span class="n">GridLength</span><span class="p">.</span><span class="n">Auto</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">ColumnDefinitions</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ColumnDefinition</span><span class="p">()</span> <span class="p">{</span> <span class="n">Width</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GridLength</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">GridUnitType</span><span class="p">.</span><span class="n">Star</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ColumnDefinition</span><span class="p">()</span> <span class="p">{</span> <span class="n">Width</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GridLength</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">GridUnitType</span><span class="p">.</span><span class="n">Star</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ColumnDefinition</span><span class="p">()</span> <span class="p">{</span> <span class="n">Width</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GridLength</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">GridUnitType</span><span class="p">.</span><span class="n">Star</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;one&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">TextColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Aqua</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;two two&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">TextColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Fuschia</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;three three three&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">TextColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Lime</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span> <span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ContentPage</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Content</span> <span class="p">=</span> <span class="n">grid</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　これを iOS/Android 双方で実行すると、こうなりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_view_equal_width_and_fill_layouting_02.png" alt="" /></p>

<p>　おーけー、意図したレイアウトになりました。ボタンに入りきらないテキストはiOSだと省略され、Androidだと折り返されるという違いはありますが、レイアウトの一貫性は保つことができました。</p>

<p>　ちなみに横向きにしても大丈夫です。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_view_equal_width_and_fill_layouting_03.png" alt="" /></p>

<h2>まとめ</h2>

<p>　Xamarin.Forms でも、Android+LinearLayoutのような均等配置ができました。
　クロスプラットフォームなので、iOSでも同じように動作します。
iPhone6 が発表されてiOS開発でも多解像度対応が必須になるので、これは有用な感じがします。
（というか Storyboard の AutoLayout では、これと同じことができる気がしないのですが。。。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms と ReactiveProperty で快適MVVM生活]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/09/using-xamarin-forms-with-reactiveproperty/"/>
    <updated>2014-09-09T21:38:29+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/09/using-xamarin-forms-with-reactiveproperty</id>
    <content type="html"><![CDATA[<p>　<a href="http://www.buildinsider.net/mobile/xamarintips/0005">Xamarin.Forms</a> は、Xamarin に新たに搭載されたクロスプラットフォームUIフレームワーク＆MVVMフレームワークです。</p>

<!--more-->


<p>　<a href="http://okazuki.hatenablog.com/entry/2014/05/07/014133">ReactiveProperty</a> は、MVVMの(特に ViewModelの)実装を強力にサポートしてくれる、<a href="http://www.atmarkit.co.jp/fdotnet/introrx/index/">Reactive Extensions</a> を基盤としたライブラリです。</p>

<p> 両者を組み合わせると、Android/iOSアプリが COOL な感じで書けるんじゃないか、という事で試してみました。</p>

<h2>0. 環境など</h2>

<p>Mac + Xamarin Studio を使いますが、Windows + Visual Studio + Xamarin-Addin でもイケると思います。</p>

<h2>1. 導入</h2>

<h3>プロジェクトの作成</h3>

<p>新規ソリューションを、［C#］−［Mobile Apps］−［Blank App(Xamarin.Forms Portable)］で作成します。</p>

<h3>PCL の Profile を変更</h3>

<p>　作成されたソリューションの一番上にあるプロジェクト(.Android とか .iOS が付いていないやつ)のプロジェクト設定を開いて Profile を <strong>PCL 4.5 &ndash; Profile49</strong> に変更します。元々の Profile78 では ReactiveProperty が Nuget からインストールできないためです。最近のプラットフォームを対象にするなら、あまり影響はなさそうです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_01.png" alt="" /></p>

<h3>Nuget で Reactive Extensions と ReactiveProperty を追加</h3>

<p>　メニューの［プロジェクト］ー［Add Packages］で Nuget のダイアログを開き、図のように 「Reactive Extensions &ndash; Main Library」と「ReactiveProperty Portable」を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_02.png" alt="" /></p>

<p>（Reactive Extensions の追加の際、なにやらWarningが出るようですが、とりあえず進めます。）</p>

<h2>2. ViewModel の実装</h2>

<p>　PCL のプロジェクトに、<code>FirstViewModel.cs</code> を作成します。
　<code>FirstViewModel</code> は、以下のようなプロパティとコマンドを持ちます。</p>

<ul>
<li>InputTextプロパティ : EditBox の入力に応じて更新</li>
<li>DisplayTextプロパティ : InputText の変化から1秒後に、InputText を大文字にして更新</li>
<li>Clearコマンド : InputText が &lsquo;clear&rsquo; の時のみ有効。実行すると InputText を空にする。</li>
</ul>


<p>これらの実装が下のようになります。</p>

<figure class='code'><figcaption><span>FirstViewModel.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Codeplex.Reactive</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive.Linq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FormsWithRxProperty.ViewModels</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">FirstViewModel</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">_inputText</span> <span class="p">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="s">&quot;Hoge&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">InputText</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_inputText</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">DisplayText</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">ReactiveCommand</span> <span class="n">Clear</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">FirstViewModel</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// DisplayText は、InputText の変更から1秒後に大文字にして更新</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">DisplayText</span> <span class="p">=</span> <span class="n">_inputText</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ToUpper</span><span class="p">())</span>
</span><span class='line'>                <span class="p">.</span><span class="n">ToReactiveProperty</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// InputText が `clear` の時に実装可能</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">Clear</span> <span class="p">=</span> <span class="n">_inputText</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;clear&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">ToReactiveCommand</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// 実行されたら、InputText を空にする</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">Clear</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">_inputText</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　面倒な <code>INotifyPropertyChanged</code> の実装が必要なく、すっきりと記述できます。
　また、他のプロパティに関連して(反応して)値が変化するプロパティや、コマンドの利用可否などが、Reactive Extensions の機能により、流れるように記述できます。</p>

<h2>3. 画面及び ViewModel との Binding の実装</h2>

<p>　画面(UI)は、Xamarin.Forms の恩恵で、Android/iOS 共通で実装できます。XAML も使えますが、よく知らないのでコードでUIを記述します。</p>

<p>　PCL のプロジェクトに、 <code>FirstPage.cs</code> を作成し、以下のように実装します。</p>

<figure class='code'><figcaption><span>FirstPage.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Xamarin.Forms</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">FormsWithRxProperty.ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FormsWithRxProperty.Pages</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">FirstPage</span> <span class="p">:</span> <span class="n">ContentPage</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">FirstPage</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// UI</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">entry</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Entry</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Hello, Forms!&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">label</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Label</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">CenterAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">button</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Clear (type &#39;clear&#39; to enable)&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">FillAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Padding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thickness</span><span class="p">(</span><span class="m">50f</span><span class="p">),</span>
</span><span class='line'>                <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Start</span><span class="p">,</span>
</span><span class='line'>                <span class="n">HorizontalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Fill</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Orientation</span> <span class="p">=</span> <span class="n">StackOrientation</span><span class="p">.</span><span class="n">Vertical</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Children</span> <span class="p">=</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">entry</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">label</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">button</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// ViewModel との Binding</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">BindingContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FirstViewModel</span><span class="p">();</span>
</span><span class='line'>            <span class="n">entry</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">&lt;</span><span class="n">FirstViewModel</span><span class="p">&gt;(</span><span class="n">Entry</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">,</span> <span class="n">vm</span><span class="p">=&gt;</span><span class="n">vm</span><span class="p">.</span><span class="n">InputText</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="n">label</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">&lt;</span><span class="n">FirstViewModel</span><span class="p">&gt;(</span><span class="n">Label</span><span class="p">.</span><span class="n">TextProperty</span><span class="p">,</span> <span class="n">vm</span><span class="p">=&gt;</span><span class="n">vm</span><span class="p">.</span><span class="n">DisplayText</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="n">button</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">&lt;</span><span class="n">FirstViewModel</span><span class="p">&gt;(</span><span class="n">Button</span><span class="p">.</span><span class="n">CommandProperty</span><span class="p">,</span> <span class="n">vm</span><span class="p">=&gt;</span><span class="n">vm</span><span class="p">.</span><span class="n">Clear</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　ちょっと長いですが、画面に「エディットボックス」「ラベル」「ボタン」が縦に並んでいるだけです。</p>

<p>　下部の４行で、<code>FirstViewModel</code> の各プロパティ、コマンドと Bind しています。</p>

<p>　もともとあった <code>App.cs</code> は、<code>FirstPage</code> を生成するだけにします。</p>

<figure class='code'><figcaption><span>App.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Xamarin.Forms</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">FormsWithRxProperty.Pages</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">FormsWithRxProperty</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">App</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Page</span> <span class="nf">GetMainPage</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>  
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">FirstPage</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>動かす！</h2>

<p> .Android か .iOS の付いたプロジェクトをスタートアップにして、実行します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_03.gif" alt="" /></p>

<h3>追記 2014.9.10</h3>

<p>実機で動作確認するの忘れてました（実機はAOTなのに対してiOSシミュレータはJITなのでリフレクションとかが普通に動いてしまう）。
実機でも問題なく動作しました！</p>

<h2>追記 2014.9.11 INotifyPropertyChanged の利用</h2>

<p>ViewModel は <code>INotifyPropertyChanged</code> を実装して作成するのが一般的です。既にそのようにして作られた ViewModel でも <code>IObservable</code> 化して、ReactiveProperty で利用できます。</p>

<figure class='code'><figcaption><span>SecondViewModel.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SecondViewModel</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">ValidationAttr</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">string</span> <span class="n">_myName</span> <span class="p">=</span> <span class="s">&quot;HoGe&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">MyName</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_myName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_myName</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">_myName</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>            <span class="n">PropertyChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">PropertyChangedEventArgs</span><span class="p">(</span><span class="s">&quot;MyName&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">LowerText</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">ICommand</span> <span class="n">_resetCommand</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">ICommand</span> <span class="n">ResetCommand</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_resetCommand</span> <span class="p">??</span> <span class="p">(</span><span class="n">_resetCommand</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Xamarin</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">Command</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">MyName</span> <span class="p">=</span> <span class="s">&quot;XAAAAMAAARIN!!&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">SecondViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">LowerText</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">ObserveProperty</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">MyName</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ToLower</span><span class="p">())</span>
</span><span class='line'>            <span class="p">.</span><span class="n">ToReactiveProperty</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_04.png" alt="" /></p>

<h2>まとめ</h2>

<p>　Reactive Extensions のメリットを活かして MVVM を構築できる ReactiveProperty と、ワンソースで Android/iOS の画面を定義でき、さらに Binding までも共通にできる Xamarin.Forms の組み合わせは、今後のモバイルアプリケーション開発をとても効率的にしてくれます、 <strong>そしてなにより楽しい！</strong></p>

<p>　今回のサンプルプログラムは</p>

<ul>
<li><a href="https://github.com/amay077/XamarinFormsWithReactivePropertySample/tree/master">amay077/XamarinFormsWithReactivePropertySample</a></li>
</ul>


<p>　に置きましたので、是非試してみてください。</p>

<h3>ReactiveProperty</h3>

<ul>
<li><a href="http://okazuki.hatenablog.com/entry/2014/05/07/014133">ReactiveProperty オーバービュー &ndash; かずきのBlog@hatena</a></li>
<li><a href="https://reactiveproperty.codeplex.com/releases/view/132232">ReactiveProperty &ndash; MVVM Extensions for Rx &ndash; Download: ReactiveProperty v1.0</a></li>
<li><a href="http://neue.cc/2011/08/26_341.html">neue cc &ndash; ReactiveProperty : Rx + MVVMへの試み</a></li>
<li><a href="http://yone64.wordpress.com/2014/06/20/reactiveproperty%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%80%81reactiveextensions%E5%85%A5%E9%96%80%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89/">ReactivePropertyを使いたい人のための、ReactiveExtensions入門（その１） | 泥庭</a></li>
</ul>


<h3>Xamarin.Forms</h3>

<ul>
<li><a href="http://developer.xamarin.com/guides/cross-platform/xamarin-forms/">Xamarin.Forms | Xamarin</a></li>
<li><a href="http://www.buildinsider.net/mobile/insidexamarin/14">Xamarin.Formsの基本構想と仕組み &ndash; Build Insider</a></li>
<li><a href="http://www.buildinsider.net/tagcloud?tag=Xamarin.Forms">Xamarin.Forms &ndash; Build Insider</a></li>
<li><a href="http://furuya02.hatenablog.com/entry/2014/08/08/003036">Xamarin.Forms ListViewでTwitter風のレイアウトを作成してみました（機種依存コードなし） &ndash; SIN@SAPPOROWORKSの覚書</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
