<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-09-02T22:04:53+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARC のメモリ解放タイミングを調べた]]></title>
    <link href="http://amay077.github.io/blog/2013/09/02/when-release-memory-by-arc/"/>
    <updated>2013-09-02T21:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/02/when-release-memory-by-arc</id>
    <content type="html"><![CDATA[<p>一つの関数内で容量の大きなファイルを読み込み加工する処理を連続して行っていたらメモリが足りなくなった。</p>

<!--more-->


<p>ARC ではスコープを外れ(て参照カウンタがゼロになっ)たオブジェクトは、すぐに破棄されると思っていたのでしばらくハマった。</p>

<h2>問題のソース(ARC使用)</h2>

<p>ローカルでもWebでも何でもいいけど、ファイルから無視できない程度の容量のデータの読み込みを繰り返す処理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonDownWithArc:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span><span class="o">*</span> <span class="n">path</span> <span class="o">=</span> <span class="s">@&quot;.../bigdata.img&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfFile:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">NSThread</span> <span class="nl">sleepForTimeInterval:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを Instruments でプロファイルするとこうなる。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/arc_memory_release_timing_01.png" alt="img" /></p>

<p>じゃんじゃんメモリ確保してしまう（汗
ARC で <code>data</code> は <code>nil</code> にしてるからスコープ外れた時にメモリ解放されると思っていたのだが。</p>

<p>ちなみにこの関数の処理が終了すると、メモリが解放される。</p>

<h2>非ARC でやってみた</h2>

<p>メモリ管理をマニュアルでやったらどうなるかを確認した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonDownNoArc:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span><span class="o">*</span> <span class="n">path</span> <span class="o">=</span> <span class="s">@&quot;.../bigdata.img&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfFile:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">NSThread</span> <span class="nl">sleepForTimeInterval:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">data</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この時のメモリ確保状況は、期待した通りになった。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/arc_memory_release_timing_02.png" alt="img" /></p>

<p>メモリ使用量が線形に<strong>増えない</strong>ことが分かる。ARC 利用時にもこうなるようにしたい。</p>

<p>状況は、スコープ内変数の破棄が、関数を抜ける時に遅延されている。
ARC 周りの情報をいろいろ漁っていて、AutoReleasePool との関わりが怪しいと予想した。</p>

<ul>
<li><a href="http://blog.natsuapps.com/2011/11/ios5-arc-overview.html">[iOS5] ARC (Automatic Reference Counting) : Overview - iOS 開発ブログ Natsu&#8217;s note </a></li>
</ul>


<p>より引用：</p>

<blockquote><h3>retain, release, autorelease, deallocはコンパイラのお仕事</h3>

<p>ARCを利用する場合、コンパイラが</p>

<ul>
<li>retain, release, autoreleaseを挿入してくれる（自分で呼んではいけない。コンパイラエラーになる）。</li>
<li>deallocを適切な位置に挿入してくれる（deallocのオーバーライドは可能。ただし[super dealloc]は不可能）。</li>
</ul>


<p>ことになります。</p></blockquote>

<p>コンパイラにより関数単位で <code>@autoreleasepool {  }</code> が挿入されているとしたら、最初の図のような動きになるはず。ということは、for ループの中に @autorelease を持ってったらどうか？</p>

<h2>ARC + @autoreleasepool 版</h2>

<p>for の中の処理を <code>@autoreleasepool { }</code> で括ってみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonDownWithArcAndAutoRelease:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfFile:</span><span class="n">_path</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">NSThread</span> <span class="nl">sleepForTimeInterval:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/arc_memory_release_timing_03.png" alt="img" /></p>

<p>やたー、期待する動きになったぞ。</p>

<h2>まとめ</h2>

<p>とここまで調べて、しばらく Obj-C さわってなかったので埃をかぶっていた</p>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4844331094?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4844331094&amp;linkCode=shr&amp;tag=oku2008-22">エキスパートObjective-Cプログラミング -iOS/OS Xのメモリ管理とマルチスレッド-</a></li>
</ul>


<p>を引っ張り出してきて読んだら、P.25 にまさにその事が書かれていて泣いた。</p>

<blockquote><p>とはいえ、autorelease されたオブジェクトが大量に発生した場合、NSAutoReleasePool のオブジェクトが破棄されない限り、それらのオブジェクトは release されないので、メモリ不足に陥る場合があります。典型的な例は、大量の画像をリサイズしながら読み込む場合でしょう。…</p>

<pre><code>   for (int i = 0; i &lt; 画像数; i++) {
       /*
        * 画像読み込み処理
        * autoreleaseされたオブジェクトが大量発生。
        * NSAutoReleasePoolのオブジェクトが破棄されないため
        * いずれメモリ不足発生！
        */           
   }
</code></pre></blockquote>

<p>勉強しなおします。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExecutorService の復習]]></title>
    <link href="http://amay077.github.io/blog/2013/09/01/re-studying-executorservice/"/>
    <updated>2013-09-01T19:52:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/01/re-studying-executorservice</id>
    <content type="html"><![CDATA[<p>Android で非同期処理っていうと、真っ先に <code>AsyncTask</code> が出てくるんですが、なるべくなら Java 標準のマルチスレッドAPI である ExecutorService を使った方が良いと思ってます。</p>

<!--more-->


<ul>
<li>(2007年の記事だけど) <a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20071001/283395/">Java技術最前線 - 「Java SE 6完全攻略」第49回 Concurrency Utilitiesの変更点 その1：ITpro</a></li>
</ul>


<p>Android で初めて Java を書いたので細かい仕様がよく分からず、勉強がてら動きを確認してみました。</p>

<h2>1. 1つのワーカスレッドに実行させる</h2>

<p><code>newSingleThreadExecutor</code> でワーカスレッドを一つ持つ Executor を生成して、2つのタスク(=非同期で実行させる処理)を順に実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadExecutorBasicTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 17:18:12.891: D/ExecutorTest(391): Primary ThreadID:4943<br/>
08-29 17:18:12.891: D/ExecutorTest(391): Run task A. ThreadId:4944<br/>
08-29 17:18:12.891: D/ExecutorTest(391): Run task B. ThreadId:4944<br/></p></blockquote>

<p>A→B の順で（=submit した順で）実行される。
Primary と task で ThreadID が異なる、2つの task は同じ ThreadID であることに注目。</p>

<h2>2. 最初のタスクに時間がかかったら？</h2>

<p>タスクA の実行に時間がかかる場合、タスクB はどうなる？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadExecutorHeavyWorkTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A start. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// Wait</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span> <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A end.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 17:22:04.288: D/ExecutorTest(1511): Primary ThreadID:5063<br/>
08-29 17:22:04.288: D/ExecutorTest(1511): Run task A start. ThreadId:5064<br/>
08-29 17:22:07.291: D/ExecutorTest(1511): Run task A end.<br/>
08-29 17:22:07.291: D/ExecutorTest(1511): Run task B. ThreadId:5064<br/></p></blockquote>

<p>A→B の順で実行される。シングルスレッドなので、並列に処理されることはない。</p>

<h2>3. ThreadPoolExecutor を使ったら？</h2>

<p><code>Executors.newSingleThreadExecutor()</code> の代わりに <code>Executors.newFixedThreadPool(2)</code> としてみる。これによりワーカスレッドを2つ使う Execurot が生成される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">threadPoolExecutorHeavyWorkTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A start. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// Wait</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span> <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A end.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 17:29:01.731: D/ExecutorTest(3017): Primary ThreadID:5255<br/>
08-29 17:29:01.731: D/ExecutorTest(3017): Run task A start. ThreadId:5256<br/>
08-29 17:29:01.731: D/ExecutorTest(3017): Run task B. ThreadId:5257<br/>
08-29 17:29:04.725: D/ExecutorTest(3017): Run task A end.<br/></p></blockquote>

<p>タスクA と タスクB で ThreadID が異なる事に注目。
スレッドが２つ使えるので、タスクA の終了を<strong>待たず</strong>にタスクB が実行される。というか、タスクA から始まる保証もない。</p>

<h2>3. SingleThreadScheduledExecutor を使ってみる</h2>

<p>話題を変えて、タスクの実行時間を制御できる Scheduled系 の Executor を使ってみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadScheduledExecutorBasicTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 17:36:16.125: D/ExecutorTest(3547): Primary ThreadID:5285<br/>
08-29 17:36:19.128: D/ExecutorTest(3547): Run task B. ThreadId:5286<br/>
08-29 17:36:21.130: D/ExecutorTest(3547): Run task A. ThreadId:5286<br/></p></blockquote>

<p>開始から3秒後にタスクBが、開始から5秒後にタスクAが実行される。
submit した順は関係ないことに注意。</p>

<h2>4. スケジュールされた時間に別のタスクが実行中だったら？</h2>

<p>3秒後に実行されるタスクBの処理が終わらない時、5秒後に実行されるタスクAはどうなる？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadScheduledExecutorHeavyWorkTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B start. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// Wait</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span> <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B end.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 17:44:18.139: D/ExecutorTest(4737): Primary ThreadID:5456<br/>
08-29 17:44:21.142: D/ExecutorTest(4737): Run task B start. ThreadId:5457<br/>
08-29 17:44:31.143: D/ExecutorTest(4737): Run task B end.<br/>
08-29 17:44:31.143: D/ExecutorTest(4737): Run task A. ThreadId:5457<br/></p></blockquote>

<p>5秒後とスケジュールされたタスクAだが、タスクB が終わるまで待たされる。シングルスレッドなので。</p>

<h2>5. そこで ScheduledThreadPoolExecutor を使ってみる</h2>

<p><code>Executors.newSingleThreadScheduledExecutor()</code> の代わりに <code>Executors.newScheduledThreadPool(2)</code> としてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">threadPoolScheduledExecutorHeavyWorkTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B start. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// Wait</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span> <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task B end.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>08-29 17:48:28.536: D/ExecutorTest(5439): Primary ThreadID:5558<br/>
08-29 17:48:31.550: D/ExecutorTest(5439): Run task B start. ThreadId:5559<br/>
08-29 17:48:<strong>33</strong>.542: D/ExecutorTest(5439): Run task A. ThreadId:5560<br/>
08-29 17:48:41.550: D/ExecutorTest(5439): Run task B end.<br/></p></blockquote>

<p>スレッドが２つ使えるので、タスクA は、スケジュール通り（タスクBの終了を待たずに submit してから5秒後に実行される。</p>

<h2>6. Scheduled系Executor の Timer 的機能を使ってみる</h2>

<p><code>schedule()</code> は、一発だけ(Javascript の <code>setTimeout</code> みたいな)、繰り返し処理するには、<code>scheduleAtFixedRate</code> か <code>scheduleWithFixedDelay</code> を使う。
まずは <code>scheduleAtFixedRate</code> から。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadScheduledExecutorTimerBasicTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span> <span class="nf">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 17:59:33.556: D/ExecutorTest(7228): Primary ThreadID:5795<br/>
08-29 17:59:38.561: D/ExecutorTest(7228): Run task A. ThreadId:5796<br/>
08-29 17:59:41.565: D/ExecutorTest(7228): Run task A. ThreadId:5796<br/>
08-29 17:59:44.568: D/ExecutorTest(7228): Run task A. ThreadId:5796<br/>
…</p></blockquote>

<p>最初は５秒、その後は３秒毎にタスクAが実行される。</p>

<h2>7. 繰り返し実行されるタスクが重かったら？</h2>

<p>繰り返しは３秒だけど、タスクAの実行に１０秒かかったら、どうなる？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadScheduledExecutorTimerHeavyTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 18:15:49.397: D/ExecutorTest(10157): Primary ThreadID:6188<br/>
08-29 18:15:54.413: D/ExecutorTest(10157): Run task A start. ThreadId:6189<br/>
08-29 18:16:04.403: D/ExecutorTest(10157): Run task A end.<br/>
08-29 18:16:04.403: D/ExecutorTest(10157): Run task A start. ThreadId:6189<br/>
08-29 18:16:14.404: D/ExecutorTest(10157): Run task A end.<br/>
08-29 18:16:14.404: D/ExecutorTest(10157): Run task A start. ThreadId:6189<br/>
08-29 18:16:24.405: D/ExecutorTest(10157): Run task A end.<br/>
…</p></blockquote>

<p>３秒置きに設定しているが、タスクAが終わらないので、終わったら<strong>すぐに</strong>、次のタスクを実行する。</p>

<h2>8. scheduleWithFixedDelay ではどうなる？</h2>

<p><code>scheduleAtFixedRate</code> の代わりに <code>scheduleWithFixedDelay</code> にしてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadScheduledExecutorFixedDelayHeavyTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">scheduleWithFixedDelay</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 18:22:37.183: D/ExecutorTest(10663): Primary ThreadID:6245<br/>
08-29 18:22:42.178: D/ExecutorTest(10663): Run task A start. ThreadId:6246<br/>
08-29 18:22:52.179: D/ExecutorTest(10663): Run task A end.<br/>
08-29 18:22:<strong>55</strong>.182: D/ExecutorTest(10663): Run task A start. ThreadId:6246<br/>
08-29 18:23:05.182: D/ExecutorTest(10663): Run task A end.<br/>
08-29 18:23:08.176: D/ExecutorTest(10663): Run task A start. ThreadId:6246<br/>
…</p></blockquote>

<p>タスクAが終わって、<strong>さらに３秒待って</strong>、次のタスクを実行する。
<code>FixedDelay</code> は、前回のタスクが終わってからｎ秒待つ。
<code>FixedRate</code> は、の終了を待たずにｎ秒置きに実行するが、終わってない場合は仕方がないので終わるまで待つ、という感じらしい。</p>

<h2>9. ScheduledThreadPoolExecutor ではどうか？</h2>

<p>ScheduledThreadPoolExecutor  と <code>scheduleAtFixedRate</code> の組み合わせではどうか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">singleThreadScheduledExecutorFixedDelayHeavyTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Primary ThreadID:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A start. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// Wait</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span> <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>          <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Interrupted task A. ThreadId:&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span> <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Run task A end.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>出力</h3>

<blockquote><p>08-29 19:09:39.707: D/ExecutorTest(14173): Primary ThreadID:6605<br/>
08-29 19:09:44.712: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/>
08-29 19:09:54.713: D/ExecutorTest(14173): Run task A end.<br/>
08-29 19:09:54.713: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/>
08-29 19:10:04.713: D/ExecutorTest(14173): Run task A end.<br/>
08-29 19:10:04.713: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/>
08-29 19:10:14.714: D/ExecutorTest(14173): Run task A end.<br/>
08-29 19:10:14.714: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/>
08-29 19:10:24.705: D/ExecutorTest(14173): Run task A end.<br/>
08-29 19:10:24.705: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/>
08-29 19:10:34.705: D/ExecutorTest(14173): Run task A end.<br/>
…</p></blockquote>

<p>あれ？２つのスレッドを使ってくれない。を登録した時点でスレッドは決まってるということかな。</p>

<h2>まとめ</h2>

<p>「タスクが実行されるスレッド」を意識すればハマることはなさそう。</p>

<p>シングルスレッドの場合は、<code>submit</code> あるいは <code>schedule</code> されたタスクは、一つのスレッドで順次処理される。スレッドプールを使っている場合は、スレッドの数だけ並列処理される。
ただし、<code>scheduleAtFixedRate</code> など繰り返し処理では、登録時にスレッドが決まるので、タスクの実行に時間がかかっても並列処理されない。</p>

<p><code>scheduleAtFixedRate</code> や <code>scheduleWithFixedDelay</code> はタイマー的な動きをするが、タスクの処理に時間がかかる場合は、意図した時間間隔で実行されない。タイマーとして使いたければ、Executor を２つ用意し、一つはタイマー専用、もうひとつをタスク実行専用とした方が良さそう。</p>

<p>長くなってしまったので、タスクのキャンセルとか、Terminate 系は別の機会に。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDカードのファイルI/Oパフォーマンス計測]]></title>
    <link href="http://amay077.github.io/blog/2013/08/29/performance-of-sdcard-io/"/>
    <updated>2013-08-29T20:43:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/29/performance-of-sdcard-io</id>
    <content type="html"><![CDATA[<p>端末とか SDカード の種類とかで大きく違うんでしょうけど、自分の端末で調べたのでメモ。</p>

<!--more-->


<ul>
<li>機種: au HTC J(ISW13HT)</li>
<li>SDカード: 最初から付いてたやつ</li>
</ul>


<h2>計測項目</h2>

<ul>
<li>Create - テキストファイルの生成</li>
<li>List - ディレクトリ内の全ファイルの列挙</li>
<li>Rename - ファイル名の変更</li>
<li>Delete - ファイルを1つずつ削除</li>
<li>DelDir - 親ディレクトリを削除</li>
</ul>


<h2>計測方法</h2>

<ul>
<li>ディレクトリ内にファイルを 100個、1000個、10000個作成した時のそれぞれで計測。</li>
<li>それぞれの計測は5回行った平均値。</li>
<li>計測に使ったコードは<a href="https://gist.github.com/amay077/6374470">こちら</a></li>
</ul>


<h2>計測結果</h2>

<table>
<thead>
<tr>
<th align="right">ファイル数</th>
<th align="right">Create</th>
<th align="right">List</th>
<th align="right">Rename</th>
<th align="right">Delete</th>
<th align="right">DelDir</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right">100</td>
<td align="right">1,606ms</td>
<td align="right">939ms</td>
<td align="right">1,664ms</td>
<td align="right">2,792ms</td>
<td align="right">1ms未満</td>
</tr>
<tr>
<td align="right">1,000</td>
<td align="right">15,527ms</td>
<td align="right">950ms</td>
<td align="right">17,359ms</td>
<td align="right">27,057ms</td>
<td align="right">6ms</td>
</tr>
<tr>
<td align="right">10,000</td>
<td align="right">227,236ms</td>
<td align="right">1,003ms</td>
<td align="right">254,338ms</td>
<td align="right">191,631ms</td>
<td align="right">69ms</td>
</tr>
</tbody>
</table>


<h2>まとめ</h2>

<ul>
<li>Create と Rename はファイル100個で約1.5秒、Delete は約×2 の時間がかかる。</li>
<li>List はファイル数にあまり影響されない。</li>
<li>DelDir は超早い。</li>
<li>CPU 使用率は 40〜60% だった。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[au を解約して全面的にIP電話＋MVNOに移行しようか検討しています]]></title>
    <link href="http://amay077.github.io/blog/2013/08/28/au-vs-ipphone-with-mvno/"/>
    <updated>2013-08-28T21:01:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/28/au-vs-ipphone-with-mvno</id>
    <content type="html"><![CDATA[<p>au の解約を検討しています。きっかけはいくつかあります。</p>

<!--more-->


<ul>
<li>料金明細を見なおしていて漠然と「高い！」と思ったこと</li>
<li>IP電話の方が、基本料も通話料も安いじゃんと気づいたこと</li>
<li>データ通信料も、MVNO の方が安いじゃんと気づいたこと</li>
<li>奥さんと一緒なので「家族割」に加入しているが、そのメリットがあまりないこと</li>
<li>1年使ってきた HTC J の電池がヘタってきたのに電池パックが在庫切れで入手できないこと</li>
</ul>


<p>そして最後に、au を使い始めてもうすぐ10年になりますが、今まで漠然と「ある」と思っていた「長期利用ユーザーへの特典」が皆無に等しかったこと、です。</p>

<h2>条件</h2>

<ul>
<li><a href="https://twitter.com/amay077/status/370452013093355520">通話はほとんどしない</a></li>
<li>データ通信はそこそこ使う。けど家に居る時は基本 WiFi</li>
<li>外出時、なんだかんだで WiMAX つかっちゃう</li>
<li>奥さんも au、家族割に加入してる</li>
<li>家族間の通話、メッセージはほぼ LINE、それが通じない時のみ電話。</li>
<li>友達とも、電話はほとんどしない。</li>
<li>その他からの電話はそもそも出ない（ぉぃ</li>
</ul>


<h2>現在払っている金額</h2>

<p>現在支払っているのはこんな感じです。
ほとんど通話をしませんが、まれに通話した月も微々たるものなので、ほぼこの金額を払い続けています。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="right"> 金額/月 </th>
<th align="right">金額/2年総額</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">基本使用料(プランZ)</td>
<td align="right">914円</td>
<td align="right">21,934円</td>
</tr>
<tr>
<td></td>
<td align="left">データ通信量(IS.NET+ISフラット+WiMAX)</td>
<td align="right">6,000円</td>
<td align="right">144,000円</td>
</tr>
<tr>
<td></td>
<td align="left">端末ローン(HTC J/24ヶ月)</td>
<td align="right">1,767円</td>
<td align="right">42,408円</td>
</tr>
<tr>
<td></td>
<td align="left">端末保険(安心ケータイサポート＋)</td>
<td align="right">380円</td>
<td align="right">9,120円</td>
</tr>
<tr>
<td></td>
<td align="left">毎月割</td>
<td align="right">-1,200円</td>
<td align="right">-28,800円</td>
</tr>
<tr>
<td></td>
<td align="left">消費税など</td>
<td align="right">307円</td>
<td align="right">7,368円</td>
</tr>
<tr>
<td></td>
<td align="left">合計</td>
<td align="right">8,168円</td>
<td align="right">196,032円</td>
</tr>
</tbody>
</table>


<p>2年で約20万円、が漠然と「高い」とおもったところです。</p>

<h2>通話はIP電話でいいじゃん？</h2>

<ul>
<li><a href="http://amay077.github.io/blog/2013/08/20/ip-phone-services-comparison/">スマホ向けIP電話サービスを比較してみた</a></li>
</ul>


<p>で比較しましたが、最近は IP電話サービスが安い。
月々の基本料もそうですが、通話料も安い！</p>

<p>IP電話の Fusion、050Plus と au を比較してみると、</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">通信会社</th>
<th align="right">基本使用料</th>
<th align="right">固定電話宛(円/分)</th>
<th align="right">携帯電話宛(円/分)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">Fusion IP-Phone SMART</td>
<td align="right">0円</td>
<td align="right">16.8円</td>
<td align="right">16.8円</td>
</tr>
<tr>
<td></td>
<td align="left">050Plus</td>
<td align="right">315円</td>
<td align="right">2.8円</td>
<td align="right">16.8円</td>
</tr>
<tr>
<td></td>
<td align="left">au プランZ</td>
<td align="right">980円</td>
<td align="right">42.0円</td>
<td align="right">42.0円</td>
</tr>
</tbody>
</table>


<p>au 惨敗。。。</p>

<p>Docomo、Softbank も似たり寄ったりでしょうし、もう 090 の電話番号なんてイラネーと思ったのでした。
IP電話なら、ソフトウェアさえあれば機器を問わずポータブルに使用できます。(IP電話会社にロックインされちゃっていいのか？という考えはありますが)</p>

<p>通話品質？LINE の無料通話で不自由してないなら問題なしです。</p>

<h2>データ通信は MVNO でいいじゃん？</h2>

<p>次、データ通信。</p>

<p>こちらは Docomo 通信網を利用した MVNOサービスが多く登場していますが、月6000円も払えば相当ハイグレードなプランが選べます。
私の場合、au携帯電話の、直近1週間のデータ使用量が 120MB でした(自宅では WiFi使用、あまり外に出ない)、1ヶ月で1GBも使わない推測です。</p>

<p>MVNO サービスには、月々の基本使用料に何GBかのLTE通信可能容量がバンドルされており、それを超えると低速(100〜200kbps)になる、というものがほとんどです。</p>

<p>上記の私の利用実績だと、</p>

<ul>
<li><a href="https://www.iijmio.jp/guide/outline/hdd/spec.jsp">IIJmio - ライトスタートプラン</a> : 1,980円/2GB/月</li>
</ul>


<p>が良さそうです。6000円が1960円になる…のか！？</p>

<h3>追記:2013/8/29</h3>

<p>OCN の MVNO プランが値下げされました！</p>

<ul>
<li><a href="http://ascii.jp/elem/000/000/820/820811/">ASCII.jp：【格安データ通信SIM】OCNに1日60MBや500kbpsコースが追加！</a></li>
</ul>


<p>2GB/月プランが 1,780円になりました！さらに容量超過時のチャージも 525円/500MB と業界最安になりました(IIJ のチャージは 525円/100MB)。</p>

<p>IIJ じゃなくてコレにします(<sup>^)</sup></p>

<h2>端末はどうする？</h2>

<p>今は、au に毎月ローンを払っていて、総額で 42,408円 になります。</p>

<p>さらに、<a href="http://www.au.kddi.com/mobile/service/after-service/support-plus/">安心ケータイサポートプラス</a> (380円/月)という保険にも加入していて、これにより過失による端末故障でも、安価(5,250円)に端末を交換できます。一応ここには、長期利用者のメリットがあり、3年以上の利用者は 5,250円 が 3,150円 になります。</p>

<p>キャリアに頼らない場合、端末はどうしましょ、となります。</p>

<p>Docomo を使っていれば MVNO でも引き続き同じ端末が使用できますが、私は au のため、回線方式が異なり端末が使用できません。</p>

<p>しかも、上記のような故障時のサービスもないので、代替機のことも考えなければなりません。つまり端末２台分の金額を見積もらなければなりません。</p>

<p>SIMフリー端末であれば、海外端末でも使えますが、おサイフケータイは使いたいので無難に Docomo から選ぶことにします。</p>

<p>新品へのこだわりもないので中古白ロムから買うこととします。
<a href="http://kakaku.com/used/keitai/smartphone/se_2/">価格.com</a> によると、Xperia A でも 50,000円くらいで入手できるようです。</p>

<p>壊れた時の代替機は、30,000円くらいとみておきます。
合計 80,000円を計上しておきます。ここはキャリアで買った方が(保険も含めると)お得です。</p>

<h2>au VS IP電話+MVNO</h2>

<p>2年総額で比較してみました。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="right">au/2年総額</th>
<th align="right">IP+MVNO/2年総額</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">通話基本使用料</td>
<td align="right">21,934円</td>
<td align="right">0円</td>
</tr>
<tr>
<td></td>
<td align="left">データ通信量</td>
<td align="right">144,000円</td>
<td align="right">42,720円</td>
</tr>
<tr>
<td></td>
<td align="left">端末代</td>
<td align="right">42,408円</td>
<td align="right">80,000円</td>
</tr>
<tr>
<td></td>
<td align="left">端末保険</td>
<td align="right">9,120円</td>
<td align="right">N/A</td>
</tr>
<tr>
<td></td>
<td align="left">毎月割？</td>
<td align="right">-28,800円</td>
<td align="right">N/A</td>
</tr>
<tr>
<td></td>
<td align="left">消費税など</td>
<td align="right">7,368円</td>
<td align="right">6,376円</td>
</tr>
<tr>
<td></td>
<td align="left">合計</td>
<td align="right">196,032円</td>
<td align="right">128,796円</td>
</tr>
</tbody>
</table>


<p>どうでしょう、脱au（というか脱キャリア）すると、2年総額で<strong>6万円以上も安く</strong>できます、目論見通り、なら。</p>

<h2>Frequently Asked Questions</h2>

<h3>Q:au 同士は 1:00〜21:00の間、通話無料とかあるけど？</h3>

<p>A:LINE で話すので関係ないです。</p>

<h3>Q:SMS(Cメール)は？</h3>

<p>A:LINE か e-mail なので使わないです。今もCメールアプリ殺してるくらい。</p>

<h3>Q:仕事で結構電話かけるんだけど？</h3>

<p>A:会社用には 050plus 使ってて、その利用料金は会社に請求するので問題ないです。</p>

<h3>Q:緊急地震速報が鳴らなくなるよ？</h3>

<p>A:今までも鳴ったこと一度しかない(しかも誤報の時)し、出かけてる時は周りの誰かの端末が鳴るでしょ。</p>

<h3>Q:110番とかできなくなるよ？</h3>

<p>A:はい、そのリスクはあります。住んでる地域なら直接警察署の電話番号へかけられるかも知れませんが、旅行先などでは困るかもしれません。</p>

<h3>Q:GPSの感度が悪くなるのでは？</h3>

<p>A:はい、そのリスクはあります。キャリア配下では、A-GPS という GPS の感度を上げる仕組みが使えますが、キャリアに頼らない場合 A-GPS は機能しない気がします。</p>

<h3>Q:家族割じゃなくなるから奥さんの負担が増えるのでは？</h3>

<p>A:増えません。「家族割」で基本使用料が半額になっていますが、「<a href="http://www.au.kddi.com/mobile/charge/list/daredemo-wari/">誰でも割</a>」で同じく基本使用料が半額になります。なんじゃそら、って感じです。家族間通話無料も LINE があるので無意味です。</p>

<h3>Q:au 長期利用ユーザーへの特典ってなんなの？</h3>

<p>A: 以下のようなものがあるようです。</p>

<ol>
<li><a href="http://www.au.kddi.com/mobile/charge/list/chouki-wari/">長期割引</a> 、5年目以降は基本使用料を15%OFF → 基本使用料からしか割引してくれないので効果激薄(明細みてもどこに適用されてるのかわからないんですけど？)。</li>
<li>11年目以降のユーザーは、「家族割＋年割」で家族間通話が24時間無料 → ほとんどのケースでそれまでに同等サービスの「家族割＋誰でも割」に加入させられるので無意味。</li>
<li><a href="http://www.au.kddi.com/information/notice_mobile/service/20130129-01/">3年目以降のユーザーは、安心ケータイサポートプラスの交換用携帯電話お届けサービスを2100円割引</a> → これはありがたいですが、その為に「端末を1年利用したら電池パック無料提供」がなくなってしまいました、痛いです。</li>
</ol>


<p>ええ、これだけです。</p>

<h3>Q:ポイント貯まるんでしょ？</h3>

<p>A:毎月80Pずつ貯まる程度です。2年で 1,980P(≒円) 程度。今、3000P くらい溜まってるので、ヘタって来たバッテリーと交換しようと思ったら、<a href="http://auonlineshop.kddi.com/disp/CSfLastGoodsPage_001.jsp?GOODS_NO=3087&amp;dispNo=001001001016">それが在庫切れ</a>という嫌がらせを受けています。</p>

<h3>Q:海外では使えるの？</h3>

<p>A:au だと GLOBAL PASSPORT のおかげで手続きなしに海外でも端末を使えますが、MVNO サービスは海外では使えないので、別途海外で使える SIMカードを用意する必要があります。</p>

<h3>Q: 他のキャリアに MNP した方がいいんじゃ？</h3>

<p>A:仮にソフトバンクの iPhone5 に乗り換えるとすると、</p>

<ul>
<li><a href="http://www.softbank.jp/mobile/iphone/price_plan/simulate/">iPhone 料金シミュレーション | iPhone | ソフトバンクモバイル</a></li>
</ul>


<p>によれば、4,900円/月 + あんしん保証パック 498円/月 なので、2年総額に消費税も加えると <strong>136,029円</strong> となり、IP+MVNO とほぼ同等となります。けど、<strong>iPhone イヤなんですよ</strong>。</p>

<h2>まとめ</h2>

<p>よーし、金額的メリットも大きいし、懸案はほぼクリアできるし、キャリアの呪縛(2年縛り)から逃れられるし、これやるしかないじゃん！</p>

<p>…あ、今の契約、まだ2年縛りの1年経ったばかりだった…orz</p>

<p>というわけで一年後忘れないようにここに書き記しておきました！</p>

<p>ん？違約金払ってでも脱auした方がお得なのか？試算しなきゃ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スマホ向けIP電話サービスを比較してみた]]></title>
    <link href="http://amay077.github.io/blog/2013/08/20/ip-phone-services-comparison/"/>
    <updated>2013-08-20T20:43:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/20/ip-phone-services-comparison</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://k-tai.impress.co.jp/docs/news/20130820_611766.html">フュージョン、自社IP電話サービス用アプリのAndroid版 - ケータイ Watch</a></li>
</ul>


<p>とのことで、今仕事用に 050plus を使っているのですが乗り換えようかな―、と思い比較検討してみました。</p>

<!--more-->


<h2>スマホで使えるIP電話サービス</h2>

<p>Fusion、050Plus に加えて Skype も入れて比較してみます。
料金の比較は下の方で。</p>

<h3>050plus</h3>

<ul>
<li>http://050plus.com/pc/index.html</li>
<li>NTTコミュニケーションズ</li>
<li>基本:315円/月、通話料(携帯):16.8円/分</li>
</ul>


<p>CM ばんばんやってるのでたぶん一番メジャーなんじゃないでしょうか。
NTTcom がやってるという事で音質に期待してましたが、今使ってる印象では特に良くもありません。会話してると15秒に1回のペースで「プチ切れ」するんですよ。その間の「一言」が聞こえなかったり伝わらなかったりで会話にコツが要ります（え
基本使用料 315円＋通話料で、最初の２ヶ月は基本使用料がタダです。</p>

<h3>Skype</h3>

<ul>
<li>http://www.skype.com/ja/</li>
<li>Microsoft</li>
<li>基本:0円/月、通話料(携帯):17.5円/分 ※無料通話付きの月額プランもあり</li>
</ul>


<p>今や Microsoft のサービスになった Skype さん。
有料プランで 050 の電話番号がもらえるので、スマホ版アプリと組み合わせて使えます。料金に VAT と呼ばれる１通話あたりにかかる手数料があるのが特徴で、サイトの構成と相まって非常に利用料金がわかりにくくなっています。Android 版アプリも最新版では「フラットUI」が採用され、わけがわからなくなりました(<sup>_<sup>;)</sup></sup>
支払い方法が、「Skypeクレジット」を先に購入しておく「プリペイド方式」なので、キレイに使い切る事はできないでしょう。</p>

<h3>FUSION IP-Phone SMART</h3>

<ul>
<li>http://ip-phone-smart.jp/</li>
<li>フュージョン・コミュニケーションズ</li>
<li>基本:0円/月、通話料(携帯):16.8円/分</li>
</ul>


<p>iPhone 版は先行してたようですが、Android 版がリリースされて私も使えるようになりました。
基本利用料がかからないのが最大のメリットですかね。あと、「着信に Push通知を利用」は良さげですね。050plus では、いつの間にかアプリが落ちてて、着信に気づかないことがしばしばありましたので。
料金的には、050plus に比べて、固定電話への通話料がバカ高いです。</p>

<h2>料金比較</h2>

<p>サービスによって月額利用料があったりなかったり、かける先で料金が違ったりするので、以下の条件で比較してみました。</p>

<p>1ヶ月あたり、</p>

<ul>
<li>30回発信する</li>
<li>固定電話と 15分 話す</li>
<li>携帯電話と 15分 話す</li>
</ul>


<p>専ら待ち受けでしょうから、こんなもんでいいでしょう。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/comparision_ip_phone_services_01.png" alt="img" /></p>

<p>通話時間が少ないと Fusion が有利です。050plus は、固定電話への通話が安いので、たくさんかける人には有利です。
Skype も意外と安いようですが、電話をかける度に「接続料」なる費用がかかるので、やはりたくさん使う人には不利です。</p>

<p>条件を変えて試したい人は、こちら↓からどうぞ。水色のセルを変更すれば、赤色の表とグラフが更新されます。変更はどなたでも自由に行えますが、セル単位の保護はしてない(Google Docではできない)ので、水色セル以外は変更しないでくださいね。ちなみに、参考として au の一番基本料金が安い Z プランも載せてあります。</p>

<ul>
<li><a href="https://docs.google.com/spreadsheet/ccc?key=0AsXQVtRWN2mWdGFjS2s2d3ZKb1Jzbi16Z2hWVXduTVE#gid=0">スマホIP電話 料金シミュレーション - Google ドキュメント</a></li>
</ul>


<p>今のところ 050plus で月に500円前後なので、Fusion に乗り換えた方がお得な感じがしてます。</p>

<p>最後にお約束。
各サービスの料金は独自に調べたものであり正確性については保証しません。正確な料金はご自分で各サービスのホームページなどで調べてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marked.js で Markdown をクライアント側でパースして表示する]]></title>
    <link href="http://amay077.github.io/blog/2013/08/06/parse-markdown-using-markedjs/"/>
    <updated>2013-08-06T21:10:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/06/parse-markdown-using-markedjs</id>
    <content type="html"><![CDATA[<p><a href="http://phyzkit.net/typescript/">Typescript クイックガイド</a> で、ソースを見たら Markdown で書かれてたのをみて「カッケー」と思ったのと、<a href="http://www.atmarkit.co.jp/ait/articles/1302/05/news091.html">利用規約やプライバシーポリシーは Github に置くといいよ</a> というのを見て、なら「github に .markdown ファイルを置いてクライアントサイドでスタイリングできたら嬉しいじゃん？」と思いやってみた。</p>

<!--more-->


<h2>Javascript による markdown パーサいろいろ</h2>

<p>上記 Typescript クイックガイド では <a href="https://github.com/chjj/marked">marked.js</a> が使われているようだが、他にもいろいろある模様。下記にて比較してくださっている。</p>

<ul>
<li><a href="http://kannokanno.hatenablog.com/entry/2013/06/19/132042">JavaScript - Markdownパーサーのshowdown.js、markdown-js、markedを簡単比較 - ぼっち勉強会</a></li>
</ul>


<p>もともと marked.js を使おうと思ってたし、上記サイトでも問題無さそうだったので、そのままいく。</p>

<h2>使い方</h2>

<p>marked.js を読み込んだ後、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">formatted</span> <span class="o">=</span> <span class="nx">marked</span><span class="p">(</span><span class="nx">markdown_text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、HTML に整形された文字列が返されるというシンプルなもの。(整形オプションがいろいろあるようだが割愛)</p>

<p>Typescript クイックガイドでは、HTML 内に Markdown テキストがベタ書きされていたが、せっかくなので管理がしやすいように外部 Markdown ファイルを読みこむようにしてみた。</p>

<figure class='code'><figcaption><span>md_renderer.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;ja&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Markdown renderer<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;Markdown renderer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- bootstrap --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap-responsive.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- js libraries --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/jquery-2.0.3.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/marked.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#markdown_content&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">url</span><span class="o">:</span> <span class="nx">target</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">attributes</span><span class="p">[</span><span class="s2">&quot;src&quot;</span><span class="p">].</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>                <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">target</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">marked</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">target</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;This content failed to load.&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Content --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;markdown_content&quot;</span> <span class="na">src=</span><span class="s">&quot;./sample.markdown&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一番下の <code>&lt;div id="markdown_content" src="./sample.markdown"&gt;</code> の src に読み込む Markdown ファイルを指定するようにした。</p>

<p>bootstrap で見栄えを良くしているが、必須ではない。</p>

<p>こちらが <a href="https://dl.dropboxusercontent.com/u/264530/qiita/md_renderer/md_renderer.html">デモ</a> 。</p>

<p>さすがに描画に少し時間がかかるみたいです。
<code>marked()</code> は非同期版もあるようなので、そちらを使うべきだったかな。</p>

<p>これで、データ(Markdown)とプレゼンテーション部(HTML)を分離できて、なんか良さげな感じがする。</p>

<p>Octopress とか、HTMLを生成しちゃうんじゃなくて、クライアントサイドで 「Markdown を描画する」できると、投稿の手間が減って良いかもですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android での Google Map(というか Play Service) 利用が、本家より簡単になった件]]></title>
    <link href="http://amay077.github.io/blog/2013/08/03/gmapv2-from-xamarin-component/"/>
    <updated>2013-08-03T15:29:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/03/gmapv2-from-xamarin-component</id>
    <content type="html"><![CDATA[<p>Xamarin Components に「Google Play Services」が追加されまして。</p>

<!--more-->


<ul>
<li><a href="http://blog.xamarin.com/introducing-the-google-play-services-component-for-xamarin-android/">Introducing the Google Play Services Component for Xamarin.Android | Xamarin Blog</a></li>
</ul>


<p>これが何を意味するかと言うと、これまで Google Play Service を利用するには、ライブラリプロジェクトを作って、アプリから参照するという煩わしい手順が必要でした。</p>

<p>で、これは Android-Eclipse でも同じく面倒だったわけですが、Xamarin.Android  に新しく提供されるこのコンポーネントを使えば、その手間を省くことができます。この点で Eclipse での開発より簡単になりました。</p>

<p>実際に、Play Services の一つである Google Map Android API v2 を使うアプリを作る手順を書いてみます。</p>

<h2>手順</h2>

<h3>1. Google API Console から API key を取得する</h3>

<p>この手順は、これまでと変わらないので、以下のサイトなどを参考にしてください。
package名が必要になるので、先に決めておきましょう。
ここでは <code>com.amay077.sample.googlemapv2sample</code> とします。</p>

<ul>
<li><a href="http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html">throw Life - Google Maps Android API v2を使ってみた</a></li>
</ul>


<p>取得して API key はメモっておきます。</p>

<h3>2. プロジェクト/ソリューションを作る</h3>

<p>Xamarin Studio を起動します。
ここでは Ice Cream Sandwich 用に作ります。(Android Application の方だと Support Library が要るので少し手順が増えるはず)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_01.png" alt="img" /></p>

<h3>3. プロジェクトに「Google Play Service」コンポーネントを追加する</h3>

<p>メニュー → プロジェクト → Get More Components から、、、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_03.png" alt="img" /></p>

<p>Google Play Services を検索して Add to App します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_04.png" alt="img" /></p>

<p>すると、プロジェクトに Google Play Services が追加されます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_05.png" alt="img" /></p>

<p>ここで一度、Xamarin Studio を再起動しておいた方が無難です。
このまま継続したら、追加されたアセンブリがうまく読み込まれてない場合がありました。</p>

<h3>4. 実装する</h3>

<p><code>MainActivity.cs</code> は、最初の内容をごっそり削除して以下のようにします。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">using</span> <span class="nn">Android.App</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.OS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">GoogleMapV2Sample</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [Activity (Label = &quot;GoogleMapV2Sample&quot;, MainLauncher = true)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">Activity</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Set our view from the &quot;main&quot; layout resource</span>
</span><span class='line'>            <span class="n">SetContentView</span><span class="p">(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">Main</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>画面定義である <code>Main.axml</code> も以下のように置き換えます。</p>

<figure class='code'><figcaption><span>Resources/layout/Main.axml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;fragment</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/map&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">class=</span><span class="s">&quot;com.google.android.gms.maps.MapFragment&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. AndroidManifest.xml への設定いろいろ</h3>

<p>たぶん一番面倒なところです。</p>

<p>まず Xamarin.Android では、最初は AndroidManifest.xml が生成されていないので、メニュー → プロジェクト → xxx のオプション から、下図のように [Add Android manifest] します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_06.png" alt="img" /></p>

<p>次に作成された AndroidManifest.xml を開いて、以下のようにします。</p>

<p>※1 のところは、最初に決めた Package名に、※2 の時は、先に取得しておいた API key に置き換えてください。</p>

<figure class='code'><figcaption><span>Properties/AndroidManifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>  <span class="na">android:versionCode=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>  <span class="na">android:versionName=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'>  <span class="na">package=</span><span class="s">&quot;com.amay077.sample.googlemapv2sample&quot;</span><span class="nt">&gt;</span>  <span class="nt">&lt;--------</span><span class="err">※1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="err">&lt;uses-feature</span> <span class="na">android:glEsVersion=</span><span class="s">&quot;0x00020000&quot;</span> <span class="na">android:required=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;com.google.android.providers.gsf.permission.READ_GSERVICES&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span>
</span><span class='line'>      <span class="na">android:name=</span><span class="s">&quot;com.amay077.sample.playservicesample.permission.MAPS_RECEIVE&quot;</span> <span class="nt">/&gt;</span>   <span class="nt">&lt;--------</span><span class="err">※1</span>
</span><span class='line'>  <span class="err">&lt;permission</span>
</span><span class='line'>      <span class="na">android:name=</span><span class="s">&quot;com.amay077.sample.playservicesample.permission.MAPS_RECEIVE&quot;</span>   <span class="err">&lt;--------※1</span>
</span><span class='line'>      <span class="na">android:protectionLevel=</span><span class="s">&quot;signature&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;application</span> <span class="na">android:label=</span><span class="s">&quot;GoogleMapV2Sample&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta-data</span>
</span><span class='line'>          <span class="na">android:name=</span><span class="s">&quot;com.google.android.maps.v2.API_KEY&quot;</span>
</span><span class='line'>          <span class="na">android:value=</span><span class="s">&quot;AIzaByD1jiFER3le_HFrkOrEhaNIsemoNoDesuU&quot;</span> <span class="nt">/&gt;</span>  <span class="nt">&lt;--------</span><span class="err">※2</span>
</span><span class='line'>  <span class="err">&lt;/application</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 動かす</h3>

<p>設定が正しくできていれば、地図が表示されるはずです。
アプリが落ちるなら Main.cs や Main.axml が、地図が表示されないなら AndroidManifest.xml や Google API Console での設定が間違っていると思います。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_07.png" alt="img" /></p>

<h2>まとめなど</h2>

<p>Google Play Service コンポーネントを使うことでライブラリプロジェクトをなくす事ができました。慣れた人にはどうってこと無い話ですが、説明する人には面倒で、始めて行う人には混乱の元になってたと思います。</p>

<p>もう一つ特筆すべきは、このコンポーネントを Google 自身が開発、提供していることです。</p>

<p>これだけでなく、<a href="http://components.xamarin.com/view/googlemapsios/">Google Map SDK for iOS</a> や <a href="http://components.xamarin.com/view/googleadmob/">Admob 用のコンポーネント</a>も Google 自身が提供しています。</p>

<p>また Microsoft も <a href="http://components.xamarin.com/view/azure-mobile-services/">Azure Mobile Service</a> を自身が提供していますし、なんなんでしょうこのプラットフォーマーの Xamarin への参入ぶりは。</p>

<p>このように本家が開発していることにより、信頼性、機能網羅性、新機能への追従などがとても充実しており、安心して使うことができます。</p>

<p>最後に、</p>

<blockquote class="twitter-tweet"><p>おおおお、すげえ！これでめんどいビルド手順必要なくなった！Google++！でも、Gmaps iOSの1.4アップデートと、Retina対応のため128dpタイルへの対応もしてください…。 / “Google Play Servi…” <a href="http://t.co/mjnN7sE0t7">http://t.co/mjnN7sE0t7</a></p>&mdash; Кочизуфан (@kochizufan) <a href="https://twitter.com/kochizufan/statuses/363116371351052290">August 2, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことなのでよろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web サイトがサクッと作れて公開できちゃう系サービスまとめ]]></title>
    <link href="http://amay077.github.io/blog/2013/07/30/online-site-builder-reviews/"/>
    <updated>2013-07-30T22:12:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/30/online-site-builder-reviews</id>
    <content type="html"><![CDATA[<p>テンプレートからデザインを選んで、文章や画像を入れて、Publish するだけでサービスや製品の Web サイトを公開できちゃう系のサービス(Online Site builder というらしい)のまとめです。</p>

<!--more-->


<ul>
<li><a href="http://www.sitebuilderreport.com/">Reviews of the Best Website Builders in 2013</a></li>
</ul>


<p>こちらのサイトをほぼパクってます。</p>

<p>NAVER でやれ！とか言われそうですが、サービス自体のトップページを並べてみて、何か感じられないかなーと。(全然レビューしてないので、コメントは個人の主観です)</p>

<h2>Squarespace</h2>

<p><a href="http://www.squarespace.com/">http://www.squarespace.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_01.png" alt="img" /></p>

<ul>
<li>トップページがカッコいいです</li>
<li>$8 / month〜</li>
</ul>


<h2>Weebly</h2>

<p>(http://www.weebly.com/)[http://www.weebly.com/]</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_02.png" alt="img" /></p>

<ul>
<li>ドラッグ＆ドロップでデザインできちゃうみたいです</li>
<li>FREE〜</li>
</ul>


<h2>Webs</h2>

<p><a href="http://www.webs.com/">http://www.webs.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_03.png" alt="img" /></p>

<ul>
<li>トップページが某ざまりんにそっくりなのですが…</li>
<li>まあスタンダードなWebサイトですね</li>
<li>$0 / month〜（広告付きらしい）</li>
</ul>


<h2>Virb</h2>

<p><a href="http://virb.com/">http://virb.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_04.png" alt="img" /></p>

<ul>
<li>トップページは適度に Flat なデザインで、このテンプレート欲しいです</li>
<li>$10 / month</li>
</ul>


<h2>Yola</h2>

<p><a href="https://www.yola.com/">https://www.yola.com/</a></p>

<ul>
<li>ちょっとオーソドックスすぎる感じがします</li>
<li>$4.95 / month〜</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_05.png" alt="img" /></p>

<h2>Edicy</h2>

<p><a href="http://www.edicy.com/">http://www.edicy.com/</a></p>

<ul>
<li>地味かなー</li>
<li>€6 / month〜</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_06.png" alt="img" /></p>

<h2>Wix</h2>

<p><a href="http://ja.wix.com/">http://ja.wix.com/</a></p>

<ul>
<li>今回の中で唯一、日本でも展開しているサービス</li>
<li>HTML5 の他に、Flash のテンプレート？もあるみたいです</li>
<li>$4 / month〜</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_07.png" alt="img" /></p>

<h2>OnePager</h2>

<p><a href="http://onepagerapp.com/">http://onepagerapp.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_08.png" alt="img" /></p>

<ul>
<li>カッコ良さげです</li>
<li>$8 / month〜</li>
</ul>


<h2>Jimdo</h2>

<p><a href="http://www.jimdo.com/">http://www.jimdo.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_09.png" alt="img" /></p>

<ul>
<li>トップページはよくある感じです</li>
<li>FREE〜</li>
</ul>


<h2>Homestead</h2>

<p><a href="http://www.homestead.com/">http://www.jimdo.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_10.png" alt="img" /></p>

<ul>
<li>唯一、電話番号が載っています（どうでもいい）</li>
<li>$4.99 / month</li>
</ul>


<h2>breezi</h2>

<p><a href="http://breezi.com/">http://www.jimdo.com/</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/online_site_builder_reviews_11.png" alt="img" /></p>

<ul>
<li><a href="http://placeit.breezi.com/">PlaceIt</a> 経由で発見したサービス</li>
<li>色や配置からテンプレートを検索できます</li>
<li>FREE?</li>
</ul>


<h1>まとめ的な何か</h1>

<p>こんなにたくさんあるとは知りませんでした。
日本だと「御社のサイト、スマホ用に変換します！」ってサービスがアホのようにありますが、そんなノリでしょうか？</p>

<p>しかし僕は Web サイト制作の仕事について詳しくないのですが、こういう系のサービスが進出してくるとどうなっちゃんでしょうね。スクラッチで Web サイト作る案件って激減して、お客さんから「このデザインテンプレートに合う素材作って」みたいな仕事が増えるのでしょうか。あるいはデザインテンプレートを自体を作るお仕事とか。</p>

<p>個人的な希望としては、ホスティングには興味がないので、</p>

<ul>
<li>作ったコンテンツをダウンロードできる（＆自分のサーバでホストできる）</li>
<li>Twitter Bootstrap フレンドリである（個別 CSS 理解するの大変だし）</li>
</ul>


<p>なサービスがあったらいいなと思います。(あるのかな？)</p>

<p>とりあえず「サービス Web サイトのプロトタイプ」を作って上司に見せる、くらいなら十分（Trial範囲内で）利用できそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Spreadsheet のトレンドグラフが超便利だった件]]></title>
    <link href="http://amay077.github.io/blog/2013/07/29/puyoquest-curry-event/"/>
    <updated>2013-07-29T18:15:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/29/puyoquest-curry-event</id>
    <content type="html"><![CDATA[<p>突然ですが「<a href="http://puyopuyoquest.sega-net.com/">ぷよクエ</a>」にハマっておりまして :)</p>

<!--more-->


<p>まあ、パズドラをパ(ryったようなゲームなんですが、そのぷよクエで先日まで、「カレー満腹祭り」というイベントが開催されておりました。
開催期間中に集めた「カレー」の数で競い、上位15000位までは限定アイテムがもらえるという多分よくあるやつです。
（とここまで Google Spreadsheet 関係なし）</p>

<p>で僕は、無課金で頑張っているので、アイテムもらえる15000位ギリギリのところを狙うために、毎日15000位に必要なカレー枚数を記録していました。
その記録から推移をみて「最終順位15000位以内に必要なカレー枚数を予想しよう」としたわけですね。</p>

<p>そこでお待たせしました Google Spreadsheet の登場です。
最初は EXCEL の「散布図」を使っていたのですが、別の PC でも、iPad からもデータ入力したいなあ、と思ったのが Google Spreadsheet に切り替えた理由だったのですが、グラフも出せないかなあ、なんかあるよね？と思ってみつけたのが「トレンドグラフ」の機能です。</p>

<p>まあ、どんなグラフかを見てもらいましょうか。</p>

<ul>
<li><a href="https://docs.google.com/spreadsheet/ccc?key=0AsXQVtRWN2mWdDRfUkwzSlQxdlVWd2VHck9VMFNWU0E&amp;usp=sharing">ぷよクエ カレーイベント枚数推移</a></li>
</ul>


<p>株価チャート(のローソクじゃないやつ)みたいですね。
時刻列＋複数の値列を選択するだけで、このような見た目にしてくれるので、とても分析しやすいです。
時刻を絞る機能もついてますし。</p>

<p>このグラフで分かったぷよクエイベントの特性は、</p>

<ul>
<li>イベント最終日までは、初日のペースのまま線形推移する</li>
<li>イベント最終日は、初日のペースの２倍増加する</li>
<li>イベント締め切り３時間前からの伸びがハンパない</li>
</ul>


<p> という事です。
 イベント締め切り間際の瞬間で見るとものすごい勢いなのですが、日単位で見るとたかだか通常の倍程度なのだという事が分かりました。</p>

<p> 次回のイベントの参考にしたいと思います。
 ぷよクエ の記事なのか、 Google Spreadsheet の記事なのかよく分からなくなりましたが、以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio で複数のソリューションを開く方法]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/open-multi-solution-in-xamarin-studio/"/>
    <updated>2013-07-28T13:52:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/open-multi-solution-in-xamarin-studio</id>
    <content type="html"><![CDATA[<p>わかりにくいのでメモっておく。</p>

<!--more-->


<h3>1. ソリューションをひとつ開く</h3>

<h3>2. ２つ目のソリューションを開く</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/open_multi_solution_in_xamarin_studio_01.png" alt="img1" /> この時、「現在のワークスペースを閉じる」のチェックを <strong>外す</strong></p>

<h3>3. すると２つ目のソリューションが追加されてます。</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/open_multi_solution_in_xamarin_studio_02.png" alt="img1" /></p>

<p>ソリューションを新規作成する時には行えないようです。
分かりにくいよママン。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pull up to Close を実装してみる、Xamarin.iOS で]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios/"/>
    <updated>2013-07-28T13:51:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios</id>
    <content type="html"><![CDATA[<p>イマドキのスマホアプリでは Pull to Refresh（引っ張って更新）を実装してるアプリをよく目にするのですが、RSS Reader の Feedly では Pull up to Close（上に引っぱって閉じる）も採用しています。</p>

<p>この操作性がなかなか使いやすかったので、自分でも実装してみました。</p>

<!--more-->


<h2>デモ</h2>

<p>こんな感じ。
WebView なんですが、一番下までスクロールして、さらに上に引っ張ると &#8220;Pull up to Close&#8221; → &#8220;Release to Close&#8221; とラベルが変わり、そこで離すとコールバックします。</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/AP6xPqwwXMI?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>


<h2>実装してみたコード</h2>

<p><a href="http://xamarin.com/">Xamarin.iOS</a> ですから、C# です。</p>

<p>UIWebView でやってますが、ScrollView なコントロールならだいたい同じ感じでいけるんじゃないかと思います。</p>

<figure class='code'><figcaption><span>PullUpToCloseSampleViewController.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">PullUpToCloseSampleViewController</span> <span class="p">:</span> <span class="n">UIViewController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">PullUpToCloseSampleViewController</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="s">&quot;PullUpToCloseSampleViewController&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">ViewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">ViewDidLoad</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// WebView が持ってる ScrollView、よく使うので変数化しておく</span>
</span><span class='line'>        <span class="c1">// webView は Interface Builder で UIWebView を Outlet にしたもの。</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">scrollView</span> <span class="p">=</span> <span class="n">webView</span><span class="p">.</span><span class="n">ScrollView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Bounces の影を消す via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview</span>
</span><span class='line'>        <span class="n">scrollView</span><span class="p">.</span><span class="n">Subviews</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span> <span class="k">is</span> <span class="n">UIImageView</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">ToList</span><span class="p">().</span><span class="n">ForEach</span><span class="p">(</span><span class="n">v</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">.</span><span class="n">Hidden</span> <span class="p">=</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 上に引っ張った時に見える背景とラベル</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">bounceBackground</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UIView</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">RectangleF</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">webView</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span> <span class="n">webView</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">Height</span><span class="p">));</span>
</span><span class='line'>        <span class="n">bounceBackground</span><span class="p">.</span><span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">LightGray</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">bounceLabel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UILabel</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">RectangleF</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">webView</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">30f</span><span class="p">,</span> <span class="n">webView</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span> <span class="m">30f</span><span class="p">));</span>
</span><span class='line'>        <span class="n">bounceLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Pull up to Close&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bounceLabel</span><span class="p">.</span><span class="n">TextAlignment</span> <span class="p">=</span> <span class="n">UITextAlignment</span><span class="p">.</span><span class="n">Center</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bounceLabel</span><span class="p">.</span><span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">Clear</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bounceLabel</span><span class="p">.</span><span class="n">Opaque</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 背景とラベルを WebView の一番奥に追加する</span>
</span><span class='line'>        <span class="n">webView</span><span class="p">.</span><span class="n">InsertSubview</span><span class="p">(</span><span class="n">bounceLabel</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">webView</span><span class="p">.</span><span class="n">InsertSubview</span><span class="p">(</span><span class="n">bounceBackground</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 適当な URL を読み込み</span>
</span><span class='line'>        <span class="n">webView</span><span class="p">.</span><span class="n">LoadRequest</span><span class="p">(</span><span class="n">NSUrlRequest</span><span class="p">.</span><span class="n">FromUrl</span><span class="p">(</span><span class="k">new</span> <span class="n">NSUrl</span><span class="p">(</span><span class="s">&quot;http://yahoo.co.jp/&quot;</span><span class="p">)));</span>
</span><span class='line'>      
</span><span class='line'>        <span class="c1">// 閉じるのに必要な分だけ上に引っ張ったら true になる</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">canClose</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ドラッグ開始時にフラグOFF(一応)</span>
</span><span class='line'>        <span class="n">scrollView</span><span class="p">.</span><span class="n">DraggingStarted</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">canClose</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ドラッグ終了時、必要量引っ張っていたら OnCloseByPullUp を呼ぶ</span>
</span><span class='line'>        <span class="n">scrollView</span><span class="p">.</span><span class="n">DraggingEnded</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">canClose</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">OnCloseByPullUp</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// スクロールした時にいろいろやる</span>
</span><span class='line'>        <span class="n">scrollView</span><span class="p">.</span><span class="n">Scrolled</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">labelFrame</span> <span class="p">=</span> <span class="n">bounceLabel</span><span class="p">.</span><span class="n">Frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// コンテンツの一番下まで表示してさらに引っ張ったサイズ</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">offsetY</span> <span class="p">=</span> <span class="p">(</span><span class="n">scrollView</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">Height</span> <span class="p">+</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">ContentOffset</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'>                <span class="p">-</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">ContentSize</span><span class="p">.</span><span class="n">Height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 50px 上に引っ張ったら閉じるものとする</span>
</span><span class='line'>            <span class="n">canClose</span> <span class="p">=</span> <span class="n">offsetY</span> <span class="p">&gt;</span> <span class="m">50f</span><span class="p">;</span>
</span><span class='line'>            <span class="n">bounceLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">canClose</span> <span class="p">?</span> <span class="s">&quot;Release to Close&quot;</span> <span class="p">:</span> <span class="s">&quot;Pull up to Close&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// ラベルがいつまでも移動しないように</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">offsetY</span> <span class="p">&gt;</span> <span class="n">labelFrame</span><span class="p">.</span><span class="n">Height</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">offsetY</span> <span class="p">=</span> <span class="n">labelFrame</span><span class="p">.</span><span class="n">Height</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// ラベルがドラッグと共に下からせり出してくるように</span>
</span><span class='line'>            <span class="n">labelFrame</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">offsetY</span><span class="p">;</span>
</span><span class='line'>            <span class="n">bounceLabel</span><span class="p">.</span><span class="n">Frame</span> <span class="p">=</span> <span class="n">labelFrame</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// &quot;Release to Close&quot; で離すと呼ばれる</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">OnCloseByPullUp</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">v</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UIAlertView</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;Close this view&quot;</span><span class="p">,</span>  <span class="k">null</span><span class="p">,</span> <span class="s">&quot;Close&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">v</span><span class="p">.</span><span class="n">Show</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>やってる事</h2>

<ol>
<li>ScrollView の「引っ張った時に見える場所（= Bounce というらしい）」の影を消す。 via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview</li>
<li>背景と、ラベルを WebView 内の一番奥に挿入する（引っ張った時にのみ見えるように）</li>
<li>あとはイベントハンドラでの処理。スクロール中に、「最下部で引っ張り中」だったら &#8220;Pull up to Close&#8221; ラベルをアニメーションさせながら表示する。50px 以上引っ張ってたら &#8220;Release to Close&#8221; にラベルを変える。「閉じられるよ」フラグも ON にしとく。</li>
<li>ドラッグ終了イベントで、「閉じられるよ」フラグが立ってたら、コールバックする。</li>
</ol>


<h2>今後</h2>

<p>もうちょっとライブラリっぽくしたいですね。あと引っ張り中にアイコンとか表示させたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS でジェスチャを認識する]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/recognition-gestures-using-xamarin-ios/"/>
    <updated>2013-07-28T13:49:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/recognition-gestures-using-xamarin-ios</id>
    <content type="html"><![CDATA[<p><a href="http://xamarin.com/">Xamarin.iOS</a> でも <code>UIGestureRecognizer</code> が普通に使えるわけですが、Objective-C に比べてコードが短く書けて感動した話です。</p>

<!--more-->


<p>本日の Obj-C の先生はこちら。</p>

<ul>
<li><a href="http://labs.techfirm.co.jp/ipad/cho/466">Gesture Recognizers 〜簡単にタッチ操作を検知 | iPad Techfirm Lab </a></li>
</ul>


<p>このサンプルを Xamarin.iOS に移植してみます。</p>

<h2>サンプルコード</h2>

<figure class='code'><figcaption><span>GesturesSample_ViewDidLoad.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">// Tap gesture</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddGestureRecognizer</span><span class="p">(</span><span class="k">new</span> <span class="n">UITapGestureRecognizer</span><span class="p">(</span><span class="n">tap</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Double Tap.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NumberOfTapsRequired</span> <span class="p">=</span> <span class="m">2</span> <span class="c1">// Double tap </span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Drag(Pan) gesture</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddGestureRecognizer</span><span class="p">(</span><span class="k">new</span> <span class="n">UIPanGestureRecognizer</span><span class="p">(</span><span class="n">pan</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">p</span> <span class="p">=</span> <span class="n">pan</span><span class="p">.</span><span class="n">TranslationInView</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">v</span> <span class="p">=</span> <span class="n">pan</span><span class="p">.</span><span class="n">VelocityInView</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Pan. transration:{0}, velocity:{1}&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pinch gesture</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddGestureRecognizer</span><span class="p">(</span><span class="k">new</span> <span class="n">UIPinchGestureRecognizer</span><span class="p">(</span><span class="n">pin</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">scale</span> <span class="p">=</span> <span class="n">pin</span><span class="p">.</span><span class="n">Scale</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">v</span> <span class="p">=</span> <span class="n">pin</span><span class="p">.</span><span class="n">Velocity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Pinch. scale:{0}, velocity:{1}&quot;</span><span class="p">,</span> <span class="n">scale</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swipe gesture</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddGestureRecognizer</span><span class="p">(</span><span class="k">new</span> <span class="n">UISwipeGestureRecognizer</span><span class="p">(</span><span class="n">sw</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Swipe.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Rotate gesture</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddGestureRecognizer</span><span class="p">(</span><span class="k">new</span> <span class="n">UIRotationGestureRecognizer</span><span class="p">(</span><span class="n">ro</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">rotation</span> <span class="p">=</span> <span class="n">ro</span><span class="p">.</span><span class="n">Rotation</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">v</span> <span class="p">=</span> <span class="n">ro</span><span class="p">.</span><span class="n">Velocity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Rotate. rotation:{0}, velocity:{1}&quot;</span><span class="p">,</span> <span class="n">rotation</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Long press gesture</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">View</span><span class="p">.</span><span class="n">AddGestureRecognizer</span><span class="p">(</span><span class="k">new</span> <span class="n">UILongPressGestureRecognizer</span><span class="p">(</span><span class="n">lp</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Long press.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>ViewController 全体のソースは <a href="https://gist.github.com/amay077/6094422">コチラ</a></p>

<p>元のサイトのサンプルコードは 70行弱ありますが、Xamarin.iOS では 45行くらいで書けました。しかも、GestureRecongnizer の登録とハンドラが同じ場所に書けるので見やすい。</p>

<p>しかしこれ、ハンドラとか GesutureRecognizer、破棄しなくていいのかなあ。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインでサクッとスライド作ってシェアできる Slides が便利だった件]]></title>
    <link href="http://amay077.github.io/blog/2013/07/24/slides-is-very-useful/"/>
    <updated>2013-07-24T19:18:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/24/slides-is-very-useful</id>
    <content type="html"><![CDATA[<p>先日の <a href="http://connpass.com/event/2847/">日本Androidの会浜松支部　第27回ミーティング -AndroidとHTML5-</a> で HTML5 中心の話題にも関わらず Xamarin の LT をした訳ですが、むりやりこじつけるために、HTML5 でプレゼンスライドを作りました。</p>

<!--more-->


<p>この手のもので最も有名なのが <a href="http://lab.hakim.se/reveal-js/">reveal.js</a> というライブラリですが、環境準備が面倒だったので、HTML5 で作れてオンラインでシェアできるものを探してたどり着いたのが Slides(slid.es) でした。</p>

<ul>
<li>[Slides - The easiest way to create and share beautiful presentations.] (http://slid.es/)</li>
</ul>


<p>使い方は簡単で、Google か Facebook のアカウントでサインインでき、無料で使えます。</p>

<p>実はこれ reveal.js を使ったサービスで、機能もほぼ相違ないのですが、PDF へのエクスポートやデザインテーマは有償の Pro 版でないと使えなくなっています。reveal.js を直接使えば、エクスポートや Markdown 対応もできるので、まあ SaaS としての戦略でしょうか。</p>

<p>reveal.js はライブラリなのでコンテンツは自力で HTML or Markdown で書く必要がありますが、Slides にはリッチエディタが付いているので、簡単に資料を書くことができます。</p>

<p>凝った演出はできませんが、 LT くらいの資料なら十分実用できます。そのままシェアできますし。(逆に Private にするには Pro 版が必要)</p>

<p>というわけで reveal.js 使いたいけどいろいろ面倒そう、という人は Slides を試されると良いかと思います。</p>

<p>最後に、その時発表した Xamarin の LT 資料を貼って終わります。
Xamarin もどうぞよろしくおねがいします。</p>

<iframe src="http://slid.es/amay/intro_of_xamarin/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio でコードテンプレートを使う]]></title>
    <link href="http://amay077.github.io/blog/2013/07/24/using-code-template-on-xamarin-studio/"/>
    <updated>2013-07-24T17:48:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/24/using-code-template-on-xamarin-studio</id>
    <content type="html"><![CDATA[<p>Visual Studio や Eclipse とか、IDE ならだいたい備えているコードテンプレート、呼び名はそれぞれ違いますが、<code>for</code> ってタイプすると <code>for (object o : items) {  }</code> 的なコードのひな形を生成してくれる機能の事です。</p>

<!--more-->


<p>Xamarin Studio にも当然ありまして、その使い方を説明します。</p>

<h2>きっかけ</h2>

<p>MvvmCross っていうフレームワークの Tutorial 動画で Visual Studio を使っているんですが、その中で多用されてるので、真似してみたくなりました。</p>

<p>例えばこれ</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=_DHDMNB_IeY&amp;list=PLR6WI6W1JdeYSXLbm58jwAKYT7RQR31-W&amp;feature=player_detailpage&amp;t=178">N=0 : A first MvvmCross Application (N+1 days of MvvmCross) | N+1 days of MvvmCross</a></li>
</ul>


<h2>手順</h2>

<h3>1. Xamarin Studio の Preference を開く</h3>

<p>システムメニュー → Preference → テキストエディタ → コード テンプレート です。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_01.png" alt="img1" /></p>

<h3>2. コードテンプレートを作成する</h3>

<p>追加 で &#8220;新しいテンプレート&#8221; の画面を開き、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_02.png" alt="img2" /></p>

<p>のように設定します。</p>

<ul>
<li>ショートカット : pmvx</li>
<li>グループ : C#</li>
<li>説明 : 適当に</li>
<li>Mime : text/x-csharp</li>
<li>[展開されるテンプレート] にチェックを入れる</li>
</ul>


<p>テンプレート テキスト は以下の通り</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="err">$</span><span class="n">type</span><span class="err">$</span> <span class="err">$</span><span class="n">property</span><span class="err">$</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span> <span class="err">$</span><span class="n">type</span><span class="err">$</span> <span class="err">$</span><span class="n">Property</span><span class="err">$</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="err">$</span><span class="n">property</span><span class="err">$</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">set</span> <span class="p">{</span> <span class="err">$</span><span class="n">property</span><span class="err">$</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="err">$</span><span class="n">Property</span><span class="err">$</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$type$</code>, <code>$property$</code>, <code>$Property$</code> という3つの変数を使っています。画面右端にあるドロップダウンで、各変数が選択できるので、それぞれ Default で既定値を設定します。</p>

<p>ここでは、以下のようにしました。</p>

<ul>
<li>type : object</li>
<li>property : _property</li>
<li>Property : MyProperty</li>
</ul>


<p>OK を押して保存します。</p>

<h3>3.  使ってみる</h3>

<p>コードエディタで <code>pmvx</code> とタイプすると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_03.png" alt="img2" /></p>

<p>となり、タブを2回ほど押すと、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_04.png" alt="img2" /></p>

<p>と、テンプレートコードが挿入されます。
あとは、ハイライトされている部分を変更すると、テンプレート内も連動して変更されます。</p>

<p>これでコード入力が楽になりました。</p>

<p>コードテンプレートのインポート／エクスポートや、Visual Studio との互換性なども調べてみたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio で MvvmCross を使うための準備]]></title>
    <link href="http://amay077.github.io/blog/2013/07/22/using-pcl-on-xamarin-studio/"/>
    <updated>2013-07-22T20:46:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/22/using-pcl-on-xamarin-studio</id>
    <content type="html"><![CDATA[<p>クロスプラットフォーム MVVM フレームワーク「<a href="https://github.com/slodge/MvvmCross">MvvmCross</a>」を Mac の Xamarin Studio で使うための準備についてです。</p>

<!--more-->


<p>基本は、</p>

<ul>
<li><a href="http://stackoverflow.com/questions/17653208/getting-pcl-mvvmcross-nuget-and-xamarin-studio-to-play-nice-on-mac">monotouch - Getting PCL, Mvvmcross, Nuget and Xamarin Studio to play &#8220;nice&#8221; on Mac - Stack Overflow</a></li>
</ul>


<p>のトレース。主には PCL と Nuget が正しく動くようにする手順です。</p>

<h2>前提条件</h2>

<p>必要な(というか試した)環境は以下の通り。
（Xamarin の PCL サポートがまだ「進行中」なので、将来的には変わる可能性大）</p>

<ul>
<li>Xamarin Studio Version 4.0.10 (beta)</li>
<li>Xamarin.Android Version: 4.8.0 (beta)</li>
<li>Xamarin.iOS Version: 6.3.8.11 (beta)</li>
<li>Xamarin Studio Add-in NuGet Package Management Version 0.5</li>
<li>Mac OS X 10.8.4</li>
</ul>


<h2>手順</h2>

<h3>Xamarin Studio</h3>

<ol>
<li>Mac に Xamarin Studio を入れて、Beta チャンネルに切り替えて更新。</li>
<li>アドインマネージャから NuGet Package Management をインストール。</li>
</ol>


<h3>.NETPortable DLLs を Win機からコピってくる</h3>

<p>Win機の <code>C:¥Program Files (x86)¥Reference Assemblies¥MicrosoftFramework.NETPortable</code> を、Mac の <code>/Library/Frameworks/Mono.framework/External/xbuild-frameworks/.NETPortable/</code> へコピー。</p>

<p>Win機がない場合は、<a href="http://amay077.github.io/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive/">これ</a> などで Win仮想環境を作り、<a href="http://www.microsoft.com/visualstudio/jpn/downloads">Visual Studio Ultimate 2012 90日間試用版</a> を入れるとよい(Express 版は上記DLLsがないのでNG)。</p>

<h3>Nuget にパッチをあててビルド</h3>

<p><a href="http://stackoverflow.com/questions/17653208/getting-pcl-mvvmcross-nuget-and-xamarin-studio-to-play-nice-on-mac">ここ</a> の <strong>Patch to Nuget.Core.dll:</strong> にあるテキストを適当なファイルに保存(ここでは <code>patch.diff</code> とする)して、以下のコマンドを実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://git01.codeplex.com/nuget
</span><span class='line'><span class="nb">cd </span>nuget
</span><span class='line'>git checkout -b 2.6 origin/2.6
</span><span class='line'>
</span><span class='line'>patch -p1 &lt; patch.diff
</span><span class='line'>
</span><span class='line'><span class="nb">cd </span>src/Core
</span><span class='line'>xbuild
</span><span class='line'>
</span><span class='line'>cp bin/Debug/NuGet.Core.dll  ~/Library/Application<span class="se">\ </span>Support/XamarinStudio-4.0/LocalInstall/Addins/MonoDevelop.PackageManagement.0.5/NuGet.Core.dll
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>以上で、環境準備は終わり。</p>

<h2>試す</h2>

<ol>
<li>Xamarin Studio で Portable Class Library を作成する</li>
<li>プロジェクト設定を見ると Xamarin.Android、Xamarin.iOS などがあるが、これらを<strong>チェックしてOKしても適用されてない</strong> <img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_pcl_on_xamarin_studio01.png" alt="img1" /></li>
<li>Nuget Manager から mvvmcorss で検索して &#8220;MvvmCross - Hot Tuna  Starter Pack&#8221; を Add してもエラーになる。<img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_pcl_on_xamarin_studio02.png" alt="img1" /></li>
</ol>


<p>うーん、ダメか？</p>

<h2>プロジェクトファイルをちょっと修正する</h2>

<p>ポータブルクラスライブラリのプロジェクトファイル(xxx.csproj) をテキストエディタで開き、<code>&lt;TargetFrameworkProfile&gt;</code> の値を <code>Profile104</code> に書き換える。(修正前は Profile1 になってた。なぜ Profile104 かと言えば、Visual Studio で作った PCL プロジェクトのプロファイルが 104 だったから、という程度の理解レベル)</p>

<figure class='code'><figcaption><span>xxx.csproj</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Project</span> <span class="na">DefaultTargets=</span><span class="s">&quot;Build&quot;</span> <span class="na">ToolsVersion=</span><span class="s">&quot;4.0&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;PropertyGroup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Configuration</span> <span class="na">Condition=</span><span class="s">&quot; &#39;$(Configuration)&#39; == &#39;&#39; &quot;</span><span class="nt">&gt;</span>Debug<span class="nt">&lt;/Configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Platform</span> <span class="na">Condition=</span><span class="s">&quot; &#39;$(Platform)&#39; == &#39;&#39; &quot;</span><span class="nt">&gt;</span>AnyCPU<span class="nt">&lt;/Platform&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ProductVersion&gt;</span>10.0.0<span class="nt">&lt;/ProductVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;SchemaVersion&gt;</span>2.0<span class="nt">&lt;/SchemaVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ProjectGuid&gt;</span>{50D8E04F-FDE0-4A65-B388-5698BEFE8DC5}<span class="nt">&lt;/ProjectGuid&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ProjectTypeGuids&gt;</span>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}<span class="nt">&lt;/ProjectTypeGuids&gt;</span>
</span><span class='line'>    <span class="nt">&lt;OutputType&gt;</span>Library<span class="nt">&lt;/OutputType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;RootNamespace&gt;</span>Portable2<span class="nt">&lt;/RootNamespace&gt;</span>
</span><span class='line'>    <span class="nt">&lt;AssemblyName&gt;</span>Portable2<span class="nt">&lt;/AssemblyName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;TargetFrameworkProfile&gt;</span>Profile104<span class="nt">&lt;/TargetFrameworkProfile&gt;</span>    <span class="nt">&lt;--Here</span><span class="err">!!!!!</span>
</span><span class='line'>    <span class="err">&lt;TargetFrameworkVersion</span><span class="nt">&gt;</span>v4.0<span class="nt">&lt;/TargetFrameworkVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/PropertyGroup&gt;</span>
</span><span class='line'>  <span class="nt">&lt;PropertyGroup</span> <span class="na">Condition=</span><span class="s">&quot; &#39;$(Configuration)|$(Platform)&#39; == &#39;Debug|AnyCPU&#39; &quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;DebugSymbols&gt;</span>true<span class="nt">&lt;/DebugSymbols&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>再度試す</h2>

<p>もう一度プロジェクトを開いて Nuget から &#8220;MvvmCross - Hot Tuna  Starter Pack&#8221; を Add すると、成功する。プロジェクトツリーを見ると必要なDLLやソースコードが配置されている。</p>

<p>これで Xamarin Studio でも PCL が使えそう。
MvvmCross の Tutorial - <a href="http://mvvmcross.wordpress.com/">MvvmCross N+1 Table of Context</a> を試せます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で Windows の仮想マシンを使って IE のテスト環境を構築する]]></title>
    <link href="http://amay077.github.io/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive/"/>
    <updated>2013-07-21T15:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive</id>
    <content type="html"><![CDATA[<p>Microsoft の <a href="http://www.modern.ie/ja">modern.IE</a> というサイトで、Webサイトの IE対応を支援するサービスをいくつか提供していますが、その中に、「IEx 入りの仮想マシンの提供」が行われています。</p>

<!--more-->


<p>Virtual PC, Hyper-V, VirtualBox, VMware Fusion, Parallels などの主要な仮想環境用のイメージを配布しています。</p>

<p>ただし、仮想マシンの期限が 90days です。また OS の言語設定が英語です。</p>

<p>90days を過ぎるとまた再構築しなければならないので、日本語環境で使用するための初期設定をメモっておきます。</p>

<h2>仮想マシンをダウンロードする</h2>

<p>http://www.modern.ie/ja/virtualization-tools#downloads</p>

<p>から、ホストPC の OS と仮想マシンの形式を選択します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive01.png" alt="img1" /></p>

<p>次に、テストしたい IE と OS のバージョンの組み合わせから、目的の仮想マシンをダウンロードします。Mac の場合は &#8220;Grab them all with cURL&#8221; の内容を Terminal にコピペして、一括ダウンロードができます。</p>

<p>私は、ホストが Mac、目的は IE10+Win7 をダウンロードしました。</p>

<p>ダウンロードすると、 IE10.Win7.For.MacVMware.part01.sfx 〜 IE10.Win7.For.MacVMware.part04.rar というファイルができているので、これを結合するために、Terminal で、以下のコマンドを実行します。(上のサイトの 「手順」 に書いてある内容です)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>chmod +x IE10.Win7.For.MacVMware.part01.sfx
</span><span class='line'>./IE10.Win7.For.MacVMware.part01.sfx
</span></code></pre></td></tr></table></div></figure>


<p>コマンドの処理が終わると <code>IE10.Win7.For.MacVMware.vmwarevm</code>(9.75GB) ができています。これが仮想マシンのイメージファイルです。</p>

<h2>仮想マシンを起動する</h2>

<p>ファイルを直接実行するなり、仮想マシンのマネージャ使うなりして、仮想マシンを起動します。</p>

<p>途中、「仮想マシンのアップグレードが必要です」と言われたので「はい」と答えました。
「この仮想マシンは移動またはコピーされた可能性があります。よく分からない場合は、[コピーしました] を選択してください。」と言われたので、よくわからないので「コピーしました」と答えました。</p>

<p>起動するとこんな画面になります。
ネットワークドライバなどがインストールされて、ホストPC とブリッジ接続でインターネットにもつながります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive02.png" alt="img1" /></p>

<h2>日本語キーボードを設定する</h2>

<p>まず、キーボードが英語なので、日本語キーボードを導入します。
デバイスマネージャを開きます。
スタートメニュー → 検索ボックスに <code>devmgmt.msc</code> を打ち込むのが（説明上）手っ取り早いです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive03.png" alt="img1" /></p>

<p>Keyboards - Standard PS/2 Keyboard を右クリックして Properties を表示し、Driver タブから [Update Driver] ボタンを押します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive04.png" alt="img1" /></p>

<p>&#8220;Browse my computer …&#8221; を押します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive05.png" alt="img1" /></p>

<p>&#8220;Let me pick from…&#8221; を押します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive06.png" alt="img1" /></p>

<p>Show compatible hardware のチェックを <strong>外し</strong> ます。
次に (Standard keyborads) から &#8220;Japanese PS/2 Keyboard (106/109 Key Ctrl + Eisuu)&#8221; を選択して Next を押します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive07.png" alt="img1" /></p>

<p>ウィザードの手順に従ってインストール完了後、仮想マシンを一旦再起動します。</p>

<p><strong>再起動後、この時点でもまだキーボード配列は英語のままです。</strong></p>

<p>次にシステムの言語設定を Japanese にします。</p>

<p>コントロールパネル から &#8220;Change display language&#8221; を押します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive08.png" alt="img1" /></p>

<p>&#8220;Administrative&#8221; タブから &#8220;Change system locale&#8221; を押し、&#8221;Japanese&#8221; を選択します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive09.png" alt="img1" /></p>

<p>その後、また再起動します。</p>

<p>再起動後、タスクトレイに [EN] という言語選択のアイコンが表れるので、[JP] にすると日本語キーボードになります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive11.png" alt="img1" /></p>

<p>いちいち切り替えるのは面倒なので、デフォルトを Japanese にしておきます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive12.png" alt="img1" /></p>

<p>ついでに、時刻や通過表示も Japanese にします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive13.png" alt="img1" /></p>

<p>忘れていました。タイムゾーンの変更もしておきます。
コントロールパネル の &#8220;Change the time zone&#8221; から、[Osaka, Sapporo, Kyoto] を選択します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/how_to_use_ie_testdrive14.png" alt="img1" /></p>

<h2>表示を日本語にする</h2>

<p>この Windows 7 は Enterprise Edition らしいので、</p>

<ul>
<li><a href="http://support.microsoft.com/kb/972813/ja">Windows 7 Ultimate または Windows 7 Enterprise を搭載しているコンピューターに提供される Windows 7 の言語パック</a></li>
</ul>


<p>にある方法で日本語の言語パックを導入できるかなーと思ったんですが、Windows Update で言語パックの選択が表れず、うまくいきませんでした。</p>

<p>どうしても日本語表示がいい！という方は、公式な方法ではないようですが、こちらの方法で日本語化できるようです。(おすすめはしないのでリンク貼りません、自己責任で。)</p>

<p>ttp://nagabuchi.jugem.jp/?eid=443</p>

<h2>Windows Update とかウイルス対策とか</h2>

<p>テスト環境と言えど、最低限のセキュリティ対策は行なっておきましょう。
Windows Update を行なって最新の状態に、ウイルス対策は <a href="http://windows.microsoft.com/ja-jp/windows/security-essentials-download">Microsoft Security Essentials</a> をインストールします。</p>

<p>これで最低限の環境設定ができました。
ではまた３ヶ月後にお会いしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 製のチャート描画ライブラリのメモ]]></title>
    <link href="http://amay077.github.io/blog/2013/07/17/list-of-chart-library-for-javascript/"/>
    <updated>2013-07-17T19:39:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/17/list-of-chart-library-for-javascript</id>
    <content type="html"><![CDATA[<p>Javascript 製のチャート描画ライブラリをいくつか調べたので備忘録として残しておく。</p>

<!--more-->


<p>やりたいのは、ストリーミングで次々やってくるデータをリアルタイムに表示する事。しかも順方向だけじゃなくて過去方向にも戻りたい。</p>

<h2>smoothiecharts</h2>

<p>http://smoothiecharts.org/</p>

<p>シンプルで、使うのも簡単。が、逆再生ができるのかよく分からなかったので保留。</p>

<h2>Cubism.js</h2>

<p>http://square.github.io/cubism/</p>

<p>言わずと知れたビジュアライゼーションライブラリ <a href="http://d3js.org/">D3</a> のプラグイン。
なんか見た目がクール。
あまり突っ込んで調べてないので、要件を満たすかは不明。
ちなみにモバイル決済の Square によるオープンソースプロジェクト。
D3 自体でもいろいろなチャート描画ができるが、なんか勝手に Fat なイメージを持ってる。</p>

<h2>Flot</h2>

<p>http://www.flotcharts.org/</p>

<p>こちらは jQuery のプラグイン。</p>

<p>使い方が簡単で、配列を描画させてるだけだったので、配列操作で逆再生にも対応できそう。</p>

<h2>Google Chart</h2>

<p>https://developers.google.com/chart</p>

<p>大御所。
なんか &#8220;Connect to your data in realtime&#8221; って謡ってるので、できそうな感じもするが試してない。これも高機能であるが故にレスポンス大丈夫かなあと勝手に思っている。</p>

<h2>amCharts</h2>

<p>https://amcharts.zendesk.com/entries/22592917-Creating-charts-with-real-time-data</p>

<p>amCharts というプロダクトで、リアルタイムなチャートが実現できる模様。参考程度に。</p>

<h2>その他</h2>

<p>やりたいことは株価チャートに近いのでそっち方面で探すとたくさんありそうだけど、株価に特化しちゃってて機能過多＆使いづらい感。</p>

<h2>参考</h2>

<p>タイムリーにも同じようなまとめをしてくださってる方が居たのでメモ</p>

<ul>
<li><a href="http://qiita.com/hurutoriya/items/727296839a2ec638fdc4">グラフ描画に良さげなJavaScriptライブラリ - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service が Foreground で動いているか確認する]]></title>
    <link href="http://amay077.github.io/blog/2013/06/14/viewing-is-service-foreground/"/>
    <updated>2013-06-14T18:11:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/06/14/viewing-is-service-foreground</id>
    <content type="html"><![CDATA[<p>Android で「死ににくいサービス」を作るには <a href="http://developer.android.com/reference/android/app/Service.html#startForeground(int,%20android.app.Notification">Service.startForegound</a> を呼び出す必要がありますが、動いてるサービスがちゃんと「Foregound になってるか？」は以下のようにして確認できます。(Notification 表示が強制されるから通知バー見ればいいじゃん、と言われればそうなんですけど、ちゃんとしたエビデンスっぽいのが欲しくて)</p>

<!--more-->


<h2>手順</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>adb shell dumpsys activity s &lt;サービス名&gt;
</span></code></pre></td></tr></table></div></figure>


<p>&lt;サービス名> はサービスの完全名称を入れます。AndroidManifest.xml の <code>&lt;service android:name=</code> で定義したやつ。</p>

<p>実行すると以下のように出力されます。</p>

<blockquote><p>ACTIVITY MANAGER SERVICES (dumpsys activity services)
  User 0 active services:
  * ServiceRecord{41b2dd18 u0 com.amay077.android.gpsfaker/.service.GpsSignalService}</p>

<pre><code>intent={cmp=com.amay077.android.gpsfaker/.service.GpsSignalService}
packageName=com.amay077.android.gpsfaker
processName=com.amay077.android.gpsfaker
baseDir=/data/app/com.amay077.android.gpsfaker-1.apk
dataDir=/data/data/com.amay077.android.gpsfaker
app=ProcessRecord{416e19e8 3209:com.amay077.android.gpsfaker/u0a10072}
isForeground=true foregroundId=2130968576 foregroundNoti=Notification(pri=0 contentView=com.amay077.android.
</code></pre>

<p>(以下省略)</p></blockquote>

<p><code>isForegound=true</code> と表示されているので、確かに「このサービスはフォアグラウンドだ」と分かります。サービス側で <code>startForeground</code> を呼び出さなかった場合は、この項目は表れません。</p>

<p><code>dumpsys</code> 今までコマンドめんどいと思ってあまり使ってませんでしたすいませんでした(汗</p>

<h2>参考</h2>

<p>大変参考になりました。</p>

<ul>
<li><a href="http://yuki312.blogspot.com/2013/02/androidservicedump.html">Yukiの枝折: Android:Service.dumpでサービスの状態をダンプする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WakeLock の状態を確認する]]></title>
    <link href="http://amay077.github.io/blog/2013/06/13/view-wakelock-status/"/>
    <updated>2013-06-13T20:58:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/06/13/view-wakelock-status</id>
    <content type="html"><![CDATA[<p>どのアプリが WakeLock を取得しているかを見る方法。</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>adb shell dumpsys power
</span></code></pre></td></tr></table></div></figure>


<p>を実行して、ずらっと出力される中から &#8220;Wake Locks:&#8221; を探す。
出力されるのはこんな感じの情報。</p>

<blockquote><p>POWER MANAGER (dumpsys power)</p>

<p>Power Manager State:
 mDirty=0x0
 (中略)</p>

<p>Settings and Configuration:
 mDreamsSupportedConfig=true
 (中略)</p>

<p>Screen off timeout: 30000 ms
Screen dim duration: 6000 ms</p>

<p>Wake Locks: size=1
 SCREEN_BRIGHT_WAKE_LOCK        &#8216;WindowManager&#8217; ON_AFTER_RELEASE (uid=1000, pid=389, ws={WorkSource: uids=[10070]})</p>

<p>(以下省略)</p></blockquote>

<p>&#8220;Wake Locks: size=1&#8221; となっており、
&#8216;WindowManager&#8217; という TAG で <code>SCREEN_BRIGHT_WAKE_LOCK</code> が取得されているのが分かる。</p>

<h2>参考</h2>

<ul>
<li><a href="http://kazumeat.hatenablog.com/entry/20110814/1313295257">adb各種コマンド - 肉になるメモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fused Location Provider を近くのショッピングセンターで評価してみた]]></title>
    <link href="http://amay077.github.io/blog/2013/05/30/testing-fused-location-provider/"/>
    <updated>2013-05-30T21:31:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/05/30/testing-fused-location-provider</id>
    <content type="html"><![CDATA[<p>Android に新しく搭載された Fused Location Provider、これは GPS/WiFi/センサーを統合的に使ってその時ベストな位置を取得できるというもので、<a href="http://www.youtube.com/watch?feature=player_detailpage&amp;v=URcVZybzMUI#t=733s">Google I/O のデモ</a> が衝撃的だったので、自分でも試してみました。</p>

<!--more-->


<h2>検証環境とか</h2>

<ul>
<li>場所 : イオン豊橋南店（ええ田舎ですが何か？</li>
<li>日時 : 2013/05/30 17:30頃</li>
<li>天候 : 小雨（曇天だったので GPS は捕まえにくかったかも）</li>
<li>端末 : au HTC J(!蝶) OS は 4.0.4</li>
<li>GPS も WiFi も ON</li>
<li>Android SDK Tools : rev.21.1</li>
<li>Google Play service : rev.7</li>
<li>FusedProvider の Priority : PRIORITY_HIGH_ACCURACY</li>
<li>位置取得間隔 : 5秒</li>
<li>姿勢 : スマホを常に左手で掲げて、見ながら歩きました。</li>
</ul>


<h2>その1:駐車場〜1F〜駐車場</h2>

<p>駐車場に車を停めて、歩いて店内に入場、店内をなるべくゆっくり直線的にぐるっと徘徊して、退店、駐車場を歩いて戻って来ました。</p>

<p>緑が実際の経路、青が Fused Provider の経路です。</p>

<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.co.jp/maps/ms?msa=0&amp;msid=206106708723125678709.0004ddec1d5240e6ba1d3&amp;brcurrent=3,0x6004d3ebe16cdde1:0xfb92e7477942b89b,0&amp;ie=UTF8&amp;t=h&amp;ll=34.709597,137.387786&amp;spn=0.001372,0.001735&amp;output=embed"></iframe>


<br /><small><a href="https://maps.google.co.jp/maps/ms?msa=0&amp;msid=206106708723125678709.0004ddec1d5240e6ba1d3&amp;brcurrent=3,0x6004d3ebe16cdde1:0xfb92e7477942b89b,0&amp;ie=UTF8&amp;t=h&amp;ll=34.709597,137.387786&amp;spn=0.001372,0.001735&amp;source=embed" style="color:#0000FF;text-align:left">FusedProviderの評価(イオン豊橋南店1F)</a> を表示</small>


<h2>その2:駐車場〜1F〜2F〜ぐるっと〜1F〜駐車場</h2>

<p>もう一度。
今度は入店してすぐエスカレータで2Fへ。2Fフロアをぐるっと回ってからエスカレータで1Fへ降りて駐車場へ戻って来ました。</p>

<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.co.jp/maps/ms?t=h&amp;brcurrent=3,0x6004d3ec8f3f5bf5:0x7b6f4e2f69453e37,1&amp;msa=0&amp;msid=206106708723125678709.0004ddec316197e38b987&amp;source=embed&amp;ie=UTF8&amp;ll=34.709546,137.388057&amp;spn=0.003479,0.004517&amp;output=embed"></iframe>


<br /><small>大きな地図で <a href="https://maps.google.co.jp/maps/ms?t=h&amp;brcurrent=3,0x6004d3ec8f3f5bf5:0x7b6f4e2f69453e37,1&amp;msa=0&amp;msid=206106708723125678709.0004ddec316197e38b987&amp;source=embed&amp;ie=UTF8&amp;ll=34.709546,137.388057&amp;spn=0.003479,0.004517" style="color:#0000FF;text-align:left">FusedProviderの評価(イオン豊橋南店2F)</a> を表示</small>


<h2>結果をみて</h2>

<p>うーん、かいかぶり過ぎたか Fused Provider。</p>

<p>確かに GPS と WiFi をシームレスに扱ってくれているようですが、期待していた屋内での測位結果はちょっと残念でした。</p>

<p>I/O のセッションの中では、WiFi+Sensor を使ってると言っていたので、WiFi-AP の電波強度と加速度センサーの振れ具合で自律測位してくれるのかなあと思ったのですが、あまり自律測位が機能してないように見えます。</p>

<h3>Accuracy は？</h3>

<p>屋外だとだいたい 10m前後、屋内でも 20〜40m くらいの精度でした。
上図の幅が約200mですが、実際の位置よりもっと離れている感じがします。</p>

<p>Fused Provider を使うと、妙に Accuracy が小さい(精度の良い)値が得られるのですが、実際の位置がその精度が示す円の中にも入らないこともあり、それなら高い確率で実際の位置を包括する（精度の悪い）WiFi or 基地局測位 の方が有用では？とも思えました。</p>

<p>また、施設内に WiFi-AP が何個あったとかの細かい調査はしていません（たぶん５〜６個）が、都会の繁華街とか地下街の方が圧倒的に多いと思うので、また違った結果が出るものと思います。</p>

<h3>GPS の動きは？</h3>

<p>今回は <code>PRIORITY_HIGH_ACCURACY</code> を使いました。これは GPS を使います。(<code>PRIORITY_BALANCED_POWER_ACCURACY</code> は GPS を使いません［が、 <code>ACCESS_FINE_LOCATION</code> を付けないと精度が数kmレベルになります。］)</p>

<p>記録中の GPS アイコンの動きは、点滅 → 数秒後消える → また点滅 → GPSを捕捉したらつきっぱなし という感じで、屋外に移動すると GPS を捕まえる、屋内では度々トライするが捕まえられないのですぐ消える。という動きをしてました。</p>

<h3>状態認識は貢献してるのか？</h3>

<p>自律測位に状態認識(Activity Recognition)がもし使われているなら、持ちながらよりも、ポケットに入れっぱで歩いた方に最適化されてたかも知れないなあと思ったり。</p>

<p><a href="http://amay077.github.io/blog/2013/05/18/getting-started-activity-recognition/">ActivityRecognitionClient を試した</a> 時も、持ちながらよりも尻ポケに入れたまま歩いた方が認識されやすい気がしました。気だけですが。</p>

<h2>まとめ</h2>

<ul>
<li>Fused Provider に期待しすぎないでください</li>
<li>実際の位置から（精度値を超えて）大きく外れることもあるのが困る</li>
<li>パワーマネジメントはなんかやってるぽい（計測してないけど）</li>
</ul>

]]></content>
  </entry>
  
</feed>
