<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2014-08-31T00:49:45+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio の iOSデザイナでは、Unwind Segue に Identifier が付けられないようです]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/31/xamarin-ios-designer-does-not-support-manual-unwind-segue/"/>
    <updated>2014-08-31T00:48:46+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/31/xamarin-ios-designer-does-not-support-manual-unwind-segue</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.buildinsider.net/mobile/xamarintips/0016">Xamarin.iOSでの画面遷移で「戻る」を実現するには？（Storyboard、Unwind Segue使用） &ndash; Build Insider</a></li>
</ul>


<p>に Unwind Segue について書きましたが、載せきれなかったことを補足します。</p>

<!--more-->


<p>上記Tipsでは、Unwind Segueを作るのに、ボタンとExitを結んでますが、<code>PerformSegue</code>で Unwind Segue を使いたい場合もありましょう。</p>

<p><code>PerformsSegue</code>に渡す Identifier はどこで付与するの？とあちこち探しましたが、どうも現在の Xamarin Studio（のiOSデザイナ）はまだ対応していないようです。というか、そもそもコントロールから引っ張るタイプのUnwind Segueしか作れないみたいです。</p>

<p>Xcode の Interface Builder では</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/technotes/tn2298/_index.html#//apple_ref/doc/uid/DTS40013591-CH1-TNTAG2-ADDING_AN_UNWIND_SEGUE_TO_A_STORYBOARD">Technical Note TN2298: Using Unwind Segues</a></li>
</ul>


<p>にあるように、「ViewControllerのアイコンをExitアイコンへControl+ドラッグ＆ドロップする」で、”Manual” Unwind Segue が作成できるのですが、Xamarin Studio では、それっぽい操作をしても反応がありません。</p>

<p>当然ながら、Xcode で作成した Segue は Xamarin Studio でも使えるので、Manual Unwind Segue の作成と Identifier の付与は Xcode で行って、Xamarin側で <code>PerformSegue</code> を呼び出せばいいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android が使用する debug.keystore の在処]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use/"/>
    <updated>2014-08-28T17:42:04+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use</id>
    <content type="html"><![CDATA[<p>Google Maps などを使用する時、開発中ならば <code>debug.keystore</code> のフィンガープリント(SHA1)を取得する必要がありますが、 debug.keystore がどこにあるのか分からなくてハマった。</p>

<!--more-->


<h2>結論</h2>

<p>から書いておくと</p>

<ul>
<li><a href="http://developer.xamarin.com/guides/android/platform_features/maps_and_location/maps/obtaining_a_google_maps_api_key/">Obtaining a Google Maps API Key | Xamarin</a></li>
</ul>


<p>に書いてある通りで、</p>

<ul>
<li>Windows &ndash; <code>C:¥Users¥[USERNAME]¥AppData¥Local¥Xamarin¥Mono for Android¥debug.keystore</code></li>
<li>OSX &ndash; <code>/Users/[USERNAME]/.local/share/Xamarin/Mono for Android/debug.keystore</code></li>
</ul>


<p>がそれぞれ使われる。</p>

<h2>なぜハマったか？</h2>

<h3>Eclipse と同じだと思ってた</h3>

<p>Java での Android 開発時に設定したディレクトリを使ってくれると思い込んでた。けどよく考えればあれは Android SDK ではなく Eclipse 固有の設定だったのよね。</p>

<h3>ドキュメントが古いと思ってた</h3>

<p>上記で紹介した「Obtaining a Google Maps…」の記事が古いと思ってた。なぜならディレクトリ名に <code>Mono for Android</code> が含まれていて、これは Xamarin.Android の旧製品名だったから。</p>

<h3>Spotlight検索でヒットしなかった</h3>

<p>Mac を使っているのだけど、Spotlight検索（所謂PC内検索）で <code>debug.keystore</code> がヒットしたのがいつもJava-Android開発で使ってる１つだけだったので、.local の中にあるとは気付けず。。。隠しディレクトリだからヒットしないよね。</p>

<p>こんなことでハマるのは自分くらいだろうけど、メモしときます。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git でリモートリポジトリの更新が反映されないとき]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/19/git-refresh-remote-branches/"/>
    <updated>2014-08-19T23:52:21+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/19/git-refresh-remote-branches</id>
    <content type="html"><![CDATA[<p>GitHub のWebサイトでブランチを削除したあと、クライアント（SourceTreeとか）のリモートブランチの表示に、削除したはずのブランチが残っていて、気持ち悪いなあ、と思っていた。</p>

<!--more-->


<p>git のコマンド一発だった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git remote update -p
</span></code></pre></td></tr></table></div></figure>


<p>これでクライアント側のリモート情報がリフレッシュされる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cardboard を作ってきました]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/16/make-google-cardboard/"/>
    <updated>2014-08-16T23:42:38+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/16/make-google-cardboard</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://connpass.com/event/7735/">日本Androidの会浜松支部 第40回ミーティング #jaghama &ndash; connpass</a></li>
</ul>


<p>で Google Cardboard のクローンを作りました。</p>

<!--more-->


<p>段ボールやレンズ、磁石などの材料は主催の方が用意してくださった( <a href="https://twitter.com/macha1972">@macha1972</a> さんありがとうございます )ので、カッターとガムテープと筆記具くらいを持参するだけですみました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-01.jpg" alt="" /></p>

<p><a href="https://developers.google.com/cardboard/">公式サイト</a> からダウンロードできる型紙を印刷して、段ボールに貼り付け、段ボールを切っていきます。</p>

<p>段ボールが意外と厚くて切るのに苦労しました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-02.jpg" alt="" /></p>

<p>ここまでくるのに約3時間…（-_&ndash;;）
早い人は2時間くらいで終わってたかな・・・。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-03.jpg" alt="" /></p>

<p>切っちゃえば組み立ては簡単(先駆者さんに聞きながらできたからw)
「バター風味」がいい感じに露出しているのは偶然だw</p>

<p>使用した端末は公式に対応しているとされる Galaxy Nexus だったので稼働に特に問題はありません(磁石のスイッチが反応しづらいかなという程度)でしたが、端末の磁場センサーの位置によっては、スイッチの位置を反対側に移動させる必要があるみたいです。(Xperia の人はそうしてました)</p>

<p>さっそく <a href="https://play.google.com/store/apps/details?id=com.google.samples.apps.cardboarddemo&amp;hl=ja">Cardboardアプリ</a> で体験…これはスゴイ！
以前に Ocufes豊橋 で Oculas Lift は体験済みだったのですが、それに匹敵する没入感です。</p>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.divegames.divecitycoaster&amp;hl=ja">Dive City Rollercoaster</a> というアプリが面白いですね。</li>
</ul>


<p>帰宅後、さっそく子供らも体験、しばらくの間ハマってました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-04.jpg" alt="" /></p>

<p>子供の夏休みの自由工作にでもできるかなーと思いますが、大人で3時間かかるのは結構つらいかも。</p>

<p>カッターで段ボールを切るのに力入れすぎて指にマメできたし…。</p>

<p>ワークショップ中のその他の写真は</p>

<ul>
<li><a href="https://www.facebook.com/media/set/?set=o.282944361773276&amp;type=3">日本Androidの会 浜松支部の写真・動画 &ndash; Facebookグループ</a></li>
</ul>


<p>からどうぞ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Skitch PNG」とはなにか？]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/07/what-is-skitch-png/"/>
    <updated>2014-08-07T23:42:38+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/07/what-is-skitch-png</id>
    <content type="html"><![CDATA[<p>画像に文字や図形を描くとき多用している Skitch ですが、ファイルのエクスポートに「Skitch PNG」という謎のファイル形式があるのを発見。</p>

<!--more-->


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/skitch_png_01.png" alt="" /></p>

<p>調べてみると、</p>

<ul>
<li><a href="http://www.addictivetips.com/mac-os/skitch-updated-with-a-special-format-that-keeps-annotations-editable/">Skitch For Mac Updated With A Format That Keeps Annotations Editable</a></li>
</ul>


<blockquote><p>Skitch PNG is a new format for saving pictures that you’ve annotated in Skitch. These are almost like regular PNGs, except that you can open them in Skitch later on and edit the previous annotations.</p></blockquote>

<p>な、なんだってー！PNG なのに <strong>「アノテーションが再編集可能」</strong> だってー！！</p>

<h2>試しに</h2>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/skitch_png_02.png" alt="" /></p>

<p><a href="http://www.gatag.net/10/16/2009/110000.html">photo by Nesster, CC-BY</a></p>

<p>上の画像、「Skitch PNG」で保存したものですが、Skitch で開き直すと、下図のように文字や矢印が再編集できます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/skitch_png_03.png" alt="" /></p>

<p>これからはこれをデフォで使っていこうと思います。
ちなみに「モザイク」は復元できないみたいです。うむ安全設計。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774156019" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch の Auto-Rebalancing を Docker で試す]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/06/trying-auto-rebalancing-by-elasticsearch-on-docker/"/>
    <updated>2014-08-06T23:39:51+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/06/trying-auto-rebalancing-by-elasticsearch-on-docker</id>
    <content type="html"><![CDATA[<p>Linuxど素人の Docker 入門第二弾です。
ちょっと Docker おもしろくなってきたかも。</p>

<!--more-->


<p><a href="http://www.elasticsearch.org/">Elasticsearch</a> というのは、Apache Solr と並ぶ（むしろ Solr より流行ってきた？）全文検索システムなんですが、複数のサーバにデータを分散配置して並列処理やフェイルオーバーができたりします。</p>

<p>んで、Auto-Rebalancing というのは、サーバ（ノードというらしい）を追加した時に、そのサーバの役割が自動的に決まって、他のサーバからデータを分けて貰って、全体としてデータの平衡化が行われる事です。</p>

<p>Docker なら、サーバーの起動が容易なので、Auto-Rebalancing を試すのに持ってこいだと思い、やってみました。</p>

<p>全体的には、</p>

<ul>
<li><a href="http://inokara.hateblo.jp/entry/2013/11/15/042752">elasticsearch と elasticsearch-head を docker でサクッと試す &ndash; ようへいの日々精進 XP</a></li>
</ul>


<p>を参考にしています。</p>

<h2>ubuntu の Docker コンテナに Elasticsearch をインストール</h2>

<p><a href="http://blog.amay077.net/blog/2014/08/05/docker-try-first/">昨日</a>使った ubuntu のコンテナに Elasticsearch をインストールします。</p>

<p>Elasticsearch のインストールは、</p>

<ul>
<li><a href="https://gist.github.com/wingdspur/2026107">Install ElasticSearch on Ubuntu 12.04</a></li>
</ul>


<p>を参考にしました。（なんか Elasticsearch を導入済みのコンテナとか Dockerfile もあったみたい）</p>

<p>次に、Elasticsearch の管理GUIを提供するプラグイン elasticsearch-head を導入します。</p>

<p>elasticsearch-head については、こちらがとても参考になりました。</p>

<ul>
<li><a href="http://yuheikagaya.hatenablog.jp/entry/2013/07/14/185752">elasticsearchのGUI「elasticsearch-head」がとても便利 &ndash; yuhei.kagaya</a></li>
</ul>


<p>インストールは、以下のコマンド一発です。(./ を付けないとうまく動いてくれなかった)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span> root@bb638d1f825f:/ <span class="o">]</span><span class="nv">$ </span><span class="nb">cd </span>elasticsearch/bin
</span><span class='line'><span class="o">[</span> root@bb638d1f825f:/ <span class="o">]</span><span class="nv">$ </span>./plugin -install mobz/elasticsearch-head
</span></code></pre></td></tr></table></div></figure>


<h2>Elasticsearch のクラスタの設定</h2>

<p>複数の Elasticsearch を動かす場合、共通のグループ名を付ける必要があります。</p>

<p><code>elasticsearch.yml</code> を編集して、グループ名を付けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span> root@bb638d1f825f:/ <span class="o">]</span><span class="nv">$ </span>vim elasticsearch/config/elasticsearch.yml
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>elasticsearch.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">cluster.name:</span> <span class="err">amaycluster</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elasticsearch の分散環境での使用については、</p>

<ul>
<li><a href="http://dev.classmethod.jp/cloud/aws/use-elasticsearch-2-use-cluster/">Cluster機能を使う – AWSで始めるElasticSearch(2) ｜ Developers.IO</a></li>
</ul>


<p>を参考にしました。
「EC2ではマルチキャストが使えない」などと書かれていますが、これは Docker なのでスルーで。結果的には <code>elasticsearch.yml</code> は上記の修正しかしていません。</p>

<h2>Elasticsearch 設定済のイメージを作る</h2>

<p>ここまでで一旦コンテナを終了し、<code>docker commit</code> で保存します。
<code>docker images</code> でイメージが作成できたのが確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker commit -m <span class="s2">&quot;Setting Elasticsearch cluster&quot;</span> bb638d1f825f amay077/es_cluster
</span><span class='line'>
</span><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>amay077/es_cluster         latest              b9d05b77d71a        9 hours ago         1.075 GB
</span><span class='line'>ubuntu                     latest              ba5877dc9bec        2 weeks ago         192.7 MB
</span></code></pre></td></tr></table></div></figure>


<h2>複数の Docker コンテナを起動し、それぞれで Elasticsearch を起動する</h2>

<p>下のようなコマンドで、コンテナを起動し、Elasticsearch を開始します。
（<code>/bin/bash</code> の代わりに直接 elasticsearch を開始してもよいと思いますが、後で直接コンソールに接続したいかなーと思いまして。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker run -i -t -p 9200:9200 -p 9300:9300 amay077/es_cluster /bin/bash
</span><span class='line'>
</span><span class='line'><span class="o">[</span> root@bb638d1f825f:/ <span class="o">]</span><span class="nv">$ </span>/elasticsearch/bin/elasticsearch -d
</span><span class='line'><span class="c">#Control+p, Control+q でデタッチ</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つ起動した時点で、ホストPC（Mac）のブラウザから <a href="http://localhost:9200/_plugin/head/">http://localhost:9200/_plugin/head/</a> にアクセスします。
あ、その前に VirtualBox の設定で、9200と9300のポートフォワーディングを行う必要があります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/trying-auto-rebalancing-by-elasticsearch-on-docker_04.png" alt="" /></p>

<p>設定できたら先のアドレスにアクセスすると elasticsearch-head の管理画面が表示されるはずです。</p>

<p>続いて、さっきのコマンドを複数回実行し、複数の Elasticsearch を起動します。
<code>-p 9200:9200</code> のところが重複するとエラーになるので <code>-p 9201:9200</code> などとズラしましたが、これで正しかったのかわかりません。</p>

<h2>Elasticsearch にデータ投入</h2>

<p>Elasticsearch へのデータ投入は、ホストPC（Mac）の Terminal から、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -XPOST <span class="s1">&#39;http://localhost:9200/mytest/memo/&#39;</span> -d <span class="s1">&#39;{ &quot;name&quot; : &quot;kappa&quot;, &quot;date&quot; : &quot;2013-09-07&quot;, &quot;message&quot; : &quot;test1&quot; }&#39;</span>
</span><span class='line'>curl -XPOST <span class="s1">&#39;http://localhost:9200/mytest/memo/&#39;</span> -d <span class="s1">&#39;{ &quot;name&quot; : &quot;kappa&quot;, &quot;date&quot; : &quot;2013-09-07&quot;, &quot;message&quot; : &quot;test2&quot; }&#39;</span>
</span><span class='line'>curl -XPOST <span class="s1">&#39;http://localhost:9200/mytest/memo/&#39;</span> -d <span class="s1">&#39;{ &quot;name&quot; : &quot;kappa&quot;, &quot;date&quot; : &quot;2013-09-07&quot;, &quot;message&quot; : &quot;test3&quot; }&#39;</span>
</span><span class='line'>…続く
</span></code></pre></td></tr></table></div></figure>


<p>のような感じで、3万件ほど投入しました。</p>

<p>投入後、 <a href="http://localhost:9200/_plugin/head/">http://localhost:9200/_plugin/head/</a> を見ると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/trying-auto-rebalancing-by-elasticsearch-on-docker_01.png" alt="" /></p>

<p>となっています。４台のサーバにデータが分散して登録されたことが分かります。四角内の数字（0〜4）は、「データが5つに分割され」て、その「ブロックがどのサーバに配置されているか」を示していて、太枠がプライマリ、細枠がスレーブであることを示しています。
いずれのサーバが死んでも、データの欠損なくサービス継続できることを示しています。</p>

<h2>ノードを追加してみる</h2>

<p>５台目の Elasticsearh を追加してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker run -i -t -p 9204:9200 -p 9304:9300 amay077/es_cluster /bin/bash
</span><span class='line'>
</span><span class='line'><span class="o">[</span> root@de6d825fa34d:/ <span class="o">]</span><span class="nv">$ </span>/elasticsearch/bin/elasticsearch -d
</span><span class='line'><span class="c">#Control+p, Control+q でデタッチ</span>
</span></code></pre></td></tr></table></div></figure>


<p>その後 elasticsearch-head を見ると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/trying-auto-rebalancing-by-elasticsearch-on-docker_01.png" alt="" /></p>

<p>となり、しばらくしてから Refresh すると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/trying-auto-rebalancing-by-elasticsearch-on-docker_03.png" alt="" /></p>

<p>となります。</p>

<p>追加された「Isaiah Bradley」サーバには、データブロック１と３のスレーブの役割が与えられ、データが移動されたことが分かります。（移動中は色が変わったけどスクショ撮れなかった）</p>

<p>このように Elasticsearch の Auto-Rebalancing を、Docker を使うことでお手軽に試すことができました。（実運用では Elasticsearch に Docker は、、、使わないですよねたぶん）</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4048662023" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いまさら Docker やってみた]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/05/docker-try-first/"/>
    <updated>2014-08-05T21:39:53+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/05/docker-try-first</id>
    <content type="html"><![CDATA[<p>いまさら感満載なんですが、Docker やってみました。</p>

<!--more-->


<p>ホストPCはMacです。</p>

<h2>Docker のインストール</h2>

<p>Macなので事前に VirtualBox を入れて置く必要があります。</p>

<p>あとは、</p>

<ul>
<li><a href="http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/">はじめてのDocker on Mac OS X ｜ Developers.IO</a></li>
</ul>


<p>を参考に。</p>

<p>Docker と boot2docker のバージョンはこんな感じでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker -v
</span><span class='line'>Docker version 1.1.2, build d84a070
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>boot2docker version
</span><span class='line'>Client version: v1.1.2
</span><span class='line'>Git commit: a229ac1
</span></code></pre></td></tr></table></div></figure>


<h2>boot2docker 経由で Docker の起動</h2>

<p><code>boot2docker up</code> で Docker (というか Tiny Core Linux らしい)を起動。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>boot2docker up
</span><span class='line'>2014/08/05 21:47:19 Waiting <span class="k">for </span>VM to be started...
</span><span class='line'>.......
</span><span class='line'>2014/08/05 21:47:41 Started.
</span><span class='line'>2014/08/05 21:47:41 Your DOCKER_HOST env variable is already <span class="nb">set </span>correctly.
</span></code></pre></td></tr></table></div></figure>


<p><code>set:export DOCKER_HOST=</code> とか出たらホスト（Mac） .bash_profile にそのまま追記します。（上はすでに追加済なので <code>already</code> と出てます）</p>

<h2>boot2docker から Docker に接続</h2>

<p><code>boot2docker ssh</code> で Docker に接続。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>boot2docker ssh
</span><span class='line'>                        <span class="c">##        .</span>
</span><span class='line'>                  <span class="c">## ## ##       ==</span>
</span><span class='line'>               <span class="c">## ## ## ##      ===</span>
</span><span class='line'>           /<span class="s2">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="se">\_</span>__/ <span class="o">===</span>
</span><span class='line'>      ~~~ <span class="o">{</span>~~ ~~~~ ~~~ ~~~~ ~~ ~ /  <span class="o">===</span>- ~~~
</span><span class='line'>           <span class="se">\_</span>_____ o          __/
</span><span class='line'>             <span class="se">\ </span>   <span class="se">\ </span>       __/
</span><span class='line'>              <span class="se">\_</span>___<span class="se">\_</span>_____/
</span><span class='line'> _                 _   ____     _            _
</span><span class='line'><span class="p">|</span> <span class="p">|</span>__   ___   ___ <span class="p">|</span> <span class="p">|</span>_<span class="p">|</span>___ <span class="se">\ </span>__<span class="p">|</span> <span class="p">|</span> ___   ___<span class="p">|</span> <span class="p">|</span> _____ _ __
</span><span class='line'><span class="p">|</span> <span class="s1">&#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#39;</span>__<span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span>_<span class="o">)</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span>_ / __/ <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="o">(</span>__<span class="p">|</span>   &lt;  __/ <span class="p">|</span>
</span><span class='line'><span class="p">|</span>_.__/ <span class="se">\_</span>__/ <span class="se">\_</span>__/ <span class="se">\_</span>_<span class="p">|</span>_____<span class="se">\_</span>_,_<span class="p">|</span><span class="se">\_</span>__/ <span class="se">\_</span>__<span class="p">|</span>_<span class="p">|</span><span class="se">\_\_</span>__<span class="p">|</span>_<span class="p">|</span>
</span><span class='line'>boot2docker: 1.1.2
</span><span class='line'>             master : 740106c - Thu Jul 24 03:24:10 UTC 2014
</span><span class='line'>docker@boot2docker:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker 内で ubuntu を起動する</h2>

<p><code>docker run</code> で docker のイメージを（無ければダウンロードして）起動し、後続のコマンドを実行して終わる。
下記の場合 bash を起動しているので、<code>exit</code> すると終わる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>sudo docker run -i -t ubuntu /bin/bash ＜--docker内
</span><span class='line'>Unable to find image <span class="s1">&#39;ubuntu&#39;</span> locally
</span><span class='line'>Pulling repository ubuntu
</span><span class='line'>ba5877dc9bec: Download <span class="nb">complete </span>
</span><span class='line'>511136ea3c5a: Download <span class="nb">complete </span>
</span><span class='line'>9bad880da3d2: Download <span class="nb">complete </span>
</span><span class='line'>25f11f5fb0cb: Download <span class="nb">complete </span>
</span><span class='line'>ebc34468f71d: Download <span class="nb">complete </span>
</span><span class='line'>2318d26665ef: Download <span class="nb">complete </span>
</span><span class='line'>root@c8b319b2b306:/# ＜--ubuntu に入った
</span></code></pre></td></tr></table></div></figure>


<h2>アタッチとかデタッチとか</h2>

<p>CTRL+p → CTRL+q と押すと、Ubuntu からデタッチして docker に戻る。（ubuntu は終わらない）</p>

<p><code>docker ps</code> とすると起動している ubuntu の一覧が見える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ocker@boot2docker:~<span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>c8b319b2b306        ubuntu:latest       /bin/bash           5 minutes ago       Up 5 minutes                            prickly_tesla
</span></code></pre></td></tr></table></div></figure>


<p>もう一度 <code>sudo docker run -i -t ubuntu /bin/bash</code> とすると、ubuntu がもう１個起動する。
CTRL+p → CTRL+q でデタッチして、<code>docker ps</code> すると、２つになってるのが分かる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>4744cf404fda        ubuntu:latest       /bin/bash           4 seconds ago       Up 4 seconds                            distracted_einstein
</span><span class='line'>c8b319b2b306        ubuntu:latest       /bin/bash           8 minutes ago       Up 8 minutes                            prickly_tesla
</span></code></pre></td></tr></table></div></figure>


<p>起動中の ubuntu に入るには、<code>docker attach c8b319b2b306</code> などとする。この場合 bash が実行中なので ubuntu のコンソールになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker attach c8b319b2b306
</span><span class='line'>
</span><span class='line'>root@c8b319b2b306:/#
</span></code></pre></td></tr></table></div></figure>


<h2>起動しているOSの削除</h2>

<p><code>docker attach</code> して <code>exit</code> するか、docker側から <code>docker kill c8b319b2b306</code> などとする。</p>

<p><code>docker ps</code> すると、削除されたのが分かる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>4744cf404fda        ubuntu:latest       /bin/bash           3 minutes ago       Up 3 minutes                            distracted_einstein
</span></code></pre></td></tr></table></div></figure>


<h2>OSの状態の保存と復元</h2>

<p>docker から起動した ubuntu は揮発性なので、終了すると状態が消えてしまう。
が、ほんとは消えてなくて、終了した後で、履歴からイメージを作成することができる。</p>

<p>まず、ubuntu にて適当なファイルを作成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@4744cf404fda:/# <span class="nb">echo</span> <span class="s1">&#39;Hello&#39;</span> &gt;&gt; mytext
</span><span class='line'>
</span><span class='line'>root@4744cf404fda:/# ls
</span><span class='line'>bin   dev  home  lib64    mnt opt   root  sbin  sys  usr
</span><span class='line'>boot  etc  lib     media  mytext  proc  run   srv   tmp  var
</span></code></pre></td></tr></table></div></figure>


<p>確かに <code>mytext</code> が作成されているのを確認したら、<code>exit</code> で終了、docker に戻る。</p>

<p><code>sudo docker run -i -t ubuntu /bin/bash</code> で ubuntu を起動し、<code>ls</code> で、内容を確認。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@3d15ee0cc161:/# ls
</span><span class='line'>bin  boot  dev    etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
</span></code></pre></td></tr></table></div></figure>


<p><code>mytext</code> は消えている。
確認後 <code>exit</code> で終了。</p>

<p><code>docker ps -a</code> で履歴も含めて状態を見る。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker ps -a
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
</span><span class='line'>3d15ee0cc161        ubuntu:latest       /bin/bash           19 seconds ago      Exited <span class="o">(</span>0<span class="o">)</span> 12 seconds ago                       dreamy_hawking
</span><span class='line'>4744cf404fda        ubuntu:latest       /bin/bash           8 minutes ago       Exited <span class="o">(</span>0<span class="o">)</span> 30 seconds ago                       distracted_einstein
</span><span class='line'>16d24570a714        ubuntu:latest       /bin/bash           12 minutes ago      Exited <span class="o">(</span>0<span class="o">)</span> 12 minutes ago                       focused_wilson
</span></code></pre></td></tr></table></div></figure>


<p><code>mytext</code> を保存したのは 4744cf404fda の ubuntu なので、これを保存する。
<code>docker commit</code> で git ライクにコミットすると保存される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker commit -m <span class="s2">&quot;Add mytext&quot;</span> 4744cf404fda amay077/mytext_container
</span><span class='line'>
</span><span class='line'>467f6424ae4a7b813f51356a019ef6ee2467fe2f1f52d8ea7a2e32ddc0b63edd
</span></code></pre></td></tr></table></div></figure>


<p><code>docker images</code> を実行して保存されているイメージのリストを見る。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>amay077/mytext_container   latest              467f6424ae4a        50 seconds ago      192.7 MB
</span><span class='line'>ubuntu                     latest              ba5877dc9bec        2 weeks ago         192.7 MB
</span><span class='line'>d
</span></code></pre></td></tr></table></div></figure>


<p><code>amay077/mytext_container</code> が確かに保存されてる。</p>

<p>そのイメージを使ってインスタンスを起動する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>sudo docker run -i -t amay077/mytext_container /bin/bash
</span><span class='line'>
</span><span class='line'>root@0f6e755990ff:/# ls
</span><span class='line'>bin   dev  home  lib64    mnt opt   root  sbin  sys  usr
</span><span class='line'>boot  etc  lib     media  mytext  proc  run   srv   tmp  var
</span><span class='line'>
</span><span class='line'>root@0f6e755990ff:/# cat mytext
</span><span class='line'>Hello
</span></code></pre></td></tr></table></div></figure>


<p>確かに mytext が保存された状態になっている。</p>

<h2>コンテナとイメージの削除</h2>

<p>いきなり「コンテナ」ってｗ</p>

<p>イメージから起動した「モノ」をコンテナというらしい。
起動して終了したもの（<code>docker ps -a</code> で見られるもの）もコンテナというらしい。</p>

<p>OSを終了してから、<code>docker rm 3d15ee0cc161</code> などで個別に削除してもよいが、面倒なので、
<code>docker rm `docker ps -a -q</code> とすると、起動してないコンテナを一括削除できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker rm <span class="sb">`</span>docker ps -a -q<span class="sb">`</span>
</span><span class='line'>3d15ee0cc161
</span><span class='line'>4744cf404fda
</span><span class='line'>16d24570a714
</span><span class='line'>57ee3aa4a7d2
</span><span class='line'>c8b319b2b306
</span><span class='line'>
</span><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker ps -a
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span></code></pre></td></tr></table></div></figure>


<p>続いて、イメージの削除は <code>docker rmi amay077/mytext_container</code> などで行う。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker rmi amay077/mytext_container
</span><span class='line'>
</span><span class='line'>docker@boot2docker:~<span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ubuntu              latest              ba5877dc9bec        2 weeks ago         192.7 MB
</span></code></pre></td></tr></table></div></figure>


<p>ubuntu だけになった。
<code>docker rmi ubuntu</code> もするときれいサッパリ。</p>

<p>今日はここまで。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/">はじめてのDocker on Mac OS X ｜ Developers.IO</a></li>
<li><a href="http://apatheia.info/blog/2013/06/17/docker/">仮想環境構築に docker を使う &ndash; apatheia.info</a></li>
<li><a href="http://blog.n-z.jp/blog/2013-12-24-docker-rm.html">Dockerで不要になったコンテナやイメージを削除する &ndash; @znz blog</a></li>
</ul>


<p>WEB+DB PRESS vol.81 の Immutable Infrastructure の特集も、参考になりました。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774165069" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いまさら Raspberry Pi やってみた]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/04/raspberry-try-first/"/>
    <updated>2014-08-04T21:03:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/04/raspberry-try-first</id>
    <content type="html"><![CDATA[<p>昨年の秋に買って以来放置してしまってた Raspberry Pi、ふと思い立って動かしてみました。</p>

<!--more-->


<p>当時は、買ったはよかったものの、余ってるSDカードがなくてそのまま「寝て」しまってました。</p>

<h2>OS のインストール</h2>

<ul>
<li><a href="http://qiita.com/tomk79/items/cdc1b88358afba2c6337">RaspberryPi &ndash; Raspberry Pi に入門してみた。 &ndash; Qiita</a></li>
</ul>


<p>に沿ってやりました。ZIPファイルのダウンロードが300MBほど経過したところで終わってしまったので、BitTorrent を使ってみました。
Mac なので、<a href="https://www.transmissionbt.com/">Transmission</a> というクライアントを使用しました。速いっすね BitTorrent。</p>

<p>RaspberryPiへの給電は MacMini のUSBポートから、ディスプレイはHDMIで行いました。
SDカードは、以前使っていたスマホに刺さっていたmicroSDカード＋SDカードアダプタにて、そのためか、少し衝撃を与えるとOSが再起動してしまうという gkbr な環境です。</p>

<h2>WiFi に接続する</h2>

<p>有線LANが余ってなかったので、WiFiでやることにしました。ちょうど使わなくなったノートPCにWiFiドングルが刺さってました。</p>

<p>WiFi に接続するための設定は、</p>

<ul>
<li><a href="http://kingyo-bachi.blogspot.jp/2013/07/raspberry-pilan.html">コチョナナバ: Raspberry Piを無線LAN対応させてみた</a></li>
</ul>


<p>を参考にしましたが、設定後再起動してもIPアドレスが取得できず、結局 <code>startx</code> で GUI を立ち上げ、GUIのWiFi設定ツールで設定したところ、接続できるようになりました。その後の再起動でも自動的にWiFiに接続できるようになりました。</p>

<p>Raspberry Pi のUSBポートは２つしかないのに、GUIでのWiFi設定を行うにはマウスとキーボードとWiFiドングルが必要で、キーボードとマウスを抜き差ししながら、しかも本体にできるだけ衝撃を与えないようにするのが大変でした（^_^;）</p>

<p>GUIのWiFi設定ツールで設定した後の <code>wpa_supplicant.conf</code> はこんな感じになっていました。</p>

<figure class='code'><figcaption><span>wpa_supplicant.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">ctrl_interface=DIR=/var/run/wpa_supplicant</span> <span class="err">GROUP=netdev</span>
</span><span class='line'><span class="err">update_config=</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="err">network=</span><span class="p">{</span>
</span><span class='line'>  <span class="err">ssid=</span><span class="nt">&quot;&lt;WiFi-APのSSID&gt;&quot;</span>
</span><span class='line'>  <span class="err">psk=</span><span class="s2">&quot;&lt;WiFi-APの接続生パスワード&gt;&quot;</span>
</span><span class='line'>  <span class="err">proto=RSN</span>
</span><span class='line'>  <span class="err">key_mgmt=WPA-PSK</span>
</span><span class='line'>  <span class="err">pairwise=TKIP</span>
</span><span class='line'>  <span class="err">auth_alg=OPEN</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>root のパスワードを設定</h2>

<p><code>sudo passwd root</code> で root のパスワードを設定しました。（こんなことすらググらないと分からない程度のLinux力ですorz）</p>

<h2>SSHで接続</h2>

<p>前出のコチョバナナさんの続きで、 <code>avahi-deamon</code> を導入して、DHCPでIPアドレスが変わっても、<code>ssh raspberrypi.local</code> で接続できるようにしました。</p>

<p>とりあえずここまで。
カメラとかセンサーはないので、これから何しようか考えます。</p>

<p>一連のセットアップで一番苦労したのは vi のテキスト入力です。。。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00CBWMXVE" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B003NSAMW2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00ISP0MOI" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[タイプカバーを買いました]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/30/bought-type-cover/"/>
    <updated>2014-07-30T15:27:57+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/30/bought-type-cover</id>
    <content type="html"><![CDATA[<p><a href="http://blog.amay077.net/blog/2014/07/18/welcome-surface-pro-3/">先日買った Surface Pro 3</a> 用のタイプカバーを買いました。</p>

<!--more-->


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/bought_type_cover_01.jpg" alt="" /></p>

<p><a href="http://xamarin.com">Xamarin</a> カラーの <strong>シアン！</strong></p>

<p>キーボードの打感は、個人的には良好。普段 MacBookAir やApple純正のあのうす～いキーボードに慣れているので、なんなく順応できますね。</p>

<p>これでお出かけ時に持っていけるぞ。</p>

<p>こうなってくると次は外出時のバッテリー問題を解決したい！
MacBookAir には、<a href="http://www.amazon.co.jp/gp/product/B00456DWUA/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00456DWUA&amp;linkCode=as2&amp;tag=oku2008-22">HyperJuice</a> を使っていて、実質半日くらいは持つのですが、こいつで Surface にも給電できないかなーと思ってます。変換コネクタみたいなのでないかな？</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00KQ5CKCA" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00KQ5A9KA" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=oku2008-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00456DWUA" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surface Pro 3 買いました]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/18/welcome-surface-pro-3/"/>
    <updated>2014-07-18T14:48:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/18/welcome-surface-pro-3</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00KQ5AAUY?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00KQ5AAUY&amp;linkCode=shr&amp;tag=oku2008-22">Surface Pro 3</a> を買いました。</p>

<!--more-->


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/welcome-surface-pro-3_01.png" alt="" /></p>

<p>このところ Mac ばかり使ってたので、Windows 機は久しく買ってませんでした。自作でないものはホントに久しぶり。</p>

<p>Macbook Air と並べてみました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/welcome-surface-pro-3_02.png" alt="" /></p>

<p>重さはそんなに変わらないですね。</p>

<p>まだタイプカバーを買ってないのでがつがつ使い倒せません。（ヤマダでテレビ買った時に半ば強制的に作らされたカード付属のポイントで買いたい）
あと、保護フィルム要るのかな？</p>

<p>これで Windows Store Apps の開発もできるぞ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git で過去との差分のサマリーを表示する]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/16/display-git-diff-summary/"/>
    <updated>2014-07-16T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/16/display-git-diff-summary</id>
    <content type="html"><![CDATA[<p>「現在のソースコードは、過去のバージョンからどのくらい修正したか？」を知りたい時に使います。</p>

<!--more-->


<h2>コマンド</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git diff --stat &lt;コミットID&gt;
</span><span class='line'>
</span><span class='line'>例）git diff --stat c7378a8</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> amay077lib                                         |   0
</span><span class='line'> .../android/fujiphoto/logic/PhotoItemLogic.java    |   1 -
</span><span class='line'> .../android/fujiphoto/viewmodel/YmapBinder.java    |  24 +-
</span><span class='line'> graphics/app_icon.svg                              | 436 +++++++++++++++++++++
</span><span class='line'> graphics/camera.svg                                |  97 +++++
</span><span class='line'> graphics/circle_small.svg                          |  87 ++++
</span><span class='line'> graphics/fuji.svg                                  | 118 ++++++
</span><span class='line'> graphics/loading.svg                               | 142 +++++++
</span><span class='line'> graphics/pegman.svg                                | 176 +++++++++
</span><span class='line'> graphics/photo_loading.svg                         | 142 +++++++
</span><span class='line'> graphics/photo_loading_large.svg                   |  92 +++++
</span><span class='line'>
</span><span class='line'> 11 files changed, 1301 insertions(+), 14 deletions(-)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ランダムで且つ重複しない数値リストを作る]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/08/create-distinct-array-in-fsharp/"/>
    <updated>2014-07-08T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/08/create-distinct-array-in-fsharp</id>
    <content type="html"><![CDATA[<p>F# 入門中です。</p>

<!--more-->


<p><a href="http://www.shuzan.jp/kentei/flash/">フラッシュ暗算</a>ぽいアプリを作っていて、次々と表示する数値は、</p>

<ul>
<li>ランダムで</li>
<li>一度使った数値は二度と使わなくて</li>
<li>０も使わない</li>
</ul>


<p>というルールにしています（公式ルールは知らない）</p>

<p><code>makeRandomList</code> の引数 <code>rand</code> は <code>System.Random</code> のインスタンス、<code>count</code> は生成するリストの要素数、<code>arr</code> は生成した数値群(=再帰処理で値の既出判定に使う)としています。</p>

<p><code>rand.Next(10)</code> で得た値が、0 もしくは <code>arr</code> に存在する場合は、もう一度同じパラメータで再帰呼び出し、そうでない場合は <code>count</code> を減算しつつ、<code>arr</code> に値を連結して再帰呼び出しします。<code>count</code> が <code>0</code> になったら <code>arr</code> を返して終わります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">makeRandomList</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">(</span><span class="n">rand</span><span class="o">:</span><span class="nc">Random</span><span class="o">,</span> <span class="n">count</span><span class="o">:</span><span class="kt">int</span><span class="o">,</span> <span class="n">arr</span><span class="o">:</span><span class="nc">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">count</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">arr</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="nc">Next</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="c1">// 1桁の数値</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">arr</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">exists</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">x</span><span class="o">=</span><span class="n">n</span><span class="o">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">makeRandomList</span> <span class="o">(</span><span class="n">rand</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">arr</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">makeRandomList</span> <span class="o">(</span><span class="n">rand</span><span class="o">,</span> <span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">@</span> <span class="n">arr</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">makeRandomList</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Random</span><span class="o">(</span><span class="nn">DateTime</span><span class="p">.</span><span class="nn">Now</span><span class="p">.</span><span class="nc">Millisecond</span><span class="o">),</span> <span class="mi">3</span><span class="o">,</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">arr</span> <span class="k">do</span>
</span><span class='line'>    <span class="nn">Console</span><span class="p">.</span><span class="nc">WriteLine</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 出力例</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで書けばいいのかなあ。
なんかところどころ手続き型の書き方になってる気がしますが、C# で <code>while</code> で処理するよりはスマートにできた気がします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin で System.Data.SqlClient を使うには BUSINESS 版以上が必要です]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/01/sqlclient-require-business-edition/"/>
    <updated>2014-07-01T01:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/01/sqlclient-require-business-edition</id>
    <content type="html"><![CDATA[<p>当方 Xamarin INDIE 版しか買えないしがない個人開発者です。</p>

<!--more-->


<p>Xamarin で <code>System.Data.SqlClient.SqlCommand</code> などを使ったプロジェクトをビルドしたら、ビルド時にこんなダイアログボックスが。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_requires_business_edition_when_using_sqlclient_01.png" alt="" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_requires_business_edition_when_using_sqlclient_02.png" alt="" /></p>

<p>どうやら、特定のクラスを使用するには BUSINESS 版以上が必要なようです。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/ab90c74e78dd87ba31fb">Xamarin でビルドを自動化するには Business 版以上が必要です</a></li>
</ul>


<p>といい、INDIE 版の制限事項が後出しで判明するのなんとかならないですかね。</p>

<p>今回は .NET のプロジェクトを Xamarin に移植する際に発覚したもので、特に <code>SqlClient</code> は使ってなかったので削除して解決しました。</p>

<p>Xamarin で <code>SqlClient</code> って何に使うんだろ？イントラ？あるいは SQL Server Compact が使える？まさかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ドラッグ＆ドロップで並び替えできる ListView]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/01/listview-supports-swapitem-by-dragdrop/"/>
    <updated>2014-07-01T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/01/listview-supports-swapitem-by-dragdrop</id>
    <content type="html"><![CDATA[<p>最近こういうUI見たことないなあ、と思いながらも、実装の必要があったので、いろいろ先駆者さま達の足跡を辿り、最終的に、</p>

<!--more-->


<ul>
<li><a href="http://shogogg.hatenablog.jp/entry/20110118/1295326773">ドラッグ＆ドロップで並び替えできる ListView &ndash; パンダのメモ帳</a></li>
</ul>


<p>が自分のやりたい事に最も近く、割と新し（といっても３年前…）かったので参考にしました。</p>

<p>ただ、こちらの実装だと、ListView の上にマージンがあるとドラッグ中のアイテムの描画がすこしバグってたので、修正して使いました。</p>

<p>こんな感じ↓です。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/drag_and_drop_listview_01.gif" alt="" /> capture by <a href="http://www.cockos.com/licecap/">LICEcap</a></p>

<p>修正後のソースです。</p>

<p>修正箇所は２つ</p>

<ol>
<li><code>mActionDownEvent</code> を参照の保持でなく、 <code>obtain</code> してクローンを保持するように（＋ <code>recycle</code> で破棄）。<code>onTouchEvent</code> の 引数 <code>event</code> は、内部で使いまわされるようで、参照のコピーでは、値が勝手に変わっていました。</li>
<li><code>updateLayoutParams</code> はスクリーン座標を前提に。元は <code>listView.getTop() + event.getY()</code> でしたが、これではステータスバーとActionBarの高さが考慮されないようだったので、<code>event.getRawY()</code> を使うようにしました。</li>
</ol>


<figure class='code'><figcaption><span>SortableListView.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Bitmap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Canvas</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Color</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.PixelFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.AttributeSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Gravity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MotionEvent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.WindowManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.AdapterView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.AdapterView.OnItemLongClickListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ImageView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SortableListView</span> <span class="kd">extends</span> <span class="n">ListView</span> <span class="kd">implements</span>
</span><span class='line'>        <span class="n">OnItemLongClickListener</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">SCROLL_SPEED_FAST</span> <span class="o">=</span> <span class="mi">25</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">SCROLL_SPEED_SLOW</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span> <span class="n">DRAG_BITMAP_CONFIG</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">ARGB_8888</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mSortable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mDragging</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DragListener</span> <span class="n">mDragListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDragListener</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mBitmapBackgroundColor</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">(</span><span class="mi">128</span><span class="o">,</span> <span class="mh">0xFF</span><span class="o">,</span> <span class="mh">0xFF</span><span class="o">,</span> <span class="mh">0xFF</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Bitmap</span> <span class="n">mDragBitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ImageView</span> <span class="n">mDragImageView</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">mLayoutParams</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MotionEvent</span> <span class="n">mActionDownEvent</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mPositionFrom</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** コンストラクタ */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SortableListView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setOnItemLongClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** コンストラクタ */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SortableListView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setOnItemLongClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** コンストラクタ */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SortableListView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setOnItemLongClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ドラッグイベントリスナの設定 */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDragListener</span><span class="o">(</span><span class="n">DragListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mDragListener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ソートモードの切替 */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSortable</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">sortable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mSortable</span> <span class="o">=</span> <span class="n">sortable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ソート中アイテムの背景色を設定 */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBackgroundColor</span><span class="o">(</span><span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mBitmapBackgroundColor</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ソートモードの設定 */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getSortable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mSortable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** MotionEvent から position を取得する */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">eventToPosition</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">pointToPosition</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** タッチイベント処理 */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mSortable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">storeMotionEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">duringDrag</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">stopDrag</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_OUTSIDE</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">stopDrag</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** リスト要素長押しイベント処理 */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onItemLongClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">parent</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">startDrag</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ACTION_DOWN 時の MotionEvent をプロパティに格納 */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">storeMotionEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mActionDownEvent</span> <span class="o">=</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">event</span><span class="o">);</span> <span class="c1">// 複製しないと値が勝手に変わる</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ドラッグ開始 */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">startDrag</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// イベントから position を取得</span>
</span><span class='line'>        <span class="n">mPositionFrom</span> <span class="o">=</span> <span class="n">eventToPosition</span><span class="o">(</span><span class="n">mActionDownEvent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 取得した position が 0未満＝範囲外の場合はドラッグを開始しない</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mPositionFrom</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mDragging</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// View, Canvas, WindowManager の取得・生成</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">getChildByIndex</span><span class="o">(</span><span class="n">mPositionFrom</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Canvas</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">WindowManager</span> <span class="n">wm</span> <span class="o">=</span> <span class="n">getWindowManager</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ドラッグ対象要素の View を Canvas に描画</span>
</span><span class='line'>        <span class="n">mDragBitmap</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">view</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">DRAG_BITMAP_CONFIG</span><span class="o">);</span>
</span><span class='line'>        <span class="n">canvas</span><span class="o">.</span><span class="na">setBitmap</span><span class="o">(</span><span class="n">mDragBitmap</span><span class="o">);</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 前回使用した ImageView が残っている場合は除去（念のため？）</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDragImageView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">wm</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">mDragImageView</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ImageView 用の LayoutParams が未設定の場合は設定する</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mLayoutParams</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">initLayoutParams</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ImageView を生成し WindowManager に addChild する</span>
</span><span class='line'>        <span class="n">mDragImageView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">mDragImageView</span><span class="o">.</span><span class="na">setBackgroundColor</span><span class="o">(</span><span class="n">mBitmapBackgroundColor</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mDragImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">mDragBitmap</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wm</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">mDragImageView</span><span class="o">,</span> <span class="n">mLayoutParams</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ドラッグ開始</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDragListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPositionFrom</span> <span class="o">=</span> <span class="n">mDragListener</span><span class="o">.</span><span class="na">onStartDrag</span><span class="o">(</span><span class="n">mPositionFrom</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">duringDrag</span><span class="o">(</span><span class="n">mActionDownEvent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ドラッグ処理 */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">duringDrag</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mDragging</span> <span class="o">||</span> <span class="n">mDragImageView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// スクロール速度の決定</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">speed</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">fastBound</span> <span class="o">=</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">9</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">slowBound</span> <span class="o">=</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getEventTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">event</span><span class="o">.</span><span class="na">getDownTime</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">500</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// ドラッグの開始から500ミリ秒の間はスクロールしない</span>
</span><span class='line'>            <span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">slowBound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">speed</span> <span class="o">=</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">fastBound</span> <span class="o">?</span> <span class="o">-</span><span class="n">SCROLL_SPEED_FAST</span> <span class="o">:</span> <span class="o">-</span><span class="n">SCROLL_SPEED_SLOW</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">height</span> <span class="o">-</span> <span class="n">slowBound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">speed</span> <span class="o">=</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">height</span> <span class="o">-</span> <span class="n">fastBound</span> <span class="o">?</span> <span class="n">SCROLL_SPEED_FAST</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">SCROLL_SPEED_SLOW</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// スクロール処理</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">speed</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 横方向はとりあえず考えない</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">middlePosition</span> <span class="o">=</span> <span class="n">pointToPosition</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">middle</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">middlePosition</span> <span class="o">==</span> <span class="n">AdapterView</span><span class="o">.</span><span class="na">INVALID_POSITION</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">middlePosition</span> <span class="o">=</span> <span class="n">pointToPosition</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">getDividerHeight</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">+</span> <span class="mi">64</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">View</span> <span class="n">middleView</span> <span class="o">=</span> <span class="n">getChildByIndex</span><span class="o">(</span><span class="n">middlePosition</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">middleView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setSelectionFromTop</span><span class="o">(</span><span class="n">middlePosition</span><span class="o">,</span> <span class="n">middleView</span><span class="o">.</span><span class="na">getTop</span><span class="o">()</span> <span class="o">-</span> <span class="n">speed</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ImageView の表示や位置を更新</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDragImageView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDragImageView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDragImageView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">updateLayoutParams</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">());</span> <span class="c1">// ここだけスクリーン座標を使う</span>
</span><span class='line'>        <span class="n">getWindowManager</span><span class="o">().</span><span class="na">updateViewLayout</span><span class="o">(</span><span class="n">mDragImageView</span><span class="o">,</span> <span class="n">mLayoutParams</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDragListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPositionFrom</span> <span class="o">=</span> <span class="n">mDragListener</span><span class="o">.</span><span class="na">onDuringDrag</span><span class="o">(</span><span class="n">mPositionFrom</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">pointToPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ドラッグ終了 */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">stopDrag</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isDrop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mDragging</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isDrop</span> <span class="o">&amp;&amp;</span> <span class="n">mDragListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDragListener</span><span class="o">.</span><span class="na">onStopDrag</span><span class="o">(</span><span class="n">mPositionFrom</span><span class="o">,</span> <span class="n">eventToPosition</span><span class="o">(</span><span class="n">event</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mDragging</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDragImageView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">getWindowManager</span><span class="o">().</span><span class="na">removeView</span><span class="o">(</span><span class="n">mDragImageView</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mDragImageView</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">// リサイクルするとたまに死ぬけどタイミング分からない by vvakame</span>
</span><span class='line'>            <span class="c1">// mDragBitmap.recycle();</span>
</span><span class='line'>            <span class="n">mDragBitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mActionDownEvent</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>            <span class="n">mActionDownEvent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** 指定インデックスのView要素を取得する */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="nf">getChildByIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getChildAt</span><span class="o">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">getFirstVisiblePosition</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** WindowManager の取得 */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">WindowManager</span> <span class="nf">getWindowManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">WindowManager</span><span class="o">)</span> <span class="n">getContext</span><span class="o">().</span><span class="na">getSystemService</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Context</span><span class="o">.</span><span class="na">WINDOW_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ImageView 用 LayoutParams の初期化 */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initLayoutParams</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mLayoutParams</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">gravity</span> <span class="o">=</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">TOP</span> <span class="o">|</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">LEFT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">flags</span> <span class="o">=</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_NOT_FOCUSABLE</span>
</span><span class='line'>                <span class="o">|</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_NOT_TOUCHABLE</span>
</span><span class='line'>                <span class="o">|</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_KEEP_SCREEN_ON</span>
</span><span class='line'>                <span class="o">|</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_LAYOUT_NO_LIMITS</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">format</span> <span class="o">=</span> <span class="n">PixelFormat</span><span class="o">.</span><span class="na">TRANSLUCENT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">windowAnimations</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">getLeft</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">getTop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ImageView 用 LayoutParams の座標情報を更新 */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">updateLayoutParams</span><span class="o">(</span><span class="kt">int</span> <span class="n">rawY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mLayoutParams</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span>  <span class="n">rawY</span> <span class="o">-</span> <span class="mi">32</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ドラッグイベントリスナーインターフェース */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DragListener</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/** ドラッグ開始時の処理 */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartDrag</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** ドラッグ中の処理 */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onDuringDrag</span><span class="o">(</span><span class="kt">int</span> <span class="n">positionFrom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">positionTo</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** ドラッグ終了＝ドロップ時の処理 */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onStopDrag</span><span class="o">(</span><span class="kt">int</span> <span class="n">positionFrom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">positionTo</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** ドラッグイベントリスナー実装 */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SimpleDragListener</span> <span class="kd">implements</span> <span class="n">DragListener</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/** ドラッグ開始時の処理 */</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartDrag</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** ドラッグ中の処理 */</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onDuringDrag</span><span class="o">(</span><span class="kt">int</span> <span class="n">positionFrom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">positionTo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">positionFrom</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** ドラッグ終了＝ドロップ時の処理 */</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onStopDrag</span><span class="o">(</span><span class="kt">int</span> <span class="n">positionFrom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">positionTo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">positionFrom</span> <span class="o">!=</span> <span class="n">positionTo</span> <span class="o">&amp;&amp;</span> <span class="n">positionFrom</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="o">||</span> <span class="n">positionTo</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms、Android での BACK キーの制御]]></title>
    <link href="http://blog.amay077.net/blog/2014/06/17/hooking-back-key-in-xamarin-forms/"/>
    <updated>2014-06-17T01:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/06/17/hooking-back-key-in-xamarin-forms</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/12979585ac3e2dcacacb">Xamarin.Forms でどうにかしたい iOS と Android の違い</a> の「BACKキーの制御」の <strong>現時点(1.1.0.6201)</strong> での回答。</p>

<!--more-->


<p>Android の BACKキーの制御を、Xamarin.Forms ではどう扱えるかを調べた。</p>

<h2>シナリオ</h2>

<p>Xamarin.Forms による画面１(MainPage)、２(SecondPage)があり、MainPage では BACKキーで戻る(=アプリ終了)事ができるが、SecondPage ではBACKキーが効かない、ようにしたい。</p>

<h2>対策</h2>

<p>まず画面１と２はこんな感じ。ボタンを押したら画面２へ遷移するだけ。</p>

<figure class='code'><figcaption><span>Pages.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// 画面１</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainPage</span> <span class="p">:</span> <span class="n">ContentPage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MainPage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">button</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;To Second&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">button</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">Navigation</span><span class="p">.</span><span class="n">PushAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">SecondPage</span><span class="p">());</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Content</span> <span class="p">=</span> <span class="n">button</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 画面２</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SecondPage</span> <span class="p">:</span> <span class="n">ContentPage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">SecondPage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Label</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Second&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここからが本題。
まず Android側のエントリポイントである <code>MainActivity.cs</code> は以下のように、<code>ContentPage</code> プロパティを設ける。そして <code>OnBackPressed</code> メソッドを override して、MainPage だったら OnBackPressed を親へ伝搬する。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Activity(Label = &quot;ScrollTest.Android.Android&quot;, MainLauncher = true)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AndroidActivity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span><span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Xamarin</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">Init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SetPage</span><span class="p">(</span><span class="k">new</span> <span class="n">NavigationPage</span><span class="p">(</span><span class="k">new</span> <span class="n">MainPage</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Page</span> <span class="n">ContentPage</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnBackPressed</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">ContentPage</span> <span class="k">is</span> <span class="n">MainPage</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">OnBackPressed</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、MainActivity.ContentPage への設定を行うコードは以下の通り。
PageRenderer を拡張して ExportRenderer することで、すべての Page にフックをかけ、Page の表示時に MainActivity.ContentPage に設定する。</p>

<figure class='code'><figcaption><span>MyPageRenderer.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Xamarin.Forms.Platform.Android</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.App</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Xamarin.Forms</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">ScrollTest.Android</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Views</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Android.Graphics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">[assembly:ExportRenderer(typeof(ContentPage), typeof(MyPageRenderer))]</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">ScrollTest.Android</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">MyPageRenderer</span> <span class="p">:</span> <span class="n">PageRenderer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnElementChanged</span><span class="p">(</span><span class="n">ElementChangedEventArgs</span><span class="p">&lt;</span><span class="n">Xamarin</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">Page</span><span class="p">&gt;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">OnElementChanged</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// なんとなく不安なので weak にしてみた</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">activity</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="p">&lt;</span><span class="n">MainActivity</span><span class="p">&gt;(</span><span class="k">this</span><span class="p">.</span><span class="n">Context</span> <span class="k">as</span> <span class="n">MainActivity</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">e</span><span class="p">.</span><span class="n">NewElement</span><span class="p">.</span><span class="n">Appearing</span> <span class="p">+=</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">__</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">MainActivity</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">activity</span><span class="p">.</span><span class="n">TryGetTarget</span><span class="p">(</span><span class="k">out</span> <span class="n">a</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">a</span><span class="p">.</span><span class="n">ContentPage</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">NewElement</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、画面１(MainPage)の時だけ BACKキーが効くようにできる。</p>

<h3><code>Appearing</code> イベントが必要なの？</h3>

<p>　Xamarin.Forms の Android実装では、画面遷移の度に <strong>「同じインスタンスの MainActivity」</strong> が使いまわされる、さらに <code>OnElementChanged</code> は、各Pageにつき１度しか発生しない。その為、画面１→２→１と遷移すると <code>MainActivity.ContentPage</code> は <code>SecondPage</code> のままになってしまう。ので <code>Appearing</code> イベントで表示の度に MainActivity.ContentPage を設定する必要がある。</p>

<h3><code>AndroidActivity</code> に static な <code>BackPressed</code> イベントがあるんだけど…</h3>

<p>イベントハンドラの定義は
<code>public delegate bool BackButtonPressedEventHandler(object sender, EventArgs e);</code>
となっていて、<code>true</code> を返すと BACK キーを無効にできるようなのだけど、<code>sender</code> は <code>MainActivity</code>だし、<code>EventArgs</code> は Page を取得できないしで使えないじゃん。。。</p>

<p>なんだかすごく発展途上な気がする、その内いろいろ整備されそうなので、それまで待った方が良い気がします。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift で @autoreleasepool どうやるの？]]></title>
    <link href="http://blog.amay077.net/blog/2014/06/17/autoreleasepool-in-swift/"/>
    <updated>2014-06-17T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/06/17/autoreleasepool-in-swift</id>
    <content type="html"><![CDATA[<p><code>autoreleasepool {  }</code> だそうです。</p>

<!--more-->


<ul>
<li><a href="http://stackoverflow.com/questions/24152050/what-is-the-equivalent-of-autoreleasepool-in-swift">automatic ref counting &ndash; What is the equivalent of @autoreleasepool in Swift? &ndash; Stack Overflow</a></li>
</ul>


<p>こんな感じで使うようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in 1...10000 {
</span><span class='line'>  autoreleasepool {
</span><span class='line'>    // do heavy work
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="http://qiita.com/amay077/items/95a4139e6f553d8a56a1">iOS &ndash; ARC のメモリ解放タイミングを調べた</a> は Swift でも有効なようで。</p>

<p><del><a href="http://swift-lang.org/tryswift/">http://swift-lang.org/tryswift/</a> で試してみたら &ldquo;unexpected token: autoreleasepool&rdquo; で怒られた。。。Xcode6 を入れないと動かせないんですかね。</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms の Label から iOS の UILabel を取り出す]]></title>
    <link href="http://blog.amay077.net/blog/2014/06/13/convert-xamarin-forms-label-to-native-uilabel/"/>
    <updated>2014-06-13T15:34:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/06/13/convert-xamarin-forms-label-to-native-uilabel</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/12979585ac3e2dcacacb">Xamarin.Forms でどうにかしたい iOS と Android の違い</a> の「文字の自動縮小」の自己回答。</p>

<!--more-->


<p>Xamarin.Forms で定義した <code>Label</code> は、iOS では <code>UILabel</code> となるはずなので、その過程のどこかでフックできれば <code>UILabel.AdjustsFontSizeToFitWidth</code> が仕込める、と目論んで、ホントにできたのでメモ。</p>

<h2>要点</h2>

<p><del>Forms→ネイティブのフックは PageRenderer でできる。その中で得られる UIView（のサブクラス）は、Label と UILabel の両方の参照を持っているので、あとは使うだけ。</del></p>

<p><strong>ページでなく、UIパーツレベルでフックできたので、全面的に書き換えた。</strong></p>

<h2>やってみる</h2>

<p>参考にしたのは <a href="https://github.com/xamarin/xamarin-forms-samples/tree/master/Forms2Native">https://github.com/xamarin/xamarin-forms-samples/tree/master/Forms2Native</a> 。</p>

<p>このサンプルをちょっと改造して試した。</p>

<p>まずは Forms側の MySecondPage.cs を修正。</p>

<figure class='code'><figcaption><span>MySecondPage.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MySecondPage</span> <span class="p">:</span> <span class="n">ContentPage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Label</span> <span class="n">MyLabel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MySecondPage</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">MyLabel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Label</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Too loooooooooooooooooooooooong label&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Font</span> <span class="p">=</span> <span class="n">Font</span><span class="p">.</span><span class="n">SystemFontOfSize</span><span class="p">(</span><span class="m">30d</span><span class="p">),</span>
</span><span class='line'>            <span class="n">LineBreakMode</span> <span class="p">=</span> <span class="n">LineBreakMode</span><span class="p">.</span><span class="n">NoWrap</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Orientation</span> <span class="p">=</span> <span class="n">StackOrientation</span><span class="p">.</span><span class="n">Vertical</span><span class="p">,</span>
</span><span class='line'>            <span class="n">VerticalOptions</span> <span class="p">=</span> <span class="n">LayoutOptions</span><span class="p">.</span><span class="n">CenterAndExpand</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Children</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">MyLabel</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ラベルを配置。とても文字が長いので全部は表示しきれない。</p>

<p>次に iOS側に MyLabelRenderer.cs を作成。</p>

<figure class='code'><figcaption><span>MyLabelRenderer.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Xamarin.Forms</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Forms2Native</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Xamarin.Forms.Platform.iOS</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MonoTouch.UIKit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">[assembly:ExportRenderer(typeof(Label), typeof(MyLabelRenderer))]</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Forms2Native</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">MyLabelRenderer</span> <span class="p">:</span> <span class="n">LabelRenderer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnElementChanged</span><span class="p">(</span><span class="n">ElementChangedEventArgs</span><span class="p">&lt;</span><span class="n">Label</span><span class="p">&gt;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">base</span><span class="p">.</span><span class="n">OnElementChanged</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">Control</span><span class="p">.</span><span class="n">AdjustsFontSizeToFitWidth</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ExportRenderer</code> で「Formsの<code>Label</code>は、<code>MyLabelRenderer</code>を使う」と定義している。
するとすべての <code>Label</code> の生成時を <code>OnElementChanged</code> でフックでき、<code>Control</code> で <code>UILabel</code> は取り出せるので、あとはご自由に、という感じ。</p>

<p>この実装だと、すべての Label に Ajusts が適用されてしまう。個別に行いたい場合は、Forms側に Labelから派生した <code>AjustableLabel</code> を作成して使い、<code>ExportRenderer(typeof(Label),…</code> のところを <code>ExportRenderer(typeof(AjustableLabel),…</code> にすればいけるはず。そしてこの方法はカスタムビューを作る手順に通じる（というかそのもの？）はず。</p>

<p>ちなみにこの <code>OnElementChanged</code> は、Nuget の Xamarin.Formsパッケージの Ver1.1.0.6201から利用できる。</p>

<h2>実行する</h2>

<p>こんな感じで、ちゃんと文字サイズが縮小されました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/getting_uilabel_from_xamarin_forms.png" alt="" /></p>

<p>Android の方も同じ要領でいけるは…ず。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms でどうにかしたい iOS と Android の違い]]></title>
    <link href="http://blog.amay077.net/blog/2014/06/10/difference-ios-and-android-in-xamarin-forms/"/>
    <updated>2014-06-10T15:30:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/06/10/difference-ios-and-android-in-xamarin-forms</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms で簡単な iOS/Android 両対応アプリを作ってみてて、悩ましい点がいくつか見つかってるので、挙げてみる。</p>

<!--more-->


<h2><del>不可視の扱い</del></h2>

<p><del>Forms 側のパーツには <code>IsVisible = true | false</code> がある。
iOS は <code>true | false</code> なのでいいけど、Android の Visibility は、 <code>Visible | Invisible | Gone</code> の3つある。</del></p>

<p><del>Forms 側での <code>IsVisible = false</code> は、Android では <code>Invisible</code> に相当するみたい。つまり StackLayout とかで「不可視なパーツが <strong>詰められない</strong>」。 iOS の <code>Visible = false</code> は <strong>詰められる</strong> 模様。</del></p>

<p><code>IsVisible = false</code> は Android ではちゃんと <code>Gone</code> になってました、すいませんでした。</p>

<h2>空文字の扱い</h2>

<p>IsVisible と勘違いしてたのはこっちだった。</p>

<p>StackLayout に、Label を2つ積んで、上の Label を空文字にすると、iOSでは詰められるけど、Androidでは空白が空くみたい。こっちはちゃんと裏をとった(汗)</p>

<p><a href="https://gist.github.com/amay077/cf0f4ca1aa14d54bac9a">https://gist.github.com/amay077/cf0f4ca1aa14d54bac9a</a></p>

<h2>画面回転時の再構築</h2>

<p>Android だと、画面を回転させると <code>onCreate</code> からやり直しなのは常識。
Forms アプリを Android で動かして回転させると、なんと <strong>RootPage まで戻って</strong> しまう。なんじゃこりゃ。</p>

<h2>回避方法</h2>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/amay077">@amay077</a> あとAndroidの回転問題（バグです）はとりあえず ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation で回避するといいそうです（そりゃそうだ…）</p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/statuses/476645011602165760">2014, 6月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>こんな感じっすね。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Activity(MainLauncher = true, </span>
</span><span class='line'><span class="na">    ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation )]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AndroidActivity</span>
</span><span class='line'><span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<h2>BACKキーの扱い</h2>

<p>iOS なら <code>NavigationPage.SetHasNavigationBar(page, false)</code> としてしまえば、ナビゲーションバーが表示されなくなるので、前の画面に戻ることはできなくなるが、Android の BACKキーを無効にするにはどうしたら。。。</p>

<h3>自己解決</h3>

<p><code>AndroidActivity</code> のサブクラスで、<code>OnBackPressed</code> を override して実装を潰してしまえばよい。けど画面毎に「戻る／戻れない／Confirm出す」とか細かい制御ができるのかは不明。</p>

<h2>デフォルトスタイル</h2>

<p>iOS は白基調、Androidは黒基調なので、Forms側で <code>TextColor = Color.Black</code> などとすると、当たり前だが Android で見えない。
iOS はスタイル変えるのしんどいので、Android側の Theme を <code>Theme.Holo.Light</code> にしとく。</p>

<figure class='code'><figcaption><span>MainActivity.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Activity(Label = &quot;MyApp&quot;,  </span>
</span><span class='line'><span class="na"> MainLauncher = true, </span>
</span><span class='line'><span class="na"> Theme = &quot;@android:style/Theme.Holo.Light&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AndroidActivity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 以下省略 */</span>
</span></code></pre></td></tr></table></div></figure>


<h2>起動時</h2>

<p>Android 側の起動時に ActionBar の付いた空白画面が表示される時間が割とながくて気になる(Galaxy Nexus だけど)。Forms の画面をロードするのに時間がかかるのだろうか？
ActionBar だけでも消したくて Theme を <code>Theme.Holo.Light.NoActionBar</code> にしてみたら Page が表示されなくなった。。。</p>

<p>NoActionBar な Theme を使うと Activity.ActionBar が null になるんだけど、Xamarin.Forms がそれに対応してない気がした（スタックトレース見ると UpdateActionBar で NullReferenceException だし）ので、<a href="https://bugzilla.xamarin.com/buglist.cgi?product=Forms&amp;component=Forms&amp;resolution=---&amp;list_id=92025">Bugzilla</a> に登録してみた、初めて。どうなるやら。</p>

<h2>文字の自動縮小</h2>

<p>iOS の <code>UITextField</code> は <code>adjustsFontSizeToFitWidth</code> を設定するとパーツのサイズに合わせて文字サイズを自動拡縮してくれる機能があったけど、Forms の <code>Label</code> にはそんなものはありません。<code>PageRenderer</code> を使って iOS 独自処理しないとダメ。</p>

<h3>自己解決</h3>

<p>やはり PageRenderer 使うとできた → <a href="http://qiita.com/amay077/items/8eaa595cc2fc88797b2f">Xamarin.Forms の Label から iOS の UILabel を取り出す</a></p>

<h2>iPhone と iPad</h2>

<p>StackLayout や RelativeLayout でUIを書けば、相対的な位置関係は iPhone と同じものが iPad でも再現されるが、サイズをリテラルで指定するところは、特にインテグレーションしてくれるわけでないので、プラットフォーム毎に調整が必要。例えば文字サイズは、iPad では iPhone より大きな値にしないと残念な感じに。</p>

<p>他にも見つけたら書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms は Windows.Forms じゃないよ]]></title>
    <link href="http://blog.amay077.net/blog/2014/06/08/xamarin-forms-is-not-windows-forms/"/>
    <updated>2014-06-08T15:28:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/06/08/xamarin-forms-is-not-windows-forms</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.buildinsider.net/mobile/xamarintips/0005">iOS／Androidの画面レイアウトを共通化するには？（Xamarin.Forms） &ndash; Build Insider</a></li>
</ul>


<p>に書ききれなかったことなど。</p>

<!--more-->


<h2>名前どうよ？</h2>

<p><strong>Xamarin.Forms</strong> って名前、どうしても Windows.Forms を連想するけど全然別ものだから。とはいえ、あんまり WPF の経験がないので、Windows.Forms にそれほどイヤな印象がない。VB6時代なんて、画面に Fill するのすらゴリゴリ実装が必要だったし。</p>

<h2>前身は MonoTouch.Dialog じゃないかと思います</h2>

<p>MonoTouch.Dialog というのは、Xamarin の CTO でありスーパーハッカーのミゲル氏が開発した、簡単なコードで iOS の UI を実装できるライブラリ（「Dialog」だけど、「ダイアログボックス」とは関係ない。 ）</p>

<ul>
<li><a href="https://github.com/migueldeicaza/MonoTouch.Dialog">migueldeicaza/MonoTouch.Dialog</a></li>
</ul>


<p>たぶんだけど、Xamarin.Forms はこれの思想がベースにあって、他のプラットフォームやXAML対応が行われたんじゃないかと勝手に思ってます。（いつか紹介しようと思ってたけどこれでお役御免になってしまったかも）</p>

<h2>Android の UIフレームワークに似てるような…</h2>

<p><a href="http://developer.xamarin.com/guides/cross-platform/xamarin-forms/controls/layouts/">StackLayout</a> は LinearLayout相当、RelativeLayout も、同名クラスがあるし、割と Android の UI の考え方をベースにしてるのかなと予想。Windows Phone はあまり経験がないので知らない。。。</p>

<h2>Hoge.iOS というプロジェクト名がキライ</h2>

<p>プラットフォームの識別子をプロジェクト名につけるのが良いんだけど、 <code>HelloForms.iOS</code> とか「iOS」とつけるのが嫌い。名前空間名とかが小文字で始まってしまうのが気持ち悪くて。
MvvmCross などでは、iOS は <code>XXX.Touch</code> 、Android は <code>XXX.Droid</code> としていて、こっちの方が好み。</p>

<h2>XAML はデザイナーが無いとツラい</h2>

<p>WPFじゃなくてもXAMLって言っていいんだ、というのを初めて知ったｗ
Xamarin Studio のXMLデザイナーは補完も効かないしツラい。コードでUI作るのにも限界があるので、今年の <a href="https://evolve.xamarin.com/">Evolve</a> あたりで「Xamarin.Forms のUIデザイナー発表ばばーん！！」を期待してます。</p>

<h2>タブの位置が上とか下とかどうでもいい</h2>

<p>「UIはプラットフォームの流儀に合わせるべき」という説明に必ずと言っていいほど登場するのがタブバーの位置が Androidだと上で、iOSだと下、ってやつ。
個人的にはどうでもいい。タブの切り替えをよく使うなら指の届きやすい画面下部に配置すべきだし、同じアプリならiOS版とAndroid版でUIを変えるべきでないと思っている。（かと言って、iOS版のUIをそっくりそのままAndroidに移植すればいいという話でもない）。 <strong>プロダクトのUXは、プラットフォームのUXより優先されるべき</strong> 、と思ってる。</p>

<h2>上司への提案には好材料かと</h2>

<ul>
<li>私「iOS/Android 両方開発するなら Xamarin 使いましょう！」</li>
<li>上「そうか、それは１ソースで両対応できるのか？」</li>
<li>私「いえ、画面はプラットフォーム毎に書きます、カメラとかも別です。共通化できるのはコアロジックです。」</li>
<li>上「なんだその程度か」</li>
<li>私「…」</li>
</ul>


<p>というよくある話には、「画面が１ソースで共通にできる Xamarin.Forms」は、説得材料としては、とりわけ対PhoneGapには効果高いんじゃないかと思います。毒りんごかどうかはともかく。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS4.x 対応のソースコードから「新しいAPI」を使っている箇所を探す]]></title>
    <link href="http://blog.amay077.net/blog/2014/05/14/find-new-api-in-ios4-supported-code/"/>
    <updated>2014-05-14T15:26:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/05/14/find-new-api-in-ios4-supported-code</id>
    <content type="html"><![CDATA[<p>　アプリを iOS4.x でも動作させたい場合、Xcode のプロジェクト設定で Deployment Target を &ldquo;4.x&rdquo; (4.3とか) に設定します。
一方で Base SDK は最新のものしか選べません、今だと &ldquo;7.1&#8221;。</p>

<!--more-->


<p>　この状態だと、コード中で iOS5以降に追加された API を使っていると、iOS4.x端末では当然クラッシュします。</p>

<p>　Target を 4.x にしてるんだから、クラッシュしそうなコードがあったら Xcode が検出して警告して欲しいんですが、そういう機能はないみたいです。(実はあるのでしょうか？ Android だと警告どころかビルドエラーになるので、iOSアプリ開発は大変不便だな、と思ってしまいます。Obj-C は JavaScript みたいなもんだから仕方がない、のは分かりますが)</p>

<p>　 <a href="http://oclint.org/">OCLint</a> という静的コード解析ツールを見つけましたが、機能をざっと見ても、APIバージョンをチェックするものはなさそうです。（試したことはありません）</p>

<p>　しかし「動かしてみないと分からない」のは不安すぎるので、なんとかして「新しいAPIを使っていないか？」をチェックする方法を考えて、行ってみました。</p>

<h2>新しいAPIを使っている箇所を見つける方法</h2>

<h3>A. iOS Developer Center に API の更新内容がまとめられたページがあります。</h3>

<ul>
<li><a href="https://developer.apple.com/library/ios/releasenotes/General/iOS50APIDiff/index.html#//apple_ref/doc/uid/TP40011042">iOS 4.3 to iOS 5.0 API Differences</a></li>
<li><a href="https://developer.apple.com/LIBRARY/ios/releasenotes/General/iOS60APIDiffs/index.html">iOS 5.1 to iOS 6.0 API Differences</a></li>
<li><a href="https://developer.apple.com/LIBRARY/IOS/releasenotes/General/iOS70APIDiffs/index.html">iOS 6.1 to iOS 7.0 API Differences</a></li>
</ul>


<h3>B. これらのページから「変更のあった API のリスト」を抽出します。</h3>

<p>具体的には以下のようなリストを作ります。</p>

<blockquote><p>Added vImageAlphaBlend_ARGB8888
Added vImageAlphaBlend_ARGBFFFF
…</p></blockquote>

<p>この作業は自動化したいのですが、お試しなので手動でテキストエディタと <strong>EXCEL</strong> を駆使して作成しました。</p>

<h3>C. あとは、自分のソースコードに対して、順次 grep をかけるスクリプトを作ります。</h3>

<p>修正リストの中には、 <code>-[ALAsset setImageData:metadata:completionBlock:]</code> のように名前付き引数だったりする API もあるので、正規表現でなるべくヒットするように置換します。</p>

<figure class='code'><figcaption><span>find_new_api.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>grep -nr <span class="s2">&quot;ALAsset.*setImageData.*metadata.*completionBlock:.*;&quot;</span> ./src/*
</span><span class='line'>grep -nr <span class="s2">&quot;vImageAlphaBlend_ARGB8888.*;&quot;</span> ./src/*
</span><span class='line'>grep -nr <span class="s2">&quot;vImageAlphaBlend_ARGBFFFF.*;&quot;</span> ./src/*
</span><span class='line'>…
</span></code></pre></td></tr></table></div></figure>


<h3>D. このスクリプトを実行して何か出たら、そこが「新しいAPIを使ってる箇所」です。</h3>

<h2>まとめ</h2>

<h3>注意点</h3>

<ul>
<li>クラス自体が追加されているものも、メソッドの追加として探しているので、他のクラスと誤認することがあります。</li>
<li>正規表現が完全に正しいかよくわかりません（ソースコードに改行含む場合とか）</li>
</ul>


<p>簡単で、不格好な方法ですが、十分に機能してくれますし、開発者の知識やテストだけに頼るのに比べれば随分と安心できます。</p>

<p>APIの更新情報を JSON か何かで提供してくれたら、もうちょっと楽なんですけども。。。</p>

<p>iOSアプリの開発者のみなさんは、どうやって iOS の下位バージョン互換性を担保しているのでしょうか？</p>
]]></content>
  </entry>
  
</feed>
