<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>http://blog.amay077.net/</link>
    <atom:link href="http://blog.amay077.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 18 Jul 2017 02:22:44 +0900</pubDate>
    <lastBuildDate>Tue, 18 Jul 2017 02:22:44 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Bot Application のソースコードを GitHub で公開する時に秘匿情報を含めない方法</title>
        <description>&lt;p&gt;別に Bot Application に限った話ではないのですけどね。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Microsoft の Bot Framework を使った Bot Application の作成方法は、いくつかWebで公開されていますが、それらに沿って作成したソースコードを GitHub などの誰でも閲覧できるリポジトリで管理・公開すると、本来公開すべきでない以下の情報が含まれてしまいます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bot Directory へ登録する際に発行される「Bot ID」, 「App ID」, 「App Password」&lt;/li&gt;
  &lt;li&gt;Azure へ発行する際の設定情報&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらをソースコード管理に含めないようにする方法を紹介します。&lt;/p&gt;

&lt;h2 id=&quot;bot-id-app-id-app-password-をソースコード管理に含めないようにする&quot;&gt;「Bot ID」, 「App ID」, 「App Password」 をソースコード管理に含めないようにする&lt;/h2&gt;

&lt;p&gt;たとえば、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bluesky/2016/11/15/5-step-tutorial-smilescorebot-bot-framework-cognitive-services-ja/&quot;&gt;5ステップでズバリ！笑顔判定BOT を作成しよう by Microsoft Bot Framework and Cognitive Services – 青い空の向こうへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、BotのIDやパスワードなどを、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app key=&quot;BotId&quot;&lt;/code&gt; などに設定するよう書かれています。&lt;br /&gt;
実際プロジェクト作成直後の &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; を見ても “YourBotID” などと書かれており、「ここに書くのが当然」感を醸し出しています。これがよくない！&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Web.config --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appsettings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- update these with your BotId, Microsoft App Id and your Microsoft App Password--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BotId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;YourBotID&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppPassword&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appsettings&amp;gt;&lt;/span&gt;
: (略)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; 及び &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.Debug.config&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.Release.config&lt;/code&gt; は、 ASP.NET の Webアプリケーションに関する設定を記述するもので、ソースコード管理に含めるべき情報です。&lt;br /&gt;
&lt;strong&gt;ここにIDやパスワードを記述してはいけません&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ではどこに記述するかというと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://devadjust.exblog.jp/20400427/&quot;&gt;ASP.NET Web アプリで、APIキーなどの “秘密のキー” をどこに保存するべきか? : @jsakamoto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で紹介されている方法を使って、別のファイルに逃します。&lt;/p&gt;

&lt;p&gt;具体的には、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新たに &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; というファイル（ファイル名は何でもよい）をプロジェクトに追加し、秘匿情報を含む XML のブロックはそちらに記述する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; に上記ファイルへの参照を記述する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;とします。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; などと同じディレクトリに追加し、ビルドアクションを「コンテンツ」とします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/avoid_secrets_from_github_in_your_bot_application_project_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; の内容は以下です。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Web.local.config --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BotId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;＜あならのBOTID＞&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;＜あなたのMicrosoftAppId＞&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppPassword&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;＜あなたのMicrosoftAppPassword＞&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; に記述していた &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/code&gt; 要素を切り出してきた感じですね。&lt;/p&gt;

&lt;p&gt;そして、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; を次のように修正します。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Web.config --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;appSettings&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Web.local.config&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 秘匿でない設定情報があればここに書く --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
: (略)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings file=&quot;Web.local.config&quot;&amp;gt;&lt;/code&gt; と記述することで、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; の内容をここに注入できます。&lt;/p&gt;

&lt;p&gt;あとは &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; に追加するなどしてソースコード管理対象から除外します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; が存在しなくてもビルドや実行はできるようですが、初見の人には不親切なので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; で補足説明をしておくのがよいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;開発用とプロダクト用で-bot-id-app-id-app-password-を切り替える&quot;&gt;開発用とプロダクト用で 「Bot ID」, 「App ID」, 「App Password」 を切り替える&lt;/h2&gt;

&lt;p&gt;前の手順で設定したID、パスワードなどは「開発用」の情報です。&lt;br /&gt;
Azureに配置した本番環境では、別のID、パスワードを使用したいケースは普通にあります。&lt;br /&gt;
本番環境の設定はAzureポータルから行えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/avoid_secrets_from_github_in_your_bot_application_project_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この図のように、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Azure ポータル（https://portal.azure.com/） で、配布した Bot Application（App Service） を開き、さらに「アプリケーション設定」を開きます&lt;/li&gt;
  &lt;li&gt;「アプリ設定」で、 本番用の「Bot ID」, 「App ID」, 「App Password」を追加します&lt;/li&gt;
  &lt;li&gt;最後に「保存」を押します&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで設定した内容は、配布した &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; にある &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/code&gt; の内容を上書きします。&lt;/p&gt;

&lt;h2 id=&quot;azure-へ発行する際の設定情報をソースコード管理に含めないようにする&quot;&gt;Azure へ発行する際の設定情報をソースコード管理に含めないようにする&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 は、IDE から Azure への発行ができてとても便利なのですが、発行のための情報も保持してしまうので、その際の情報もソースコード管理に含めるべきではありません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/avoid_secrets_from_github_in_your_bot_application_project_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これらの情報はプロジェクトのディレクトリの &lt;code class=&quot;highlighter-rouge&quot;&gt;Properties\PublishProfiles&lt;/code&gt; というサブディレクトリに、 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.pubxml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*.pubxml.user&lt;/code&gt; というファイル名で保存されるようなので、このディレクトリ毎、あるいは個別のファイルを &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; に追加すればよいです。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; には秘匿情報を書かない&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; を作って、そちらに書く、このファイルはソースコード管理しない&lt;/li&gt;
  &lt;li&gt;本番用のIDやパスワードはAzureポータルで設定する&lt;/li&gt;
  &lt;li&gt;Azureへ発行する際の設定情報もソースコード管理しない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果、 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; に次の２行を追加するとよいです。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .gitignore&lt;/span&gt;
＜省略＞

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.local.config
PublishProfiles/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;手前味噌ですが、上記以外の &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; の設定は https://www.gitignore.io/ で “VisualStudio” と検索して生成されるものを使用すると便利です（上の2行が含まれているわけではありません）。&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/15/avoid_secrets_from_github_in_your_bot_application_project/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/15/avoid_secrets_from_github_in_your_bot_application_project/</guid>
        
        
        <category>BotFramework</category>
        
        <category>C#</category>
        
        <category>.NET</category>
        
        <category>ASP.NET</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>Visual Studio for Mac で作ったプロジェクトを Visual Studio 2017 で実行する時気をつけること</title>
        <description>&lt;p&gt;小ネタです。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Xamarin でのモバイルアプリ開発では、 Mac の方が（主に iOS 関連で）都合がよいことが多いので、Visual Studio for Mac を使っています。&lt;/p&gt;

&lt;p&gt;そんなわけなので新規ソリューション作成も Visual Studio for Mac（以前は Xamarin Studio） で行っているのですが、これらで作成したソリューションを Windows の Visual Studio 2017 で開いてビルドし、いざ実行しようと「デバッグの開始(F5)」を押しても、一向にアプリが起動しません。それどころかAndroidエミュレータも起動しません。&lt;/p&gt;

&lt;p&gt;こんなこと初めてだなー、と思っていろいろみていたら、ふとソリューションの構成マネージャーに、「配置」をいう項目が増えているのに気づきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/solution_created_vs4mac_does_not_running_on_vs2017_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「キミ、いつからそこに居たの・・・」、完全にこれが犯人じゃん。&lt;br /&gt;
ということで、この「配置」にチェックを入れて、再度 F5 で実行すると、無事、エミュレータが起動してアプリが実行できました。&lt;/p&gt;

&lt;p&gt;ちなみに下は Visual Studio for Mac の構成マネージャー的な画面ですが、「配置」なんてないんですよね。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/solution_created_vs4mac_does_not_running_on_vs2017_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Win と Mac で同じ機能はまったく期待してない Visual Studio ですが、細かいところ（可能なところ）は統一してほしいなあと思います。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/13/solution_created_vs4mac_does_not_running_on_vs2017/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/13/solution_created_vs4mac_does_not_running_on_vs2017/</guid>
        
        
        <category>Xamarin</category>
        
        <category>VisualStudio</category>
        
        <category>C#</category>
        
      </item>
    
      <item>
        <title>コンソールアプリからBot Frameworkを使ってBotからクライアントにメッセージを送る</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/Bot-Framework/index&quot;&gt;Microsoft の Bot Framework&lt;/a&gt; を使った Botアプリケーションの開発にハマっています（楽しい方の意味で）。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;自作botをazureにデプロイしてskypeで対話&quot;&gt;自作BotをAzureにデプロイしてSkypeで対話&lt;/h2&gt;

&lt;p&gt;まず、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/Shinji-Hashimoto/items/80515f26c5b07b71b600&quot;&gt;Visual Studio2017でBot Frameworkを試す - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bluesky/2016/11/15/5-step-tutorial-smilescorebot-bot-framework-cognitive-services-ja/&quot;&gt;5ステップでズバリ！笑顔判定BOT を作成しよう by Microsoft Bot Framework and Cognitive Services – 青い空の向こうへ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dorapon2000.hatenablog.com/entry/2016/09/04/031821&quot;&gt;Microsoft Bot Frameworkを使ってSkypeボットを作る - dorapon2000’s diary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたりの情報を元に、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;簡単な Bot アプリをビルドして Botエミュレータで実行してみる&lt;/li&gt;
  &lt;li&gt;その Bot を Azure にデプロイする&lt;/li&gt;
  &lt;li&gt;Azure に配置した Bot を Skype と繋げる&lt;/li&gt;
  &lt;li&gt;自分の Skype アカウントと Bot で対話する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まで行うことができました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/my_first_bot_app_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;コンソールアプリから-skype-のユーザークライアントへメッセージを送信する&quot;&gt;コンソールアプリから Skype のユーザー（クライアント）へメッセージを送信する&lt;/h2&gt;

&lt;p&gt;さて、私が本当にやりたいのは「定期的にBotからユーザーへメッセージを送る（時報とか）」ことです。&lt;br /&gt;
が、 Visual Studio の Bot Application のプロジェクトテンプレートでは?（あるいは「Botアプリケーション」では）、処理の起点は必ずユーザー(クライアント)からBotへのメッセージ送信をBotが受信するところから始まるようです（違ってたら教えてください）。&lt;/p&gt;

&lt;p&gt;Bot Framework の REST API には &lt;a href=&quot;https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-connector-send-and-receive-messages&quot;&gt;Send and receive messages&lt;/a&gt; もあるので、任意のタイミングでメッセージを送信することも可能なはず。&lt;/p&gt;

&lt;p&gt;いろいろ探していたら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/39274159/3309589&quot;&gt;Starting a conversation with Microsoft bot builder and microsoft bot framework - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という情報を発見。おお、コンソールアプリからメッセージを送信できれば、これをcron的なものやAzure Functionsで定期的に実行させられそうです。&lt;/p&gt;

&lt;p&gt;コード例を元に悪戦苦闘した結果、下のようなコードでメッセージ送信ができました。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Program.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://smba.trafficmanager.net/apis/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;APP_ID&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;APP_PASSWORD&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;MicrosoftAppCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TrustServiceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ※これがないと認証エラーになる
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectorClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChannelAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;28:8734b597-b313-2457-bda6-d7c342245fea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 送信元(Botの)ユーザー ※IDは適当だけどこんな感じの文字列だった
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChannelAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;29:2WLwfakXxSbEze4gfeGxeS31nXfELePLX3deELoxHw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 送信先ユーザー ※IDは適当だけどこんな感じの文字列だった
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conversations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDirectConversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;botAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;IMessageActivity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateMessageActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recipient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conversation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConversationAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;こんにちわ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ja-Jp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conversations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendToConversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下、ポイント&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コンソールアプリプロジェクトを作ったら、ターゲットフレームワークを .NET Framework 4.6 に上げる（４．５ だと Bot.Builder が入れられなかった）&lt;/li&gt;
  &lt;li&gt;Nugetパッケージマネージャから「Microsoft.Bot.Builder」を入れる（ここで入れたのは v3.8.0 です）&lt;/li&gt;
  &lt;li&gt;＜APP_ID＞、＜APP_PASSWORD＞は、Botを https://dev.botframework.com/ に登録する仮定で得られるやつ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MicrosoftAppCredentials.TrustServiceUrl(serviceUrl)&lt;/code&gt; をしないと、&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateDirectConversation&lt;/code&gt; で認証(401)エラーになりました。 &lt;a href=&quot;https://codedump.io/share/43fLSEl1kzYX/1/bot-framework-unauthorized-when-creating-a-conversation&quot;&gt;Bot Framework Unauthorized when creating a conversation (C#) - Codedump.io&lt;/a&gt; が大変役に立ちました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serviceUrl&lt;/code&gt; は、なんかよく分からんけどこれらしい&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serviceUrl&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;botAccount&lt;/code&gt; のId、 &lt;code class=&quot;highlighter-rouge&quot;&gt;userAccount&lt;/code&gt; のIdは、&lt;a href=&quot;https://github.com/Microsoft/BotBuilder-Samples/tree/master/CSharp/core-GetConversationMembers&quot;&gt;BotBuilder-Samples/CSharp/core-GetConversationMembers&lt;/a&gt; も参考にして、Bot ApplicationのHelloWorldを改造して取得しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このプログラムを実行すると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;userAccount&lt;/code&gt; が示すSkypeユーザー(ここでは私)に「こんにちわ」のメッセージが送信されます、やった！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/my_first_bot_app_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今作りたいと思っているのは「タイムカード打刻BOT」で、月末に EXCEL に退勤時間を書くのが面倒なので、毎日、18:00 になったら、Botに「仕事おわった？」と聞いて欲しいのです。「はい」と回答すればその時刻を打刻、「いいえ」と答えたら１時間後にまた聞いてくる・・・、という感じで（弊社は Skype 常時起動させてるから Skype で試してるけど Bot Connector により Slack などの別ツールにも対応できるはず）。&lt;/p&gt;

&lt;p&gt;これを行うには、クライアント起点の対話でなく、BOT起点の対話が必要で、コンソールアプリからメッセージ送信することができたので、次はAzure Functionでやってみようかと思います。&lt;/p&gt;

&lt;p&gt;BOT開発、しばらく楽しめそうです。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jul 2017 17:40:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/08/sending_message_from_console_app_using_bot_framework/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/08/sending_message_from_console_app_using_bot_framework/</guid>
        
        
        <category>.NET</category>
        
        <category>BotFramework</category>
        
        <category>C#</category>
        
        <category>skype</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>学生でもわかるXamarin勉強会で「Xamarin.Forms.GoogleMaps について」という話をしました</title>
        <description>&lt;p&gt;JXUG名古屋支部の勉強会で Xamarin Day してきました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jxug.connpass.com/event/57324/&quot;&gt;[なごや]学生でもわかるXamarin勉強会 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;資料&quot;&gt;資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-forms-dot-googlemaps-nituite&quot;&gt;Xamarin.Forms.GoogleMaps について // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想とか&quot;&gt;感想とか&lt;/h2&gt;

&lt;p&gt;ほぼほぼ Google Maps API/SDK の紹介でしたね。&lt;br /&gt;
とは言え、&lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;Xamarin.Forms.GoogleMaps&lt;/a&gt; については、リファレンス的なドキュメント作成をサボっているので、（なにかキッカケを作って）作成したいと思っています。&lt;/p&gt;

&lt;p&gt;Google Maps API の機能自体が、どこまで Android/iOS/.NET開発者に知られているかも分からないし、需要はあるのかもしれないですね。&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jun 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/06/17/had_a_session_about_xamarin_forms_googlemaps_in_jxug_nagoya/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/06/17/had_a_session_about_xamarin_forms_googlemaps_in_jxug_nagoya/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>登壇</category>
        
      </item>
    
      <item>
        <title>macOS 初期セットアップ時にインストールするアプリ</title>
        <description>&lt;p&gt;Mac をクリーンインストールするときに入れるアプリ一覧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Google IME&lt;/li&gt;
  &lt;li&gt;Xcode&lt;/li&gt;
  &lt;li&gt;Xcode command lie tools&lt;/li&gt;
  &lt;li&gt;Homebrew&lt;/li&gt;
  &lt;li&gt;VMware Fusion&lt;/li&gt;
  &lt;li&gt;Android Studio&lt;/li&gt;
  &lt;li&gt;Dropbox&lt;/li&gt;
  &lt;li&gt;Skype&lt;/li&gt;
  &lt;li&gt;Java8 - JDK&lt;/li&gt;
  &lt;li&gt;VSCode&lt;/li&gt;
  &lt;li&gt;anyenv&lt;/li&gt;
  &lt;li&gt;ndenv&lt;/li&gt;
  &lt;li&gt;rbenv&lt;/li&gt;
  &lt;li&gt;peco&lt;/li&gt;
  &lt;li&gt;adb-peco&lt;/li&gt;
  &lt;li&gt;Xamarin Studio&lt;/li&gt;
  &lt;li&gt;JetBrains Rider&lt;/li&gt;
  &lt;li&gt;JetBrains DataGrip&lt;/li&gt;
  &lt;li&gt;ClipMenu&lt;/li&gt;
  &lt;li&gt;FreeMemory&lt;/li&gt;
  &lt;li&gt;WinMacZipper&lt;/li&gt;
  &lt;li&gt;Skitch&lt;/li&gt;
  &lt;li&gt;.NET Core&lt;/li&gt;
  &lt;li&gt;ESET Security&lt;/li&gt;
  &lt;li&gt;SourceTree&lt;/li&gt;
  &lt;li&gt;ImageOptim&lt;/li&gt;
  &lt;li&gt;Pngyu&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;移行元があるときやること&quot;&gt;移行元があるときやること&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;.bash_profile の移行&lt;/li&gt;
  &lt;li&gt;DataGrip のDB接続設定の移行&lt;/li&gt;
  &lt;li&gt;VPN ルーティング設定の移行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sig9.hatenablog.com/entry/2015/03/05/115736&quot;&gt;OS X での VPN 時に特定経路のみ、VPN にルーティングするには - らくがきちょう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 09 May 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/05/09/first_install_apps_on_mac/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/05/09/first_install_apps_on_mac/</guid>
        
        
        <category>macOS</category>
        
      </item>
    
      <item>
        <title>JetBrains Rider で Xamarin.Android プロジェクトのデバッグが行えるようになりました</title>
        <description>&lt;p&gt;クロスプラットフォーム対応の.NET向けIDE、JetBrains Rider の EAP(Early Access Program) ver.20 で、ついに Xamarin.Android の「実行」がサポートされました（今までも「ビルドだけ」はできたのですが）。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jetbrains.com/dotnet/2017/04/14/rider-eap-20-xamarin-android-node-js-net-core-improvements/&quot;&gt;Rider EAP 20: Xamarin Android, Node.js, .NET Core improvements, and more - .NET Tools Blog.NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば &lt;a href=&quot;https://developer.xamarin.com/samples/&quot;&gt;Xamarin Samples&lt;/a&gt; の&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/samples/xamarin-forms/ButtonCode/&quot;&gt;ButtonCode - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を Rider で開いてビルド、デバッグ実行してみます。&lt;br /&gt;
これは Xamarin.Forms のソリューションですが、その中の Android プロジェクトは実行できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/rider_supports_xamarin_android_project_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上図のように、エミュレータも起動でき、ブレークポイントを置いてのステップイン・ステップオーバーなども実行できます。&lt;br /&gt;
デバッグ画面のルック＆フィールは JetBrains 製品らしくなっており、Android Studio を使っている人にとっても馴染みがあります。&lt;/p&gt;

&lt;p&gt;また、Rider で Xamarin.Android プロジェクトを新規作成することも可能です。&lt;br /&gt;
が、Rider で作成したプロジェクトをXamarin Studioなどで開くとエラーになってしまいます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;JetBrains Rider  Xamarin Android プロジェクト作成→Run→エミュ起動→アプリ実行、までできたけど、その .sln/csproj を Visual Studio for Mac で開くとエラー &lt;a href=&quot;https://t.co/u0HXb4dVSr&quot;&gt;pic.twitter.com/u0HXb4dVSr&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@超技術書典4/30 あ-12 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/852912306056863744&quot;&gt;2017年4月14日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;こちらは今後の開発進行に伴い改善されていくでしょう。&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/19/rider_supports_xamarin_android_project/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/19/rider_supports_xamarin_android_project/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>JetBrains</category>
        
        <category>Rider</category>
        
      </item>
    
      <item>
        <title>日本Androidの会 浜松支部さんの勉強会で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました</title>
        <description>&lt;p&gt;日本Androidの会 浜松支部さんの勉強会で Xamarin Day してきました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jaghama.connpass.com/event/54228/&quot;&gt;はじめてのXamarin with D - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;資料&quot;&gt;資料&lt;/h2&gt;

&lt;p&gt;資料は例によって DroidKaigi で発表したもののヘッダとフッタを変えただけです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-jaghama&quot;&gt;Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発 #jaghama // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想とか&quot;&gt;感想とか&lt;/h2&gt;

&lt;p&gt;前週の名古屋での勉強会でも参加者の人に聞いたんですけど、Kotlin 使ったことある人はゼロで… DroidKaigi ではもはやデファクトスタンダードくらいの勢いだったのに、これが地域格差か…。&lt;/p&gt;

&lt;p&gt;技術書典で販売した &lt;a href=&quot;https://atsushieno.github.io/xamaritans/tbf2.html&quot;&gt;Essential Xamarin Yin/Yang&lt;/a&gt; の著者確保分３冊を持っていきました。すべて買っていただいてありがとうございます！これで私の在庫はなくなりました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Essential Xamarin Yin/Yang x 3 完売ありがとうございまーす。 &lt;a href=&quot;https://twitter.com/hashtag/jaghama?src=hash&quot;&gt;#jaghama&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@超技術書典4/30 あ-12 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/853121825403830272&quot;&gt;2017年4月15日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表の後は、ハンズオンという名目でもくもく会でした。&lt;/p&gt;

&lt;p&gt;ハンズオンのテキストは前日つぶやいたらたくさんのひとが教えてくれて、 &lt;a href=&quot;https://twitter.com/ytabuchi&quot;&gt;@ytabuchi&lt;/a&gt; さんはエントリまで書いて頂いて、ありがとうございます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Xamarin 勉強会で行うことができるハンズオンの Lineup ってどんなのがあります？（明日のまだ決めてない）&lt;/p&gt;&amp;mdash; あめい@超技術書典4/30 あ-12 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/852780051183525889&quot;&gt;2017年4月14日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ytabuchi.hatenablog.com/entry/XamarinHandsOn&quot;&gt;Xamarin ハンズオン資料まとめ - Xamarin 日本語情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当日は、 &lt;a href=&quot;https://twitter.com/chomado&quot;&gt;@chomado&lt;/a&gt; さんの &lt;a href=&quot;https://github.com/chomado/SimpleList&quot;&gt;chomado/SimpleList: 簡単な Xamarin.Forms アプリハンズオン資料&lt;/a&gt; を選択される方が多かったように見えました。&lt;/p&gt;

&lt;p&gt;私もそれを改造して、&lt;a href=&quot;/blog/2017/04/13/creating_mastodon_client_using_dot_net_core/&quot;&gt;Masto.NET を使って&lt;/a&gt;  mastodon のユーザー一覧を表示するアプリを Xamarin.Forms で作って遊んでました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/5jbGKktQtX&quot;&gt;https://t.co/5jbGKktQtX&lt;/a&gt; をちょっと改造して、 Xamarin.Forms で mastodon .cloud のユーザーを取得して表示するやつ &lt;a href=&quot;https://t.co/WF0C3CxNLF&quot;&gt;pic.twitter.com/WF0C3CxNLF&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@超技術書典4/30 あ-12 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/853157026561536001&quot;&gt;2017年4月15日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;あ、 Visual Studio 2017 でも Xamarin.Forms プロジェクトの初回ビルド時に nuget パッケージ群のダウンロードで 800MB くらいもっていかれるようです。&lt;/p&gt;

&lt;h2 id=&quot;懇親会&quot;&gt;懇親会&lt;/h2&gt;

&lt;p&gt;刺し身も焼き魚も寿司もおいしかった！泣いた(ワサビの辛さで)！&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;某打ち上げに参加できないので、廻らない寿司食べられてよかった &lt;a href=&quot;https://t.co/iEck2evKvZ&quot;&gt;pic.twitter.com/iEck2evKvZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@超技術書典4/30 あ-12 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/853196748428201984&quot;&gt;2017年4月15日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://tabelog.com/en/shizuoka/A2202/A220201/22001004/&quot;&gt;ラーメン三太&lt;/a&gt; はまた次回行きましょう！&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/15/had_a_session_about_xamarin_android_in_jaghama/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/15/had_a_session_about_xamarin_android_in_jaghama/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>登壇</category>
        
      </item>
    
      <item>
        <title>Mastodon のクライアントアプリを .NET Core で作ってみた</title>
        <description>&lt;p&gt;Mastodon という「自由で」「オープンソースな」（Twitter のような） SNS がなんか流行りだして、もともとあった &lt;a href=&quot;https://mastodon.cloud/&quot;&gt;mastodon.cloud&lt;/a&gt; や &lt;a href=&quot;https://twitter.com/nullkal&quot;&gt;@nullkal&lt;/a&gt; 氏が立てたインスタンス &lt;a href=&quot;https://mstdn.jp/&quot;&gt;mstdn.jp&lt;/a&gt; に日本人が多くあつまって祭りみたいになってる。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ascii.jp/elem/000/001/465/1465842/&quot;&gt;ASCII.jp：Twitterのライバル？　実は、新しい「マストドン」（Mastodon）とは！｜遠藤諭のプログラミング＋日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API ももちろんあって、 .NET 製の APIライブラリもあった。 @kagasu さん :ok_hand:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;tl&quot; dir=&quot;ltr&quot;&gt;glacasa/Mastonet: C# Library for Mastodon&lt;a href=&quot;https://t.co/BwR9n1Eqbd&quot;&gt;https://t.co/BwR9n1Eqbd&lt;/a&gt;&lt;/p&gt;&amp;mdash; ♣ ♥ ♠ ♦🍍 (@kagasu) &lt;a href=&quot;https://twitter.com/kagasu/status/852206484347912192&quot;&gt;2017年4月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;で、試しにこの「&lt;a href=&quot;https://github.com/glacasa/Mastonet&quot;&gt;Musto.NET&lt;/a&gt;」を使って、 mastodon.cloud の連邦？タイムラインを表示するだけのコンソールアプリを作ってみた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/MastoConsoleNetStandard&quot;&gt;amay077/MastoConsoleNetStandard: Mastodon クライアントのサンプルコンソールアプリ for .NET Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API はとってもシンプルで、次のような単純なコードでTOOTのストリーミング受信ができる。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RunAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mastodon.cloud&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// MastodonClient.CreateApp で得たものを保存しとく必要があるけど面倒だから UnitTest(MastodonClientTests)のを使わせてもらった
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//var appRegistration = await MastodonClient.CreateApp(instanceUrl, &quot;MastoConsoleStandard&quot;, Scope.Read);
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appRegistration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppRegistration&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ClientId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ぎっはぶをみてね&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ClientSecret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ぎっはぶをみてね&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MastodonClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streaming&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetPublicStreaming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Register events
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;streaming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{e.Status.CreatedAt.ToLocalTime().ToString()} - {e.Status.Account.AccountName}:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Start streaming
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;streaming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;アプリは、まず mastodon のインスタンスに&lt;code class=&quot;highlighter-rouge&quot;&gt;MastodonClient.CreateApp&lt;/code&gt;で「アプリを登録」して、&lt;code class=&quot;highlighter-rouge&quot;&gt;AppRegistration&lt;/code&gt;を得る必要がある。&lt;br /&gt;
これは実際には &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientId&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientSecret&lt;/code&gt; で、一度登録したら保存して使う。&lt;br /&gt;
mastodon の既定の実装では、特に制限なくすぐにレスポンスが返ってくるが、コードを変更してインスタンス管理者の承認制などにすることもできるのだろう。&lt;/p&gt;

&lt;p&gt;そしてアプリの登録は mastodon のインスタンス毎に行わなければならないので、たとえば現在出回っているクライアントアプリは、 mastodon.cloud では使えるが mstdn.jp では使えない、ということもある。&lt;/p&gt;

&lt;p&gt;「アプリをインスタンスに登録する」仕組みまで備えたクライアントアプリも作成可能で、&lt;a href=&quot;https://itunes.apple.com/us/app/amaroq-for-mastodon/id1214116200&quot;&gt;Amaroq for Mastodon&lt;/a&gt; というアプリはそのひとつだと&lt;a href=&quot;https://mastodon.cloud/@fk2000/519030&quot;&gt;教えてもらった&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;mastodon のユーザーはインスタンス毎に違うので、そのインスタンスで作った email/password で &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; する。&lt;br /&gt;
あとは、 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnUpdate&lt;/code&gt; でストリームを受信しておいて、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Start&lt;/code&gt; すればよい、と。&lt;/p&gt;

&lt;p&gt;Masto.NET が .NET Standard に対応しているので、 .NET Standard な実行環境,&lt;br /&gt;
 Mac/Linux なら .NET Core がインストールされた環境なら動作する。&lt;/p&gt;

&lt;p&gt;適切に責務分割された Twitter クライアントなら、それほど手間なく mastodon クライアントアプリになれるかも。&lt;br /&gt;
前述のとおり複数インスタンス対応は必要だけど。アプリが対応するインスタンスとその&lt;code class=&quot;highlighter-rouge&quot;&gt;ClientId&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientSecret&lt;/code&gt;の保存のために、サーバーサイド(mBaaS)が必要になると思う。&lt;/p&gt;

&lt;p&gt;一応わたしもアカウントつくりました→ https://mastodon.cloud/@amay077&lt;br /&gt;
mstdn.jp にも作ったけど、メインはこっちで。頑張ってる人は &lt;a href=&quot;https://mastodon.cloud/@login/508935&quot;&gt;応援したい&lt;/a&gt; し &lt;a href=&quot;https://mstdn.jp/@nullkal/37086&quot;&gt;応援した&lt;/a&gt; 。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/13/creating_mastodon_client_using_dot_net_core/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/13/creating_mastodon_client_using_dot_net_core/</guid>
        
        
        <category>C#</category>
        
        <category>Mastodon</category>
        
        <category>.NET</category>
        
      </item>
    
      <item>
        <title>技術書典2 で Essential Xamarin Yin(陰)/Yang(陽) を頒布しました</title>
        <description>&lt;p&gt;といっても私は一般参加でしたが。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://techbookfest.org/event/tbf02&quot;&gt;技術書典２｜技術書典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xamaritians-のブース&quot;&gt;Xamaritians のブース&lt;/h2&gt;

&lt;p&gt;頒布しましたのは以前にも告知したこちらです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/04/07/wrote_for_techbookfes2/&quot;&gt;技術書典2に Xamarin 本を出します！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前日勉強会に参加してた名古屋から豪華夜行バスで東京に。早朝に着いたので時間つぶしで温泉を楽しみながら、開場の15分前くらいに現地入り。既に100人くらい並んでました。順番としては早いほうだったので、少し待っただけで会場内に入ることができました。&lt;/p&gt;

&lt;p&gt;我らのブースの売り子は「Xamarin.Macペア」の &lt;a href=&quot;https://twitter.com/ailen0ada&quot;&gt;@ailen0ada&lt;/a&gt; さんと &lt;a href=&quot;https://twitter.com/Takkiii0204&quot;&gt;@Takkiii0204&lt;/a&gt; さん。ブースの手伝いを─と思ってましたが特に刷ることもなかったです、ありがとうございました。&lt;/p&gt;

&lt;p&gt;ブースの前には、たまに人だかりもできて売れ行きも好調だったようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;結果的に開始から2時間ほどで用意しておいた部数は完売してしまって、後はPDFダウンロードカードのみの販売に切り替えたとのこと。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2_03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;著者の一人として初めてのイベントだったので期待も不安もありましたが、うまくいってとても良かったです。ブースが角で目立つ位置だったのも良かったですね。&lt;/p&gt;

&lt;p&gt;次は 4/30、 &lt;a href=&quot;http://www.chokaigi.jp/2017/booth/cho_gijutsusyoten.html&quot;&gt;超技術書典&lt;/a&gt; にも出展します。そのために増刷しました。是非、お見逃しなく！&lt;/p&gt;

&lt;h2 id=&quot;参加者として&quot;&gt;参加者として&lt;/h2&gt;

&lt;p&gt;こういう同人イベントは初めてだったのでちょっとキョドってしまいました。もっとブースの人とトークしてけばよかった。&lt;/p&gt;

&lt;p&gt;買った本はこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;全て楽しく読ませていただいております。&lt;/p&gt;

&lt;p&gt;事前にサークルチェックしていたのに買うのを忘れる本もあったりしてちょっと後悔。&lt;br /&gt;
多くのサークルさんは後に電子版や別なイベントで再入手の機会がありますが、中には特殊な事情で?その場限りの書籍もあったようで「なるほどこれが同人誌か」と感じました。&lt;/p&gt;

&lt;p&gt;帰り、あいにくの雨だったのでせっかくの本たちが塗れないようにするのが大変、あと重い！&lt;br /&gt;
いろんな意味で手持ちで帰路を行くのは早々にあきらめてアキバのクロネコヤマト営業所から自宅に配送しました。&lt;/p&gt;

&lt;p&gt;総じて、本を書いた側としても参加者としてもとても楽しかった。&lt;br /&gt;
次回も参加できるように頑張ります！&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/09/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/09/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2/</guid>
        
        
        <category>Xamarin</category>
        
        <category>技術書典</category>
        
      </item>
    
      <item>
        <title>Xamarin 勉強会 in 名古屋で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました</title>
        <description>&lt;p&gt;JXUG学生支部さん主催の名古屋での勉強会で、Xamarin について話しました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jxug.connpass.com/event/52683/&quot;&gt;Xamarin 勉強会 in 名古屋 with JXUG, MSP, JXUG学生支部 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;資料&quot;&gt;資料&lt;/h2&gt;

&lt;p&gt;資料はこちらです。 DroidKaigi での発表から何も変わってないです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-jxug&quot;&gt;Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発 #jxug // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想とか&quot;&gt;感想とか&lt;/h2&gt;

&lt;p&gt;サブウェイおいしかったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/had_a_session_about_xamarin_android_in_jxug_nagoya_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DroidKaigi はバリバリの Androidネイティブ開発者揃いの場で、それ用の資料だったので、MS系の多い？今回の勉強会では少し分かりづらいところがあったかも知れません。&lt;/p&gt;

&lt;p&gt;それでもアンケートでは概ね好評だったようで良かったです。&lt;/p&gt;

&lt;p&gt;実はマイクロソフト中部支社さんへ行ったのは今回が初めてでした。&lt;br /&gt;
最近は特にXamarin関係で、東京のマイクロソフト品川本社でのイベントに参加することが多かったので。&lt;/p&gt;

&lt;p&gt;中部支社はとてもきれいなオフィスでした。会議室３つはそれぞれ「IEUYASU」「NOBUNAGA」「HIDEYOSHI」って命名されてて、中部っぽさがありました。&lt;/p&gt;

&lt;p&gt;ルーセントタワーには、Aチームさんが居られた頃に、よく勉強会で会場提供されていたので、何度もお邪魔させてもらった事はあったのですが。&lt;/p&gt;

&lt;p&gt;中部地方はBtoCよりBtoB企業が多いので、業務アプリ開発に特に強いXamarinはよく「刺さる」と思います。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/08/had_a_session_about_xamarin_android_in_jxug_nagoya/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/08/had_a_session_about_xamarin_android_in_jxug_nagoya/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>登壇</category>
        
      </item>
    
  </channel>
</rss>
