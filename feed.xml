<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>http://blog.amay077.net/</link>
    <atom:link href="http://blog.amay077.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Apr 2017 04:23:32 +0900</pubDate>
    <lastBuildDate>Tue, 11 Apr 2017 04:23:32 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Xamarin 勉強会 in 名古屋で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました</title>
        <description>&lt;p&gt;JXUG学生支部さん主催の名古屋での勉強会で、Xamarin について話しました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jxug.connpass.com/event/52683/&quot;&gt;Xamarin 勉強会 in 名古屋 with JXUG, MSP, JXUG学生支部 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;資料&quot;&gt;資料&lt;/h2&gt;

&lt;p&gt;資料はこちらです。 DroidKaigi での発表から何も変わってないです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-jxug&quot;&gt;Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発 #jxug // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想とか&quot;&gt;感想とか&lt;/h2&gt;

&lt;p&gt;サブウェイおいしかったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/had_a_session_about_xamarin_android_in_jxug_nagoya_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DroidKaigi はバリバリの Androidネイティブ開発者揃いの場で、それ用の資料だったので、MS系の多い？今回の勉強会では少し分かりづらいところがあったかも知れません。&lt;/p&gt;

&lt;p&gt;それでもアンケートでは概ね好評だったようで良かったです。&lt;/p&gt;

&lt;p&gt;実はマイクロソフト中部支社さんへ行ったのは今回が初めてでした。&lt;br /&gt;
最近は特にXamarin関係で、東京のマイクロソフト品川本社でのイベントに参加することが多かったので。&lt;/p&gt;

&lt;p&gt;中部支社はとてもきれいなオフィスでした。会議室３つはそれぞれ「IEUYASU」「NOBUNAGA」「HIDEYOSHI」って命名されてて、中部っぽさがありました。&lt;/p&gt;

&lt;p&gt;ルーセントタワーには、Aチームさんが居られた頃に、よく勉強会で会場提供されていたので、何度もお邪魔させてもらった事はあったのですが。&lt;/p&gt;

&lt;p&gt;中部地方はBtoCよりBtoB企業が多いので、業務アプリ開発に特に強いXamarinはよく「刺さる」と思います。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/08/had_a_session_about_xamarin_android_in_jxug_nagoya/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/08/had_a_session_about_xamarin_android_in_jxug_nagoya/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>登壇</category>
        
      </item>
    
      <item>
        <title>技術書典2に Xamarin 本を出します！</title>
        <description>&lt;p&gt;4/9(日) に開催される &lt;a href=&quot;https://techbookfest.org/event/tbf02&quot;&gt;技術書典２&lt;/a&gt; に、 Xamaritans（ざまりたんず） が Xamarin 本を２冊！出します。ブースは「 &lt;strong&gt;う-13&lt;/strong&gt; 」です。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atsushieno.github.io/xamaritans/tbf2.html&quot;&gt;技術書典2/超技術書典 出展情報 - Xamaritans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/wrote_for_techbookfes2_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2冊の本はそれぞれ「Essential Xamarin - Yin/陰」、「Essential Xamarin - Yang/陽」というタイトルで、それぞれ 1000円 となっています。2冊揃わないと完全体じゃないのでもちろん両方買ってください。&lt;/p&gt;

&lt;p&gt;私はその一員として &lt;strong&gt;「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」&lt;/strong&gt; という章を書きました。こちらは「Essential Xamarin - Yang/陽」に収録されています。&lt;/p&gt;

&lt;p&gt;目次はこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/wrote_for_techbookfes2_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;タイトルが &lt;a href=&quot;/blog/2017/03/10/had_a_session_about_xamarin_android_in_droidkaigi2017/&quot;&gt;DroidKaigi2017 でのセッション&lt;/a&gt; と一緒！&lt;br /&gt;
そうです、DroidKaigi の完全版がこの本、いや原稿の方が先に出来上がっていたのであちらがダイジェストだったのです。&lt;/p&gt;

&lt;p&gt;セッションと流れは同じですが、それぞれをより詳しく解説しています。蛇足なコラムも多いです。&lt;/p&gt;

&lt;p&gt;同じアプリを Android ネイティブと Xamarin(.Forms) で作成したらこうなるよ、という解説も、MVVM や Rx(RxJava) と絡めて載せています（GitHub でソースも公開予定）。&lt;/p&gt;

&lt;p&gt;ほんの少しですが、 Kotlin や Clean Architecture などにも触れています。&lt;/p&gt;

&lt;p&gt;話が前後しましたが、この本は Androidアプリ開発者の人が Xamarin を理解する事を目的としています。&lt;br /&gt;
しかし Xamarin の目的は複数プラットフォームでのコードの共通化なので、iOS アプリ開発の話題もあり、 Xamarin.Forms の話題もありです。&lt;/p&gt;

&lt;p&gt;逆にマイクロソフト系の開発者の人が、「へー Android ネイティブってこうなんだー」という目で読んでも良いかと思います。&lt;/p&gt;

&lt;p&gt;この本の内容自体が、私が現在 Xamarin を選ぶ理由にもなっていますので、是非読んでみてください。&lt;/p&gt;

&lt;p&gt;当日、店番の主担当ではありませんが会場内には居ると思いますので、お声がけしてもらえると嬉しいです。&lt;/p&gt;

&lt;p&gt;Xamaritans の他のメンバーも章も非常に強力で、本当に「世界的に見ても唯一無二」の濃い内容となっています。繰り返しますが「2冊で完全体」です。&lt;/p&gt;

&lt;h3 id=&quot;他のメンバーによるイベント紹介&quot;&gt;他のメンバーによるイベント紹介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://atsushieno.hatenablog.com/entry/2017/03/30/193527&quot;&gt;Essential Xamarin -at- 技術書典2 -and- 超技術書典 - ものがたり&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nuits.jp/entry/2017/03/19/214905&quot;&gt;技術書典2 &amp;amp; 超技術書典でXamarin本出します - nuits.jp blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;技術書典2の後は、超技術書典にも出展します（こちらは私は不参加なのが残念）。&lt;br /&gt;
私は愛知県在住なので中部地方の勉強会やミートアップなどへは持っていくことができますので、 &lt;a href=&quot;https://twitter.com/amay077&quot;&gt;twitter&lt;/a&gt; などでメンションください。&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Apr 2017 02:01:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/07/wrote_for_techbookfes2/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/07/wrote_for_techbookfes2/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Android</category>
        
        <category>技術書典</category>
        
      </item>
    
      <item>
        <title>DroidKaigi2017で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました</title>
        <description>&lt;p&gt;登壇したのが既に２ヶ月前の事に感じるくらい余韻に浸っています。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/had_a_session_about_xamain_android_in_droidkaigi_2017_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;資料&quot;&gt;資料&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;592959beb9de46fcb6d0e51652b20e23&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;感想とか&quot;&gt;感想とか&lt;/h2&gt;

&lt;p&gt;DroidKaigi は3年連続の参加で、登壇は初めてです。&lt;/p&gt;

&lt;p&gt;前日まではのほほんとしていたのですけど、当日になると緊張しますね。トップ登壇で良かったです。&lt;br /&gt;
登壇終わった後の虚脱感がハンパなくて、次のセッション聞けませんでした（普段人前で話すのが職業な人マジリスペクト）。&lt;/p&gt;

&lt;p&gt;Xamarin に関して、伝えたいことはある程度伝えられたと思ってはいますが、継続的に発信していくのが大事かなと思いました。&lt;/p&gt;

&lt;p&gt;普段 Android をやっていて、iOS もやる事になったら、こんなツールもあるよと思い出して欲しいです。&lt;/p&gt;

&lt;p&gt;一番伝えたかったのは、&lt;br /&gt;
&lt;strong&gt;「Android でも iOS でも MVVM+Rx でやるよね、Xamarin なら大部分共通化できるよー」&lt;/strong&gt;&lt;br /&gt;
だったのですが、Twitter とかでの反応を見てるとあまりピンと来てなさそうな感じでしたかね？&lt;br /&gt;
他の MVVM や Rx セッションが盛り上がってるのを見ると、まだ知らない層が多いのかなーと。&lt;br /&gt;
Xamarin とはなんぞや、から始めて Rx まで説明するのも難しいし、まあ仕方ないですね。&lt;/p&gt;

&lt;p&gt;でも、質問タイムでたくさん聞いて頂いて嬉しかったです。（えいごりょく欲しい…）&lt;/p&gt;

&lt;p&gt;オフィスアワーやアフターパーティで、Twitter でしか知らない人とお話しできたり、同郷のすごい人たちと会えたり、とても楽しかったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/had_a_session_about_xamain_android_in_droidkaigi_2017_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xamarin 然り、RxJava 然り、 Qiita などでチマチマと情報発信してきた些細なネタが誰かの役に立っていたと知れてとても嬉しかった。&lt;/p&gt;

&lt;p&gt;普段 Xamarin を使ってる人が、 Android の最新動向を知るきっかけにもなってくれたみたいで、それも狙ってた事なので良かったです。&lt;/p&gt;

&lt;p&gt;翌日は .NET系のイベントの &lt;a href=&quot;https://metro.connpass.com/event/50917/?utm_source=t.co&amp;amp;utm_medium=referral&quot;&gt;まどすた #2&lt;/a&gt; に行きました。&lt;br /&gt;
HoloLens やばいし、Bitcoin/ブロックチェーンも抑えとかないといけないし、Visual Studio 2017 はやっぱり最強だったし、にゃーんがにゃーんでした。&lt;/p&gt;

&lt;p&gt;try!Swift には行けなかったので、 &lt;a href=&quot;https://iosdc.jp/2017/&quot;&gt;iOSDC Japan 2017&lt;/a&gt; には必ず行きたいと思います。&lt;/p&gt;

&lt;p&gt;将来のことを考えて生きてはいませんが、こうした経験が脳にインプットされて、なんとなく無意識の内に自分の行きたい方向に自分を導いてくれると思っています。&lt;/p&gt;

&lt;p&gt;運営スタッフの皆さま、参加された皆さま、ありがとうございました。&lt;/p&gt;

&lt;h2 id=&quot;技術書典２--超技術書典&quot;&gt;技術書典２ ＆ 超技術書典&lt;/h2&gt;

&lt;p&gt;あっ、次は 4/9(日)に、 &lt;a href=&quot;https://techbookfest.org/event/tbf02&quot;&gt;技術書典２&lt;/a&gt; がありますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/had_a_session_about_xamain_android_in_droidkaigi_2017_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xamarin に関する技術書を配布します！&lt;br /&gt;
代表の @atsushieno さん以下5名で絶賛執筆中です。&lt;br /&gt;
今回話した Xamarin.Android ネタの完全版を掲載します。というか DroidKaigi のスライドの原稿と言うべきものです。&lt;/p&gt;

&lt;p&gt;技術書典２または &lt;a href=&quot;https://techbookfest.org/event/cho01&quot;&gt;超技術書典&lt;/a&gt; でお会いしましょう(^o^)／&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 23:01:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/03/10/had_a_session_about_xamarin_android_in_droidkaigi2017/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/03/10/had_a_session_about_xamarin_android_in_droidkaigi2017/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>DroidKaigi</category>
        
        <category>登壇</category>
        
      </item>
    
      <item>
        <title>Xamarin.Forms.GoogleMaps にプルリクエストを送る会、を開催しました</title>
        <description>&lt;p&gt;2017/2/12、 &lt;a href=&quot;http://www.fenrir-inc.com/jp/corporate/&quot;&gt;フェンリル株式会社 名古屋支社&lt;/a&gt; さまの会議室をお借りして、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jxug.connpass.com/event/49852/&quot;&gt;Xamarin.Forms.GoogleMaps にプルリクを送る会 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を開催しました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;もともとは、 &lt;a href=&quot;https://www.facebook.com/groups/xm.jxug/&quot;&gt;JXUG の Facebook グループ&lt;/a&gt; で、「拙作の OSS ライブラリ &lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;Xamarin.Forms.GoogleMaps&lt;/a&gt; へのコントリビュートを通じて、GitHub でプルリクの送り方を学ぶ勉強会とか興味ある？」 とつぶやいたのを、 &lt;a href=&quot;https://twitter.com/Fumiya_Kume&quot;&gt;くぅ君&lt;/a&gt; が拾ってくれて名古屋で開催できるはこびになったものです(くぅ君、ありがとう！)。&lt;/p&gt;

&lt;p&gt;資料はこちらです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-forms-dot-googlemaps-nipururikuwosong-rou-number-jxug&quot;&gt;Xamarin.Forms.GoogleMaps にプルリクを送ろう #jxug // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub のどこかの OSS に貢献したいと思っても、 git/gitクライアントの使い方、GitHubの使い方、英語、修正したコードの内容とか、小さな壁が積み重なってなんか躊躇してしまう、という経験が自分にもあって、その練習台として自分のライブラリを使ってもらえたらなーと思っていました。&lt;/p&gt;

&lt;p&gt;参加していただいた皆さんには、初めてプルリクを送るということを体験してもらえたので、少しでもそのカベが低くなってもらえれば幸いです。&lt;br /&gt;
勉強会後の振り返りで、そんな感想も頂けたので個人的にも満足です。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今日の「Xamarin.Forms.GoogleMaps にプルリクを送ろう」の成果です &lt;a href=&quot;https://twitter.com/hashtag/JXUG?src=hash&quot;&gt;#JXUG&lt;/a&gt; &lt;a href=&quot;https://t.co/PVlQDposzS&quot;&gt;pic.twitter.com/PVlQDposzS&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@DroidKaigi&amp;amp;技術書展2 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/830685147963854848&quot;&gt;2017年2月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;おお、会が終わってからもPRくれた、嬉しいなあ / Pull Request # 229 (Add Padding Property Support (Android / iOS)) Xamarin.Forms.GoogleMaps &lt;a href=&quot;https://t.co/Hij9KWzeex&quot;&gt;https://t.co/Hij9KWzeex&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@DroidKaigi&amp;amp;技術書展2 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/830764733611401220&quot;&gt;2017年2月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;昨日フェンリルさんで AirPlay 使わせてもらってめちゃ便利だったので、MS品川にも導入してくだしあ。&lt;/p&gt;&amp;mdash; あめい@DroidKaigi&amp;amp;技術書展2 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/830981848637411328&quot;&gt;2017年2月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;こんな感じの会でよかったら、また簡単な issue 溜めとくので、またできたらいいなと思います。&lt;br /&gt;
ありがとうございました。&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 15:15:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/02/13/we_had_a_meetup_aboud_send_pull_request_to_Xamarin_forms_googlemaps/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/02/13/we_had_a_meetup_aboud_send_pull_request_to_Xamarin_forms_googlemaps/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Xamarin.Forms</category>
        
        <category>GoogleMapsAPI</category>
        
        <category>git</category>
        
        <category>GitHub</category>
        
      </item>
    
      <item>
        <title>Jekyll で作ったブログを Google AMP に対応させた</title>
        <description>&lt;p&gt;自分のブログは Jekyll を使って Markdown から生成し、それを GitHub pages でホストしている。&lt;br /&gt;
GitHub 側でのページ生成はしてなくて、ローカルで Jekyll を実行して、その結果を push している。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;特につよい興味があったわけでもないけど、 Jekyll のテーマに AMP 対応をうたうものがあったから使ってみたら、それだけではダメで、いろいろ四苦八苦した（してる）という事を書きます。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-テーマ&quot;&gt;Jekyll テーマ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ageitgey/amplify&quot;&gt;ageitgey/amplify: A Jekyll html theme in the vague style of Medium.com built using Google AMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という AMP 対応とされるテーマを使っている。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; になってたので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; に直したりした。&lt;br /&gt;
テンプレートのタグは AMP 対応になってたので、まあ便利、余計なプラグインなどは入ってなくてシンプルなのもよい。&lt;/p&gt;

&lt;h2 id=&quot;画像&quot;&gt;画像&lt;/h2&gt;

&lt;p&gt;AMP では、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-img&amp;gt;&lt;/code&gt; というタグを使わないといけなくて、しかも &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; が必須だと言う。&lt;br /&gt;
Markdown から HTML の変換は &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; タグを出力するので、その結果を &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-img&amp;gt;&lt;/code&gt; に置換するようにしたが、Markdown では画像のサイズは指定できない。&lt;br /&gt;
Markdown の方言でサイズが指定できるものもあるようだが、書きたくないし。&lt;/p&gt;

&lt;p&gt;仕方がないので、Markdown から変換された HTML のタグを置換しつつ、画像を読み込んで縦横のサイズを取得し、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-img width=? height=?&lt;/code&gt; に変換するツールを作った。&lt;br /&gt;
なぜか Mono 製ｗ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/AmpImgnizer&quot;&gt;amay077/AmpImgnizer: img タグを amp-img タグに置換する mono コンソールアプリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ビルドしてできた &lt;code class=&quot;highlighter-rouge&quot;&gt;AmpImgnizer.exe&lt;/code&gt; を以下のようにして使う。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -type f -name &lt;span class=&quot;s2&quot;&gt;&quot;*.html&quot;&lt;/span&gt; -print | xargs -0 mono ../AmpImgnizer/AmpImgnizer.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;相対URLと絶対URL、あと SVG にも対応してたりするし、一度サイズを取得したら、そのURLをキーにキャッシュして、時間は画像を読み直さず処理するようになっている。&lt;br /&gt;
（副次的な効果として、 404 な画像を発見できる。）&lt;/p&gt;

&lt;p&gt;Markdown から生成された HTML を対象にしているので、 HTML パーサなんぞは使ってなくて、テキストとして1行ずつ回していくテキトーな実装。&lt;br /&gt;
でもこれで十分使えてる。&lt;/p&gt;

&lt;h2 id=&quot;ツイートの貼り付け&quot;&gt;ツイートの貼り付け&lt;/h2&gt;

&lt;p&gt;自分や誰かのツイートをブログに貼り付ける時、 Twitter の Webサイトから生成できるスクリプトをそのまま貼り付けるのが楽で使っている。&lt;br /&gt;
そのタグはこう↓&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter-tweet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dir=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ltr&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;うおおおお！ &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://twitter.com/hashtag/jxug?src=hash&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;#jxug&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://t.co/lc7x6vaNWl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;pic.twitter.com/lc7x6vaNWl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;mdash;&lt;/span&gt; これがあめいの選択だよ (@amay077) &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://twitter.com/amay077/status/802320470204788737&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2016年11月26日&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//platform.twitter.com/widgets.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;が、 AMP は外部のスクリプトを実行できないので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグは使えない。&lt;/p&gt;

&lt;p&gt;ツイートを埋め込むためには、 &lt;a href=&quot;https://www.ampproject.org/ja/docs/reference/components/amp-twitter&quot;&gt;amp-twitter&lt;/a&gt; という “許可された” スクリプトを定義し、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-twitter&amp;gt;&lt;/code&gt; タグを使う必要がある。&lt;/p&gt;

&lt;p&gt;いちいちこのタグを書くのも面倒だし、AMP が廃れて使えなくなった時も考えて、オリジナル(Markdown)は Twitter 公式の埋め込みにしておきたい。&lt;/p&gt;

&lt;p&gt;なので、これも前述の &lt;code class=&quot;highlighter-rouge&quot;&gt;AmpImgnizer&lt;/code&gt; で変換した。&lt;br /&gt;
上の &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;blockquote 〜 /script&amp;gt;&lt;/code&gt; は、以下のように変換される。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;amp-twitter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-tweetid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;802320470204788737&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;800&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;responsive&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/amp-twitter&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- うおおおお！ &amp;lt;a href=&quot;https://twitter.com/hashtag/jxug?src=hash&quot;&amp;gt;#jxug&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;https://t.co/lc7x6vaNWl&quot;&amp;gt;pic.twitter.com/lc7x6vaNWl&amp;lt;/a&amp;gt; by @amay077 --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;こっちもテキトーな実装なので、変換出来ないケースがあるかも。&lt;/p&gt;

&lt;h2 id=&quot;広告&quot;&gt;広告&lt;/h2&gt;

&lt;p&gt;Amazon の広告を各ページに配置している。もともとの広告タグは &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; だが、AMP では &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-iframe&amp;gt;&lt;/code&gt; を使う必要がある。&lt;/p&gt;

&lt;p&gt;これはもともと&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://okzk.org/blog/jekyll-amazon-gem&quot;&gt;Jekyllでamazonアソシエイトリンクを作るためのgem ”jekyll-amazon”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使っていたので、そのソースを少し改造して &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-iframe&lt;/code&gt; を吐くようにした。結果は以下のようなものだ。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;amp-iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://rcm-fe.amazon-adsystem.com/e/cm?t=oku2008-22&amp;amp;o=9&amp;amp;p=48&amp;amp;l=st1&amp;amp;mode=books-jp&amp;amp;search=Xamarin%7C%E5%8B%89%E5%BC%B7%E4%BC%9A&amp;amp;lt1=_blank&amp;amp;lc1=469AF6&amp;amp;bg1=FFFFFF&amp;amp;f=ifr&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;728&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;90&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrolling=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/amp-iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;disqus&quot;&gt;DISQUS&lt;/h2&gt;

&lt;p&gt;コメントシステムに &lt;a href=&quot;https://disqus.com/&quot;&gt;DISQUS&lt;/a&gt; を採用している。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.disqus.com/disqus-now-compatible-with-google-amp&quot;&gt;Disqus now compatible with Google AMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ってことで「Disqus も AMP 対応したぜ！」って言ってるけど、実体は &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;amp-iframe&lt;/code&gt; を使っているだけだ。&lt;br /&gt;
しかも amp-iframe の src に指定するコンテンツは自分でホストしなければならない。ちょっと面倒だったので、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dangoldin.com/2016/09/13/supporting-disqus-in-amp/&quot;&gt;Supporting Disqus in AMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で Dan Goldin さんが使用している s3 を間借りしちゃってる、怒られたら謝る。&lt;/p&gt;

&lt;h2 id=&quot;css-とか-analytics&quot;&gt;CSS とか Analytics&lt;/h2&gt;

&lt;p&gt;これらは何も特殊なことはしてなくて、CSS はリンクせずに各ページに Jekyll で埋め込んじゃってる。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--head.html--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;amp-custom&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;｛％&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;include_to_scssify&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;％｝&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;｛％&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.scss&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;％｝&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;｛％&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;endcapture&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;％｝&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;｛｛&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;include_to_scssify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;scssify&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;｝｝&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;｛％&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.css&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;％｝&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;シンタックスハイライトに使う CSS も毎ページに埋め込まれてるので、冗長と言えば冗長。&lt;/p&gt;

&lt;p&gt;Google Anaytics は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/amp-analytics&amp;gt;&lt;/code&gt; を使ってる。&lt;/p&gt;

&lt;h2 id=&quot;ビルドとデプロイ&quot;&gt;ビルドとデプロイ&lt;/h2&gt;

&lt;p&gt;下のような感じで、 Jekyll でビルドした後、例の AmpImgnizer で img と twitter を変換して、サイトに push してる。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;site update&quot;&lt;/span&gt;
find &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -type f -name &lt;span class=&quot;s2&quot;&gt;&quot;*.html&quot;&lt;/span&gt; -print | xargs -0 mono ../AmpImgnizer/AmpImgnizer.exe
git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;replace img to amp-img&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;press enter to deploy&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read
&lt;/span&gt;git push
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ここまで対応して、ほとんどのページを AMP 対応にする事ができた。&lt;br /&gt;
2017/2/3現在では、まだ AMP として認識されているページは少ないけど、放っておけば更新されてくのかな？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/google_amp_in_jekyll_blog_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AMP 対応した方が SEO 的にも効く、との情報もあるけど、まあそのへんは期待してないです。&lt;/p&gt;

&lt;p&gt;何の役にたつかわからないけど、このサイトの Jekyll プロジェクトと、github page のリポジトリは以下です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/blog.vNext&quot;&gt;amay077/blog.vNext&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/amay077.github.com&quot;&gt;amay077/amay077.github.com: My blog powered by jekyll.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 19:20:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/02/03/google_amp_in_jekyll_blog/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/02/03/google_amp_in_jekyll_blog/</guid>
        
        
        <category>AMP</category>
        
        <category>Google</category>
        
        <category>Markdown</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Google Maps Android API のカメラ変更イベントについて</title>
        <description>&lt;p&gt;Android 向けの Google Maps ライブラリには、カメラの変更（＝位置、回転、チルトのヘ変更）時に発生するイベント &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.OnCameraChangeListener&lt;/code&gt; があります。&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
が、2016年８月のリリースで &lt;code class=&quot;highlighter-rouge&quot;&gt;OnCameraChangeListener&lt;/code&gt; は非推奨になっており、代わりに４つのイベントが新たに追加されました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/android-api/releases?hl=ja#august_1_2016&quot;&gt;Release Notes - August 1, 2016 ｜  Google Maps Android API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;This release introduces a set of new camera change listeners for camera motion start, ongoing, and end events. You can also see why the camera is moving, whether it’s caused by user gestures, built-in API animations or developer-controlled movements. Below is a summary of the new listeners. For details, see the guide to camera change events. (Issue 4636)&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The onCameraMoveStarted() callback of the OnCameraMoveStartedListener is invoked when the camera starts moving. The callback method receives a reason for the camera motion.&lt;/li&gt;
    &lt;li&gt;The onCameraMove() callback of the OnCameraMoveListener is invoked multiple times while the camera is moving or the user is interacting with the touch screen.&lt;/li&gt;
    &lt;li&gt;The OnCameraIdle() callback of the OnCameraIdleListener is invoked when the camera stops moving and the user has stopped interacting with the map.&lt;/li&gt;
    &lt;li&gt;The OnCameraMoveCanceled() callback of the OnCameraMoveCanceledListener is invoked when the current camera movement has been interrupted.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;oncameramovestarted---カメラの移動が開始された時&quot;&gt;onCameraMoveStarted - カメラの移動が開始された時&lt;/h3&gt;

&lt;p&gt;カメラの移動が開始された直後に１回発生します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;updateCamera&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; などのメソッドによるカメラ移動でも、ドラッグ、ピンチなどのジェスチャによる場合でも同様です。&lt;/p&gt;

&lt;h3 id=&quot;oncameramoveidle---カメラの移動が終わった時&quot;&gt;onCameraMoveIdle - カメラの移動が終わった時&lt;/h3&gt;

&lt;p&gt;カメラの移動が完了した直後に１回発生します。 つまりなんらかのビューの変化が起こるときには、最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveIdle&lt;/code&gt; が必ず１回呼ばれます。アニメーションがキャンセルされたときも、&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveIdle&lt;/code&gt; は呼ばれます。&lt;br /&gt;
非推奨となった &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraChange&lt;/code&gt; と立ち位置的には同じようです。ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraChange&lt;/code&gt; が呼ばれたあとで、&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveIdle&lt;/code&gt; が呼ばれます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveStarted&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveIdle&lt;/code&gt; は必ず対になるかというと、 &lt;strong&gt;そうでないケースが存在&lt;/strong&gt; します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; による地図の移動中に、地図をドラッグして地図を移動させた場合です。これについては後述します。&lt;/p&gt;

&lt;h3 id=&quot;oncameramove---カメラが移動した時&quot;&gt;onCameraMove - カメラが移動した時&lt;/h3&gt;

&lt;p&gt;カメラが移動したときに発生します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;moveCamera&lt;/code&gt; によるダイレクトなカメラ位置への移動では、このイベントは &lt;strong&gt;発生したり、しなかったりします&lt;/strong&gt; 。 &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; によるアニメーション付きの移動では、アニメーション中にこのイベントが発生します。ドラッグやピンチなどのジェスチャ操作でも発生します。&lt;/p&gt;

&lt;h3 id=&quot;oncameramovecanceled---アニメーションがキャンセルされた時&quot;&gt;onCameraMoveCanceled - アニメーションがキャンセルされた時&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; などのアニメーション付きのカメラ移動が、何らかの操作によりキャンセルされたときに発生します。「何らかの操作」とは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アニメーション中に &lt;code class=&quot;highlighter-rouge&quot;&gt;stopAnimation&lt;/code&gt; が呼ぶ&lt;/li&gt;
  &lt;li&gt;アニメーション中に画面をタップやドラッグする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&quot;おまけ-animatecamera-のコールバック&quot;&gt;【おまけ】 &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; のコールバック&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; には、アニメーションの完了／中止を受信できるコールバックを指定できます。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateCamera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CameraUpdate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;GoogleMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CancelableCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ケース毎のイベント発生の様子&quot;&gt;ケース毎のイベント発生の様子&lt;/h2&gt;

&lt;p&gt;サンプルアプリを作って、実際の操作でどのようなイベントが発生するのか、調べてみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/deep_dive_in_camera_events_of_google_maps_android_api_01.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;updatecamera-メソッドの実行&quot;&gt;updateCamera メソッドの実行&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;onCameraMoveStarted&lt;/li&gt;
  &lt;li&gt;onCameraMove ←発生しないこともある&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;onCameraChange&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;onCameraIdle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMove&lt;/code&gt; は発生することも、しないこともある&lt;/strong&gt; ようです、その条件についてはよくわかりませんでした（位置が変わるから &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMove&lt;/code&gt; が発生する、わけでもないようです）。 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraChange&lt;/code&gt; は非推奨なので打ち消し線を入れています。&lt;/p&gt;

&lt;h3 id=&quot;animatecamera-メソッドの実行中断なし&quot;&gt;animateCamera メソッドの実行(中断なし)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;onCameraMoveStarted&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;・・・&lt;/li&gt;
  &lt;li&gt;animateCamera_onFinish&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;onCameraChange&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;onCameraIdle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;移動中に &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMove&lt;/code&gt; が複数回呼び出されます。回数はアニメーションの速度により変わります。&lt;br /&gt;
移動が完了すると &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; メソッドのコールバックに &lt;code class=&quot;highlighter-rouge&quot;&gt;onFinish&lt;/code&gt; が通知され、その後、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraIdle&lt;/code&gt; が呼び出されます。&lt;/p&gt;

&lt;h3 id=&quot;animatecamera-メソッドの実行--stopanimation-の実行&quot;&gt;animateCamera メソッドの実行 → stopAnimation の実行&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;onCameraMoveStarted&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;・・・&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stopAnimation&lt;/code&gt; 呼び出し&lt;/li&gt;
  &lt;li&gt;onCameraMoveCanceled&lt;/li&gt;
  &lt;li&gt;animateCamera_onCancel&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;onCameraChange&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;onCameraIdle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;アニメーション中に &lt;code class=&quot;highlighter-rouge&quot;&gt;stopAnimation&lt;/code&gt; を呼び出すと、カメラの移動が停止し、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveCanceled&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera_onCancel&lt;/code&gt; の順で中止が通知されます。その後、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraIdle&lt;/code&gt; が呼び出されるのは完了時と変わりません。&lt;/p&gt;

&lt;h3 id=&quot;animatecamera-メソッドの実行--移動中にドラッグして地図を移動&quot;&gt;animateCamera メソッドの実行 → 移動中にドラッグして地図を移動&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;onCameraMoveStarted ← animateCameraによる移動開始&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;・・・&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;ドラッグで地図移動&lt;/li&gt;
  &lt;li&gt;onCameraMoveCanceled&lt;/li&gt;
  &lt;li&gt;onCameraMoveStarted ← ドラッグによる移動開始&lt;/li&gt;
  &lt;li&gt;animateCamera_onCancel&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;・・・&lt;/li&gt;
  &lt;li&gt;ドラッグやめ&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;onCameraChange&lt;/del&gt; ← animateCameraによる移動終了？&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;onCameraMove&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;onCameraChange&lt;/del&gt; ← ドラッグによる移動終了？&lt;/li&gt;
  &lt;li&gt;onCameraIdle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;地図移動中にドラッグをすると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveCanceled&lt;/code&gt; で中断が通知され、即座に 新しいカメラの移動として &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveStarted&lt;/code&gt; が通知されます。 &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; にアニメーション中止 &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera_onCancel&lt;/code&gt; が通知されるのはその後です。&lt;/p&gt;

&lt;p&gt;その後、ドラッグによる &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMove&lt;/code&gt; が連続して発生し、ドラッグをやめると &lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraChange&lt;/code&gt;&lt;/del&gt; が２回、&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraIdle&lt;/code&gt; が最後に１回呼び出されました。&lt;/p&gt;

&lt;p&gt;このケースでの要注意点をまとめると以下です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;onCancel&lt;/code&gt; が通知されるよりも先に、ドラッグによる &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveStarted&lt;/code&gt; が通知される&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveStarted&lt;/code&gt; は２回通知される（&lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; 呼び出し時とドラッグ開始時）のに、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraIdle&lt;/code&gt; は最後に１回しか通知されない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RxJava などで複数のイベントをストリーム化する時は、どうしてもイベントの発生順序や回数を意識せざるを得ませんが、その時に問題になりそうな気がします。&lt;/p&gt;

&lt;h3 id=&quot;非アニメーション時に-stopanimation-を呼ぶ&quot;&gt;非アニメーション時に stopAnimation を呼ぶ&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;onCameraChange&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;onCameraIdle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ただ &lt;code class=&quot;highlighter-rouge&quot;&gt;stopAnimation&lt;/code&gt; を呼ぶだけでも、 &lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraChange&lt;/code&gt;&lt;/del&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraIdle&lt;/code&gt; が呼ばれます。気持ち悪いですね。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;非推奨になった &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraChange&lt;/code&gt; の代わりとしては &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraIdle&lt;/code&gt; が使えるが、ビミョーに発生タイミングが違うようなので注意！&lt;/li&gt;
  &lt;li&gt;新たに追加された &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMoveStarted&lt;/code&gt; でカメラ移動の開始、 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraMove&lt;/code&gt; で移動中のカメラを受信できる。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCameraXXXX&lt;/code&gt; は、メソッドによるカメラ移動だけでなく、ジェスチャによるカメラ移動時にも通知が来る。 &lt;code class=&quot;highlighter-rouge&quot;&gt;animateCamera&lt;/code&gt; のアニメーションの終了／中断は引数のコールバックで受信する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;おまけ-google-maps-sdk-for-ios&quot;&gt;【おまけ】 Google Maps SDK for iOS&lt;/h3&gt;

&lt;p&gt;姉妹ライブラリである iOS 向けの Google Maps SDK では、カメラ関連イベントは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/reference/protocol_g_m_s_map_view_delegate-p.html?hl=ja#aabd01d59d7680799a0c24d3c8b5e4622&quot;&gt;GMSMapViewDelegate Protocol Reference  ｜  Google Maps SDK for iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあります。これによると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;willMove&lt;/li&gt;
  &lt;li&gt;didChangeCameraPosition&lt;/li&gt;
  &lt;li&gt;idleAtCameraPosition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があります。Android 用とことなっていて悩ましいです。。。&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 23:59:58 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/01/28/camera_changed_event_on_google_maps_android_api/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/01/28/camera_changed_event_on_google_maps_android_api/</guid>
        
        
        <category>Android</category>
        
        <category>GoogleMapsAPI</category>
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Xamarin.Forms でソフトウェアキーボードが表示された時に画面が隠れないようにする</title>
        <description>&lt;p&gt;Xamarin.Forms で、ソフトウェアキーボードを表示した時の動きが、Android と iOS で違って、いずれも目的の動作と合わなかったので、調べてみました。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;やりたいこと&quot;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;これ↓&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_04.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;いわゆる LINE のような画面、リストビューと文字列入力があって、文字列入力にフォーカスが当たるとソフトウェアキーボードが表示され、その分リストビューの高さが縮む、という動きです。&lt;br /&gt;
これを Xamarin.Forms(Android と iOS)で実現したいです。&lt;/p&gt;

&lt;h2 id=&quot;android-の場合&quot;&gt;Android の場合&lt;/h2&gt;

&lt;p&gt;Xamarin.Forms アプリの Android 側で、特になにもせずに LINE 風の画面を作って動かすと、下図のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ソフトウェアキーボードによって、画面が隠れることはありませんが、ListView の高さが縮んでいるのではなく、 &lt;strong&gt;画面全体が上へスライド&lt;/strong&gt; しています。そのため、キーボードを表示したまま、ListView の先頭の項目を見ることができません。&lt;/p&gt;

&lt;p&gt;Android ネイティブでは、 &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; の activity の属性に &lt;code class=&quot;highlighter-rouge&quot;&gt;windowSoftInputMode=&quot;adjustResize&quot;&lt;/code&gt; を設定することで実現できます（付けなくても既定値がこれなのかな？）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.adakoda.com/adakoda/2010/08/android-ime.html&quot;&gt;[Android] IME表示時にアクティビティーを伸縮させる - adakoda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;おーけーおーけー、Xamarin では &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; ではなく &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.cs&lt;/code&gt; のクラスの属性に書けばOKだな、というわけで下のように記述してみました。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MainActivity.cs
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ImeStretchSample.Droid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@drawable/icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Theme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@style/MyTheme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MainLauncher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ConfigurationChanges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ScreenSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WindowSoftInputMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SoftInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdjustResize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ←ここだよー！！！
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormsAppCompatActivity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 以下略
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ところがこれが機能しません。&lt;/p&gt;

&lt;p&gt;ググってみると Bugzilla に登録されてました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugzilla.xamarin.com/show_bug.cgi?id=39765#c4&quot;&gt;39765 – WindowSoftInputMode Attribute is Ignored When Using AppCompat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Application.Current.On&amp;lt;Android&amp;gt;().UseWindowSoftInputModeAdjust(&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Xamarin.Forms の 2.3.3 以降で、上記メソッドが使えるらしい、と。&lt;br /&gt;
現在の Stable は 2.3.3.180 なので使えますね、使ってみましょう。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MainActivity.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TabLayoutResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tabbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ToolbarResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Toolbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseWindowSoftInputModeAdjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WindowSoftInputModeAdjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ←ここ！！
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを実行すると、&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ListView は適切に縮んでいますが、 &lt;strong&gt;なんだあのステータスバー付近の空白は！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;さらにググります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/jimmgarrido/e36033b26f01e8da091fd321d41d991a#file-forms-2-3-2-L9&quot;&gt;AdjustResize Workaround for Xamarin.Forms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな Workaround を見つけました。&lt;br /&gt;
適用してみます。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MainActivity.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TabLayoutResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tabbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ToolbarResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Toolbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SdkInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildVersionCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lollipop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DecorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemUiVisibility&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusBarHeightInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormsAppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_statusBarHeight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonPublic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;statusBarHeightInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetStatusBarColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseWindowSoftInputModeAdjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WindowSoftInputModeAdjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;リフレクションを使っていたり、 &lt;code class=&quot;highlighter-rouge&quot;&gt;SetStatusBarColor&lt;/code&gt; が色固定になっていたりと激しく不安ですが、これでようやく、期待どおりの動きになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ios-の場合&quot;&gt;iOS の場合&lt;/h2&gt;

&lt;p&gt;Xamarin.Forms の iOS 側で、特になにもせずに、ソフトウェアキーボードを表示させると、ListView と文字列入力項目の手前に被さってしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通常の画面なら、 ScrollView で囲ってあげることで、適切に ScollView の高さが縮んで、その中がスクロール可能になります。&lt;br /&gt;
が、ScrollView と ListView のようにスクローラブルなコントロールを入れ子で使うとトラブルの素なので、ScrollView は選択できません。&lt;/p&gt;

&lt;p&gt;iOS ネイティブでは、キーボードが表示されたかどうかを検知して、AutoLayout の制約を設定したり、自力で View のサイズを再計算するようです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/rizumita/items/7852124d03a2a59d4252&quot;&gt;Auto Layoutを利用してキーボードに合わせてビューをリサイズする方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xamarin.Forms の iOS 側での対策をググって探します。&lt;br /&gt;
こんなライブラリを見つけました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/paulpatarinski/Xamarin.Forms.Plugins/tree/master/KeyboardOverlap&quot;&gt;Xamarin.Forms.Plugins/KeyboardOverlap at master · paulpatarinski/Xamarin.Forms.Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを適用してみると、以下のような動きになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;んー、 Android 側の初期状態とおなじく、 &lt;strong&gt;画面全体が上へスライド&lt;/strong&gt; しています。&lt;/p&gt;

&lt;p&gt;このライブラリの &lt;a href=&quot;https://github.com/paulpatarinski/Xamarin.Forms.Plugins/blob/master/KeyboardOverlap/KeyboardOverlap/KeyboardOverlap.Forms.Plugin.iOSUnified/KeyboardOverlapRenderer.cs&quot;&gt;ソースコード&lt;/a&gt; を見てみます。&lt;br /&gt;
これは Custom Renderer で実現されていて、キーボードが表示されたら、Page の位置を上方向へ移動させているようです(&lt;code class=&quot;highlighter-rouge&quot;&gt;ShiftPageUp()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ShiftPageDown()&lt;/code&gt; というメソッド名だし)。&lt;/p&gt;

&lt;p&gt;であれば、この処理を改造して、「移動」ではなく「高さのリサイズ」をすればよいことになります。&lt;br /&gt;
以下のように修正しました（コメントアウトは旧コードです）。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// KeyboardOverlapRenderer.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShiftPageUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyboardHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeViewBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//    var newY = pageFrame.Y + CalculateShiftByAmount(pageFrame.Height, keyboardHeight, activeViewBottom);
//    Element.LayoutTo(new Rectangle(pageFrame.X, newY,
//        pageFrame.Width, pageFrame.Height));
&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newHeight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CalculateShiftByAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyboardHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeViewBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LayoutTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_pageWasShiftedUp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShiftPageDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyboardHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeViewBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//    var newY = pageFrame.Y - CalculateShiftByAmount(pageFrame.Height, keyboardHeight, activeViewBottom);
//    Element.LayoutTo(new Rectangle(pageFrame.X, newY,
//        pageFrame.Width, pageFrame.Height));
&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newHeight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyboardHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LayoutTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_pageWasShiftedUp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを動かすと、下図のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOS 側も、求めていた動きになりました。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;改めて、期待通りの動きになった Xamarin.Forms での画面(Android と iOS)です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/keyboard_ovelapping_in_Xamarin_forms_09.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Android 側は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.cs&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize)&lt;/code&gt; と、WORKAROUND のコードを書きます。&lt;/p&gt;

&lt;p&gt;iOS 側は、 KeyboardOverlap.Forms.Plugin のカスタムレンダラー &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyboardOverlapRenderer.cs&lt;/code&gt; を少し修正して使用します。&lt;/p&gt;

&lt;p&gt;どちらもサンプルアプリを作りました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/ImeAutoAjustSample&quot;&gt;amay077/ImeAutoAjustSample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/Android&lt;/code&gt; が、 Android-Java で作成した「期待値」で、&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/XamarinFormsCustomRenderer&lt;/code&gt; が、 Xamarin.Forms で「期待値」を再現した iOS/Android アプリです。&lt;/p&gt;

&lt;p&gt;ListView + Entry のチャット画面に加えて、 ScrollView を使った画面も用意しています。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;このポストのきっかけは、&lt;/p&gt;

&lt;amp-twitter data-tweetid=&quot;818794518849781760&quot; width=&quot;800&quot; height=&quot;600&quot; layout=&quot;responsive&quot;&gt;&lt;/amp-twitter&gt;

&lt;p&gt;からの &lt;a href=&quot;https://twitter.com/amay077/status/819123872611975168&quot;&gt;一連の流れ&lt;/a&gt; です。もともと自分のプログラムでも懸案だったので調べてみました。&lt;/p&gt;

&lt;p&gt;ここに書かなかったけど知見になりそうなツイートを貼っておきます。&lt;/p&gt;

&lt;amp-twitter data-tweetid=&quot;819142125929447424&quot; width=&quot;800&quot; height=&quot;600&quot; layout=&quot;responsive&quot;&gt;&lt;/amp-twitter&gt;

&lt;amp-twitter data-tweetid=&quot;819103490609856513&quot; width=&quot;800&quot; height=&quot;600&quot; layout=&quot;responsive&quot;&gt;&lt;/amp-twitter&gt;

&lt;p&gt;関わっていただいた皆さん、ありがとうございました。&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 23:59:59 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/01/12/avoiding_overlaps_software_keyboard_in_xamarin_forms/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/01/12/avoiding_overlaps_software_keyboard_in_xamarin_forms/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Xamarin.Forms</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Xamarin.Forms で XAML Preview 中かどうかを判別する方法</title>
        <description>&lt;p&gt;Xamarin.Forms 向けのUIライブラリを提供する人向けの内容です。&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/xaml/xaml-previewer/&quot;&gt;XAML Previewer&lt;/a&gt; によって、XAML のコーディングも捗るようになってきました。&lt;/p&gt;

&lt;h2 id=&quot;xaml-previewer-の動き&quot;&gt;XAML Previewer の動き&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/&quot;&gt;Custom Renderer&lt;/a&gt; を使って、独自のコントロールを作成し、それを Page で使用した場合、XAML Previewer は、そのカスタムコントロールもレンダリングしようとします。&lt;/p&gt;

&lt;p&gt;アプリ実行時とほぼ変わらない処理が行われるようです。&lt;br /&gt;
その為、特に意識しなくとも、カスタムコントロールをプレビューすることができます。&lt;/p&gt;

&lt;p&gt;一方で、プレビュー時には、アプリ実行時とは異なる動きをさせたい場合があります。&lt;/p&gt;

&lt;p&gt;私の作成している &lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;Xamarin.Forms.GoogleMaps&lt;/a&gt; は地図を表示するためのカスタムコントロールです。&lt;br /&gt;
これは、次の理由で、プレビュー時には、実行時の処理をさせたくありません。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Android/iOS の Google Maps SDK に依存しているが、プレビュー時はこれが使用できない&lt;/li&gt;
  &lt;li&gt;動作に必要な API Key はメソッドで渡すため、プレビュー時には API Key が無い&lt;/li&gt;
  &lt;li&gt;そもそもプレビュー時に地図が見えても、嬉しい人は少ない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Xamarin.Forms.GoogleMaps 以外でも、例えば Android/iOS 端末内のデータを読んで表示・描画するようなものや C/C++ のライブラリに依存したカスタムコントロールも該当すると思います。&lt;/p&gt;

&lt;p&gt;このような場合、XAML Previewer による &lt;strong&gt;プレビュー中かどうか&lt;/strong&gt; を判断し、プレビュー中なら背景色をグレイにする、何か文字を表示する、などの特別な処理をしたいです。&lt;/p&gt;

&lt;h2 id=&quot;プレビュー中かどうかの判断は可能か&quot;&gt;プレビュー中かどうかの判断は可能か？&lt;/h2&gt;

&lt;p&gt;Windows.Forms で言えば &lt;code class=&quot;highlighter-rouge&quot;&gt;DesignMode&lt;/code&gt; プロパティ、Blend だと &lt;code class=&quot;highlighter-rouge&quot;&gt;DesignModeEnabled&lt;/code&gt; に相当するような、「プレビュー中かどうか」を明確に知る手法は、現在の Xamarin.Forms には提供されていませんでした。&lt;/p&gt;

&lt;h2 id=&quot;プレビュー中かどうかを判断する代替手法１-applicationcurrent-が-null-か&quot;&gt;プレビュー中かどうかを判断する代替手法１: Application.Current が null か&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://forums.xamarin.com/discussion/68440/xamarin-forms-xaml-previewer-determine-if-in-design-mode-in-code-behind-and-xaml-similar-to-blend&quot;&gt;Xamarin.Forms XAML Previewer - Determine if in Design Mode in Code Behind and XAML similar to Blend — Xamarin Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で紹介されていますが、 「&lt;code class=&quot;highlighter-rouge&quot;&gt;Application.Current&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; だったらプレビュー中である」という判断方法があるようです。&lt;/p&gt;

&lt;p&gt;ところが、&lt;code class=&quot;highlighter-rouge&quot;&gt;App.xaml.cs&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;MainPage = new NavigationPage(new SomePage());&lt;/code&gt; としている場合、iOS ではプレビュー中にも関わらず &lt;code class=&quot;highlighter-rouge&quot;&gt;Application.Current&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; ではありませんでした（XAML Previewer が &lt;code class=&quot;highlighter-rouge&quot;&gt;App.xaml.cs&lt;/code&gt; もパースして実行している？）。&lt;/p&gt;

&lt;h2 id=&quot;プレビュー中かどうかを判断する代替手法２-mylibinit-が呼ばれたか&quot;&gt;プレビュー中かどうかを判断する代替手法２: MyLib.Init() が呼ばれたか&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/amay077/items/b40d0383b9aaa75ab3f1&quot;&gt;Xamarin.Forms 向けのUIライブラリを作る時の注意点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で書きましたが、ライブラリを提供する場合、そのアセンブリが確実にロードされるようにするには、&lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.cs&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.cs&lt;/code&gt; で、UIライブラリの何らかのメソッド(&lt;code class=&quot;highlighter-rouge&quot;&gt;MyLib.Init()&lt;/code&gt;のような)を明示的に呼び出す必要があります。&lt;/p&gt;

&lt;p&gt;これは、「実行時にのみ、 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyLib.Init()&lt;/code&gt; が呼び出される」前提になるので、「&lt;code class=&quot;highlighter-rouge&quot;&gt;MyLib.Init()&lt;/code&gt; が呼び出されていなければプレビュー中である」と疑似的に判断することができます。&lt;/p&gt;

&lt;p&gt;こちらは XAML Previewer でも正常に判断されました。&lt;br /&gt;
Xamarin.Forms.GoogleMaps では、&lt;code class=&quot;highlighter-rouge&quot;&gt;Xamarin.FormsGoogleMaps.Init()&lt;/code&gt; という初期化メソッドを提供していますが、これが呼び出されていない場合には、地図の描画をせず、背景色付きのラベルを配置するようにしました。&lt;/p&gt;

&lt;p&gt;その修正のコミットが↓です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps/commit/5d483e85ef8e64fdb5047e23b36e20862d79df21&quot;&gt;Render empty bounds when FormsGoogleMaps.Init not called · amay077/Xamarin.Forms.GoogleMaps@5d483e8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OnElementChanged&lt;/code&gt; で、&lt;code class=&quot;highlighter-rouge&quot;&gt;Init&lt;/code&gt; が呼び出されていない場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;MapView&lt;/code&gt; ではなく &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; をセットするようにしています。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// iOS/MapRenderer.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnElementChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementChangedEventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnElementChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// For XAML Previewer or FormsGoogleMaps.Init not called.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormsGoogleMaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsInitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Xamarin.Forms.GoogleMaps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BackgroundColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Teal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToUIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TextColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToUIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TextAlignment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITextAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;SetNativeControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 以下略
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;プレビュー中はスキップした方がよい処理&quot;&gt;プレビュー中はスキップした方がよい処理&lt;/h2&gt;

&lt;p&gt;前述のコミットにも示されていますが、Android/iOS それぞれの Custom Renderer の実装で、&lt;/p&gt;

&lt;p&gt;コンストラクタ, &lt;code class=&quot;highlighter-rouge&quot;&gt;OnElementChanged&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OnLayout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OnElementPropertyChanged&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LayoutSubviews&lt;/code&gt; など、親クラスを override しているメソッドは、プレビュー中にも呼び出される可能性があるので、処理をスキップした方がよいです。&lt;/p&gt;

&lt;p&gt;Xamarin.Forms.GoogleMaps では、以下のような感じで処理をスキップしています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/5d483e85ef8e64fdb5047e23b36e20862d79df21/Xamarin.Forms.GoogleMaps/Xamarin.Forms.GoogleMaps.iOS/MapRenderer.cs#L130&quot;&gt;iOS/MapRenderer.cs - OnElementPropertyChanged&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;結果&quot;&gt;結果&lt;/h2&gt;

&lt;p&gt;これらを対応した結果、Xamarin.Forms.GoogleMaps は、Visual Studio for Mac の XAML Preview では下図のような背景色付きのラベルで表示されるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/determine_if_in_Xamarin_xaml_previewer_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;プロジェクトが使用している Xamarin.Forms の nuget パッケージが古いとプレビューが表示されないようです（この記事投稿時、2.3.0 では「古い」と言われ、最新の 2.3.3 に上げたら表示されるようになりました）。&lt;/p&gt;

&lt;p&gt;尚、未検証ですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;Init&lt;/code&gt; が呼ばれたか、という手法なら、XAML Previewer 以外のプレビューソリューション（Gorilla Player とか）でも使用可能と思われます。&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 23:59:58 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/01/12/determining_is_preview_in_xamarin_forms/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/01/12/determining_is_preview_in_xamarin_forms/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Xamarin.Forms</category>
        
      </item>
    
      <item>
        <title>Xamarin.Forms XAML で、Margin の上下左右の順番</title>
        <description>&lt;p&gt;Xamarin.Forms の XAML で マージン(Margin)やパディング(Padding)を書くとき、上下左右の順番がわからなくなるのでメモ。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;XAML に Margin や Padding （いわゆる &lt;code class=&quot;highlighter-rouge&quot;&gt;Thickness&lt;/code&gt;）をリテラルで書くときの順番は、 &lt;strong&gt;「left, top, right, bottom」&lt;/strong&gt; だ。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentPage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:MarginTest&quot;&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MarginTest.MarginTestPage&quot;&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;BackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Silver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoxView&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;Margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10, 20, 30, 40&quot;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;HorizontalOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FillAndExpand&quot;&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;VerticalOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FillAndExpand&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_margin_definition_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「”左” をスタートに時計まわり」&lt;/strong&gt; と覚えておきたい。&lt;/p&gt;

&lt;p&gt;Thickness のコンストラクタの引数を見てもよい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/api/constructor/Xamarin.Forms.Thickness.Thickness/p/System.Double/System.Double/System.Double/System.Double/&quot;&gt;Thickness(double, double, double, double) - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// syntax
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thickness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ちなみに css の &lt;code class=&quot;highlighter-rouge&quot;&gt;margin: 10px 20px 30px 40px;&lt;/code&gt; は、 ”上” をスタートに時計まわり だ、紛らわしい。&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 23:59:59 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/01/05/order_of_xamarin_forms_margin_in_xaml/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/01/05/order_of_xamarin_forms_margin_in_xaml/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Xamarin.Forms</category>
        
        <category>XAML</category>
        
      </item>
    
      <item>
        <title>Xamarin Studio(Visual Studio for Mac)で tab を絶対殺す設定</title>
        <description>&lt;p&gt;インデントは space4 派です。&lt;/p&gt;

&lt;p&gt;インストールした直後の Xamarin Studio や Visual Studio for Mac の設定だと、インデントが tab になっています。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;この状態で開発を始めてしまうと、意図せず tab がコードに挿入され、リポジトリに push してしまい、 &lt;a href=&quot;https://github.com/nuitsjp/Xamarin.Forms.GoogleMaps.Bindings/commit/8399c57a6d83b291116be0e588ecca88405d4182#diff-5a747f9189b02ce61af4958a513f30f6&quot;&gt;github で見た時に初めて気づき&lt;/a&gt; ヽ(｀Д´#)ﾉ ﾑｷｰ!! となるので、早めに手を打ちましょう。&lt;/p&gt;

&lt;h2 id=&quot;第一の砦-xamarin-studio-のユーザー設定&quot;&gt;第一の砦: Xamarin Studio のユーザー設定&lt;/h2&gt;

&lt;p&gt;できればインストールした直後にやっておきたい設定。&lt;br /&gt;
そもそもこの既定の設定値が Visual Studio for Win と異なるからいろいろ不幸が起こると思われ。&lt;/p&gt;

&lt;p&gt;メニュー -&amp;gt; Xamarin Studio -&amp;gt; ユーザー設定 で「ユーザー設定」画面を起動し、ソースコード -&amp;gt; コードの書式設定 -&amp;gt; C# ソースコードを選択し、以下のように、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;タブ幅、インデント幅を 4 に&lt;/li&gt;
  &lt;li&gt;タブをスペースに変換 にチェックを入れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/definitely_kill_tab_for_Xamarin_studio_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;と設定します。（ポリシーで &lt;strong&gt;Visual Sutdio&lt;/strong&gt; を選択すればいいんじゃん！）&lt;/p&gt;

&lt;h2 id=&quot;第二の砦-ソリューションプロジェクトの設定&quot;&gt;第二の砦: ソリューション/プロジェクトの設定&lt;/h2&gt;

&lt;p&gt;ソースコードの書式設定が、ソリューションまたはプロジェクト毎にされている場合、第一の砦を突破される可能性があります。&lt;/p&gt;

&lt;p&gt;ソリューションまたはプロジェクトを右クリックして、オプションを選択し、先ほどと同じように ソースコードの書式設定 を見直します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/definitely_kill_tab_for_Xamarin_studio_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Windows と Mac で共同作業する場合は、プロジェクト作成時に、この設定を明示的に行っておくのがよいと思います。&lt;/p&gt;

&lt;h2 id=&quot;最後の砦-git-のコミット時に-tab-を-space-に変換する設定&quot;&gt;最後の砦: git のコミット時に tab を space に変換する設定&lt;/h2&gt;

&lt;p&gt;Xamarin Studio やプロジェクトの設定だけでは不安な場合は、最後の砦として、git のコミット時に tab を空白に変換してしまいましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hogeblr.tumblr.com/post/49260745404/git-%E3%81%A7-commit-%E6%99%82%E3%81%AB%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%82%84%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%87%AA%E5%8B%95%E7%9A%84%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B&quot;&gt;git で commit 時にホワイトスペースや改行コードを自動的に変換する - hogeblr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2316677/can-git-automatically-switch-between-spaces-and-tabs&quot;&gt;Can git automatically switch between spaces and tabs? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-homebrew-で-coreutils-を入れる&quot;&gt;1. homebrew で coreutils を入れる&lt;/h3&gt;

&lt;p&gt;Terminal で、&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install coreutils&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;を実行します。&lt;br /&gt;
homebrew が入っていない場合は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblabo.oscasierra.net/homebrew-1/&quot;&gt;Mac の開発を便利にするパッケージ管理ソフト Homebrew のインストール手順 ｜ WEB ARCH LABO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などを見て先にインストールしてください。&lt;/p&gt;

&lt;h3 id=&quot;2-tab-を-space-に変換するフィルタを作成&quot;&gt;2. tab を space に変換するフィルタを作成&lt;/h3&gt;

&lt;p&gt;Terminal で、&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global filter.tabspace.clean 'expand -t 4'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;を実行します。&lt;br /&gt;
これは、 「”tabspace” という名前のフィルターを作成する」という意味です。&lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; を付けていますが、個別のローカルリポジトリにのみ適用する場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;--local&lt;/code&gt; として、ローカルリポジトリのディレクトリで実行してください。尚、この設定はリモートへは適用されません。&lt;/p&gt;

&lt;h3 id=&quot;3-gitattributes-にフィルタを適用する拡張子を設定&quot;&gt;3. .gitattributes にフィルタを適用する拡張子を設定&lt;/h3&gt;

&lt;p&gt;ローカルリポジトリに &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; というテキストファイルを作成し、以下を追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text:.gitattributes&quot;&gt;*.cs filter=tabspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「2 で作成したフィルタ “tabspace” を、拡張子 *.cs に適用する」という意味です。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; はリモートに送信されます。&lt;/p&gt;

&lt;h3 id=&quot;4-ローカルリポジトリにフィルタを適用してあげる&quot;&gt;4. ローカルリポジトリにフィルタを適用してあげる&lt;/h3&gt;

&lt;p&gt;Terminal で、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rm -r --cached .
git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を実行します。&lt;br /&gt;
すべてのファイルを一旦キャッシュから削除して再追加してあげることでフィルタを適用します。（上記リンクでは &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout HEAD -- **&lt;/code&gt; が紹介されてましたがうまくいかなかったんですよね。。）&lt;br /&gt;
リポジトリ内の *.cs ファイルに tab が含まれていた場合は、この操作で、それらのステータスが modified になり tab が space に変換されているでしょう。そのまま &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; すると、tab が space でコミットされます。&lt;/p&gt;

&lt;p&gt;変更したファイルに tab があるとそれは space に変換されるし、テキストエディタで意図的に tab を挿入しても、space に変換されます。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;さまざまな人がコミットするプロジェクトの管理者の立場で、 tab でなく space の使用をできるだけ強制したい場合は、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;プロジェクト単位でコードの書式設定をしておく&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; をリポジトリに含める&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global filter.tabspace.clean 'expand -t 4'&lt;/code&gt; を作業Macで実行してもらう&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;が現状ですぐに採用できる対策かと思います。&lt;/p&gt;

&lt;p&gt;1 をしないと、各作業者の環境の設定値が適用されてしまうので、明示的に設定した方が良いと思います。&lt;/p&gt;

&lt;p&gt;git の filter は &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; だと複数のリポジトリで衝突する可能性があるので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;--local&lt;/code&gt; の方が無難とも思います。&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 23:59:59 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/01/05/killing_tab_for_xamarin_project/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/01/05/killing_tab_for_xamarin_project/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Git</category>
        
        <category>VisualStudio</category>
        
      </item>
    
  </channel>
</rss>
