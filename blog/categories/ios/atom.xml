<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-18T17:26:07+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[カスタムマーカーに対応した Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/18/xamarin_forms_googlemaps_v1_4_0_released/"/>
    <updated>2016-07-18T17:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/18/xamarin_forms_googlemaps_v1_4_0_released</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました。</p>

<!--more-->


<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/1.4.0">NuGet Gallery | Xamarin.Forms.GoogleMaps 1.4.0</a></li>
</ul>


<p>待望？のカスタムマーカーに対応しました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_001.png" alt="image001" /></p>

<h2>カスタムマーカーの使い方</h2>

<p><code>Pin.Icon</code> に <code>BitmapDescriptorFactory</code> により生成される <code>BitmapDescriptor</code> を設定します。</p>

<p><code>BitmapDescriptorFactory</code> の３つのファクトリメソッドにより、
「デフォルトマーカーの色を変える」「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」
の３つが使用できます。</p>

<h3>デフォルトマーカーの色を変える</h3>

<p><a href="https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_marker.html?hl=ja#ae320cb082a68c22eb1f37955f8e56228"><code>iOS:GMSMarker.markerImageWithColor</code></a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float"><code>Android:BitmapDescriptorFactory.defaultMarker</code></a>) に対応する、既定のマーカー形状の色のみを変える機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>

<p><code>csharp
pin.Icon = BitmapDescriptorFactory.DefaultMarker(Color.Pink);
</code></p>

<h3>プラットフォーム毎の画像リソースを使用する</h3>

<p><a href="https://developers.google.com/maps/documentation/ios-sdk/marker?hl=ja#_7"><code>iOS:UIImage.imageNamed</code></a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float"><code>Android:BitmapDescriptorFactory.fromAsset</code></a>) に対応する、プラットフォーム固有の画像リソースを、マーカー画像として使用する機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.FromBundle(string)</code> メソッドを使用します。</p>

<p><code>csharp
pin.Icon = BitmapDescriptorFactory.FromBundle("image01.png");
</code></p>

<p>引数の bundleName は、 <strong>同じ名称で</strong> 、プラットフォーム毎に次のように用意されている必要があります。</p>

<h4>Android の場合</h4>

<p>Android側のプロジェクトの <code>Assets</code> ディレクトリ内に <code>image01.png</code> を追加し、 Build Action を ”Android Asset” に設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_002.png" alt="image001" /></p>

<h4>iOS の場合</h4>

<p>iOS側のプロジェクト <code>image01.png</code> を追加し、 Build Action を ”BundleResource” に設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_003.png" alt="image001" /></p>

<h3>共通の画像リソースを使用する</h3>

<p>画像を <code>Stream</code> を直接指定できる、機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>

<p>```csharp
// PCLプロジェクトに EmbeddedResouece として追加した &ldquo;marker01.png&rdquo; を読み込んで Stream 化
var assembly = typeof(CustomPinsPage).GetTypeInfo().Assembly;
var stream = assembly.GetManifestResourceStream($&ldquo;XFGoogleMapSample.marker01.png&rdquo;);</p>

<p>// Stream をマーカーに設定
pin.Icon = BitmapDescriptorFactory.FromStream(stream);
```</p>

<h2>【注意】プラットフォーム毎のマーカーサイズの違い</h2>

<p>「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」で見られる現象なのですが、iOS と Android では <strong>同じサイズの画像を指定しているのに iOS の方が大きく描画されます</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_004.png" alt="image001" /></p>

<p>なぜこうなるのか分かりませんが、 <a href="https://developers.google.com/maps/documentation/ios-sdk/intro?hl=ja">Google Maps SDK for iOS</a> と <a href="https://developers.google.com/maps/documentation/android-api/intro?hl=ja">Google Maps Android API</a> を直接使用した時もこうなるので、両者の仕様というかプラットフォーム自体の仕様なのかも知れません。</p>

<p>特に <code>BitmapDescriptorFactory.FromStream</code> を使用した時には使い勝手が悪いのですが、「ネイティブの Google Maps SDK の機能を共通APIでラップする」のが第一目標なので、とりあえず画像を何も加工しない実装でリリースしました。</p>

<p>何か原因などについてヒントがある方は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues/40">Why custom pin icon in iOS bigger than Android? · Issue #40 · amay077/Xamarin.Forms.GoogleMaps</a></li>
</ul>


<p>に書いてもらえると助かります（日本語で大丈夫です）。</p>

<h2>サンプルプログラム</h2>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">XFGoogleMapSample</a> の <a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/XFGoogleMapSample/CustomPinsPage.xaml.cs"><code>CustomPinsPage.xaml.cs</code></a> でこれらの機能を使用しています。</p>

<p>是非使ってみてください。よければ <a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Github リポジトリ</a> に Star ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ボタンをタップした時に○○する、を Java と Swift と Xamarin で比較する]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/15/comparison_on_click_with_java_swift_xamarin/"/>
    <updated>2016-07-15T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/15/comparison_on_click_with_java_swift_xamarin</id>
    <content type="html"><![CDATA[<p>たぶん一番書くやつを</p>

<!--more-->


<ul>
<li>Android-Java</li>
<li>Android-Xamarin</li>
<li>iOS-Swift</li>
<li>iOS-Xamarin</li>
</ul>


<p>で比較。</p>

<hr />

<h2>Android-Java</h2>

<p>```java MainActivity.java
button1.setOnClickListener(new View.OnClickListener() {</p>

<pre><code>@Override
public void onClick(View view) {
    label1.setText("pushed!!");        
}
</code></pre>

<p>});</p>

<h2>```</h2>

<h2>Xamarin.Android(C#)</h2>

<p>```csharp MainActivity.cs
buttonOk.Click += (_, e)</p>

<pre><code>=&gt; label1.Text = "pushed!!";
</code></pre>

<h2>```</h2>

<h2>iOS-Swift</h2>

<p>```java ViewController.swift
buttonOK.addTarget(self, action:</p>

<pre><code>#selector(ViewController.onTouch(_:)), 
forControlEvents: .TouchUpInside)
</code></pre>

<p>・・・
func onTouch(sender: AnyObject) {</p>

<pre><code>label1.text = "pushed!!"
</code></pre>

<p>}</p>

<h2>```</h2>

<h2>Xamarin.iOS(C#)</h2>

<p>```csharp ViewColtroller.cs
buttonOk.TouchUpInside += (_, e)</p>

<pre><code>=&gt; label1.Text = "pushed!!";
</code></pre>

<h2>```</h2>

<h2>まとめ</h2>

<p><strong>Xamarin はいいぞ！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms 向けの地図ライブラリ「Xamarin.Forms.GoogleMaps」をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/"/>
    <updated>2016-06-27T23:59:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms で使える地図ライブラリは、公式が出している</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.Maps/">Xamarin.Forms.Maps</a> &ndash; Maps models and renderers for Xamarin.Forms</li>
</ul>


<p>があるのですが、非常に機能が少ないです（ピンがおけるだけで、図形の描画すらできません）。</p>

<!--more-->


<p>なので、別な選択肢としての「Xamarin.Forms向け地図ライブラリ」を開発し始めました。</p>

<p>それがこちら</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/">Xamarin.Forms.GoogleMaps</a> &ndash; Yet another Maps library for Xamarin.Forms that optimized for Google maps.</li>
</ul>


<p>です。</p>

<p>iOS では MapKit に代わり <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a> を使用し、 Android/iOS 共に Google Maps に特化することで、API の共通化を容易にし、恐らくAPI共通化の足枷になっているであろう UWP(Bing maps) のサポートは最小限に留めています。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_01.png" alt="screenshot1" /></p>

<h2>現在の機能</h2>

<p>現在のバージョンは 1.1.0 。
公式の Xamarin.Forms.Maps に比べて、ライン・ポリゴン・円を追加できるようになりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_02.png" alt="screenshot2" /></p>

<p>詳しい比較は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/wiki/Xamarin.Forms.Maps-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83">Xamarin.Forms.Maps との比較 &ndash; Xamarin.Forms.GoogleMaps Wiki</a></li>
</ul>


<p>にあります。</p>

<h2>サンプルプログラム</h2>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">Xamarin.Forms.GoogleMaps/XFGoogleMapSample &ndash; github</a></li>
</ul>


<p>にあります。</p>

<p>Google Maps の APIキーを Android / iOS それぞれで取得する必要があります。</p>

<ul>
<li>Android &ndash;  <a href="http://www.buildinsider.net/mobile/xamarintips/0020">Xamarin.Androidで地図を表示するには？（Google Maps使用） &ndash; Build Insider</a></li>
<li>iOS &ndash; <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS  |  Google Developers</a> の「クイック スタート ステップ」
をそれぞれ参照してください。</li>
</ul>


<h2>オープンソース</h2>

<p><a href="http://open.xamarin.com/">Xamarin Open Source SDK</a> により、 Xamarin.Forms のソースコードもオープンソースになったので、 <a href="https://github.com/xamarin/Xamarin.Forms/tree/master/Xamarin.Forms.Maps">Xamarin.Forms/Xamarin.Forms.Maps &ndash; github</a> などを Fork して作りました。</p>

<p>このライブラリ自体もオープンソースであり、</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>
</ul>


<p>で開発しています。（スターを付けてもらえると作者がよろこびます）</p>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues">要望、コメントなど</a>もらえると嬉しいです。よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms の画面(Page)のライフサイクルイベントについて]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles/"/>
    <updated>2016-06-08T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles</id>
    <content type="html"><![CDATA[<p>ちょっと誤解してた＆情報がなかったのでまとめてみました。</p>

<!--more-->


<h2>モバイルアプリでの「画面」の基本的なライフサイクルイベント</h2>

<p>まあ Android と iOS についてですが。</p>

<p>画面が表示される時のイベント（コールバック）は、簡潔には以下のようになります。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume|</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause|</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy|</td>
</tr>
</tbody>
</table>


<p>厳密にはもっと細かく、〜される前と後が iOS と Android で微妙に異なるのでだいたいこんな感じという程度と思って下さい。</p>

<p>もう少し細かいイベントは以前調べた以下を参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/52a0b0da97fe455abc08">iOS と Android で画面表示時のコールバックを比較する &ndash; Qiita</a></li>
</ul>


<h2>Xamarin.Forms での画面のライフサイクルイベント</h2>

<p>Xamarin.Forms では、上表のライフサイクルイベントは、アプリケーション
(Application) と、画面(Page) のイベントに分かれています。</p>

<p>表に、Xamarin.Forms を追加してみました。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
<th>Xamarin.Forms</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnAppearing(">Page.OnAppearing</a>/)|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnResume(">Application.OnResume</a>/) <strong>※要注意</strong> |</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnSleep(">Application.OnSleep</a>/)</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnDisappearing(">Page.OnDisappearing</a>/)|</td>
</tr>
</tbody>
</table>


<p>画面のロード時（<code>viewDidLoad/onCreate</code>）に相当するのは、Xamarin.Forms では <code>OnAppearing</code>、逆にアンロード時は <code>OnDisAppearing</code> です（名称が <code>viewDidAppear</code> に似てるので、画面の表示時かと勘違いしてました）。</p>

<p>画面の表示／非表示時のイベントは、画面でなく Application クラスの <code>OnResume</code>, <code>OnSleep</code> で提供されます。</p>

<p>要注意なのは <code>OnResume</code> です。これ、画面が表示される <strong>初回はイベントが発生しません</strong>。
一度、アプリを背面に退避し、再度前面に持ってきたときに初めて <code>OnResume</code> が呼び出されます。iOS や Android の <code>viewDidAppear / OnResume</code> と同じだと思ってつかうとハマります。</p>

<p>基本的には、 <code>OnAppearing</code> でリソースの確保を、 <code>OnDisAppearing</code> で解放をすればよさそうです。</p>

<p>GPS など、電池消費の激しいリソースを使う場合は、アプリが背面へ隠れたら直ちにそのリソースを解放した方がよいです。その場合は <code>OnResume-OnSleep</code> を使いますが、前述の通り、画面初回表示時は <code>OnResume</code> が走らないので、少し工夫が必要です。</p>

<h2>画面が回転された時</h2>

<p>端末を横向きに回転すると、Android では Activity が破棄されて再度生成される事が知られています。</p>

<p>Xamarin.Forms では Android でもそのような事はなく、 <code>Page.OnSizeAllocated</code> が呼び出されるだけです(iOS も当然同じ)。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.xamarin.com/guides/xamarin-forms/working-with/app-lifecycle/">Working with the App Lifecycle &ndash; Xamarin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Workbooks とかいうやつ]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/"/>
    <updated>2016-04-29T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks</id>
    <content type="html"><![CDATA[<p><a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> が開催中されました。</p>

<!--more-->


<p>build での予告どおり、Xamarin.Android/iOS などがついにオープンソースになった、などのエキサイティングな発表のまとめは</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/evolve2016">【速報】Evolve 2016 で発表されたエキサイティング情報まとめ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>その Keynote でデモされていた Xamarin Workbooks というツールがなかなかすごいので紹介。</p>

<h2>なにこれ？</h2>

<p>ひとことでいうと、</p>

<p><strong>Xcode の Playground みたいなやつ + Markdown</strong></p>

<p>まだ意味わかんないですね？</p>

<p>こういうことです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_01.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_02.gif" alt="" /></p>

<ul>
<li>Markdown でドキュメントが書ける(このツール自体はリッチなエディタである)</li>
<li>```csharp〜``` で囲まれたコードブロックは、そのまま iOSシミュレータなどでインタラクティブに、Instant に実行できる。</li>
</ul>


<p>上記の Workbook の実ファイルは、これ↓です。</p>

<ul>
<li><a href="https://gist.github.com/amay077/793b5df4aad0098ffe6d9c12a491ee9a">Xamarin Workbooks を使ってみるテスト。 HowToUseMapKit.workbook で保存して Xamarin Inspector で File->Open してね。</a></li>
</ul>


<p>みてわかる通りまんま Markdown ですね。</p>

<h2>Let&rsquo;s try!</h2>

<p>しかも iOS だけじゃなく、Android, Mac, Windows(WPF) に全対応！
Mac でも Windows でも試せるみたいです。</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/workbooks/">Xamarin Workbooks &ndash; Xamarin</a></li>
</ul>


<p>スタンドアロンなアプリとして実行可能なようなので、サクッと使ってみよう！</p>
]]></content>
  </entry>
  
</feed>
