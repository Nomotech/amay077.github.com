<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-09-02T22:04:53+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARC のメモリ解放タイミングを調べた]]></title>
    <link href="http://amay077.github.io/blog/2013/09/02/when-release-memory-by-arc/"/>
    <updated>2013-09-02T21:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/02/when-release-memory-by-arc</id>
    <content type="html"><![CDATA[<p>一つの関数内で容量の大きなファイルを読み込み加工する処理を連続して行っていたらメモリが足りなくなった。</p>

<!--more-->


<p>ARC ではスコープを外れ(て参照カウンタがゼロになっ)たオブジェクトは、すぐに破棄されると思っていたのでしばらくハマった。</p>

<h2>問題のソース(ARC使用)</h2>

<p>ローカルでもWebでも何でもいいけど、ファイルから無視できない程度の容量のデータの読み込みを繰り返す処理。</p>

<p>```obj-c
- (IBAction)buttonDownWithArc:(id)sender {</p>

<pre><code>NSString* path = @".../bigdata.img";

for (int i = 0; i &lt; 10000; i++) {
    NSData* data = [NSData dataWithContentsOfFile:path];
    [NSThread sleepForTimeInterval:0.5];
    data = nil;
}
</code></pre>

<p>}
```</p>

<p>これを Instruments でプロファイルするとこうなる。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/arc_memory_release_timing_01.png" alt="img" /></p>

<p>じゃんじゃんメモリ確保してしまう（汗
ARC で <code>data</code> は <code>nil</code> にしてるからスコープ外れた時にメモリ解放されると思っていたのだが。</p>

<p>ちなみにこの関数の処理が終了すると、メモリが解放される。</p>

<h2>非ARC でやってみた</h2>

<p>メモリ管理をマニュアルでやったらどうなるかを確認した。</p>

<p>```obj-c
- (IBAction)buttonDownNoArc:(id)sender {</p>

<pre><code>NSString* path = @".../bigdata.img";

for (int i = 0; i &lt; 10000; i++) {
    NSData* data = [NSData dataWithContentsOfFile:path];
    [NSThread sleepForTimeInterval:0.5];
    [data dealloc];
    data = nil;
}
</code></pre>

<p>}
```</p>

<p>この時のメモリ確保状況は、期待した通りになった。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/arc_memory_release_timing_02.png" alt="img" /></p>

<p>メモリ使用量が線形に<strong>増えない</strong>ことが分かる。ARC 利用時にもこうなるようにしたい。</p>

<p>状況は、スコープ内変数の破棄が、関数を抜ける時に遅延されている。
ARC 周りの情報をいろいろ漁っていて、AutoReleasePool との関わりが怪しいと予想した。</p>

<ul>
<li><a href="http://blog.natsuapps.com/2011/11/ios5-arc-overview.html">[iOS5] ARC (Automatic Reference Counting) : Overview - iOS 開発ブログ Natsu's note </a></li>
</ul>


<p>より引用：</p>

<blockquote><h3>retain, release, autorelease, deallocはコンパイラのお仕事</h3>

<p>ARCを利用する場合、コンパイラが</p>

<ul>
<li>retain, release, autoreleaseを挿入してくれる（自分で呼んではいけない。コンパイラエラーになる）。</li>
<li>deallocを適切な位置に挿入してくれる（deallocのオーバーライドは可能。ただし[super dealloc]は不可能）。</li>
</ul>


<p>ことになります。</p></blockquote>

<p>コンパイラにより関数単位で <code>@autoreleasepool {  }</code> が挿入されているとしたら、最初の図のような動きになるはず。ということは、for ループの中に @autorelease を持ってったらどうか？</p>

<h2>ARC + @autoreleasepool 版</h2>

<p>for の中の処理を <code>@autoreleasepool { }</code> で括ってみた。</p>

<p>```obj-c
- (IBAction)buttonDownWithArcAndAutoRelease:(id)sender {</p>

<pre><code>for (int i = 0; i &lt; 100; i++) {
    @autoreleasepool {
        NSData* data = [NSData dataWithContentsOfFile:_path];
        [NSThread sleepForTimeInterval:0.5];
    }
}
</code></pre>

<p>}
```</p>

<p>すると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/arc_memory_release_timing_03.png" alt="img" /></p>

<p>やたー、期待する動きになったぞ。</p>

<h2>まとめ</h2>

<p>とここまで調べて、しばらく Obj-C さわってなかったので埃をかぶっていた</p>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4844331094?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4844331094&amp;linkCode=shr&amp;tag=oku2008-22">エキスパートObjective-Cプログラミング -iOS/OS Xのメモリ管理とマルチスレッド-</a></li>
</ul>


<p>を引っ張り出してきて読んだら、P.25 にまさにその事が書かれていて泣いた。</p>

<blockquote><p>とはいえ、autorelease されたオブジェクトが大量に発生した場合、NSAutoReleasePool のオブジェクトが破棄されない限り、それらのオブジェクトは release されないので、メモリ不足に陥る場合があります。典型的な例は、大量の画像をリサイズしながら読み込む場合でしょう。…</p>

<pre><code>   for (int i = 0; i &lt; 画像数; i++) {
       /*
        * 画像読み込み処理
        * autoreleaseされたオブジェクトが大量発生。
        * NSAutoReleasePoolのオブジェクトが破棄されないため
        * いずれメモリ不足発生！
        */           
   }
</code></pre></blockquote>

<p>勉強しなおします。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pull up to Close を実装してみる、Xamarin.iOS で]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios/"/>
    <updated>2013-07-28T13:51:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios</id>
    <content type="html"><![CDATA[<p>イマドキのスマホアプリでは Pull to Refresh（引っ張って更新）を実装してるアプリをよく目にするのですが、RSS Reader の Feedly では Pull up to Close（上に引っぱって閉じる）も採用しています。</p>

<p>この操作性がなかなか使いやすかったので、自分でも実装してみました。</p>

<!--more-->


<h2>デモ</h2>

<p>こんな感じ。
WebView なんですが、一番下までスクロールして、さらに上に引っ張ると "Pull up to Close" → "Release to Close" とラベルが変わり、そこで離すとコールバックします。</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/AP6xPqwwXMI?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>


<h2>実装してみたコード</h2>

<p><a href="http://xamarin.com/">Xamarin.iOS</a> ですから、C# です。</p>

<p>UIWebView でやってますが、ScrollView なコントロールならだいたい同じ感じでいけるんじゃないかと思います。</p>

<p>```c# PullUpToCloseSampleViewController.cs
public partial class PullUpToCloseSampleViewController : UIViewController
{</p>

<pre><code>public PullUpToCloseSampleViewController() : base ("PullUpToCloseSampleViewController", null)
{
}

public override void ViewDidLoad()
{
    base.ViewDidLoad();

    // WebView が持ってる ScrollView、よく使うので変数化しておく
    // webView は Interface Builder で UIWebView を Outlet にしたもの。
    var scrollView = webView.ScrollView;

    // Bounces の影を消す via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview
    scrollView.Subviews.Where(v =&gt; v is UIImageView)
        .ToList().ForEach(v =&gt; v.Hidden = true);

    // 上に引っ張った時に見える背景とラベル
    var bounceBackground = new UIView(
        new RectangleF(0f, 0f, webView.Frame.Width, webView.Frame.Height));
    bounceBackground.BackgroundColor = UIColor.LightGray;
    var bounceLabel = new UILabel(
        new RectangleF(0f, webView.Frame.Height - 30f, webView.Frame.Width, 30f));
    bounceLabel.Text = "Pull up to Close";
    bounceLabel.TextAlignment = UITextAlignment.Center;
    bounceLabel.BackgroundColor = UIColor.Clear;
    bounceLabel.Opaque = false;

    // 背景とラベルを WebView の一番奥に追加する
    webView.InsertSubview(bounceLabel, 0);
    webView.InsertSubview(bounceBackground, 0);

    // 適当な URL を読み込み
    webView.LoadRequest(NSUrlRequest.FromUrl(new NSUrl("http://yahoo.co.jp/")));

    // 閉じるのに必要な分だけ上に引っ張ったら true になる
    var canClose = false;

    // ドラッグ開始時にフラグOFF(一応)
    scrollView.DraggingStarted += (sender, e) =&gt; 
    {
        canClose = false;
    };

    // ドラッグ終了時、必要量引っ張っていたら OnCloseByPullUp を呼ぶ
    scrollView.DraggingEnded += (sender, e) =&gt; 
    {
        if (canClose)
        {
            OnCloseByPullUp();
        }
    };

    // スクロールした時にいろいろやる
    scrollView.Scrolled += (sender, e) =&gt; 
    {
        var labelFrame = bounceLabel.Frame;

        // コンテンツの一番下まで表示してさらに引っ張ったサイズ
        var offsetY = (scrollView.Frame.Height + scrollView.ContentOffset.Y) 
            - scrollView.ContentSize.Height;

        // 50px 上に引っ張ったら閉じるものとする
        canClose = offsetY &gt; 50f;
        bounceLabel.Text = canClose ? "Release to Close" : "Pull up to Close";

        // ラベルがいつまでも移動しないように
        if (offsetY &gt; labelFrame.Height)
        {
            offsetY = labelFrame.Height;
        }

        // ラベルがドラッグと共に下からせり出してくるように
        labelFrame.Y = scrollView.Frame.Height - offsetY;
        bounceLabel.Frame = labelFrame;
    };
}

// "Release to Close" で離すと呼ばれる
void OnCloseByPullUp()
{
    var v = new UIAlertView("", "Close this view",  null, "Close");
    v.Show ();
}
</code></pre>

<p>}
```</p>

<h2>やってる事</h2>

<ol>
<li>ScrollView の「引っ張った時に見える場所（= Bounce というらしい）」の影を消す。 via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview</li>
<li>背景と、ラベルを WebView 内の一番奥に挿入する（引っ張った時にのみ見えるように）</li>
<li>あとはイベントハンドラでの処理。スクロール中に、「最下部で引っ張り中」だったら "Pull up to Close" ラベルをアニメーションさせながら表示する。50px 以上引っ張ってたら "Release to Close" にラベルを変える。「閉じられるよ」フラグも ON にしとく。</li>
<li>ドラッグ終了イベントで、「閉じられるよ」フラグが立ってたら、コールバックする。</li>
</ol>


<h2>今後</h2>

<p>もうちょっとライブラリっぽくしたいですね。あと引っ張り中にアイコンとか表示させたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS でジェスチャを認識する]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/recognition-gestures-using-xamarin-ios/"/>
    <updated>2013-07-28T13:49:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/recognition-gestures-using-xamarin-ios</id>
    <content type="html"><![CDATA[<p><a href="http://xamarin.com/">Xamarin.iOS</a> でも <code>UIGestureRecognizer</code> が普通に使えるわけですが、Objective-C に比べてコードが短く書けて感動した話です。</p>

<!--more-->


<p>本日の Obj-C の先生はこちら。</p>

<ul>
<li><a href="http://labs.techfirm.co.jp/ipad/cho/466">Gesture Recognizers 〜簡単にタッチ操作を検知 | iPad Techfirm Lab </a></li>
</ul>


<p>このサンプルを Xamarin.iOS に移植してみます。</p>

<h2>サンプルコード</h2>

<p>```c# GesturesSample_ViewDidLoad.cs
// Tap gesture
this.View.AddGestureRecognizer(new UITapGestureRecognizer(tap =>
{</p>

<pre><code>Debug.WriteLine("Double Tap.");
</code></pre>

<p>})
{</p>

<pre><code>NumberOfTapsRequired = 2 // Double tap 
</code></pre>

<p>});</p>

<p>// Drag(Pan) gesture
this.View.AddGestureRecognizer(new UIPanGestureRecognizer(pan =>
{</p>

<pre><code>var p = pan.TranslationInView(this.View);
var v = pan.VelocityInView(this.View);
Debug.WriteLine("Pan. transration:{0}, velocity:{1}", p, v);
</code></pre>

<p>}));</p>

<p>// Pinch gesture
this.View.AddGestureRecognizer(new UIPinchGestureRecognizer(pin =>
{</p>

<pre><code>var scale = pin.Scale;
var v = pin.Velocity;
Debug.WriteLine("Pinch. scale:{0}, velocity:{1}", scale, v);
</code></pre>

<p>}));</p>

<p>// Swipe gesture
this.View.AddGestureRecognizer(new UISwipeGestureRecognizer(sw =>
{</p>

<pre><code>Debug.WriteLine("Swipe.");
</code></pre>

<p>}));</p>

<p>// Rotate gesture
this.View.AddGestureRecognizer(new UIRotationGestureRecognizer(ro =>
{</p>

<pre><code>var rotation = ro.Rotation;
var v = ro.Velocity;
Debug.WriteLine("Rotate. rotation:{0}, velocity:{1}", rotation, v);
</code></pre>

<p>}));</p>

<p>// Long press gesture
this.View.AddGestureRecognizer(new UILongPressGestureRecognizer(lp =>
{</p>

<pre><code>Debug.WriteLine("Long press.");
</code></pre>

<p>}));
```</p>

<p>ViewController 全体のソースは <a href="https://gist.github.com/amay077/6094422">コチラ</a></p>

<p>元のサイトのサンプルコードは 70行弱ありますが、Xamarin.iOS では 45行くらいで書けました。しかも、GestureRecongnizer の登録とハンドラが同じ場所に書けるので見やすい。</p>

<p>しかしこれ、ハンドラとか GesutureRecognizer、破棄しなくていいのかなあ。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio でコンポーネントを更新する方法]]></title>
    <link href="http://amay077.github.io/blog/2013/05/08/update-components-using-xamarin-studio/"/>
    <updated>2013-05-08T20:49:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/05/08/update-components-using-xamarin-studio</id>
    <content type="html"><![CDATA[<p>分かりにくかったのでメモ。</p>

<!--more-->


<p><a href="http://amay077.github.io/blog/2013/04/22/xamarin-ios-using-gmap-ios-sdk/">以前</a>使ってみた <a href="http://components.xamarin.com/view/googlemapsios/">Google Maps Component</a>、「Polygon や Circle がないなー、対応してないのかなー」と思って <a href="http://componentsapi.xamarin.com/?link=T%3aGoogle.Maps.Circle">API Doc</a> 見たら存在してたので、いつの間にかバージョンアップしてたらしい、確かに手持ちのバージョンは「1.1.2」、Webサイトの方は「1.2.2」になってた。</p>

<h2>Component を更新する</h2>

<p>じゃあ更新するか、と思って Xamarin Studio で入り口を探すものの見つからない。
結局、メニュー -> Get More Components から、Google Maps を検索しなおしたら、ボタンが「Update」になってたので、押したら更新された。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/update_components_using_xamarin_studio1.png" alt="image1" /></p>

<h2>Component に付属のサンプルが増えてた</h2>

<p>更新後、Samples を見てみたら、、、お、 <strong>iOS Advanced Sample</strong> というのが増えてる！きっとアドバンスドなサンプルなのでしょうな（試せよ</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/update_components_using_xamarin_studio2.png" alt="image1" /></p>

<h2>Component を更新したら API の互換性が無くなってた</h2>

<p>更新後、意気揚々と以前作ったサンプルをビルドしてみたらビルドエラーが。
どうやら <code>MapView.AddMarker</code> や <code>MarkerOption</code> が無くなって、<code>Marker</code> に MapView を設定するように変更されたらしい。(以下は、さっきのアドバンスドなサンプルからの抜粋)</p>

<p>```c# PartOfMarkersViewController.cs
public override void ViewDidLoad ()
{</p>

<pre><code>base.ViewDidLoad ();

var camera = CameraPosition.FromCamera (-37.81969, 144.966085, 4);
var mapView = MapView.FromCamera (RectangleF.Empty, camera);

var sydneyMarker = new Marker () {
    Title = "Sydney",
    Snippet = "Population: 4,605,992",
    Position = new CLLocationCoordinate2D (-33.8683, 151.2086),
    Map = mapView
};

var melbourneMarker = new Marker () {
    Title = "Melbourne",
    Snippet = "Population: 4,169,103",
    Position = new CLLocationCoordinate2D (-37.81969, 144.966085),
    Map = mapView
};

// Set the marker in Sydney to be selected
mapView.SelectedMarker = sydneyMarker;

View = mapView;
</code></pre>

<p>}
```</p>

<p>これは、元の Google Maps SDK for iOS が根源なのか、Google Maps の Xamarin Component がそうしたのか知りませんが、ReleaseNotes とかないのかな？うっかり更新すると怖いな。</p>

<h2>まとめ</h2>

<ul>
<li>Component の Update は、 Get More Components から</li>
<li>むやみに Update すると互換性なくなってるかもなのでバックアップというかバージョン管理ちゃんとしよう</li>
<li>つまり Xamarin Components に ReleaseNotes 欲しいです</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK(Android/iOS) で円を描く]]></title>
    <link href="http://amay077.github.io/blog/2013/05/06/circle-on-google-maps-sdk/"/>
    <updated>2013-05-06T16:11:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/05/06/circle-on-google-maps-sdk</id>
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/maps/documentation/android/">Google Maps Android API v2</a> にいつの間にか <code>Circle</code> が追加されてました。<a href="https://developers.google.com/maps/documentation/ios/?hl=ja">Google Maps SDK for iOS</a> も同様に。</p>

<!--more-->


<p>ということで使ってみました。なぜか Xamarin でｗ
とはいえ、Xamarin.Android の場合、GoogleMaps の jar からラッパーを生成しているので API は Java 版と(ほぼ)同じです。</p>

<p>Xamarin.Android での Google Maps API v2 の使い方は、手前味噌ながら弊ブログをどうぞ。</p>

<ul>
<li><a href="http://amay077.github.com/blog/2013/03/05/xamarin-android-using-google-maps-android-api-v2/">Xamarin.Android で Google Maps Android API v2 を使う - Experiments Never Fail</a></li>
</ul>


<p>今回も、<a href="https://github.com/xamarin/monodroid-samples/tree/master/MapsAndLocationDemo_v2/SimpleMapDemo">monodroid-samples</a> をベースにします。</p>

<p>SampleMapActivity.cs の、<a href="https://github.com/xamarin/monodroid-samples/blob/master/MapsAndLocationDemo_v2/SimpleMapDemo/SampleMapActivity.cs#L88">ここら辺</a> に以下のコードを挿入します。</p>

<p>```c# SampleMapActivity.cs
var ICELAND = new LatLng(64.88, -18.32);
var LIBREVILLE = new LatLng(0.401, 9.459);</p>

<p>_map.AddCircle(new CircleOptions()</p>

<pre><code>           .InvokeCenter(ICELAND)
           .InvokeStrokeColor(Color.Blue.ToArgb())
           .InvokeStrokeWidth(5f)
           .InvokeRadius(5000000)); // 500km
</code></pre>

<p>_map.AddCircle(new CircleOptions()</p>

<pre><code>           .InvokeCenter(LIBREVILLE)
           .InvokeStrokeColor(Color.DarkGreen.ToArgb())
           .InvokeStrokeWidth(5f)
           .InvokeRadius(500000)); // 500km
</code></pre>

<p>```</p>

<p>Xamarin.Android と Java で違いは無いと言っておきながら、
Java では <code>new CircleOptions().center(…).storokeColor(…).</code> と書いていた所が、Xamarin では <code>new CircleOptions().InvokeCenter(…).InvokeStorokeColor(…).</code> になっていますね。<a href="http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar">Xamarin の Binding a Java Library (.jar)</a> 辺りに情報があるでしょうか。</p>

<p>動かすとこんな感じになります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/circle_on_google_maps_sdk.png" alt="image1" /></p>

<p>北緯65度付近のアイスランドと、赤道付近のリーブルヴィルという所に、どちらも半径500kmの円を追加していますが、Googleマップはメルカトル表示なので、見ての通り北へ行くほど円が大きくなります。</p>

<p>面白いのは「真円は保たれている事」ですね。逆台形っぽい曲線になるかと思ったのですが。</p>

<p>円をポリゴナイズした多角形と重ねてみると違いが分かるかもしれません。</p>

<h3>2013.5.8追記:大きな円を描いて調べてみました</h3>

<p>大きな円を描いてみたら、ちゃんと geodesic な(北へいけばいくほど距離が長くなる)形状になりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/circle-on-google-maps-sdk2.png" alt="image2" /></p>
]]></content>
  </entry>
  
</feed>
