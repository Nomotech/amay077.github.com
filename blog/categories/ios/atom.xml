<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-08T02:23:06+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms 向けの地図ライブラリ「Xamarin.Forms.GoogleMaps」をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/"/>
    <updated>2016-06-27T23:59:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms で使える地図ライブラリは、公式が出している</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.Maps/">Xamarin.Forms.Maps</a> &ndash; Maps models and renderers for Xamarin.Forms</li>
</ul>


<p>があるのですが、非常に機能が少ないです（ピンがおけるだけで、図形の描画すらできません）。</p>

<!--more-->


<p>なので、別な選択肢としての「Xamarin.Forms向け地図ライブラリ」を開発し始めました。</p>

<p>それがこちら</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/">Xamarin.Forms.GoogleMaps</a> &ndash; Yet another Maps library for Xamarin.Forms that optimized for Google maps.</li>
</ul>


<p>です。</p>

<p>iOS では MapKit に代わり <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a> を使用し、 Android/iOS 共に Google Maps に特化することで、API の共通化を容易にし、恐らくAPI共通化の足枷になっているであろう UWP(Bing maps) のサポートは最小限に留めています。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_01.png" alt="screenshot1" /></p>

<h2>現在の機能</h2>

<p>現在のバージョンは 1.1.0 。
公式の Xamarin.Forms.Maps に比べて、ライン・ポリゴン・円を追加できるようになりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_02.png" alt="screenshot2" /></p>

<p>詳しい比較は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/wiki/Xamarin.Forms.Maps-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83">Xamarin.Forms.Maps との比較 &ndash; Xamarin.Forms.GoogleMaps Wiki</a></li>
</ul>


<p>にあります。</p>

<h2>サンプルプログラム</h2>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">Xamarin.Forms.GoogleMaps/XFGoogleMapSample &ndash; github</a></li>
</ul>


<p>にあります。</p>

<p>Google Maps の APIキーを Android / iOS それぞれで取得する必要があります。</p>

<ul>
<li>Android &ndash;  <a href="http://www.buildinsider.net/mobile/xamarintips/0020">Xamarin.Androidで地図を表示するには？（Google Maps使用） &ndash; Build Insider</a></li>
<li>iOS &ndash; <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS  |  Google Developers</a> の「クイック スタート ステップ」
をそれぞれ参照してください。</li>
</ul>


<h2>オープンソース</h2>

<p><a href="http://open.xamarin.com/">Xamarin Open Source SDK</a> により、 Xamarin.Forms のソースコードもオープンソースになったので、 <a href="https://github.com/xamarin/Xamarin.Forms/tree/master/Xamarin.Forms.Maps">Xamarin.Forms/Xamarin.Forms.Maps &ndash; github</a> などを Fork して作りました。</p>

<p>このライブラリ自体もオープンソースであり、</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>
</ul>


<p>で開発しています。（スターを付けてもらえると作者がよろこびます）</p>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues">要望、コメントなど</a>もらえると嬉しいです。よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms の画面(Page)のライフサイクルイベントについて]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles/"/>
    <updated>2016-06-08T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles</id>
    <content type="html"><![CDATA[<p>ちょっと誤解してた＆情報がなかったのでまとめてみました。</p>

<!--more-->


<h2>モバイルアプリでの「画面」の基本的なライフサイクルイベント</h2>

<p>まあ Android と iOS についてですが。</p>

<p>画面が表示される時のイベント（コールバック）は、簡潔には以下のようになります。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume|</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause|</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy|</td>
</tr>
</tbody>
</table>


<p>厳密にはもっと細かく、〜される前と後が iOS と Android で微妙に異なるのでだいたいこんな感じという程度と思って下さい。</p>

<p>もう少し細かいイベントは以前調べた以下を参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/52a0b0da97fe455abc08">iOS と Android で画面表示時のコールバックを比較する &ndash; Qiita</a></li>
</ul>


<h2>Xamarin.Forms での画面のライフサイクルイベント</h2>

<p>Xamarin.Forms では、上表のライフサイクルイベントは、アプリケーション
(Application) と、画面(Page) のイベントに分かれています。</p>

<p>表に、Xamarin.Forms を追加してみました。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
<th>Xamarin.Forms</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnAppearing(">Page.OnAppearing</a>/)|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnResume(">Application.OnResume</a>/) <strong>※要注意</strong> |</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnSleep(">Application.OnSleep</a>/)</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnDisappearing(">Page.OnDisappearing</a>/)|</td>
</tr>
</tbody>
</table>


<p>画面のロード時（<code>viewDidLoad/onCreate</code>）に相当するのは、Xamarin.Forms では <code>OnAppearing</code>、逆にアンロード時は <code>OnDisAppearing</code> です（名称が <code>viewDidAppear</code> に似てるので、画面の表示時かと勘違いしてました）。</p>

<p>画面の表示／非表示時のイベントは、画面でなく Application クラスの <code>OnResume</code>, <code>OnSleep</code> で提供されます。</p>

<p>要注意なのは <code>OnResume</code> です。これ、画面が表示される <strong>初回はイベントが発生しません</strong>。
一度、アプリを背面に退避し、再度前面に持ってきたときに初めて <code>OnResume</code> が呼び出されます。iOS や Android の <code>viewDidAppear / OnResume</code> と同じだと思ってつかうとハマります。</p>

<p>基本的には、 <code>OnAppearing</code> でリソースの確保を、 <code>OnDisAppearing</code> で解放をすればよさそうです。</p>

<p>GPS など、電池消費の激しいリソースを使う場合は、アプリが背面へ隠れたら直ちにそのリソースを解放した方がよいです。その場合は <code>OnResume-OnSleep</code> を使いますが、前述の通り、画面初回表示時は <code>OnResume</code> が走らないので、少し工夫が必要です。</p>

<h2>画面が回転された時</h2>

<p>端末を横向きに回転すると、Android では Activity が破棄されて再度生成される事が知られています。</p>

<p>Xamarin.Forms では Android でもそのような事はなく、 <code>Page.OnSizeAllocated</code> が呼び出されるだけです(iOS も当然同じ)。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.xamarin.com/guides/xamarin-forms/working-with/app-lifecycle/">Working with the App Lifecycle &ndash; Xamarin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Workbooks とかいうやつ]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/"/>
    <updated>2016-04-29T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks</id>
    <content type="html"><![CDATA[<p><a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> が開催中されました。</p>

<!--more-->


<p>build での予告どおり、Xamarin.Android/iOS などがついにオープンソースになった、などのエキサイティングな発表のまとめは</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/evolve2016">【速報】Evolve 2016 で発表されたエキサイティング情報まとめ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>その Keynote でデモされていた Xamarin Workbooks というツールがなかなかすごいので紹介。</p>

<h2>なにこれ？</h2>

<p>ひとことでいうと、</p>

<p><strong>Xcode の Playground みたいなやつ + Markdown</strong></p>

<p>まだ意味わかんないですね？</p>

<p>こういうことです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_01.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_02.gif" alt="" /></p>

<ul>
<li>Markdown でドキュメントが書ける(このツール自体はリッチなエディタである)</li>
<li>```csharp〜``` で囲まれたコードブロックは、そのまま iOSシミュレータなどでインタラクティブに、Instant に実行できる。</li>
</ul>


<p>上記の Workbook の実ファイルは、これ↓です。</p>

<ul>
<li><a href="https://gist.github.com/amay077/793b5df4aad0098ffe6d9c12a491ee9a">Xamarin Workbooks を使ってみるテスト。 HowToUseMapKit.workbook で保存して Xamarin Inspector で File->Open してね。</a></li>
</ul>


<p>みてわかる通りまんま Markdown ですね。</p>

<h2>Let&rsquo;s try!</h2>

<p>しかも iOS だけじゃなく、Android, Mac, Windows(WPF) に全対応！
Mac でも Windows でも試せるみたいです。</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/workbooks/">Xamarin Workbooks &ndash; Xamarin</a></li>
</ul>


<p>スタンドアロンなアプリとして実行可能なようなので、サクッと使ってみよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収された結果]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/"/>
    <updated>2016-04-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/4aa25db9509216cf5bf0">Xamarin が Microsoft に買収されたので、今後を勝手に予想</a> の答え合わせなんですが…</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/xamarin-for-all/">Xamarin for Everyone | Xamarin Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/ms-xamarin">【速報】Xamarin のこれからについて！ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p><strong>Xamarin は無料ですべての Visual Studio に同梱されることになりました！</strong></p>

<p><strong>Mac では Xamarin Studio が無料で使えるようになりました！！</strong> <a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#%E8%BF%BD%E8%A8%98-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0">※注</a></p>

<p>というか、 <strong>Xamarin のコアライブラリがオープンソースになりました！！！</strong></p>

<p>今日も仕事が手につきませんね！</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎◎◎</h2>

<p>期待以上でしたね。
プロダクトとしては無償になります。
すべての機能が制約なしに使えます。
ソースコードが MIT Lisence なオープンソースになります。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → ◎</h2>

<blockquote><p>OSS として公開、のような可能性があるなら嬉しいかも。</p></blockquote>

<p>これ当たりましたね。Xamarin.Mac の人もこれで一安心。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎◎◎</h2>

<p>これも上2つど同様にオープンソースに。
正直しばらくはプロプラエタリでいくかなーと思ってたので、完全に期待以上でした。
UIデザイナーは・・・Evolve？</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ◎</h2>

<p>これも無償化。ここのソースコードはOSSなのかな？ → OSSにはならないようです（もちろん元々OSSであるMonoDevelop以外のXamarin固有のプラグインのこと） &ndash; <a href="https://www.xamarin.com/faq#xpq7">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a>
とりあえずMacでの開発者には嬉しい。</p>

<p>そして、ありがとう、<a href="https://www.xamarin.com/faq#xpq6">さよなら Xamarin Studio for Windows</a></p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ？</h2>

<p>まあ、消える流れですよね。。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎◎</h2>

<p>Visual Studio Team Services に同梱されるとのことです。
<a href="https://www.visualstudio.com/ja-jp/products/visual-studio-team-services-pricing-vs.aspx">その価格</a> を見ると、今までよりグッと使いやすくなりました。</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → ◎◎</h2>

<blockquote><p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。</p></blockquote>

<p>これハズレましたね。</p>

<p><a href="http://hockeyapp.net/features/">HockeyApp</a> というサービスに統合されるとのことです。</p>

<p>HockeyApp って知らなかったのですが、ログ収集・解析の他に、DeployGate のような配布機能も持っているみたいですね。これは嬉しい。</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ？</h2>

<p>Build2016 では予想通り全く触れられませんでした。さて未来は？</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → ？</h3>

<p>Build2016 では Windows上で動く iOS Simulator のデモを行っていました。</p>

<p>Miguel de Icaza曰く</p>

<blockquote><p>&ldquo;Have touch and no need to turn to your Mac&rdquo;</p></blockquote>

<p>だそうですよ。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ？</h3>

<p>これは特に情報ありませんでした。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ？</h3>

<p>Windows の Android エミュレータ上でアプリが動いているところで、コードを変更すると、 <strong>即座にアプリに変更が適用される</strong> という謎のデモを行っていました。</p>

<p>Xamarin（もとい Microsoft ）の中の人曰く、</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これだよこれがインスタントプログラミングだよ!</p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/715566438203809792">2016年3月31日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです。（Android Studio さん聴いてる？）</p>

<p>Keynote Day 2 の動画あったのでデモ見られます→ <a href="https://www.youtube.com/watch?v=WC7ijoFzjEg&amp;feature=youtu.be&amp;t=16m">Microsoft Build 2016 | Keynote Day 2 (HD) &ndash; YouTube</a> （このデモの後ほどなくして &ldquo;making Xamarin available at no extra charge.&rdquo; →大歓声、ですね）</p>

<h1>まとめ</h1>

<p>ということで、総じて言えば、皆さんの期待にすべて応える感じで、Xamarin のパワーを活かして開発者を増やしていきたいという意思が表れていましたね。</p>

<p>本当に想像以上でした。
Indie ライセンス買ったばかりだけど、そのお金返せとは言いません、ありがとう Xamarin！！</p>

<h2>【追記】 to 企業の人、無料になると言ったな、あれは Visual Studio Pro 以上を持ってる人のみだ</h2>

<p>Mac しか使ってない企業が自社のアプリを Xamarin を使って開発・配布する場合、 Xamarin Studio を使うことになります。</p>

<p><a href="https://store.xamarin.com/">Store &ndash; Xamarin</a> の Xamarin Studio にある Small teams をクリックすると <a href="https://www.visualstudio.com/support/legal/mt171547">MICROSOFT VISUAL STUDIO COMMUNITY 2015</a> が表示され、以下のような記述があります。</p>

<blockquote><ol>
<li><p>インストールおよび使用に関する権利。</p></li>
<li><p>組織ライセンス。お客様が組織である場合、お客様のユーザーは以下の条件で本ソフトウェアを使用することができます。</p></li>
<li><p>お客様がエンタープライズである場合、お客様の従業員および契約社員は本ソフトウェアを使用して、お客様のアプリケーションを開発またはテストすることはできません。ただし、上記で許可されているオープンソースおよび教育目的の場合を除きます。「エンタープライズ」とは、合計で (a) 250 台を超えるコンピューターがある、もしくは 250 人を超えるユーザーがいる、 または (b) 年間収益が 100 万米ドル (もしくは他の通貨での相当額) を超える、組織およびその関連会社のことです。「関連会社」とは、組織を (過半数所有により) 支配している法人、組織が支配している法人、または組織と共通の支配下にある法人を意味します。</p></li>
</ol>
</blockquote>

<p><del>組織（企業）での利用で、250人を超えるユーザー(=配布スマホ台数ということになるでしょう)が居る場合は、使用できない、と読み取れます。</del>
<a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#comment-2297416c6d83b3593425">コメント</a>で教えていただきました。日本語の <a href="https://www.microsoft.com/ja-jp/dev/products/community.aspx">Visual Studio Community のページ</a> には、ユーザー数に関する記述はないので、この点（配布スマホ台数）に関しては気にしなくてもよさそうです。</p>

<p>また、 Xamarin の FAQ &ndash; <a href="https://www.xamarin.com/faq#xpq8">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a> には、以下の記述があります。</p>

<blockquote><p>Xamarin Studio will follow the Visual Studio pricing rules. There is Xamarin Studio Community Edition available for download on the Mac. You’ll need to be a Visual Studio Enterprise subscriber to unlock Visual Studio Enterprise features in Xamarin Studio.</p></blockquote>

<p>Xamarin Studio は、Visual Studio の価格体系に従う、とのことなので、ライセンス条項も同じだと解釈すれば、 Visual Studio Profesional 以上のライセンスがあれば、 Mac + Xamarin Studio で企業のアプリを開発・配布して問題ないと言えます。
<del>Macオンリー企業には、ツールとしてでなくライセンスとしての Visual Studio Pro 以上が必要ということなるのでしょうか。</del></p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/04/21/123000">【お知らせ】Xamarin ライセンスの移管について &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>によると、 企業向け開発する場合、 Windows ＋ Visual Studio は Visual Studio Pro単品購入で可能、Mac + Xamarin Studio には Visual Studio Pro <strong>MSDN Subscription</strong> が必要とのことです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収されたので、今後を勝手に予想]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft/"/>
    <updated>2016-02-26T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft</id>
    <content type="html"><![CDATA[<p>いやー起きたら驚きました。いつも午前中は仕事があまり捗らないのですが(ぉぃ、今日はさらに手につきませんでした。</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/a-xamarin-microsoft-future/">A Xamarin + Microsoft Future | Xamarin Blog</a></li>
<li><a href="http://blogs.microsoft.com/blog/2016/02/24/microsoft-to-acquire-xamarin-and-empower-more-developers-to-build-apps-on-any-device/">Microsoft to acquire Xamarin and empower more developers to build apps on any device &ndash; The Official Microsoft Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/02/25/084553">【速報】Xamarin が Microsoft に買収されました &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>続報は、 <a href="http://build.microsoft.com/">3/30-4/1 の Build 2016</a> と <a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> を待てとのことですが、企業としての Xamarin は、様々な製品やツールを展開していますので、MS買収によって、それらが今後どうなるのか、勝手に予想してみます。（個人の主観と希望を多分に含みます。 ○とか△は、今後の継続性(MSから見たら買収効果)を示してます）</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎</h2>

<p>　Android SDK や iOS SDK(CocoaTouch) を C# から呼び出す、現在主力のプロダクト。
　
　Microsoft とのパートナーシップにより、すでに Visual Studio に半ば組み込まれていますが、それがさらに推し進められて、完全統合（追加インストールなし）されると思われます。</p>

<p>　完全統合されたからと言って、 iOSアプリをデバッグ、デプロイするには Mac が必要なわけで、厳密には「Visual Studio だけで開発できる」ことにはならないと思います。</p>

<p>　Xamarin という「ブランド」は、いつか表示されなくなってしまうのかも知れません。。。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → △</h2>

<p>　C# で Mac のデスクトップアプリが開発できるというプロダクト。
　現在も、お世辞にも「存在感がある」とは言えないプロダクトで、買収によって今後が不安なもののひとつ。</p>

<p>　Microsoft も、ここに投資するメリットはあまり感じてないのではないでしょうか？
　OSS として公開、のような可能性があるなら嬉しいかも。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎</h2>

<p>　Xamarin.Android/iOS とは異なり、「単一のコードで複数のプラットフォーム向けのアプリを開発できる」プロダクト。</p>

<p>　画面は XAML(と言っても WPF とは異なる)で記述し、Android/iOS/Windows(UWP) の <code>Activity/ViewController/Window</code> は、<code>Page</code> というクラスに抽象化されます。</p>

<p>　登場以来 Xamarin が最も注力してきたプロダクトで、Microsoft のマルチデバイス戦略にもフィットします(説明しやすいし、デモ受けもしやすいしね)。</p>

<p>　長らくUIエディタがない状態が続いていますが、買収によりいよいよ？ <a href="https://build.microsoft.com/">Build 2016</a> と <a href="https://evolve.xamarin.com/">Evolve 2016</a> が楽しみです。</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ○</h2>

<p>　<a href="http://www.monodevelop.com/">MonoDevelop</a> という OSS の統合開発環境に Xamarin プロダクト向けの Addin を加えたもの。</p>

<p>　Windows では、あえてこれを使用する必要は無いに等しいですが、Mac では、重要なIDEになります。
　実際、 「Android と iOS アプリだけ」を開発する場合は、Mac の方が何かと都合が良いわけで、 <strong>Mac + Xamarin Studio がベストチョイス</strong> なわけです。</p>

<p>　<a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">Roslyn 対応</a> も進んでいるし、ほとんどは OSS だし、非Windows開発者向けのIDEを引っ込めるメリットは Microsoft にはないでしょう。（Windows版の Xamarin Studio は微妙かも）</p>

<p>　(遠い)将来的には、<a href="https://www.visualstudio.com/ja-jp/products/code-vs.aspx">Visual Studio Code</a>からの流れで、 Visual Studio のようなものが Mac に登場すると良いなあ、と思います。</p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ×</h2>

<p>　Xamarin で使えるライブラリを有償/無償で公開できるストアなんですが、Xamarin が <a href="http://www.atmarkit.co.jp/fdotnet/chushin/nuget_01/nuget_01_01.html">nuget</a> に対応して以来、徐々に影が薄くなり、同じライブラリでも nuget の方が新しい、なんてこともザラになってきました。</p>

<p>　「ライブラリを販売できる」というエコシステムも機能している感じがしないので、徐々になくなっていくのではないでしょうか（誰か困る人いるんだろうか？）。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎</h2>

<p>　クラウド上に実際のAndroid/iOSデバイスが用意されており、それを使用してテストが行える「デバイスファーム」としてのサービス、それから、<a href="https://developer.xamarin.com/guides/testcloud/calabash/introduction-to-calabash/">Carabash</a> という自動テスティングフレームワークを指します。</p>

<p>　元々は <a href="http://techcrunch.com/2013/04/16/xamarin-launches-test-cloud-automated-mobile-ui-testing-platform-acquires-mobile-test-company-lesspainful/">LessPainful という企業が提供していたサービスを Xamarin が買収した</a> したものです。</p>

<p>　<a href="https://aws.amazon.com/jp/device-farm/">Amazon</a> や <a href="https://developers.google.com/cloud-test-lab/">Google</a> もデバイスファームをサービスしているのに対し、 Azure はまだないようなので、これは Microsoft にとってメリット大だと思います。</p>

<p>　お値段高めで知られる同サービスなので、今後の値付けが気になります。
　</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → △</h2>

<p>　<a href="https://try.crashlytics.com/">Crashlytics</a> のようなクラッシュログ収集・解析サービスです。
　なんだか、 Microsoft には <a href="https://azure.microsoft.com/ja-jp/services/application-insights/">Visual Studio Application Insights</a> というサービスがプレビュー版で出ているようで、丸かぶりですね。</p>

<p>　独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。（実戦投入してるので、ちょっとどうしようかな…）</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ×</h2>

<p>　Java で iOS アプリが開発できる(CocoaTouch がよびだせる)という、まるで Xamarin のような製品だなあと思っていたら、実際に <a href="https://xamarin.com/pr/xamarin-acquires-robovm">Xamarin が買収してしまった</a> プロダクト。</p>

<p>　買収以来特に動きもなく Xamarin の製品ラインナップに載ることもなく「？」な状態が続いていました。</p>

<p>　そんな感じで、さらに Microsoft が Java を推すか？…可能性は低いと思います。</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → △</h3>

<p>　Xamarin 社が提供する高速Androidエミュレータ。</p>

<p>　Microsoft は <a href="https://www.visualstudio.com/ja-jp/features/msft-android-emulator-vs.aspx">Visual Studio Emulator for Android</a> を持っていますからこれも丸かぶり。しかも VSエミュの方が多機能じゃないかな。</p>

<p> 　唯一、Mac向けには残すかも知れませんね。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ○</h3>

<p>　Xcode の Instruments みたいなのを作っちゃいました、というもの(今は Androidアプリのみ対応)。</p>

<p>　既に Visual Studio とも連携してるみたいだし、これは継続進化でしょう。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ○</h3>

<p>　Android SDK の <a href="http://developer.android.com/intl/ja/tools/testing-support-library/index.html">Testing Support Library</a> に含まれる <a href="https://www.youtube.com/watch?v=uA54T6R8nhs">UIAutomator Viewer</a> のようなもの。これも Visual Studio の機能とは競合しないと思うので、継続されるでしょう。</p>

<h2>価格</h2>

<p>　みなさんが一番期待しているのは価格でしょう。今は BUSINESS EDITION(Android/iOS) で<a href="https://store.xamarin.com/">年間20万円超</a>（個人向けなら月約5000円から）。</p>

<p>　Microsoft もここの売上をアテにしてるとは到底思えないので、恐らく何らかの改善があるのではないかと思います。
　無難なところでは 「MSDN Subscription に含まれる」でしょうか。</p>

<p>　完全無料化されて、 Visual Studio Community でも使用可能、になるととても嬉しいですね。</p>

<h1>まとめ</h1>

<p>　2年前の投稿、<a href="http://qiita.com/amay077/items/2e86b44e5f274a34b2e9">マカーの人が Xamarin について勘違いしていそうな５つのこと</a> で、以下のように書きました。</p>

<blockquote><p>私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。(中略) Evolve2014 には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。</p></blockquote>

<p>　「中立な立場の方が良いのでは？」という個人の意見は変わっていません、今度の Evolve にも <a href="https://blog.xamarin.com/join-apple-co-founder-steve-wozniak-at-xamarin-evolve-2016/">Apple の Steve Wozniak が参加する</a> と話題になっているのですが、さすが Microsoft のイベントには来られないよなー、と思います。</p>

<p>　とはいえ、「いずれ・・・」と思っていたのも事実で、「ついにXデーが来たかー」、という感想です。
　マイクロソフトももはやガチガチのプロプライエタリというよりはかなりオープンな企業になっていますし、それには Xamarin（というか Mono）の活動も少なからず影響を与えていたと思います（<a href="https://msdn.microsoft.com/ja-jp/library/dn878908(v=vs.110">.NETがオープンソース化される</a>.aspx)とは、数年前誰が予想していたでしょうか）。
　上でまとめて来たように、マイクロソフトにとってメリットの多い買収なので、少なくとも飼い殺しのような事にはならないでしょう。</p>

<p>　個人的にも、「Xamarin が加わった新しい Microsoft」に期待して、Xamarin.Android を始めとした Xamarin 製品群を使い続けますし、Qiita を始め Tips の投稿もしていくつもりです。
　
(おまけ)</p>

<p>今回の買収劇のオチは、</p>

<p><strong>「MSを助ける製品の販売代理店として頑張って活動していたら、その製品がMSに買収されてなくなっちゃった」</strong></p>

<p>という<a href="https://twitter.com/ytabuchi/status/702634391957217280">某さん</a>でしょうかw
　</p>
]]></content>
  </entry>
  
</feed>
