<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-05-08T02:22:02+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収された結果]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/"/>
    <updated>2016-04-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/4aa25db9509216cf5bf0">Xamarin が Microsoft に買収されたので、今後を勝手に予想</a> の答え合わせなんですが…</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/xamarin-for-all/">Xamarin for Everyone | Xamarin Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/ms-xamarin">【速報】Xamarin のこれからについて！ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p><strong>Xamarin は無料ですべての Visual Studio に同梱されることになりました！</strong></p>

<p><strong>Mac では Xamarin Studio が無料で使えるようになりました！！</strong> <a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#%E8%BF%BD%E8%A8%98-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0">※注</a></p>

<p>というか、 <strong>Xamarin のコアライブラリがオープンソースになりました！！！</strong></p>

<p>今日も仕事が手につきませんね！</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎◎◎</h2>

<p>期待以上でしたね。
プロダクトとしては無償になります。
すべての機能が制約なしに使えます。
ソースコードが MIT Lisence なオープンソースになります。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → ◎</h2>

<blockquote><p>OSS として公開、のような可能性があるなら嬉しいかも。</p></blockquote>

<p>これ当たりましたね。Xamarin.Mac の人もこれで一安心。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎◎◎</h2>

<p>これも上2つど同様にオープンソースに。
正直しばらくはプロプラエタリでいくかなーと思ってたので、完全に期待以上でした。
UIデザイナーは・・・Evolve？</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ◎</h2>

<p>これも無償化。ここのソースコードはOSSなのかな？ → OSSにはならないようです（もちろん元々OSSであるMonoDevelop以外のXamarin固有のプラグインのこと） &ndash; <a href="https://www.xamarin.com/faq#xpq7">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a>
とりあえずMacでの開発者には嬉しい。</p>

<p>そして、ありがとう、<a href="https://www.xamarin.com/faq#xpq6">さよなら Xamarin Studio for Windows</a></p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ？</h2>

<p>まあ、消える流れですよね。。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎◎</h2>

<p>Visual Studio Team Services に同梱されるとのことです。
<a href="https://www.visualstudio.com/ja-jp/products/visual-studio-team-services-pricing-vs.aspx">その価格</a> を見ると、今までよりグッと使いやすくなりました。</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → ◎◎</h2>

<blockquote><p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。</p></blockquote>

<p>これハズレましたね。</p>

<p><a href="http://hockeyapp.net/features/">HockeyApp</a> というサービスに統合されるとのことです。</p>

<p>HockeyApp って知らなかったのですが、ログ収集・解析の他に、DeployGate のような配布機能も持っているみたいですね。これは嬉しい。</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ？</h2>

<p>Build2016 では予想通り全く触れられませんでした。さて未来は？</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → ？</h3>

<p>Build2016 では Windows上で動く iOS Simulator のデモを行っていました。</p>

<p>Miguel de Icaza曰く</p>

<blockquote><p>&ldquo;Have touch and no need to turn to your Mac&rdquo;</p></blockquote>

<p>だそうですよ。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ？</h3>

<p>これは特に情報ありませんでした。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ？</h3>

<p>Windows の Android エミュレータ上でアプリが動いているところで、コードを変更すると、 <strong>即座にアプリに変更が適用される</strong> という謎のデモを行っていました。</p>

<p>Xamarin（もとい Microsoft ）の中の人曰く、</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これだよこれがインスタントプログラミングだよ!</p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/715566438203809792">2016年3月31日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです。（Android Studio さん聴いてる？）</p>

<p>Keynote Day 2 の動画あったのでデモ見られます→ <a href="https://www.youtube.com/watch?v=WC7ijoFzjEg&amp;feature=youtu.be&amp;t=16m">Microsoft Build 2016 | Keynote Day 2 (HD) &ndash; YouTube</a> （このデモの後ほどなくして &ldquo;making Xamarin available at no extra charge.&rdquo; →大歓声、ですね）</p>

<h1>まとめ</h1>

<p>ということで、総じて言えば、皆さんの期待にすべて応える感じで、Xamarin のパワーを活かして開発者を増やしていきたいという意思が表れていましたね。</p>

<p>本当に想像以上でした。
Indie ライセンス買ったばかりだけど、そのお金返せとは言いません、ありがとう Xamarin！！</p>

<h2>【追記】 to 企業の人、無料になると言ったな、あれは Visual Studio Pro 以上を持ってる人のみだ</h2>

<p>Mac しか使ってない企業が自社のアプリを Xamarin を使って開発・配布する場合、 Xamarin Studio を使うことになります。</p>

<p><a href="https://store.xamarin.com/">Store &ndash; Xamarin</a> の Xamarin Studio にある Small teams をクリックすると <a href="https://www.visualstudio.com/support/legal/mt171547">MICROSOFT VISUAL STUDIO COMMUNITY 2015</a> が表示され、以下のような記述があります。</p>

<blockquote><ol>
<li><p>インストールおよび使用に関する権利。</p></li>
<li><p>組織ライセンス。お客様が組織である場合、お客様のユーザーは以下の条件で本ソフトウェアを使用することができます。</p></li>
<li><p>お客様がエンタープライズである場合、お客様の従業員および契約社員は本ソフトウェアを使用して、お客様のアプリケーションを開発またはテストすることはできません。ただし、上記で許可されているオープンソースおよび教育目的の場合を除きます。「エンタープライズ」とは、合計で (a) 250 台を超えるコンピューターがある、もしくは 250 人を超えるユーザーがいる、 または (b) 年間収益が 100 万米ドル (もしくは他の通貨での相当額) を超える、組織およびその関連会社のことです。「関連会社」とは、組織を (過半数所有により) 支配している法人、組織が支配している法人、または組織と共通の支配下にある法人を意味します。</p></li>
</ol>
</blockquote>

<p><del>組織（企業）での利用で、250人を超えるユーザー(=配布スマホ台数ということになるでしょう)が居る場合は、使用できない、と読み取れます。</del>
<a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#comment-2297416c6d83b3593425">コメント</a>で教えていただきました。日本語の <a href="https://www.microsoft.com/ja-jp/dev/products/community.aspx">Visual Studio Community のページ</a> には、ユーザー数に関する記述はないので、この点（配布スマホ台数）に関しては気にしなくてもよさそうです。</p>

<p>また、 Xamarin の FAQ &ndash; <a href="https://www.xamarin.com/faq#xpq8">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a> には、以下の記述があります。</p>

<blockquote><p>Xamarin Studio will follow the Visual Studio pricing rules. There is Xamarin Studio Community Edition available for download on the Mac. You’ll need to be a Visual Studio Enterprise subscriber to unlock Visual Studio Enterprise features in Xamarin Studio.</p></blockquote>

<p>Xamarin Studio は、Visual Studio の価格体系に従う、とのことなので、ライセンス条項も同じだと解釈すれば、 Visual Studio Profesional 以上のライセンスがあれば、 Mac + Xamarin Studio で企業のアプリを開発・配布して問題ないと言えます。
Macオンリー企業には、ツールとしてでなくライセンスとしての Visual Studio Pro 以上が必要ということなるのでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収されたので、今後を勝手に予想]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft/"/>
    <updated>2016-02-26T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft</id>
    <content type="html"><![CDATA[<p>いやー起きたら驚きました。いつも午前中は仕事があまり捗らないのですが(ぉぃ、今日はさらに手につきませんでした。</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/a-xamarin-microsoft-future/">A Xamarin + Microsoft Future | Xamarin Blog</a></li>
<li><a href="http://blogs.microsoft.com/blog/2016/02/24/microsoft-to-acquire-xamarin-and-empower-more-developers-to-build-apps-on-any-device/">Microsoft to acquire Xamarin and empower more developers to build apps on any device &ndash; The Official Microsoft Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/02/25/084553">【速報】Xamarin が Microsoft に買収されました &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>続報は、 <a href="http://build.microsoft.com/">3/30-4/1 の Build 2016</a> と <a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> を待てとのことですが、企業としての Xamarin は、様々な製品やツールを展開していますので、MS買収によって、それらが今後どうなるのか、勝手に予想してみます。（個人の主観と希望を多分に含みます。 ○とか△は、今後の継続性(MSから見たら買収効果)を示してます）</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎</h2>

<p>　Android SDK や iOS SDK(CocoaTouch) を C# から呼び出す、現在主力のプロダクト。
　
　Microsoft とのパートナーシップにより、すでに Visual Studio に半ば組み込まれていますが、それがさらに推し進められて、完全統合（追加インストールなし）されると思われます。</p>

<p>　完全統合されたからと言って、 iOSアプリをデバッグ、デプロイするには Mac が必要なわけで、厳密には「Visual Studio だけで開発できる」ことにはならないと思います。</p>

<p>　Xamarin という「ブランド」は、いつか表示されなくなってしまうのかも知れません。。。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → △</h2>

<p>　C# で Mac のデスクトップアプリが開発できるというプロダクト。
　現在も、お世辞にも「存在感がある」とは言えないプロダクトで、買収によって今後が不安なもののひとつ。</p>

<p>　Microsoft も、ここに投資するメリットはあまり感じてないのではないでしょうか？
　OSS として公開、のような可能性があるなら嬉しいかも。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎</h2>

<p>　Xamarin.Android/iOS とは異なり、「単一のコードで複数のプラットフォーム向けのアプリを開発できる」プロダクト。</p>

<p>　画面は XAML(と言っても WPF とは異なる)で記述し、Android/iOS/Windows(UWP) の <code>Activity/ViewController/Window</code> は、<code>Page</code> というクラスに抽象化されます。</p>

<p>　登場以来 Xamarin が最も注力してきたプロダクトで、Microsoft のマルチデバイス戦略にもフィットします(説明しやすいし、デモ受けもしやすいしね)。</p>

<p>　長らくUIエディタがない状態が続いていますが、買収によりいよいよ？ <a href="https://build.microsoft.com/">Build 2016</a> と <a href="https://evolve.xamarin.com/">Evolve 2016</a> が楽しみです。</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ○</h2>

<p>　<a href="http://www.monodevelop.com/">MonoDevelop</a> という OSS の統合開発環境に Xamarin プロダクト向けの Addin を加えたもの。</p>

<p>　Windows では、あえてこれを使用する必要は無いに等しいですが、Mac では、重要なIDEになります。
　実際、 「Android と iOS アプリだけ」を開発する場合は、Mac の方が何かと都合が良いわけで、 <strong>Mac + Xamarin Studio がベストチョイス</strong> なわけです。</p>

<p>　<a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">Roslyn 対応</a> も進んでいるし、ほとんどは OSS だし、非Windows開発者向けのIDEを引っ込めるメリットは Microsoft にはないでしょう。（Windows版の Xamarin Studio は微妙かも）</p>

<p>　(遠い)将来的には、<a href="https://www.visualstudio.com/ja-jp/products/code-vs.aspx">Visual Studio Code</a>からの流れで、 Visual Studio のようなものが Mac に登場すると良いなあ、と思います。</p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ×</h2>

<p>　Xamarin で使えるライブラリを有償/無償で公開できるストアなんですが、Xamarin が <a href="http://www.atmarkit.co.jp/fdotnet/chushin/nuget_01/nuget_01_01.html">nuget</a> に対応して以来、徐々に影が薄くなり、同じライブラリでも nuget の方が新しい、なんてこともザラになってきました。</p>

<p>　「ライブラリを販売できる」というエコシステムも機能している感じがしないので、徐々になくなっていくのではないでしょうか（誰か困る人いるんだろうか？）。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎</h2>

<p>　クラウド上に実際のAndroid/iOSデバイスが用意されており、それを使用してテストが行える「デバイスファーム」としてのサービス、それから、<a href="https://developer.xamarin.com/guides/testcloud/calabash/introduction-to-calabash/">Carabash</a> という自動テスティングフレームワークを指します。</p>

<p>　元々は <a href="http://techcrunch.com/2013/04/16/xamarin-launches-test-cloud-automated-mobile-ui-testing-platform-acquires-mobile-test-company-lesspainful/">LessPainful という企業が提供していたサービスを Xamarin が買収した</a> したものです。</p>

<p>　<a href="https://aws.amazon.com/jp/device-farm/">Amazon</a> や <a href="https://developers.google.com/cloud-test-lab/">Google</a> もデバイスファームをサービスしているのに対し、 Azure はまだないようなので、これは Microsoft にとってメリット大だと思います。</p>

<p>　お値段高めで知られる同サービスなので、今後の値付けが気になります。
　</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → △</h2>

<p>　<a href="https://try.crashlytics.com/">Crashlytics</a> のようなクラッシュログ収集・解析サービスです。
　なんだか、 Microsoft には <a href="https://azure.microsoft.com/ja-jp/services/application-insights/">Visual Studio Application Insights</a> というサービスがプレビュー版で出ているようで、丸かぶりですね。</p>

<p>　独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。（実戦投入してるので、ちょっとどうしようかな…）</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ×</h2>

<p>　Java で iOS アプリが開発できる(CocoaTouch がよびだせる)という、まるで Xamarin のような製品だなあと思っていたら、実際に <a href="https://xamarin.com/pr/xamarin-acquires-robovm">Xamarin が買収してしまった</a> プロダクト。</p>

<p>　買収以来特に動きもなく Xamarin の製品ラインナップに載ることもなく「？」な状態が続いていました。</p>

<p>　そんな感じで、さらに Microsoft が Java を推すか？…可能性は低いと思います。</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → △</h3>

<p>　Xamarin 社が提供する高速Androidエミュレータ。</p>

<p>　Microsoft は <a href="https://www.visualstudio.com/ja-jp/features/msft-android-emulator-vs.aspx">Visual Studio Emulator for Android</a> を持っていますからこれも丸かぶり。しかも VSエミュの方が多機能じゃないかな。</p>

<p> 　唯一、Mac向けには残すかも知れませんね。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ○</h3>

<p>　Xcode の Instruments みたいなのを作っちゃいました、というもの(今は Androidアプリのみ対応)。</p>

<p>　既に Visual Studio とも連携してるみたいだし、これは継続進化でしょう。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ○</h3>

<p>　Android SDK の <a href="http://developer.android.com/intl/ja/tools/testing-support-library/index.html">Testing Support Library</a> に含まれる <a href="https://www.youtube.com/watch?v=uA54T6R8nhs">UIAutomator Viewer</a> のようなもの。これも Visual Studio の機能とは競合しないと思うので、継続されるでしょう。</p>

<h2>価格</h2>

<p>　みなさんが一番期待しているのは価格でしょう。今は BUSINESS EDITION(Android/iOS) で<a href="https://store.xamarin.com/">年間20万円超</a>（個人向けなら月約5000円から）。</p>

<p>　Microsoft もここの売上をアテにしてるとは到底思えないので、恐らく何らかの改善があるのではないかと思います。
　無難なところでは 「MSDN Subscription に含まれる」でしょうか。</p>

<p>　完全無料化されて、 Visual Studio Community でも使用可能、になるととても嬉しいですね。</p>

<h1>まとめ</h1>

<p>　2年前の投稿、<a href="http://qiita.com/amay077/items/2e86b44e5f274a34b2e9">マカーの人が Xamarin について勘違いしていそうな５つのこと</a> で、以下のように書きました。</p>

<blockquote><p>私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。(中略) Evolve2014 には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。</p></blockquote>

<p>　「中立な立場の方が良いのでは？」という個人の意見は変わっていません、今度の Evolve にも <a href="https://blog.xamarin.com/join-apple-co-founder-steve-wozniak-at-xamarin-evolve-2016/">Apple の Steve Wozniak が参加する</a> と話題になっているのですが、さすが Microsoft のイベントには来られないよなー、と思います。</p>

<p>　とはいえ、「いずれ・・・」と思っていたのも事実で、「ついにXデーが来たかー」、という感想です。
　マイクロソフトももはやガチガチのプロプライエタリというよりはかなりオープンな企業になっていますし、それには Xamarin（というか Mono）の活動も少なからず影響を与えていたと思います（<a href="https://msdn.microsoft.com/ja-jp/library/dn878908(v=vs.110">.NETがオープンソース化される</a>.aspx)とは、数年前誰が予想していたでしょうか）。
　上でまとめて来たように、マイクロソフトにとってメリットの多い買収なので、少なくとも飼い殺しのような事にはならないでしょう。</p>

<p>　個人的にも、「Xamarin が加わった新しい Microsoft」に期待して、Xamarin.Android を始めとした Xamarin 製品群を使い続けますし、Qiita を始め Tips の投稿もしていくつもりです。
　
(おまけ)</p>

<p>今回の買収劇のオチは、</p>

<p><strong>「MSを助ける製品の販売代理店として頑張って活動していたら、その製品がMSに買収されてなくなっちゃった」</strong></p>

<p>という<a href="https://twitter.com/ytabuchi/status/702634391957217280">某さん</a>でしょうかw
　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache/"/>
    <updated>2015-12-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/xamarin">Xamarin Advent Calendar 2015 1日目</a> の記事です。</p>

<p>Xamarin Advent Calendar 2015、今日から開始です。
3年目になってもネタに尽きない Xamarin 、まだまだ盛り上がっております。</p>

<p>かくいう自分は、<a href="http://qiita.com/amay077/items/0a3fa3dfac7f29a2807d">前回の投稿</a> が約1年前と、完全に時代遅れになっております（仕事とスプラ&hellip;いえ何でもないです）。
最近のトピックスは他の方にお任せして、1年前からのネタを書きます。</p>

<!--more-->


<p>Xamarin でギョームアプリを開発している時に、Android/iOS で使える ORM を探していたというか、JSON のデータをお手軽に保存・読み出し→インスタンス化できるライブラリないかなーと探していました。</p>

<p>Xamarin の公式ドキュメント</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/">Cross-Platform Data Access &ndash; Xamarin</a></li>
</ul>


<p>には、 SQLite.NET や ADO.NET などが紹介されていますが、どれも面倒そう。そこで使ってみようと思ったのが <a href="http://qiita.com/amay077/items/f14e04d4e86c8a782c15">2年前の投稿</a> でチラッと触れていた Akavache です。</p>

<h1>Akavache とは</h1>

<ul>
<li>akavache/Akavache &ndash; <a href="https://github.com/akavache/Akavache">https://github.com/akavache/Akavache</a></li>
</ul>


<p>以下、README から引用です。</p>

<blockquote><p>Akavache is an asynchronous, persistent (i.e. writes to disk) key-value store created for writing desktop and mobile applications in C#, based on SQLite3. Akavache is great for both storing important data (i.e. user settings) as well as cached local data that expires.</p></blockquote>

<p>(意訳)Akavacheは、C# による、SQLite3 をベースとした非同期で永続的なデスクトップとモバイルアプリケーション向けのキーバリューストアです。 ユーザー設定やキャッシュなどのローカルデータを保存するのに最適です。</p>

<p>バックエンドは SQLite3 なので、まあ得体の知れないデータ形式ではない、と。ちなみに <a href="https://github.com/paulcbetts/AkavacheExplorer">AkavacheExplorer</a> というデータビューアもあります。</p>

<h1>対応プラットフォーム</h1>

<blockquote><p>Akavache is currently compatible with:</p>

<ul>
<li>Xamarin.iOS / Xamarin.Mac 32-bit</li>
<li>Xamarin.Android</li>
<li>.NET 4.5 Desktop (WPF)</li>
<li>Windows Phone 8</li>
<li>WinRT (Windows Store)</li>
<li>Windows Phone 8.1 Universal Apps</li>
</ul>
</blockquote>

<p>ほぼ全てやないかい！</p>

<h1>使ってみよう</h1>

<p>せっかくなので Xamarin.Form で Akavache を使ったアプリを作ってみます。</p>

<h3>1. プロジェクト（ソリューション）の作成</h3>

<p>Xamarin.Forms App で、新しいプロジェクトを作成します。プロジェクト名は AkavacheSample とでもします。</p>

<p>Shared Code: は、'Use Portable Class Library' を選択します。</p>

<p>プロジェクトが3つ（AkavacheSample, AkavacheSample.Droid, AkavacheSample.iOS）作成されます。</p>

<h3>2. Akavache と、依存ライブラリの導入</h3>

<p><strong>3つのプロジェクトそれぞれで</strong> 、NuGet(メニュー → プロジェクト → Add NuGet Packages&hellip;) から、以下のパッケージを追加します（執筆時点の Akavache の最新バージョンは 4.1.2 です。）。</p>

<ul>
<li>Akavache.Core</li>
<li>SQLitePCL.raw</li>
<li>Akavache.SQLite3</li>
<li>Akavache</li>
</ul>


<p>検索ボックスに 「sqlite akavache」と入力すると全部表示されると思います(↓こんな感じに)。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_akavache_01.png" alt="" /></p>

<p>追加に失敗する場合は、上のリストの順番で一つずつ追加するとうまくいくと思います。</p>

<h3>3. サンプルアプリの画面を作る</h3>

<p>サンプルアプリの画面レイアウトを作ります。XAML とか面倒なのでコードでバリッと。</p>

<p>AkavacheSample プロジェクトの App.cs を以下のようにします。テキストボックス２つとボタン２つが縦に並んでいるだけの簡単な画面です。</p>

<p>```csharp AkavacheSample.cs
public class App : Application
{</p>

<pre><code>public App()
{
    var nameEntry  = new Entry { Placeholder = "名前を入力" };
    var ageEntry   = new Entry { Placeholder = "年齢を入力(数値のみ)" };
    var saveButton = new Button { Text = "保存" };
    var loadButton = new Button { Text = "読み出し" };

    // The root page of your application
    MainPage = new ContentPage
    {
        Padding = new Thickness(20),
        Content = new StackLayout
        {
            VerticalOptions = LayoutOptions.Center,
            Children =
            {
                nameEntry,
                ageEntry,
                saveButton,
                loadButton
            }
        }
    };
}

// 以下省略
</code></pre>

<p>}
```</p>

<h3>4. Akavache を使って保存と読み出し</h3>

<p>名前と年齢をひとまとめに保存したいので、Person というクラスを作ります。</p>

<p>```csharp Person.cs
public class Person
{</p>

<pre><code>public string PersonName { get; set; }
public int PersonAge { get; set; }
</code></pre>

<p>}
```</p>

<p>あとはもう、一気に実装するだけです。
保存ボタンを押した時に、入力値を Person に詰めて、Akavache を使って保存します。
読み出しボタンを押した時に、Akavache から Person を読みだし、各テキストボックスにバラして設定します。</p>

<p>Akavache はキー・バリュー・ストアなので、保存・読み出し時のキーを <code>"person"</code> としています。</p>

<p>```csharp AkavacheSample.cs</p>

<p>public class App : Application
{</p>

<pre><code>public App()
{
    var nameEntry  = new Entry { Placeholder = "名前を入力" };
    var ageEntry   = new Entry { Placeholder = "年齢を入力(数値のみ)" };
    var saveButton = new Button { Text = "保存" };
    var loadButton = new Button { Text = "読み出し" };

    saveButton.Clicked += async (sender, e) =&gt; 
    {
        // Person に詰めて…
        var person = new Person { 
            PersonName = nameEntry.Text, 
            PersonAge  = Convert.ToInt16(ageEntry.Text) 
        };

        // 保存
        await BlobCache.LocalMachine.InsertObject("person", person); 
    };

    loadButton.Clicked += async (sender, e) =&gt; 
    {
        // Akavache で Person を読み出し
        var loaded = await BlobCache.LocalMachine.GetObject&lt;Person&gt;("person");
        // 各テキストボックスに設定
        nameEntry.Text = loaded.PersonName;
        ageEntry.Text  = loaded.PersonAge.ToString();
    };

    // The root page of your application
    MainPage = new ContentPage
    {
        Padding = new Thickness(20),
        Content = new StackLayout
        {
            VerticalOptions = LayoutOptions.Center,
            Children =
            {
                nameEntry,
                ageEntry,
                saveButton,
                loadButton
            }
        }
    };
}

// 以下省略
</code></pre>

<p>}
```</p>

<h3>5. 動かす！</h3>

<p>Android Player と iOS Simulater で動かしてみた、の図です。(途中、iPhone でキーボード出すのに苦労してるところは無視してください、Take2 の時間が無かったのですｗ)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_akavache_02.gif" alt="" /></p>

<p>さすが Xamarin.Forms だ、(Android でも iPhone で動かしても)何とも無いぜ！</p>

<h1>まとめ</h1>

<p>Akavache を使って保存と読み出しを行う超簡単なサンプルを作ってみました。
作ったサンプルは <a href="https://github.com/amay077/AkavacheSample">GitHub &ndash; amay077/AkavacheSample</a> においておきます。</p>

<p>仕組みは理解できないけど、とても簡単に使えることが分かると思います。
追加されたパッケージを見ると、 JSON.NET とか、Reactive Extensions とかが入っているので、まあだいたい察しが付くかと。。。</p>

<p>ギョームアプリでがっつり使ってますが、今のところパフォーマンスとかデータ破損とか、そういう問題はないです。POCO なオブジェクトをローカル保存するのに、とても役立っています。</p>

<p>というわけで Advent Calendar 初日のネタは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIAlertController を async/await 対応させて便利に使う]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/24/using-uialertcontroller-with-async-await/"/>
    <updated>2014-12-24T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/24/using-uialertcontroller-with-async-await</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2014/xamarin">Xamarin Advent Calendar 2014 23日目</a> の記事です。</p>

<p>　なんか空いてたのでエントリーしましたが、急だったので軽い話です。</p>

<!--more-->


<ul>
<li><a href="http://qiita.com/amay077/items/56abeeaa188f33cd56de">iOS アプリでアラート出してボタンが押されるまで待つ？方法を Objective-C と Xamarin.iOS で比べてみた &ndash; Qiita</a></li>
</ul>


<p>の焼き直しみたいなものです。</p>

<p>　iOS8 では、<code>UIAlertDialog</code> が非推奨になり、代わりに <code>UIAlertController</code> を使えとのこと。</p>

<p>　普通に使うとこうなります。</p>

<p>```csharp
button1.TouchUpInside += (sender, e) =>
{</p>

<pre><code>var alert = UIAlertController.Create("", "こんぼう をすてますか？", UIAlertControllerStyle.Alert);
alert.AddAction(UIAlertAction.Create("はい", 
    UIAlertActionStyle.Default, x=&gt; label1.Text = "こんぼう をすてました")); 
alert.AddAction(UIAlertAction.Create("いいえ",  
    UIAlertActionStyle.Default, x=&gt; {})); 

this.PresentViewController(alert, true, null);
</code></pre>

<p>};
```</p>

<p>　このくらいなら問題ありません。</p>

<p>　次に、こんぼう をすてる前にもう一度問いかけるようにします。
２つ目の <code>UIAlertController</code> が入れ子になってしまって見づらい、 <strong>残念な感じ</strong> です。</p>

<p>```csharp
button1.TouchUpInside += (sender, e) =>
{</p>

<pre><code>var alert = UIAlertController.Create("", "こんぼう をすてますか？", UIAlertControllerStyle.Alert);
alert.AddAction(UIAlertAction.Create("はい", 
    UIAlertActionStyle.Default, x=&gt; 
    {
        // 念押しの確認ダイアログ（入れ子でつらい
        var alert2 = UIAlertController.Create("", "ほんとうにすてますか？", UIAlertControllerStyle.Alert);
        alert2.AddAction(UIAlertAction.Create("もちろん", UIAlertActionStyle.Default, _=&gt; 
        {
            label1.Text = "こんぼう をすてました"
        }));
    alert2.AddAction(UIAlertAction.Create("やめる",  UIAlertActionStyle.Default, _=&gt; {})); 

    // アラート２の表示
    this.PresentViewController(alert2, true, null);
})); 

// アラート１の表示
alert.AddAction(UIAlertAction.Create("いいえ",  UIAlertActionStyle.Default, x=&gt; {})); 

this.PresentViewController(alert, true, null);
</code></pre>

<p>};
```</p>

<p>　Objective-C や Swift なら、ここで打つ手は今のところ無いでしょう。
しかし <strong>Xamarin には、C# には async/await がありまぁす！</strong>
アラートの表示を async/await（というか Task）対応してみましょう。</p>

<p>```csharp
private Task<int> ShowDialog(string message, string button1Title, string button2Title)
{</p>

<pre><code>var comp = new TaskCompletionSource&lt;int&gt;();

var alert = UIAlertController.Create("", message, UIAlertControllerStyle.Alert);
alert.AddAction(UIAlertAction.Create(button1Title, UIAlertActionStyle.Default, x=&gt; 
{
    comp.SetResult(1); // OKボタン
})); 
alert.AddAction(UIAlertAction.Create(button2Title,  UIAlertActionStyle.Default, x=&gt; 
{
    comp.SetResult(0); // Cancel
})); 

this.PresentViewController(alert, true, null);

return comp.Task;
</code></pre>

<p>}
```</p>

<p><code>Task&lt;int&gt;</code> を返すメソッド <code>ShowDialog</code> です。<code>UIAlertController</code> のボタンが押されたら <code>SetResult</code> して Task の値を決定します。</p>

<p>　このメソッドを使う方は、こうなります。</p>

<p>```csharp
button1.TouchUpInside += async (sender, e) =>
{</p>

<pre><code>if (await ShowDialog("こんぼう をすてますか？", "はい", "いいえ") == 0) 
    return;

if (await ShowDialog("ほんとうにすてますか？", "もちろん", "やめる") == 0) 
    return;

label1.Text = "こんぼう をすてました";
</code></pre>

<p>};
```</p>

<p>なんて見やすいコードになったことでしょう。すばらしい！</p>

<p>入れ子でなく、フラットに書けるので、こんな事もできます。</p>

<p>```csharp
button1.TouchUpInside += async (sender, e) =>
{</p>

<pre><code>while (await ShowDialog("こんぼう をすてますか？", "はい", "いいえ") == 1) 
{
    label1.Text = "それをすてるなんてとんでもない！";
}

label1.Text = "すてるのをやめました";
</code></pre>

<p>};
```</p>

<p>こんぼうを捨てるのをあきらめるまで、なんどでも聞いてきます。
コールバックスタイルのメソッドでループとか、ベタに書くと頭痛いです。</p>

<p>動かすとこんな感じです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/uialertcontroller_with_async_await_01.gif" alt="" /></p>

<p><code>ShowDialog</code> は拡張メソッドとして作成しておくと、呼び出しに便利かもしれません。
コールバックスタイルの機能を、Task化するパターンはよく使いそうな気がします。<code>TaskCompletionSource</code>、覚えておきましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マカーの人が Xamarin について勘違いしていそうな５つのこと]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin/"/>
    <updated>2014-12-02T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin</id>
    <content type="html"><![CDATA[<p>　今年も始まりました <a href="http://qiita.com/advent-calendar/2014/xamarin">Xamarin Advent Calendar 2014</a> 。
　思えば<a href="http://qiita.com/advent-calendar/2013/xamarin">昨年の Advent Calendar</a> は、5名の方に参加していただいたものの「ほとんど俺」みたいな感じでしたが、今年はたくさん方に登録してもらえてとても嬉しいです。この1年の Xamarin の躍進ぶりを象徴していると思います。</p>

<!--more-->


<p>　そんな Xamarin ですが、Microsoft とのパートナーシップが強力なおかげで、Windows系の開発者には広く知られて（そういう戦略なのは分かります）いますが、普段 Mac で iOS/Android アプリを開発してますみたいな人にはあまりリーチできていないかなあと思います。</p>

<p>　そこで初日の今日は、マカーの人が、勘違い・思い込んでいそうなことをいくつか払拭してみたいと思います。</p>

<h2>Q1. Xamarin を使うには、Visual Studio が必要なんでしょ？</h2>

<p>A1: <strong>必要ありません。</strong> 「Xamarin Studio」という専用の統合開発環境で開発できます。私は Mac + Xamarin Studio で開発していますが、まったく問題を感じていません。
　また、iOSアプリのView部分は、Xcodeと同じ <code>.storyboard</code> ファイルを使用しますが、Xcode を使う必要もありません。Interface Builder と同じ（か部分的にはそれ以上）の機能を持つ <a href="http://developer.xamarin.com/guides/ios/user_interface/designer/">UIデザイナー</a>が、Xamarin Studio には搭載されています。</p>

<h2>Q2. Xamarin を使うには、Windows が必要なんでしょ？</h2>

<p>A2: <strong>必要ありません。</strong> Mac のみで完結します。むしろ Windows だけでは iOSアプリのビルドができないので、<a href="http://developer.xamarin.com/guides/ios/getting_started/installation/windows/introduction_to_xamarin_ios_for_visual_studio/">Mac にリモート接続</a>する必要があり、これがしばしばトラブルになります。（主にデモでｗ
　Microsoft がアピールするとどうしても Windows+Visual Studioの説明になってしまいますが、それはまやかしです（言い切った！</p>

<h2>Q3. Xamarin社って、Microsoft の子分みたいなもんでしょ？</h2>

<p>A3: Xamarin社は独立した企業であり、Microsoftとは対等な立場です（と私は思っています）。「Microsoft に買収されればいいのに」という声をよく聞きますが、私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。Microsoftにとってはモバイル開発者にリーチする重要なピースであり、Xamarin社としても他にないマーケットです。
 また、今年の Xamarin の大イベント <a href="https://evolve.xamarin.com/">Evolve2014</a> には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。
あ、最近の <a href="http://www.publickey1.jp/blog/14/jitnet_core_rutimenet_framework.html">.NETのオープン化</a> の流れは、Xamarin の CTO であり Monoプロジェクトの生みの親であるスーパーハッカー、<a href="https://twitter.com/migueldeicaza">ミゲル・デ・イカザ</a>氏が少なからず関係していると思っています。</p>

<h2>Q4. C# 覚えるのしんどい</h2>

<p>A4. <strong>あなたはあの Objective-C を覚えたのでしょう？</strong></p>

<h2>Q5. Swift の方が C# よりイケてるじゃん？</h2>

<p>A5. 後発である Swift がイケてるのは誰もが認めるところでしょう（かつて Java に対する C# がそうであったように）「Swift は関数型言語だ」という意見には、Xamarin は F# を提案します。<a href="http://blog.xamarin.com/introduction-to-f-with-xamarin/">Xamarinには F# の MVP（勝手に”数学ガール”だと思っている）</a>も居ます(←訂正:Xamarinの人じゃなかったです)し、日本でも <a href="http://www.slideshare.net/kusokuzeshiki/xamarinmvvm-crossf">F#+Xamarin でアプリ開発されている型</a>も居らっしゃいます。</p>

<h1>まとめ</h1>

<p>　ちょっと宗教論争っぽくなりかけたので、ここまでにしておきます。強く主張したいのは、モバイルアプリ開発者なら iOS だけ、Android だけ知っていても良いアプリは作れないでしょう。両方のプラットフォーム、開発言語、哲学を理解する必要があります。 <strong>Xamarin だから Swift を覚えなくていいという事はありません。</strong>
　
　でも、同じ（少なくとも同じような機能をもった）アプリの同じロジックを、異なる言語でそれぞれ書いて、その後数年保守し続ける現状は、本当に最適なのでしょうか？同じコード、あるいは同じバイナリが iOS/Android で動作すれば、保守費用は半分です（SIer みたいな言い方だｗ）。</p>

<p>　「共通にできる選択肢、あるいはプラットフォームの文化にあわせて別々にできる選択肢」を自然な形で提供するのが Xamarin、 Java も Swift も C# も覚えて C# で D.R.Y するのが Xamarin です。</p>

<p>　最後に宣伝ですが、 <strong>Build INSIDER</strong> というWebサイトで「Xamarin逆引きTips」という連載をしています。</p>

<ul>
<li><a href="http://www.buildinsider.net/mobile/xamarintips">Xamarin逆引きTips &ndash; Build Insider</a></li>
</ul>


<p>　これは、.NET Framework は今まであまり使った事がない iOS/Android アプリ開発者をターゲットにしていて、説明もほぼ全てが Mac+Xamarin Studio を使って書いています。興味持ったら読んでもらえると嬉しいです。</p>

<p>　本日まったく登場しなかった Visual Studio や Windows Phone などの話は、明日以降登場すると思いますので、お楽しみに！それでは初日はこの辺で。</p>
]]></content>
  </entry>
  
</feed>
