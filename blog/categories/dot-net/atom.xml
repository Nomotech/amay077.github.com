<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .net | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/dot-net/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-04-06T22:40:28+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# と Reactive Extensions でズンドコキヨシ]]></title>
    <link href="http://blog.amay077.net/blog/2016/03/12/zundoko-with-reactive-extensions/"/>
    <updated>2016-03-12T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/03/12/zundoko-with-reactive-extensions</id>
    <content type="html"><![CDATA[<p>流行り？に乗っていくスタイル。</p>

<!--more-->




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから<br>「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた</p>&mdash; てくも (@kumiromilk) <a href="https://twitter.com/kumiromilk/status/707437861881180160">2016年3月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>```csharp Zondoko.cs
var random = new Random();
var K = &ldquo;キ・ヨ・シ！&rdquo;;
var PATTERN = new string[] { &ldquo;ずん&rdquo;, &ldquo;ずん&rdquo;, &ldquo;ずん&rdquo;, &ldquo;ずん&rdquo;, &ldquo;どこ&rdquo; };</p>

<p>Observable.Interval(TimeSpan.FromMilliseconds(100))</p>

<pre><code>.Select(_ =&gt; (random.Next() % 2 == 0) ? "ずん" : "どこ") // ランダムに ずんorどこ
.Scan(new List&lt;string&gt;(), (queue, x) =&gt; // 最大５つのQueueに貯める
    {
        queue.Add(x);
        while (queue.Count &gt; PATTERN.Count) { queue.RemoveAt(0);}
        return queue;
    })
.SelectMany(queue =&gt; queue.SequenceEqual(PATTERN) ? // パターンと一致したら…
    Observable.Concat(
        Observable.Return(queue.Last()),   // Queueの最後
        Observable.Return(K),              // + キ・ヨ・シ！
        Observable.Return(string.Empty)) : // + 空文字(終了判定用)
    Observable.Return(queue.Last()))
.TakeWhile(x =&gt; !string.IsNullOrEmpty(x))  // 空文字になるまで繰り返す
.Subscribe(
    x =&gt; Console.WriteLine(x),
    () =&gt; Console.WriteLine("complete!!"));
</code></pre>

<p>```</p>

<blockquote><p>どこ<br/>
どこ<br/>
ずん<br/>
ずん<br/>
ずん<br/>
どこ<br/>
どこ<br/>
どこ<br/>
ずん<br/>
どこ<br/>
ずん<br/>
ずん<br/>
ずん<br/>
ずん<br/>
どこ<br/>
キ・ヨ・シ！<br/>
complete!!</p></blockquote>

<p><code>SelectMany</code> に頼ってるのが気に入らない。。。</p>

<ul>
<li>RxJava 版はこちら &ndash; <a href="http://qiita.com/amay077/items/2c8575753e37fcc94f87">RxJava でズンドコキヨシ(window 使用)</a></li>
<li><a href="http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84">さまざまなズンドコキヨシ</a></li>
<li><a href="http://qiita.com/shunsugai@github/items/971a15461de29563bf90">ズンドコキヨシまとめ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
