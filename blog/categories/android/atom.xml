<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-10-29T02:15:15+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2017 に Xamarin ネタでトーク応募したよ]]></title>
    <link href="http://blog.amay077.net/blog/2016/10/25/submit-cfp-for-droidkaigi2017/"/>
    <updated>2016-10-25T02:42:51+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/10/25/submit-cfp-for-droidkaigi2017</id>
    <content type="html"><![CDATA[<p>神からの啓示がありまして、 <a href="https://droidkaigi.github.io/2017/">DroidKaigi2017</a> のトークに応募しました。</p>

<!--more-->


<p>昨年 DroidKaigi2016 を聞きにいきました。 Kotlin、Go Mobile のセッションがありました。</p>

<p>当時 Xamarin はまだプロプライエタリな有償の製品でした。今はほとんどオープンソースのプロダクトです。</p>

<p>これはワンチャンあるで！</p>

<p>応募内容は以下です。「○○界隈」いうのがあまり好きではないので、そういうのにこだわらない話をしたいと思っています。</p>

<hr />

<h2>Title</h2>

<p>Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発</p>

<h2>Abstract</h2>

<h3>対象者</h3>

<ul>
<li>Android中級者〜</li>
<li>C# 初心者〜</li>
</ul>


<h3>概要</h3>

<p>Xamarin（ざまりん）は C# によるクロスプラットフォームモバイルアプリ開発ツールです。
Microsoft が2016年4月に買収して、一気に知名度が上がりました。</p>

<p>このセッションでは、 Xamarin とは、Xamarin.Android とは何か、C# や .NET Framework(Mono) の強力な言語・ライブラリ機能について触れ、通常の Android アプリ開発と Xamarin を使ったアプリ開発はどこが違って、どこが同じなのかを説明します。</p>

<p>また、今日のモバイルアプリ開発では、DataBinding、MVVM、Reactive Extensions(Rx) といった、Microsoft が源流となっている手法が広まって来ています。
Xamarin を使うと、MVVMパターンと Rx を使用し、大部分のコードを共有できる Android/iOS 両対応アプリケーションを開発できます。如何にしてコードを共有するか、できない場合にどのような解決策が用意されているかについてお話します。</p>

<h3>目次（仮）</h3>

<h4>1. Xamarin とは？</h4>

<ul>
<li>Xamarin とは何か</li>
<li>Xamarin.Android とは何か</li>
<li>C# の利点(Java, Swift との比較)</li>
</ul>


<h4>2. クロスプラットフォームアプリ開発とコードの共有</h4>

<ul>
<li>MVVMパターン</li>
<li>Reactive Extensions / ReactiveProperty</li>
<li>Portable Class Library(PCL)によるコード共有</li>
<li>プラットフォーム固有の処理を行う方法</li>
</ul>


<h4>3. Open Xamarin、Open Microsoft</h4>

<ul>
<li>Xamarin で使えるライブラリ(C#, Java)</li>
<li>All Xamarin SDKs are open source</li>
<li>.NET Standard</li>
</ul>


<h4>4. Xamarin の使いどころ</h4>

<ul>
<li>採用すべきケースとしなくてよいケース</li>
</ul>


<h2>Topic</h2>

<p>開発環境・ツール (Productivity and Tooling)</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin を使わなくてもいい人たち]]></title>
    <link href="http://blog.amay077.net/blog/2016/10/18/who-dont-need-xamarin/"/>
    <updated>2016-10-18T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/10/18/who-dont-need-xamarin</id>
    <content type="html"><![CDATA[<p>「Xamarin はいいぞ」ばかり言ってる私ですが、Xamarin がハマらないケースも当然あるわけで。</p>

<!--more-->


<p>　いくつかピックアップしてみたいと思います。</p>

<h2>Android / iOS のスペシャリスト</h2>

<p>　Android または iOS、Java や Swift が大好きで最先端を突っ走ってる人。
あるいは、最新のOSの機能をガンガンアプリに取り入れていくプロダクト。</p>

<p>　彼(または彼女)達に「Xamarin 使えよ、C# 使えよ」って言っても彼らの楽しみを奪ってしまうのでしない方がいいし、SDK が新しくなったら即使いたいという欲求はネイティブでないと満たせないですよね。
　</p>

<h2>配布サイズを気にするプロダクト</h2>

<p>　Xamarin でアプリを作ると、Monoランタイムを同梱するため配布パッケージの容量がびっくりするくらい増えます。（Android の場合、HelloWorld でも 10MByte は切れないんじゃなかったかな？）
　プロダクトが、世界をターゲットにしていて、それに回線の細い新興国も含まれている場合、注意した方がよいと思います。
　</p>

<h2>ガワネイティブでいいやつ</h2>

<p>　Cordova, Monaca とかそういうの。例えばショッピングサイトのネイティブアプリだと、コンテンツの差し替えが激しいので HTML5 でモバイルWebサイトと共通化できたほうが運用の効率がよいです。
　</p>

<h2>宗教上の理由</h2>

<p>　マイクロソフトに親を殺された人は使わないでしょう。ただ、過去に何があったかは知らないですけど、今のマイクロソフトはあなたを殺しませんよ？</p>

<h2>　</h2>

<p>こんなもんかなあ。逆を言えば、上に当てはまらなければ Xamarin を選択しない理由はないわけで。</p>

<p>やっぱり、「Xamarin はいいぞ」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarinハンズオン浜松(再び) で講師をしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/09/10/joined-xamarin-hads-on-ad-hamamatsu-revenge/"/>
    <updated>2016-09-10T20:43:45+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/09/10/joined-xamarin-hads-on-ad-hamamatsu-revenge</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://jaghama.connpass.com/event/37686/">Xamarinハンズオン浜松(再び) #JXUG #jaghama &ndash; connpass</a></li>
</ul>


<!--more-->


<p><a href="http://blog.amay077.net/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu/">前回</a> から２ヶ月、「もう一度浜松で開催して欲しい」と要望があったとのことで、前回の田淵さんに代わり、講師役として協力させていただきました。</p>

<h2>プレイベント「さわやかを食べる会」</h2>

<p>今回もウォーミングアップは さわやか です（前回とは違う店だよ）。
前回は げんこつハンバーグ でしたが、今回は <em>普通の</em> ハンバーグ、こいつもウマイ！！</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_2_01.JPG" alt="" /></p>

<h2>ハンズオン振り返り</h2>

<p>一応、概要説明の資料はこちらにおいておきますね(前回の講師である田淵さんの資料をほぼ丸パクリですがｗ)。</p>

<ul>
<li><a href="http://www.slideshare.net/amay077/xamarin-xamarin201609-jxug-jaghama">Xamarin基礎講座 Xamarinハンズオン(2016.09 浜松) #JXUG #jaghama</a></li>
</ul>


<p>今回は約２０名の方に参加していただけました。</p>

<p>会場がとてもキレイでした、ご協力ありがとうございます、○○鉄道さま！（どこまで公開してよいか分からないから一応伏せといた）</p>

<p>Windows + Visual Studio の方が多かったのに、私自身が普段 Mac + Xamarin Studio 使いなので、ちょっと不安だなー、と思っていましたが、その通りでした💧</p>

<p>何名かの人で、 Visual Studio ならでは(?) な問題が発生して、環境が作れなかったりしました。
本当はその場で解決してあげたかったんですが、Visual Studio のトラブルシューティングの引き出しが少なく…。</p>

<p>とはいえ、今後も Mac から Windows に乗り換えることは無さそうなので、どうしたもんかなぁ、という感じです。</p>

<h2>打ち上げ</h2>

<p>駅前の浜松餃子屋さんで軽く打ち上げ。混んでたためか、餃子の追加注文お断りとのことで、余裕を持って頼んだ結果こうなりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_2_02.JPG" alt="" /></p>

<p>大人５人だったからなんとか食べきれましたね、浜松餃子も旨かった！</p>

<h2>ちょまどさん</h2>

<p>Microsoft のエバンジェリストであるちょまど(<a href="https://twitter.com/chomado">@chomado</a>)さんも来ていただき、サポートスタッフをお願いしました、ありがとうございました！</p>

<p>新たな伝説のネタとなって、浜松<strong>市</strong> も大変うれしく思います（^^）</p>

<ul>
<li><a href="http://togetter.com/li/1020144">浜松町と浜松 &ndash; Togetterまとめ</a></li>
</ul>


<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/chomado">@chomado</a> <br><br>だいたいさ！<br><br>浜松<br>と<br>浜松町<br><br>が全然違うところなんて本当に知らなかったよ！<br><br>会社(日本マイクロソフト品川本社)の隣駅と浜松町だと思ってたら、<br><br>まさかの新幹線ですよ！<br><br>もちろん自費です！</p>&mdash; ちょまど@MS入社してから5ヶ月 (@chomado) <a href="https://twitter.com/chomado/status/771907617555828740">2016年9月3日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">以前も浜松市の勉強会に、浜松町と間違えて登録された方がいましたが、間違いに気づいてキャンセルされました。実際に来られたのは <a href="https://twitter.com/chomado">@chomado</a> さんが初めてです。</p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href="https://twitter.com/amay077/status/771913137792491520">2016年9月3日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>また次回も <del>浜松町と間違えて</del> 来てください！</p>

<h2>地方も Xamarin がんばろう</h2>

<p>東京・関東あたりは、Xamarin の勉強会を毎月数回やっている感じですが、地方はまだまだ少なめ。</p>

<p>直近だと、長野県でもくもく会があるそうです。</p>

<ul>
<li><a href="http://glnagano.connpass.com/event/39782/">ギークラボ長野 Xamarinもくもく会 &ndash; connpass</a></li>
</ul>


<p>地方の観光スポットor特産品を釣り餌にしていただけると、ワタシも喰いつきやすいです。
よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非同期処理の書き方を Java と Swift と Xamarin で比較する]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/19/comparison_async_logic_with_java_swift_xamarin/"/>
    <updated>2016-07-19T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/19/comparison_async_logic_with_java_swift_xamarin</id>
    <content type="html"><![CDATA[<p>「重たい処理を非同期で実行して、結果をメインスレッドで画面に表示」を、</p>

<!--more-->


<ul>
<li>Android-Java</li>
<li>iOS-Swift</li>
<li>Xamarin(Android も iOS も同じ)</li>
</ul>


<p>で比較。</p>

<hr />

<h2>Android</h2>

<p>```java
@Override
public void onClick(View view) {</p>

<pre><code>new AsyncTask&lt;Void, Void, Long&gt;() {
    @Override
    protected Long doInBackground(Void[] p) {
        // ワーカースレッド
        long ret = 0;
        for (long i = 0; i &lt; 1000000000; i++)
            ret += i;
        return ret;
    }

    @Override
    protected void onPostExecute(Long result) {
        // UIスレッド
        text1.setText(String.valueOf(result));
    }
}.execute((Void)null);
</code></pre>

<p>}
```</p>

<hr />

<h2>Swift</h2>

<p>```java
@IBAction func onTouchUpInside(sender: AnyObject) {</p>

<pre><code>weak var weakSelf = self
dispatch_async(dispatch_get_global_queue(
    DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), {
    // ワーカースレッド
    var ret:Int = 0
    for i in 0...1000000000 {
        ret += i
    }

    dispatch_async(dispatch_get_main_queue(), {
        // UIスレッド
        weakSelf?.label1.text = String(ret)
    });
});
</code></pre>

<p>}
```</p>

<hr />

<h2>Xamarin(Android も iOS も)</h2>

<p>```csharp
Task<long> FatProc() => Task.Run<long>(() => {</p>

<pre><code>long ret = 0;
for (long i = 0; i &lt; 1000000000; i++)
    ret += i;
return ret;
</code></pre>

<p>});</p>

<p>button1.TouchUpInside += async (_, e) => {</p>

<pre><code>var ret = await FatProc(); // ワーカースレッド
label1.Text = ret.ToString(); // UIスレッド
</code></pre>

<p>};
```</p>

<hr />

<h2>Xamarin はいいぞ！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムマーカーに対応した Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/18/xamarin_forms_googlemaps_v1_4_0_released/"/>
    <updated>2016-07-18T17:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/18/xamarin_forms_googlemaps_v1_4_0_released</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました。</p>

<!--more-->


<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/1.4.0">NuGet Gallery | Xamarin.Forms.GoogleMaps 1.4.0</a></li>
</ul>


<p>待望？のカスタムマーカーに対応しました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_001.png" alt="image001" /></p>

<h2>カスタムマーカーの使い方</h2>

<p><code>Pin.Icon</code> に <code>BitmapDescriptorFactory</code> により生成される <code>BitmapDescriptor</code> を設定します。</p>

<p><code>BitmapDescriptorFactory</code> の３つのファクトリメソッドにより、
「デフォルトマーカーの色を変える」「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」
の３つが使用できます。</p>

<h3>デフォルトマーカーの色を変える</h3>

<p><a href="https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_marker.html?hl=ja#ae320cb082a68c22eb1f37955f8e56228"><code>iOS:GMSMarker.markerImageWithColor</code></a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float"><code>Android:BitmapDescriptorFactory.defaultMarker</code></a>) に対応する、既定のマーカー形状の色のみを変える機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>

<p><code>csharp
pin.Icon = BitmapDescriptorFactory.DefaultMarker(Color.Pink);
</code></p>

<h3>プラットフォーム毎の画像リソースを使用する</h3>

<p><a href="https://developers.google.com/maps/documentation/ios-sdk/marker?hl=ja#_7"><code>iOS:UIImage.imageNamed</code></a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float"><code>Android:BitmapDescriptorFactory.fromAsset</code></a>) に対応する、プラットフォーム固有の画像リソースを、マーカー画像として使用する機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.FromBundle(string)</code> メソッドを使用します。</p>

<p><code>csharp
pin.Icon = BitmapDescriptorFactory.FromBundle("image01.png");
</code></p>

<p>引数の bundleName は、 <strong>同じ名称で</strong> 、プラットフォーム毎に次のように用意されている必要があります。</p>

<h4>Android の場合</h4>

<p>Android側のプロジェクトの <code>Assets</code> ディレクトリ内に <code>image01.png</code> を追加し、 Build Action を ”Android Asset” に設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_002.png" alt="image001" /></p>

<h4>iOS の場合</h4>

<p>iOS側のプロジェクト <code>image01.png</code> を追加し、 Build Action を ”BundleResource” に設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_003.png" alt="image001" /></p>

<h3>共通の画像リソースを使用する</h3>

<p>画像を <code>Stream</code> を直接指定できる、機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>

<p>```csharp
// PCLプロジェクトに EmbeddedResouece として追加した &ldquo;marker01.png&rdquo; を読み込んで Stream 化
var assembly = typeof(CustomPinsPage).GetTypeInfo().Assembly;
var stream = assembly.GetManifestResourceStream($&ldquo;XFGoogleMapSample.marker01.png&rdquo;);</p>

<p>// Stream をマーカーに設定
pin.Icon = BitmapDescriptorFactory.FromStream(stream);
```</p>

<h2>【注意】プラットフォーム毎のマーカーサイズの違い</h2>

<p>「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」で見られる現象なのですが、iOS と Android では <strong>同じサイズの画像を指定しているのに iOS の方が大きく描画されます</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_004.png" alt="image001" /></p>

<p>なぜこうなるのか分かりませんが、 <a href="https://developers.google.com/maps/documentation/ios-sdk/intro?hl=ja">Google Maps SDK for iOS</a> と <a href="https://developers.google.com/maps/documentation/android-api/intro?hl=ja">Google Maps Android API</a> を直接使用した時もこうなるので、両者の仕様というかプラットフォーム自体の仕様なのかも知れません。</p>

<p>特に <code>BitmapDescriptorFactory.FromStream</code> を使用した時には使い勝手が悪いのですが、「ネイティブの Google Maps SDK の機能を共通APIでラップする」のが第一目標なので、とりあえず画像を何も加工しない実装でリリースしました。</p>

<p>何か原因などについてヒントがある方は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues/40">Why custom pin icon in iOS bigger than Android? · Issue #40 · amay077/Xamarin.Forms.GoogleMaps</a></li>
</ul>


<p>に書いてもらえると助かります（日本語で大丈夫です）。</p>

<h2>サンプルプログラム</h2>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">XFGoogleMapSample</a> の <a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/XFGoogleMapSample/CustomPinsPage.xaml.cs"><code>CustomPinsPage.xaml.cs</code></a> でこれらの機能を使用しています。</p>

<p>是非使ってみてください。よければ <a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Github リポジトリ</a> に Star ください。</p>
]]></content>
  </entry>
  
</feed>
