<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-08T00:46:15+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms 向けの地図ライブラリ「Xamarin.Forms.GoogleMaps」をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/"/>
    <updated>2016-06-27T23:59:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms で使える地図ライブラリは、公式が出している</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.Maps/">Xamarin.Forms.Maps</a> &ndash; Maps models and renderers for Xamarin.Forms</li>
</ul>


<p>があるのですが、非常に機能が少ないです（ピンがおけるだけで、図形の描画すらできません）。</p>

<!--more-->


<p>なので、別な選択肢としての「Xamarin.Forms向け地図ライブラリ」を開発し始めました。</p>

<p>それがこちら</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/">Xamarin.Forms.GoogleMaps</a> &ndash; Yet another Maps library for Xamarin.Forms that optimized for Google maps.</li>
</ul>


<p>です。</p>

<p>iOS では MapKit に代わり <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a> を使用し、 Android/iOS 共に Google Maps に特化することで、API の共通化を容易にし、恐らくAPI共通化の足枷になっているであろう UWP(Bing maps) のサポートは最小限に留めています。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_01.png" alt="screenshot1" /></p>

<h2>現在の機能</h2>

<p>現在のバージョンは 1.1.0 。
公式の Xamarin.Forms.Maps に比べて、ライン・ポリゴン・円を追加できるようになりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_02.png" alt="screenshot2" /></p>

<p>詳しい比較は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/wiki/Xamarin.Forms.Maps-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83">Xamarin.Forms.Maps との比較 &ndash; Xamarin.Forms.GoogleMaps Wiki</a></li>
</ul>


<p>にあります。</p>

<h2>サンプルプログラム</h2>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">Xamarin.Forms.GoogleMaps/XFGoogleMapSample &ndash; github</a></li>
</ul>


<p>にあります。</p>

<p>Google Maps の APIキーを Android / iOS それぞれで取得する必要があります。</p>

<ul>
<li>Android &ndash;  <a href="http://www.buildinsider.net/mobile/xamarintips/0020">Xamarin.Androidで地図を表示するには？（Google Maps使用） &ndash; Build Insider</a></li>
<li>iOS &ndash; <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS  |  Google Developers</a> の「クイック スタート ステップ」
をそれぞれ参照してください。</li>
</ul>


<h2>オープンソース</h2>

<p><a href="http://open.xamarin.com/">Xamarin Open Source SDK</a> により、 Xamarin.Forms のソースコードもオープンソースになったので、 <a href="https://github.com/xamarin/Xamarin.Forms/tree/master/Xamarin.Forms.Maps">Xamarin.Forms/Xamarin.Forms.Maps &ndash; github</a> などを Fork して作りました。</p>

<p>このライブラリ自体もオープンソースであり、</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>
</ul>


<p>で開発しています。（スターを付けてもらえると作者がよろこびます）</p>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues">要望、コメントなど</a>もらえると嬉しいです。よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms の画面(Page)のライフサイクルイベントについて]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles/"/>
    <updated>2016-06-08T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles</id>
    <content type="html"><![CDATA[<p>ちょっと誤解してた＆情報がなかったのでまとめてみました。</p>

<!--more-->


<h2>モバイルアプリでの「画面」の基本的なライフサイクルイベント</h2>

<p>まあ Android と iOS についてですが。</p>

<p>画面が表示される時のイベント（コールバック）は、簡潔には以下のようになります。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume|</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause|</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy|</td>
</tr>
</tbody>
</table>


<p>厳密にはもっと細かく、〜される前と後が iOS と Android で微妙に異なるのでだいたいこんな感じという程度と思って下さい。</p>

<p>もう少し細かいイベントは以前調べた以下を参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/52a0b0da97fe455abc08">iOS と Android で画面表示時のコールバックを比較する &ndash; Qiita</a></li>
</ul>


<h2>Xamarin.Forms での画面のライフサイクルイベント</h2>

<p>Xamarin.Forms では、上表のライフサイクルイベントは、アプリケーション
(Application) と、画面(Page) のイベントに分かれています。</p>

<p>表に、Xamarin.Forms を追加してみました。</p>

<table>
<thead>
<tr>
<th></th>
<th>順番</th>
<th>イベント</th>
<th>iOS(UIViewController)</th>
<th>Android(Activity)</th>
<th>Xamarin.Forms</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>画面がロードされる(た)時</td>
<td>viewDidLoad</td>
<td>onCreate</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnAppearing(">Page.OnAppearing</a>/)|</td>
</tr>
<tr>
<td></td>
<td>2</td>
<td>画面が表示される(た)時</td>
<td>viewDidAppear</td>
<td>onResume</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnResume(">Application.OnResume</a>/) <strong>※要注意</strong> |</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>画面が非表示になる(った)時</td>
<td>viewDidDisappear</td>
<td>onPause</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnSleep(">Application.OnSleep</a>/)</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>画面がアンロードされる(た)時</td>
<td>viewDidUnload</td>
<td>onDestroy</td>
<td><a href="https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnDisappearing(">Page.OnDisappearing</a>/)|</td>
</tr>
</tbody>
</table>


<p>画面のロード時（<code>viewDidLoad/onCreate</code>）に相当するのは、Xamarin.Forms では <code>OnAppearing</code>、逆にアンロード時は <code>OnDisAppearing</code> です（名称が <code>viewDidAppear</code> に似てるので、画面の表示時かと勘違いしてました）。</p>

<p>画面の表示／非表示時のイベントは、画面でなく Application クラスの <code>OnResume</code>, <code>OnSleep</code> で提供されます。</p>

<p>要注意なのは <code>OnResume</code> です。これ、画面が表示される <strong>初回はイベントが発生しません</strong>。
一度、アプリを背面に退避し、再度前面に持ってきたときに初めて <code>OnResume</code> が呼び出されます。iOS や Android の <code>viewDidAppear / OnResume</code> と同じだと思ってつかうとハマります。</p>

<p>基本的には、 <code>OnAppearing</code> でリソースの確保を、 <code>OnDisAppearing</code> で解放をすればよさそうです。</p>

<p>GPS など、電池消費の激しいリソースを使う場合は、アプリが背面へ隠れたら直ちにそのリソースを解放した方がよいです。その場合は <code>OnResume-OnSleep</code> を使いますが、前述の通り、画面初回表示時は <code>OnResume</code> が走らないので、少し工夫が必要です。</p>

<h2>画面が回転された時</h2>

<p>端末を横向きに回転すると、Android では Activity が破棄されて再度生成される事が知られています。</p>

<p>Xamarin.Forms では Android でもそのような事はなく、 <code>Page.OnSizeAllocated</code> が呼び出されるだけです(iOS も当然同じ)。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.xamarin.com/guides/xamarin-forms/working-with/app-lifecycle/">Working with the App Lifecycle &ndash; Xamarin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin 勉強会 #JXUG 13 で発表してきました]]></title>
    <link href="http://blog.amay077.net/blog/2016/05/08/presentation-in-xamarin-jxug-13/"/>
    <updated>2016-05-08T01:18:43+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/05/08/presentation-in-xamarin-jxug-13</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://jxug.connpass.com/event/29734/">JXUGC #13 東京 緊急開催 Xamarin のすべて！ &ndash; connpass</a></li>
</ul>


<!--more-->


<p>で、 <strong>「DroidKaigi2016 アプリを Xamarin に移植した話」</strong> というタイトルで登壇してきました。</p>

<p>その資料です。</p>

<script async class="speakerdeck-embed" data-id="a005a4a951d047948aa9985497736e0d" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>動画はこちら</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=9oPwHJ4Zc9I">JXUGC #13 東京その３ &ndash; YouTube</a></li>
</ul>


<h2>補足など</h2>

<p>ライブラリ関係のもう少し細かい話は、</p>

<ul>
<li><a href="http://qiita.com/amay077/items/09b442da6ac22269e8e0">DroidKaigi2016アプリを Xamarin.Android に移植した話 &ndash; Qiita</a></li>
</ul>


<p>に書いてます。</p>

<p>伝えたかったのは、Xamarin でも Androidネイティブ／iOSネイティブアプリ開発 の知識も要るよということなのですが、そのためには、</p>

<ul>
<li>DroidKaigi も try!Swift も参加しようぜ！</li>
<li>難しいならそれに携わっている人たちをフォローしとこうぜ！</li>
<li><a href="http://potatotips.connpass.com/">potatotips</a> っていうiOS/Android開発Tips共有会もあるし東京いいなあ！</li>
</ul>


<p>ってことです。
Android にしても iOS にしても、所詮は他人の土俵なんで、その土俵に入って情報収集・質問しないと欲しい情報は得られないです（<strong>まだ</strong> 日本語情報が少ない、とかそういう問題じゃないと思います）。</p>

<p>慣れないOS・慣れない開発環境とかも、最初はツラいんですが、しばらく使い続けれいれば、その内良いトコ取りできるようになります。そういう選択ができるのも Xamarin だけなんで。</p>

<p>正直、 Java とか Swift を専門でやってきたネイティブアプリ開発の人たちに「C# やろうぜ！」って言っても、彼らの現状にあまりメリットないし、各言語に愛着もあるだろうし難しいと思いますから、こちらから歩み寄っていく感じで！</p>

<h2>その他</h2>

<ul>
<li>資料は <a href="http://www.decksetapp.com/">Deckset</a> という Markdown でプレゼン資料生成するツールで作ってます</li>
<li>Slideshare に PDF アップしたら日本語表示できなかったので Speaker Deck にせざるを得なかった</li>
<li>次なんかやるときは <a href="https://transiru.net/">Transiru</a> 使います</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Workbooks とかいうやつ]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/"/>
    <updated>2016-04-29T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks</id>
    <content type="html"><![CDATA[<p><a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> が開催中されました。</p>

<!--more-->


<p>build での予告どおり、Xamarin.Android/iOS などがついにオープンソースになった、などのエキサイティングな発表のまとめは</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/evolve2016">【速報】Evolve 2016 で発表されたエキサイティング情報まとめ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>その Keynote でデモされていた Xamarin Workbooks というツールがなかなかすごいので紹介。</p>

<h2>なにこれ？</h2>

<p>ひとことでいうと、</p>

<p><strong>Xcode の Playground みたいなやつ + Markdown</strong></p>

<p>まだ意味わかんないですね？</p>

<p>こういうことです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_01.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_02.gif" alt="" /></p>

<ul>
<li>Markdown でドキュメントが書ける(このツール自体はリッチなエディタである)</li>
<li>```csharp〜``` で囲まれたコードブロックは、そのまま iOSシミュレータなどでインタラクティブに、Instant に実行できる。</li>
</ul>


<p>上記の Workbook の実ファイルは、これ↓です。</p>

<ul>
<li><a href="https://gist.github.com/amay077/793b5df4aad0098ffe6d9c12a491ee9a">Xamarin Workbooks を使ってみるテスト。 HowToUseMapKit.workbook で保存して Xamarin Inspector で File->Open してね。</a></li>
</ul>


<p>みてわかる通りまんま Markdown ですね。</p>

<h2>Let&rsquo;s try!</h2>

<p>しかも iOS だけじゃなく、Android, Mac, Windows(WPF) に全対応！
Mac でも Windows でも試せるみたいです。</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/workbooks/">Xamarin Workbooks &ndash; Xamarin</a></li>
</ul>


<p>スタンドアロンなアプリとして実行可能なようなので、サクッと使ってみよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収された結果]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/"/>
    <updated>2016-04-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/4aa25db9509216cf5bf0">Xamarin が Microsoft に買収されたので、今後を勝手に予想</a> の答え合わせなんですが…</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/xamarin-for-all/">Xamarin for Everyone | Xamarin Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/ms-xamarin">【速報】Xamarin のこれからについて！ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p><strong>Xamarin は無料ですべての Visual Studio に同梱されることになりました！</strong></p>

<p><strong>Mac では Xamarin Studio が無料で使えるようになりました！！</strong> <a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#%E8%BF%BD%E8%A8%98-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0">※注</a></p>

<p>というか、 <strong>Xamarin のコアライブラリがオープンソースになりました！！！</strong></p>

<p>今日も仕事が手につきませんね！</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎◎◎</h2>

<p>期待以上でしたね。
プロダクトとしては無償になります。
すべての機能が制約なしに使えます。
ソースコードが MIT Lisence なオープンソースになります。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → ◎</h2>

<blockquote><p>OSS として公開、のような可能性があるなら嬉しいかも。</p></blockquote>

<p>これ当たりましたね。Xamarin.Mac の人もこれで一安心。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎◎◎</h2>

<p>これも上2つど同様にオープンソースに。
正直しばらくはプロプラエタリでいくかなーと思ってたので、完全に期待以上でした。
UIデザイナーは・・・Evolve？</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ◎</h2>

<p>これも無償化。ここのソースコードはOSSなのかな？ → OSSにはならないようです（もちろん元々OSSであるMonoDevelop以外のXamarin固有のプラグインのこと） &ndash; <a href="https://www.xamarin.com/faq#xpq7">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a>
とりあえずMacでの開発者には嬉しい。</p>

<p>そして、ありがとう、<a href="https://www.xamarin.com/faq#xpq6">さよなら Xamarin Studio for Windows</a></p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ？</h2>

<p>まあ、消える流れですよね。。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎◎</h2>

<p>Visual Studio Team Services に同梱されるとのことです。
<a href="https://www.visualstudio.com/ja-jp/products/visual-studio-team-services-pricing-vs.aspx">その価格</a> を見ると、今までよりグッと使いやすくなりました。</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → ◎◎</h2>

<blockquote><p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。</p></blockquote>

<p>これハズレましたね。</p>

<p><a href="http://hockeyapp.net/features/">HockeyApp</a> というサービスに統合されるとのことです。</p>

<p>HockeyApp って知らなかったのですが、ログ収集・解析の他に、DeployGate のような配布機能も持っているみたいですね。これは嬉しい。</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ？</h2>

<p>Build2016 では予想通り全く触れられませんでした。さて未来は？</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → ？</h3>

<p>Build2016 では Windows上で動く iOS Simulator のデモを行っていました。</p>

<p>Miguel de Icaza曰く</p>

<blockquote><p>&ldquo;Have touch and no need to turn to your Mac&rdquo;</p></blockquote>

<p>だそうですよ。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ？</h3>

<p>これは特に情報ありませんでした。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ？</h3>

<p>Windows の Android エミュレータ上でアプリが動いているところで、コードを変更すると、 <strong>即座にアプリに変更が適用される</strong> という謎のデモを行っていました。</p>

<p>Xamarin（もとい Microsoft ）の中の人曰く、</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これだよこれがインスタントプログラミングだよ!</p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/715566438203809792">2016年3月31日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです。（Android Studio さん聴いてる？）</p>

<p>Keynote Day 2 の動画あったのでデモ見られます→ <a href="https://www.youtube.com/watch?v=WC7ijoFzjEg&amp;feature=youtu.be&amp;t=16m">Microsoft Build 2016 | Keynote Day 2 (HD) &ndash; YouTube</a> （このデモの後ほどなくして &ldquo;making Xamarin available at no extra charge.&rdquo; →大歓声、ですね）</p>

<h1>まとめ</h1>

<p>ということで、総じて言えば、皆さんの期待にすべて応える感じで、Xamarin のパワーを活かして開発者を増やしていきたいという意思が表れていましたね。</p>

<p>本当に想像以上でした。
Indie ライセンス買ったばかりだけど、そのお金返せとは言いません、ありがとう Xamarin！！</p>

<h2>【追記】 to 企業の人、無料になると言ったな、あれは Visual Studio Pro 以上を持ってる人のみだ</h2>

<p>Mac しか使ってない企業が自社のアプリを Xamarin を使って開発・配布する場合、 Xamarin Studio を使うことになります。</p>

<p><a href="https://store.xamarin.com/">Store &ndash; Xamarin</a> の Xamarin Studio にある Small teams をクリックすると <a href="https://www.visualstudio.com/support/legal/mt171547">MICROSOFT VISUAL STUDIO COMMUNITY 2015</a> が表示され、以下のような記述があります。</p>

<blockquote><ol>
<li><p>インストールおよび使用に関する権利。</p></li>
<li><p>組織ライセンス。お客様が組織である場合、お客様のユーザーは以下の条件で本ソフトウェアを使用することができます。</p></li>
<li><p>お客様がエンタープライズである場合、お客様の従業員および契約社員は本ソフトウェアを使用して、お客様のアプリケーションを開発またはテストすることはできません。ただし、上記で許可されているオープンソースおよび教育目的の場合を除きます。「エンタープライズ」とは、合計で (a) 250 台を超えるコンピューターがある、もしくは 250 人を超えるユーザーがいる、 または (b) 年間収益が 100 万米ドル (もしくは他の通貨での相当額) を超える、組織およびその関連会社のことです。「関連会社」とは、組織を (過半数所有により) 支配している法人、組織が支配している法人、または組織と共通の支配下にある法人を意味します。</p></li>
</ol>
</blockquote>

<p><del>組織（企業）での利用で、250人を超えるユーザー(=配布スマホ台数ということになるでしょう)が居る場合は、使用できない、と読み取れます。</del>
<a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#comment-2297416c6d83b3593425">コメント</a>で教えていただきました。日本語の <a href="https://www.microsoft.com/ja-jp/dev/products/community.aspx">Visual Studio Community のページ</a> には、ユーザー数に関する記述はないので、この点（配布スマホ台数）に関しては気にしなくてもよさそうです。</p>

<p>また、 Xamarin の FAQ &ndash; <a href="https://www.xamarin.com/faq#xpq8">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a> には、以下の記述があります。</p>

<blockquote><p>Xamarin Studio will follow the Visual Studio pricing rules. There is Xamarin Studio Community Edition available for download on the Mac. You’ll need to be a Visual Studio Enterprise subscriber to unlock Visual Studio Enterprise features in Xamarin Studio.</p></blockquote>

<p>Xamarin Studio は、Visual Studio の価格体系に従う、とのことなので、ライセンス条項も同じだと解釈すれば、 Visual Studio Profesional 以上のライセンスがあれば、 Mac + Xamarin Studio で企業のアプリを開発・配布して問題ないと言えます。
<del>Macオンリー企業には、ツールとしてでなくライセンスとしての Visual Studio Pro 以上が必要ということなるのでしょうか。</del></p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/04/21/123000">【お知らせ】Xamarin ライセンスの移管について &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>によると、 企業向け開発する場合、 Windows ＋ Visual Studio は Visual Studio Pro単品購入で可能、Mac + Xamarin Studio には Visual Studio Pro <strong>MSDN Subscription</strong> が必要とのことです。</p>
]]></content>
  </entry>
  
</feed>
