<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-02-03T02:29:06+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[マカーの人が Xamarin について勘違いしていそうな５つのこと]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin/"/>
    <updated>2014-12-02T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin</id>
    <content type="html"><![CDATA[<p>　今年も始まりました <a href="http://qiita.com/advent-calendar/2014/xamarin">Xamarin Advent Calendar 2014</a> 。
　思えば<a href="http://qiita.com/advent-calendar/2013/xamarin">昨年の Advent Calendar</a> は、5名の方に参加していただいたものの「ほとんど俺」みたいな感じでしたが、今年はたくさん方に登録してもらえてとても嬉しいです。この1年の Xamarin の躍進ぶりを象徴していると思います。</p>

<!--more-->


<p>　そんな Xamarin ですが、Microsoft とのパートナーシップが強力なおかげで、Windows系の開発者には広く知られて（そういう戦略なのは分かります）いますが、普段 Mac で iOS/Android アプリを開発してますみたいな人にはあまりリーチできていないかなあと思います。</p>

<p>　そこで初日の今日は、マカーの人が、勘違い・思い込んでいそうなことをいくつか払拭してみたいと思います。</p>

<h2>Q1. Xamarin を使うには、Visual Studio が必要なんでしょ？</h2>

<p>A1: <strong>必要ありません。</strong> 「Xamarin Studio」という専用の統合開発環境で開発できます。私は Mac + Xamarin Studio で開発していますが、まったく問題を感じていません。
　また、iOSアプリのView部分は、Xcodeと同じ <code>.storyboard</code> ファイルを使用しますが、Xcode を使う必要もありません。Interface Builder と同じ（か部分的にはそれ以上）の機能を持つ <a href="http://developer.xamarin.com/guides/ios/user_interface/designer/">UIデザイナー</a>が、Xamarin Studio には搭載されています。</p>

<h2>Q2. Xamarin を使うには、Windows が必要なんでしょ？</h2>

<p>A2: <strong>必要ありません。</strong> Mac のみで完結します。むしろ Windows だけでは iOSアプリのビルドができないので、<a href="http://developer.xamarin.com/guides/ios/getting_started/installation/windows/introduction_to_xamarin_ios_for_visual_studio/">Mac にリモート接続</a>する必要があり、これがしばしばトラブルになります。（主にデモでｗ
　Microsoft がアピールするとどうしても Windows+Visual Studioの説明になってしまいますが、それはまやかしです（言い切った！</p>

<h2>Q3. Xamarin社って、Microsoft の子分みたいなもんでしょ？</h2>

<p>A3: Xamarin社は独立した企業であり、Microsoftとは対等な立場です（と私は思っています）。「Microsoft に買収されればいいのに」という声をよく聞きますが、私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。Microsoftにとってはモバイル開発者にリーチする重要なピースであり、Xamarin社としても他にないマーケットです。
 また、今年の Xamarin の大イベント <a href="https://evolve.xamarin.com/">Evolve2014</a> には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。
あ、最近の <a href="http://www.publickey1.jp/blog/14/jitnet_core_rutimenet_framework.html">.NETのオープン化</a> の流れは、Xamarin の CTO であり Monoプロジェクトの生みの親であるスーパーハッカー、<a href="https://twitter.com/migueldeicaza">ミゲル・デ・イカザ</a>氏が少なからず関係していると思っています。</p>

<h2>Q4. C# 覚えるのしんどい</h2>

<p>A4. <strong>あなたはあの Objective-C を覚えたのでしょう？</strong></p>

<h2>Q5. Swift の方が C# よりイケてるじゃん？</h2>

<p>A5. 後発である Swift がイケてるのは誰もが認めるところでしょう（かつて Java に対する C# がそうであったように）「Swift は関数型言語だ」という意見には、Xamarin は F# を提案します。<a href="http://blog.xamarin.com/introduction-to-f-with-xamarin/">Xamarinには F# の MVP（勝手に”数学ガール”だと思っている）</a>も居ます(←訂正:Xamarinの人じゃなかったです)し、日本でも <a href="http://www.slideshare.net/kusokuzeshiki/xamarinmvvm-crossf">F#+Xamarin でアプリ開発されている型</a>も居らっしゃいます。</p>

<h1>まとめ</h1>

<p>　ちょっと宗教論争っぽくなりかけたので、ここまでにしておきます。強く主張したいのは、モバイルアプリ開発者なら iOS だけ、Android だけ知っていても良いアプリは作れないでしょう。両方のプラットフォーム、開発言語、哲学を理解する必要があります。 <strong>Xamarin だから Swift を覚えなくていいという事はありません。</strong>
　
　でも、同じ（少なくとも同じような機能をもった）アプリの同じロジックを、異なる言語でそれぞれ書いて、その後数年保守し続ける現状は、本当に最適なのでしょうか？同じコード、あるいは同じバイナリが iOS/Android で動作すれば、保守費用は半分です（SIer みたいな言い方だｗ）。</p>

<p>　「共通にできる選択肢、あるいはプラットフォームの文化にあわせて別々にできる選択肢」を自然な形で提供するのが Xamarin、 Java も Swift も C# も覚えて C# で D.R.Y するのが Xamarin です。</p>

<p>　最後に宣伝ですが、 <strong>Build INSIDER</strong> というWebサイトで「Xamarin逆引きTips」という連載をしています。</p>

<ul>
<li><a href="http://www.buildinsider.net/mobile/xamarintips">Xamarin逆引きTips &ndash; Build Insider</a></li>
</ul>


<p>　これは、.NET Framework は今まであまり使った事がない iOS/Android アプリ開発者をターゲットにしていて、説明もほぼ全てが Mac+Xamarin Studio を使って書いています。興味持ったら読んでもらえると嬉しいです。</p>

<p>　本日まったく登場しなかった Visual Studio や Windows Phone などの話は、明日以降登場すると思いますので、お楽しみに！それでは初日はこの辺で。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms をガチで使うときのプロジェクト構成案]]></title>
    <link href="http://blog.amay077.net/blog/2014/11/14/project-design-using-xamarin-forms/"/>
    <updated>2014-11-14T19:34:02+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/11/14/project-design-using-xamarin-forms</id>
    <content type="html"><![CDATA[<p>　<a href="http://xamarin.com/forms">Xamarin.Forms</a>（以下 XF とします）を本格的に開発に導入してみようと思ってるんだけど、その時のプロジェクト(アセンブリ)構成はこんな感じかな、というのを考えてみた。</p>

<!--more-->


<h2>コンセプト</h2>

<ul>
<li>XF を使う理由は、Viewのワンソース化よりも <em>DataBinding機構が使えること</em></li>
<li>いざという時逃げられるように XF への依存を最小限にする</li>
<li>iOS/Android 対応アプリ開発のこと、他は知らん</li>
<li>MVVM で PCL で、PCL のところを最大化する</li>
</ul>


<h2>プロジェクト構成図</h2>

<p>　角丸四角形がプロジェクトを、矢印は依存を示す。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/project_design_using_xamarin_forms_01.png" alt="" /></p>

<p>左から説明。</p>

<h3>XF.Android, XF.iOS, XF.Core</h3>

<p>　Xamarin.Forms ソリューションを作成するとテンプレで作られるプロジェクト群。
　XF.Core でプラットフォームに依存しないView（ボタンとか）を、XF.Android/XF.iOS でプラットフォーム固有のView（スライドメニューとかNotificationなど）を提供する。
　これらは BindableProperty を介して ViewModel とデータバインディングする。
　XF は他に、ServiceLocator や MessageCenter を提供するが、それらは使用しない（ロックインを防ぐため）
　結局この案では、「XF=View層のみ」となる。</p>

<h3>App.Core</h3>

<p>　アプリのView以外の共通部分のプロジェクト。ViewModel と Model を含む。
　ViewModel から View へシグナルを送るために &ldquo;XFではない&rdquo; Messengerを使う。（MvvmLight とか Prism とかから引っこ抜いてくればいいかな？）
　Model にはビジネスロジックのみを記述し、通信処理やデータI/Oなどのプラットフォーム共通なAPIはModelから直接使い、プラットフォーム固有の機能は、ServiceInterface を使う。
　ServiceInteface は、ServiceLocator によって App.Android/iOS から実体が Inject される。ServiceLocator は &ldquo;XFではない"…以下略
　Rx を使うので、たぶん Model のメソッドの返り値は全部 IObservable<T> になります。</p>

<h3>App.Android, App.iOS</h3>

<p>　プラットフォーム固有のAPI層。例えば GPS とか、アプリ連携とか、アイテム課金とか。ServiceInterface に定義されている Interface を実装するところ。</p>

<h2>懸案</h2>

<ul>
<li>PUSH通知受信とか、本来は Platform Specific APIs で担当したいが、プラットフォームの都合で、View で受信しなければならない機能の落としどころ。</li>
<li>App.core をもっと分割した方がよい「ViewModelからAPI呼ばないよね？」とか「App.AndroidからModelにアクセスできるのがイヤ」とかを厳格に制限しようと思ったら分割した方が良さそう。</li>
<li>Model から左側を全部 IObservable<T> 化しようと思っているが、Callback→Observable変換をModelでやるか、API層でやるか。"ビジネス"ロジックではないので、右側かな。</li>
<li>XF.Core にどれだけ詰め込むか。画面レイアウトもXFでできるだけ頑張る、画面遷移フレームワークもXFで用意する、か？Sketches がどこまで活用できるか？</li>
</ul>


<p>さて、どんなもんでしょ？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「チェックAがONならば、項目Bは入力必須とする」という Validation を RxJava + RxAndroid でやる]]></title>
    <link href="http://blog.amay077.net/blog/2014/11/10/complex-validation-with-rxjava-and-rxandroid/"/>
    <updated>2014-11-10T01:32:20+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/11/10/complex-validation-with-rxjava-and-rxandroid</id>
    <content type="html"><![CDATA[<p>　例えばショッピングサイトとかの発送先指定のフォーム『登録されている住所とは違う住所に送りたい時、「別の住所に送る」をチェックする、すると「住所2」が必須入力となり、入力するまで次へ進めない』的なちょっと込み入ったValidationをReactive ExtensionsのJava版、<a href="https://github.com/ReactiveX/RxJava">RxJava</a>と<a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a>でやってみました。</p>

<!--more-->


<h1>動作イメージ</h1>

<p>　まずいきなり動作結果から。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/complex_validation_with_rxjava_and_rxandroid.gif" alt="" /></p>

<ul>
<li>住所1は入力必須。</li>
<li>住所2は「住所2へ配送する」がチェックされている場合のみ、入力必須。</li>
<li>必須項目が入力されていない場合はボタンを押せない</li>
</ul>


<p>こんな仕様です。</p>

<h1>実装</h1>

<p>```java
@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_my);

// 「注文を確定する」ボタン
final Button buttonSubmit = (Button)findViewById(R.id.buttonSubmit);

// チェックボックスのON/OFFをObservable化
final Observable&lt;Boolean&gt; useSecondaryAddress =
        ViewObservable.input((CheckBox) findViewById(R.id.checkUseSecondary), true)
        .map(new Func1&lt;OnCheckedChangeEvent, Boolean&gt;() {
            @Override
            public Boolean call(OnCheckedChangeEvent onCheckedChangeEvent) {
                return onCheckedChangeEvent.value;
            }
        });

// 住所1をObservable化
final Observable&lt;OnTextChangeEvent&gt; primaryAddress =
        ViewObservable.text((EditText) findViewById(R.id.editPrimaryAddress), true);
// 住所2をObservable化
final Observable&lt;OnTextChangeEvent&gt; secondaryAddress =
        ViewObservable.text((EditText) findViewById(R.id.editSecondaryAddress), true);

// チェックボックスと住所2の必須条件をObservable化
final Observable&lt;Boolean&gt; secondaryIsValid = 
    Observable.combineLatest(useSecondaryAddress, secondaryAddress,
        new Func2&lt;Boolean, OnTextChangeEvent, Boolean&gt;() {
            @Override
            public Boolean call(Boolean useSecondary, OnTextChangeEvent secondaryAddress) {
                if (!useSecondary) {
                    return true;
                }

                return !TextUtils.isEmpty(secondaryAddress.text);
            }
        });


// 全部まとめると、
//  住所1は入力必須、
//  住所2はチェックボックスがONの時だけ入力必須
//  必須条件を満たしていたらtrueを流す
final Observable&lt;Boolean&gt; isValidAll = Observable.combineLatest(primaryAddress, secondaryIsValid,
        new Func2&lt;OnTextChangeEvent, Boolean, Boolean&gt;() {
            @Override
            public Boolean call(OnTextChangeEvent primaryAddress, Boolean isValidSecondary) {
                if (!isValidSecondary) {
                    return false;
                }

                return !TextUtils.isEmpty(primaryAddress.text);
            }
        });


// 購読、監視
isValidAll.subscribe(new Observer&lt;Boolean&gt;() {
    @Override
    public void onNext(final Boolean isValid) {
        // 必須条件を満たしていたら「注文を確定する」を有効にする
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                buttonSubmit.setEnabled(isValid);
            }
        });
    }

    @Override
    public void onCompleted() {
    }

    @Override
    public void onError(Throwable e) {
    }
});
</code></pre>

<p>}
```</p>

<p>　<code>ViewObservable.xxx</code> で、UI要素をObservable化します。これはRxAndroidの機能。これでテキストの変更とか、チェックボックスの変更のたびに、<code>OnNext</code>が発生するようになります。</p>

<p>　Validationでは、RxJavaの機能である <code>Observable.combineLatest</code>がキモで、こいつに2つのObservableを渡してやると、その片方が値が変化した時に、<code>T3 call(T1 a, T2 b)</code> が呼ばれます。T1、T2 は渡すObservableの型、T3は後続へ流す型で、Validationなので<code>Boolean</code>です。
上記 <code>secondaryIsValid</code> の実装では、「住所2に配送する」のチェックボックスと「住所2」のテキストボックスの2つのObservableを渡していて、</p>

<ul>
<li>「住所2に配送する」がOFFなら <code>true</code> を返す</li>
<li>「住所2に配送する」がONで、且つ「住所2」が空でなければ <code>true</code> を返す</li>
</ul>


<p>としています。</p>

<p>　次に、<code>isValidAll</code> の実装では、「住所1」と <code>secondaryIsValid</code> を渡していて、</p>

<ul>
<li><code>secondaryIsValid</code> が <code>false</code> なら <code>false</code> を返す</li>
<li><code>secondaryIsValid</code> が <code>true</code> で、且つ「住所1」が空でなければ <code>true</code> を返す</li>
</ul>


<p>という実装です。</p>

<p>　んで、こいつ(<code>isValidAll</code>)を購読(<code>subscribe</code>)すると、<code>onNext</code> にValidationの結果が通知されるので、ボタンの<code>Enabled</code>を切り替えます。</p>

<p>　conbimeLatest は、本家Rxなら obsA.CombineLatest(obsB, (tA, tB) => tX).CombineLatest(obsC, (tX, tC) => tY)&hellip; とチェインして書けるのですが、RxJava の combineLatest はなぜか static メソッドしかなくてチェインできません、残念。</p>

<h1>まとめ</h1>

<p>　このレベルだと、すべてのUI要素に変更通知を仕込んで共通な関数を呼ぶ、的な実装で問題ないですが、要素や条件が増えてくると大変です。</p>

<p>　Observable と combineLatest を使うと、制約の一部を(Observableに)部分化できて、それらを組み合わせるのも自由自在(Observableだから)。</p>

<p>Javaなのでかなり長ったらしくて読みづらいコードになってしまいました。</p>

<p><strong><a href="http://xamarin.com/">Xamarin.Android</a> + <a href="https://rx.codeplex.com/">本家Reactive Extensions</a> + <a href="https://reactiveproperty.codeplex.com/">ReactiveProporty</a> なら、相当スッキリするんだけどなあー</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveX と MVVM と DataBinding の関係について図にしてみた]]></title>
    <link href="http://blog.amay077.net/blog/2014/10/30/reactivex-mvvm-databindings-relations/"/>
    <updated>2014-10-30T01:17:39+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/10/30/reactivex-mvvm-databindings-relations</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://connpass.com/event/8680/">ReactiveCocoa Tokyo #rac_tokyo &ndash; connpass</a></li>
<li><a href="http://connpass.com/event/9061/">RxJava Night #rxjnight &ndash; connpass</a></li>
<li><a href="http://mozaic.fm/post/100741841543/10-node-js-sideshow">#10 node.js sideshow | mozaic.fm</a></li>
</ul>


<!--more-->


<p>などなどをいろいろ眺めておりまして（東京うらやましい）、Reactive Extensions とか MVVM とかいろいろ熱い！楽しい！と思っているわけですが、いろいろなライブラリがあって、それらのカバーする範囲がいまいち明確になってない気がしたので、自分なりに整理してみました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/reactive_mvvm_databindings_relations_01.png" alt="" /></p>

<p>MVVM っていうと、Messenger とか DIコンテナ的なものとかもあるわけですが、主に DataBinding と Rx の違いにフィーチャーしたかったので除外しました。</p>

<p>　DataBinding は、<a href="http://www.atmarkit.co.jp/ait/articles/1008/03/news097_3.html">DependencyProperty</a> や <a href="http://blog.falafel.com/learning-xamarin-custom-renderers-in-xamarin-forms/">BindableProperty</a> みたいなものがあるかどうかという感じで考えていて、「XAMLとかのマークアップでバインディング指定できなければならない」という考えではないです。</p>

<p>　View, DataBinding, ViewModel, ReactiveX の各ブロックは基本的にはどの組み合わせでもよくて（特に ReactiveX は他とは別の世界のものなので）、しかし中には ReactiveProperty のように ReactiveX に依存しつつ ViewModel の機能を提供するものがあったり、ReactiveCocoa のように「全部入り」のものがあったりします。また、View と ViewModel を繋ぐためにはなんらかの DataBinding が必要です。</p>

<p>という理解なんですが、あってますかね？</p>

<p>　私は Xamarin 推しの人なので、 <strong>Xamarin.Forms + ReactiveProperty が、MVVM+Rx のパワーをフル活用できて、しかも iOS/Android で大部分のコードが共有できるという最強の組み合わせなんですよ！</strong> というのを言いたいわけです。</p>

<h2>Links</h2>

<ul>
<li>Xamarin.Forms &ndash; <a href="http://xamarin.com/forms">Build a Native Android UI &amp; iOS UI with Xamarin.Forms &ndash; Xamarin</a></li>
<li>Prism &ndash; <a href="http://compositewpf.codeplex.com/releases/view/117297">patterns &amp; practices: Prism &ndash; Download: Prism 5.0 for .NET 4.5</a></li>
<li>MVVM Light Toolkit &ndash; <a href="https://mvvmlight.codeplex.com/">MVVM Light Toolkit &ndash; Home</a></li>
<li>Reactive Extensions &ndash; <a href="https://rx.codeplex.com/">Rx (Reactive Extensions) &ndash; Home</a></li>
<li>ReactiveProperty &ndash; <a href="https://reactiveproperty.codeplex.com/">ReactiveProperty &ndash; MVVM Extensions for Rx &ndash; Home</a></li>
<li>ReactiveUI &ndash; <a href="https://github.com/reactiveui/reactiveui">reactiveui/ReactiveUI</a></li>
<li>MvvmCross &ndash; <a href="https://github.com/MvvmCross/MvvmCross">MvvmCross/MvvmCross</a></li>
<li>RxJava &ndash; <a href="https://github.com/ReactiveX/RxJava">ReactiveX/RxJava</a></li>
<li>RxAndroid &ndash; <a href="https://github.com/ReactiveX/RxAndroid">ReactiveX/RxAndroid</a></li>
<li>android-binding &ndash; <a href="https://github.com/gueei/AndroidBinding">gueei/AndroidBinding</a></li>
<li>ReactiveCocoa &ndash; <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa/ReactiveCocoa</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ボタンを重ねた時の ZOrder に関する Tips]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/23/views-zorder/"/>
    <updated>2014-09-23T00:20:38+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/23/views-zorder</id>
    <content type="html"><![CDATA[<p>Android 開発でボタンを意図的に重ねたい時ってあんまりないんですけど、業務アプリなんか作ってますとたまにありまして。</p>

<!--more-->


<p>具体的には、</p>

<ul>
<li><a href="http://coliss.com/articles/build-websites/operation/css/10-css-breadcrumbs.html">デザインの勉強にもなる、CSSで実装するパンくずのまとめ | コリス</a></li>
</ul>


<p>みたいなパンくずリストを作りたい時。変な形のボタンを作るのは骨が折れるので、ボタンを重ねて、左側の方が手前に表示されるようにしたいわけです。(なぜそうしたいかはたぶん伝わらないので割愛)</p>

<p>つまりはボタンを重ねた時の ZOrder（Z-index）を制御したいわけです。</p>

<p>でいろいろトライ。</p>

<h2>LinearLayout の場合</h2>

<p>LinearLayout で横並びにする場合。</p>

<p>```xml main.xml
&lt;LinearLayout</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="30dp"
android:orientation="horizontal"&gt;

&lt;Button
    android:background="#FF0000"
    android:text="AAA"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
&lt;Button
    android:background="#00FF00"
    android:text="BBB"
    android:layout_marginLeft="-10dp"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
&lt;Button
    android:background="#0000FF"
    android:text="CCC"
    android:layout_marginLeft="-10dp"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<h3>結果</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_01.png" alt="" /></p>

<p>だめだー。
LinearLayout の Zorder は、並び順と連動してしまうので、右（若しくは下）ほど手前になってしまいます。</p>

<p>ちなみに、「<code>view.bringToFront()</code> を叩けばいいんじゃね？」と思い、<code>buttonA.bringToFront()</code> を実行すると、</p>

<p>じゃん↓</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_02.png" alt="" /></p>

<p>見事に AAA が右端にいったｗ</p>

<h2>RelativeLayout の場合（その１）</h2>

<p>普通に RelativeLayout で、「BはAの右、CはBの右」と制約をつけてみます。</p>

<p>```xml main.xml
&lt;RelativeLayout</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="30dp"&gt;

&lt;Button
    android:id="@+id/buttonA"
    android:background="#FF0000"
    android:text="AAA"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
&lt;Button
    android:id="@+id/buttonB"
    android:layout_toRightOf="@+id/buttonA"
    android:background="#00FF00"
    android:text="BBB"
    android:layout_marginLeft="-10dp"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
&lt;Button
    android:id="@+id/buttonC"
    android:layout_toRightOf="@+id/buttonB"
    android:background="#0000FF"
    android:text="CCC"
    android:layout_marginLeft="-10dp"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<h3>結果</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_03.png" alt="" /></p>

<p>んんー、まだダメかー。</p>

<h2>RelativeLayout の場合（その２）</h2>

<p>その１の制約はそのままに、XML上での並び順を C、B、A に変えてみましょう。</p>

<p>```xml main.xml
&lt;RelativeLayout</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="30dp"&gt;

&lt;Button
    android:id="@+id/buttonC"
    android:layout_toRightOf="@+id/buttonB"
    android:background="#0000FF"
    android:text="CCC"
    android:layout_marginLeft="-10dp"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
&lt;Button
    android:id="@+id/buttonB"
    android:layout_toRightOf="@+id/buttonA"
    android:background="#00FF00"
    android:text="BBB"
    android:layout_marginLeft="-10dp"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
&lt;Button
    android:id="@+id/buttonA"
    android:background="#FF0000"
    android:text="AAA"
    android:layout_width="50dp"
    android:layout_height="match_parent" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<h3>結果</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/zorder_test_04.png" alt="" /></p>

<p>よしっ！期待した表示になりました。</p>

<h2>まとめ</h2>

<p>　総合しますと、ZOrder は、LinearLayout でも RelativeLayout でも、XMLでは後で記述したものが手前になります。</p>

<p>　LinearLayout は、上から下、または左から右に並べるしかできないので、それに逆らうような ZOrder は付けられません。</p>

<p> RelativeLayout は、制約に基づき描画されるので、XMLの記述順を工夫することで ZOrder をある程度コントロールできます。</p>

<p>以上、誰得Tips でした。</p>

<p>冒頭のようなパンくずリストをAndroidで作る方法教えてください。。。(FragmentBreadCrumbs もパンくずっぽくないじゃないですかぁ)</p>
]]></content>
  </entry>
  
</feed>
