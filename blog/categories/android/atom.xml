<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2014-09-01T21:44:21+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[システムの起動時にアプリを起動する]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/01/run-application-on-system-startup/"/>
    <updated>2014-09-01T21:41:43+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/01/run-application-on-system-startup</id>
    <content type="html"><![CDATA[<p>ググれば出てくるんだけど、情報が古いので書きなおしてみた。</p>

<!--more-->


<h2>全体</h2>

<p>Android OS の起動が終わると <code>android.intent.action.BOOT_COMPLETED</code> がブロードキャストされるので、それを捕まえて任意の処理をする。</p>

<h2>起動時に呼び出されるコード</h2>

<p>ブロードキャストを捕まえたときに呼ばれるコード。<code>MyActivity</code> を開始している。BroadcastReceiver から Activity を開始するには <code>Intent.FLAG_ACTIVITY_NEW_TASK</code> が必要なので注意。</p>

<p>```java StartupReceiver.java
public class StartupReceiver extends BroadcastReceiver {</p>

<pre><code>private static final String TAG = "StartupReceiver";

@Override
public void onReceive(Context context, Intent intent) {
    Log.d(TAG, "onReceive:" + MyApplication.data);
    Intent intentActivity = new Intent(context, MyActivity.class);
    intentActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intentActivity);
}
</code></pre>

<p>}
```</p>

<h2>AndroidManifest.xml で受信登録</h2>

<p><code>StartupReceiver</code> を登録する。
忘れちゃいけないのが <code>android.permission.RECEIVE_BOOT_COMPLETED</code> による権限の設定。これがないと受信できない。</p>

<p>```xml AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.amay077.reboottest" &gt;

&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" /&gt;

&lt;application
    android:allowBackup="true"
    android:icon="@drawable/ic_launcher"
    android:label="@string/app_name"
    android:theme="@style/AppTheme" &gt;
    &lt;activity
        android:name=".MyActivity"
        android:label="@string/app_name" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MAIN" /&gt;
            &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
        &lt;/intent-filter&gt;

    &lt;/activity&gt;
    &lt;receiver android:name=".StartupReceiver" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;
            &lt;category android:name="android.intent.category.DEFAULT" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;
&lt;/application&gt;
</code></pre>

<p></manifest>
```</p>

<h2>端末を再起動して試す</h2>

<ul>
<li><a href="http://9ensan.com/blog/smartphone/android/android-boot_completed-adb-shell-am-broadcast/">AndroidのBOOT_COMPLETEDの受信とテスト | 9ensanのLifeHack</a></li>
</ul>


<p>で知った <code>adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</code> は GenyMotion でも使えました。
<code>RECEIVE_BOOT_COMPLETED</code> の位置によっては、テストが成功したりしなかったりだと書かれておられますが、上記の <code>AndroidManifest.xml</code> では、テストも実際の再起動も成功しました。</p>

<h2>参考</h2>

<ul>
<li><a href="http://techbooster.jpn.org/andriod/application/1100/">システムの起動時にサービスを実行する « Tech Booster</a>(2010年なのでだいぶ古い、要注意)</li>
<li><a href="http://9ensan.com/blog/smartphone/android/android-boot_completed-adb-shell-am-broadcast/">AndroidのBOOT_COMPLETEDの受信とテスト | 9ensanのLifeHack</a>(2012年、まだまだ古い)</li>
<li><a href="http://stackoverflow.com/questions/20441308/boot-completed-not-working-android/20441442#20441442">broadcastreceiver &ndash; BOOT_COMPLETED not working Android &ndash; Stack Overflow</a>(2013年、これなら何とか)</li>
<li><a href="https://groups.google.com/forum/#!topic/android-group-japan/D1EKohMIji0">BOOT_COMPLETEDが受信出来ない &ndash; Google グループ</a> SDカードにインストールされるとこのブロードキャストを受信できないそうです</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android が使用する debug.keystore の在処]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use/"/>
    <updated>2014-08-28T17:42:04+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use</id>
    <content type="html"><![CDATA[<p>Google Maps などを使用する時、開発中ならば <code>debug.keystore</code> のフィンガープリント(SHA1)を取得する必要がありますが、 debug.keystore がどこにあるのか分からなくてハマった。</p>

<!--more-->


<h2>結論</h2>

<p>から書いておくと</p>

<ul>
<li><a href="http://developer.xamarin.com/guides/android/platform_features/maps_and_location/maps/obtaining_a_google_maps_api_key/">Obtaining a Google Maps API Key | Xamarin</a></li>
</ul>


<p>に書いてある通りで、</p>

<ul>
<li>Windows &ndash; <code>C:¥Users¥[USERNAME]¥AppData¥Local¥Xamarin¥Mono for Android¥debug.keystore</code></li>
<li>OSX &ndash; <code>/Users/[USERNAME]/.local/share/Xamarin/Mono for Android/debug.keystore</code></li>
</ul>


<p>がそれぞれ使われる。</p>

<h2>なぜハマったか？</h2>

<h3>Eclipse と同じだと思ってた</h3>

<p>Java での Android 開発時に設定したディレクトリを使ってくれると思い込んでた。けどよく考えればあれは Android SDK ではなく Eclipse 固有の設定だったのよね。</p>

<h3>ドキュメントが古いと思ってた</h3>

<p>上記で紹介した「Obtaining a Google Maps…」の記事が古いと思ってた。なぜならディレクトリ名に <code>Mono for Android</code> が含まれていて、これは Xamarin.Android の旧製品名だったから。</p>

<h3>Spotlight検索でヒットしなかった</h3>

<p>Mac を使っているのだけど、Spotlight検索（所謂PC内検索）で <code>debug.keystore</code> がヒットしたのがいつもJava-Android開発で使ってる１つだけだったので、.local の中にあるとは気付けず。。。隠しディレクトリだからヒットしないよね。</p>

<p>こんなことでハマるのは自分くらいだろうけど、メモしときます。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cardboard を作ってきました]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/16/make-google-cardboard/"/>
    <updated>2014-08-16T23:42:38+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/16/make-google-cardboard</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://connpass.com/event/7735/">日本Androidの会浜松支部 第40回ミーティング #jaghama &ndash; connpass</a></li>
</ul>


<p>で Google Cardboard のクローンを作りました。</p>

<!--more-->


<p>段ボールやレンズ、磁石などの材料は主催の方が用意してくださった( <a href="https://twitter.com/macha1972">@macha1972</a> さんありがとうございます )ので、カッターとガムテープと筆記具くらいを持参するだけですみました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-01.jpg" alt="" /></p>

<p><a href="https://developers.google.com/cardboard/">公式サイト</a> からダウンロードできる型紙を印刷して、段ボールに貼り付け、段ボールを切っていきます。</p>

<p>段ボールが意外と厚くて切るのに苦労しました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-02.jpg" alt="" /></p>

<p>ここまでくるのに約3時間…（-_&ndash;;）
早い人は2時間くらいで終わってたかな・・・。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-03.jpg" alt="" /></p>

<p>切っちゃえば組み立ては簡単(先駆者さんに聞きながらできたからw)
「バター風味」がいい感じに露出しているのは偶然だw</p>

<p>使用した端末は公式に対応しているとされる Galaxy Nexus だったので稼働に特に問題はありません(磁石のスイッチが反応しづらいかなという程度)でしたが、端末の磁場センサーの位置によっては、スイッチの位置を反対側に移動させる必要があるみたいです。(Xperia の人はそうしてました)</p>

<p>さっそく <a href="https://play.google.com/store/apps/details?id=com.google.samples.apps.cardboarddemo&amp;hl=ja">Cardboardアプリ</a> で体験…これはスゴイ！
以前に Ocufes豊橋 で Oculas Lift は体験済みだったのですが、それに匹敵する没入感です。</p>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.divegames.divecitycoaster&amp;hl=ja">Dive City Rollercoaster</a> というアプリが面白いですね。</li>
</ul>


<p>帰宅後、さっそく子供らも体験、しばらくの間ハマってました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-04.jpg" alt="" /></p>

<p>子供の夏休みの自由工作にでもできるかなーと思いますが、大人で3時間かかるのは結構つらいかも。</p>

<p>カッターで段ボールを切るのに力入れすぎて指にマメできたし…。</p>

<p>ワークショップ中のその他の写真は</p>

<ul>
<li><a href="https://www.facebook.com/media/set/?set=o.282944361773276&amp;type=3">日本Androidの会 浜松支部の写真・動画 &ndash; Facebookグループ</a></li>
</ul>


<p>からどうぞ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ドラッグ＆ドロップで並び替えできる ListView]]></title>
    <link href="http://blog.amay077.net/blog/2014/07/01/listview-supports-swapitem-by-dragdrop/"/>
    <updated>2014-07-01T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/07/01/listview-supports-swapitem-by-dragdrop</id>
    <content type="html"><![CDATA[<p>最近こういうUI見たことないなあ、と思いながらも、実装の必要があったので、いろいろ先駆者さま達の足跡を辿り、最終的に、</p>

<!--more-->


<ul>
<li><a href="http://shogogg.hatenablog.jp/entry/20110118/1295326773">ドラッグ＆ドロップで並び替えできる ListView &ndash; パンダのメモ帳</a></li>
</ul>


<p>が自分のやりたい事に最も近く、割と新し（といっても３年前…）かったので参考にしました。</p>

<p>ただ、こちらの実装だと、ListView の上にマージンがあるとドラッグ中のアイテムの描画がすこしバグってたので、修正して使いました。</p>

<p>こんな感じ↓です。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/drag_and_drop_listview_01.gif" alt="" /> capture by <a href="http://www.cockos.com/licecap/">LICEcap</a></p>

<p>修正後のソースです。</p>

<p>修正箇所は２つ</p>

<ol>
<li><code>mActionDownEvent</code> を参照の保持でなく、 <code>obtain</code> してクローンを保持するように（＋ <code>recycle</code> で破棄）。<code>onTouchEvent</code> の 引数 <code>event</code> は、内部で使いまわされるようで、参照のコピーでは、値が勝手に変わっていました。</li>
<li><code>updateLayoutParams</code> はスクリーン座標を前提に。元は <code>listView.getTop() + event.getY()</code> でしたが、これではステータスバーとActionBarの高さが考慮されないようだったので、<code>event.getRawY()</code> を使うようにしました。</li>
</ol>


<p>```java SortableListView.java
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ImageView;
import android.widget.ListView;</p>

<p>public class SortableListView extends ListView implements</p>

<pre><code>    OnItemLongClickListener {
private static final int SCROLL_SPEED_FAST = 25;
private static final int SCROLL_SPEED_SLOW = 8;
private static final Bitmap.Config DRAG_BITMAP_CONFIG = Bitmap.Config.ARGB_8888;

private boolean mSortable = false;
private boolean mDragging = false;
private DragListener mDragListener = new SimpleDragListener();
private int mBitmapBackgroundColor = Color.argb(128, 0xFF, 0xFF, 0xFF);
private Bitmap mDragBitmap = null;
private ImageView mDragImageView = null;
private WindowManager.LayoutParams mLayoutParams = null;
private MotionEvent mActionDownEvent;
private int mPositionFrom = -1;

/** コンストラクタ */
public SortableListView(Context context) {
    super(context);
    setOnItemLongClickListener(this);
}

/** コンストラクタ */
public SortableListView(Context context, AttributeSet attrs) {
    super(context, attrs);
    setOnItemLongClickListener(this);
}

/** コンストラクタ */
public SortableListView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    setOnItemLongClickListener(this);
}

/** ドラッグイベントリスナの設定 */
public void setDragListener(DragListener listener) {
    mDragListener = listener;
}

/** ソートモードの切替 */
public void setSortable(boolean sortable) {
    this.mSortable = sortable;
}

/** ソート中アイテムの背景色を設定 */
@Override
public void setBackgroundColor(int color) {
    mBitmapBackgroundColor = color;
}

/** ソートモードの設定 */
public boolean getSortable() {
    return mSortable;
}

/** MotionEvent から position を取得する */
private int eventToPosition(MotionEvent event) {
    return pointToPosition((int) event.getX(), (int) event.getY());
}

/** タッチイベント処理 */
@Override
public boolean onTouchEvent(MotionEvent event) {
    if (!mSortable) {
        return super.onTouchEvent(event);
    }
    switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN: {
            storeMotionEvent(event);
            break;
        }
        case MotionEvent.ACTION_MOVE: {
            if (duringDrag(event)) {
                return true;
            }
            break;
        }
        case MotionEvent.ACTION_UP: {
            if (stopDrag(event, true)) {
                return true;
            }
            break;
        }
        case MotionEvent.ACTION_CANCEL:
        case MotionEvent.ACTION_OUTSIDE: {
            if (stopDrag(event, false)) {
                return true;
            }
            break;
        }
    }
    return super.onTouchEvent(event);
}

/** リスト要素長押しイベント処理 */
@Override
public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view,
        int position, long id) {
    return startDrag();
}

/** ACTION_DOWN 時の MotionEvent をプロパティに格納 */
private void storeMotionEvent(MotionEvent event) {
    mActionDownEvent = MotionEvent.obtain(event); // 複製しないと値が勝手に変わる
}

/** ドラッグ開始 */
private boolean startDrag() {
    // イベントから position を取得
    mPositionFrom = eventToPosition(mActionDownEvent);

    // 取得した position が 0未満＝範囲外の場合はドラッグを開始しない
    if (mPositionFrom &lt; 0) {
        return false;
    }
    mDragging = true;

    // View, Canvas, WindowManager の取得・生成
    final View view = getChildByIndex(mPositionFrom);
    final Canvas canvas = new Canvas();
    final WindowManager wm = getWindowManager();

    // ドラッグ対象要素の View を Canvas に描画
    mDragBitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(),
            DRAG_BITMAP_CONFIG);
    canvas.setBitmap(mDragBitmap);
    view.draw(canvas);

    // 前回使用した ImageView が残っている場合は除去（念のため？）
    if (mDragImageView != null) {
        wm.removeView(mDragImageView);
    }

    // ImageView 用の LayoutParams が未設定の場合は設定する
    if (mLayoutParams == null) {
        initLayoutParams();
    }

    // ImageView を生成し WindowManager に addChild する
    mDragImageView = new ImageView(getContext());
    mDragImageView.setBackgroundColor(mBitmapBackgroundColor);
    mDragImageView.setImageBitmap(mDragBitmap);
    wm.addView(mDragImageView, mLayoutParams);

    // ドラッグ開始
    if (mDragListener != null) {
        mPositionFrom = mDragListener.onStartDrag(mPositionFrom);
    }
    return duringDrag(mActionDownEvent);
}

/** ドラッグ処理 */
private boolean duringDrag(MotionEvent event) {
    if (!mDragging || mDragImageView == null) {
        return false;
    }
    final int x = (int) event.getX();
    final int y = (int) event.getY();
    final int height = getHeight();
    final int middle = height / 2;

    // スクロール速度の決定
    final int speed;
    final int fastBound = height / 9;
    final int slowBound = height / 4;
    if (event.getEventTime() - event.getDownTime() &lt; 500) {
        // ドラッグの開始から500ミリ秒の間はスクロールしない
        speed = 0;
    } else if (y &lt; slowBound) {
        speed = y &lt; fastBound ? -SCROLL_SPEED_FAST : -SCROLL_SPEED_SLOW;
    } else if (y &gt; height - slowBound) {
        speed = y &gt; height - fastBound ? SCROLL_SPEED_FAST
                : SCROLL_SPEED_SLOW;
    } else {
        speed = 0;
    }

    // スクロール処理
    if (speed != 0) {
        // 横方向はとりあえず考えない
        int middlePosition = pointToPosition(0, middle);
        if (middlePosition == AdapterView.INVALID_POSITION) {
            middlePosition = pointToPosition(0, middle + getDividerHeight()
                    + 64);
        }
        final View middleView = getChildByIndex(middlePosition);
        if (middleView != null) {
            setSelectionFromTop(middlePosition, middleView.getTop() - speed);
        }
    }

    // ImageView の表示や位置を更新
    if (mDragImageView.getHeight() &lt; 0) {
        mDragImageView.setVisibility(View.INVISIBLE);
    } else {
        mDragImageView.setVisibility(View.VISIBLE);
    }
    updateLayoutParams((int)event.getRawY()); // ここだけスクリーン座標を使う
    getWindowManager().updateViewLayout(mDragImageView, mLayoutParams);
    if (mDragListener != null) {
        mPositionFrom = mDragListener.onDuringDrag(mPositionFrom,
                pointToPosition(x, y));
    }
    return true;
}

/** ドラッグ終了 */
private boolean stopDrag(MotionEvent event, boolean isDrop) {
    if (!mDragging) {
        return false;
    }
    if (isDrop &amp;&amp; mDragListener != null) {
        mDragListener.onStopDrag(mPositionFrom, eventToPosition(event));
    }
    mDragging = false;
    if (mDragImageView != null) {
        getWindowManager().removeView(mDragImageView);
        mDragImageView = null;
        // リサイクルするとたまに死ぬけどタイミング分からない by vvakame
        // mDragBitmap.recycle();
        mDragBitmap = null;

        mActionDownEvent.recycle();
        mActionDownEvent = null;
        return true;
    }
    return false;
}

/** 指定インデックスのView要素を取得する */
private View getChildByIndex(int index) {
    return getChildAt(index - getFirstVisiblePosition());
}

/** WindowManager の取得 */
protected WindowManager getWindowManager() {
    return (WindowManager) getContext().getSystemService(
            Context.WINDOW_SERVICE);
}

/** ImageView 用 LayoutParams の初期化 */
protected void initLayoutParams() {
    mLayoutParams = new WindowManager.LayoutParams();
    mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;
    mLayoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;
    mLayoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;
    mLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
            | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
            | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
            | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
    mLayoutParams.format = PixelFormat.TRANSLUCENT;
    mLayoutParams.windowAnimations = 0;
    mLayoutParams.x = getLeft();
    mLayoutParams.y = getTop();
}

/** ImageView 用 LayoutParams の座標情報を更新 */
protected void updateLayoutParams(int rawY) {
    mLayoutParams.y =  rawY - 32;
}

/** ドラッグイベントリスナーインターフェース */
public interface DragListener {
    /** ドラッグ開始時の処理 */
    public int onStartDrag(int position);

    /** ドラッグ中の処理 */
    public int onDuringDrag(int positionFrom, int positionTo);

    /** ドラッグ終了＝ドロップ時の処理 */
    public boolean onStopDrag(int positionFrom, int positionTo);
}

/** ドラッグイベントリスナー実装 */
public static class SimpleDragListener implements DragListener {
    /** ドラッグ開始時の処理 */
    @Override
    public int onStartDrag(int position) {
        return position;
    }

    /** ドラッグ中の処理 */
    @Override
    public int onDuringDrag(int positionFrom, int positionTo) {
        return positionFrom;
    }

    /** ドラッグ終了＝ドロップ時の処理 */
    @Override
    public boolean onStopDrag(int positionFrom, int positionTo) {
        return positionFrom != positionTo &amp;&amp; positionFrom &gt;= 0
                || positionTo &gt;= 0;
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms、Android での BACK キーの制御]]></title>
    <link href="http://blog.amay077.net/blog/2014/06/17/hooking-back-key-in-xamarin-forms/"/>
    <updated>2014-06-17T01:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/06/17/hooking-back-key-in-xamarin-forms</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/12979585ac3e2dcacacb">Xamarin.Forms でどうにかしたい iOS と Android の違い</a> の「BACKキーの制御」の <strong>現時点(1.1.0.6201)</strong> での回答。</p>

<!--more-->


<p>Android の BACKキーの制御を、Xamarin.Forms ではどう扱えるかを調べた。</p>

<h2>シナリオ</h2>

<p>Xamarin.Forms による画面１(MainPage)、２(SecondPage)があり、MainPage では BACKキーで戻る(=アプリ終了)事ができるが、SecondPage ではBACKキーが効かない、ようにしたい。</p>

<h2>対策</h2>

<p>まず画面１と２はこんな感じ。ボタンを押したら画面２へ遷移するだけ。</p>

<p>```csharp Pages.cs
// 画面１
public class MainPage : ContentPage
{</p>

<pre><code>public MainPage() 
{
    var button = new Button
    {
        Text = "To Second",
        VerticalOptions = LayoutOptions.Center,
    };

    button.Clicked += (sender, e) =&gt; 
    {
        this.Navigation.PushAsync(new SecondPage());
    };

    Content = button;
}
</code></pre>

<p>}</p>

<p>// 画面２
public class SecondPage : ContentPage
{</p>

<pre><code>public SecondPage()
{
    Content = new Label
    {
        Text = "Second"
    };
}
</code></pre>

<p>}
```</p>

<p>ここからが本題。
まず Android側のエントリポイントである <code>MainActivity.cs</code> は以下のように、<code>ContentPage</code> プロパティを設ける。そして <code>OnBackPressed</code> メソッドを override して、MainPage だったら OnBackPressed を親へ伝搬する。</p>

<p>```csharp MainActivity.cs
[Activity(Label = &ldquo;ScrollTest.Android.Android&rdquo;, MainLauncher = true)]
public class MainActivity : AndroidActivity
{</p>

<pre><code>protected override void OnCreate(Bundle bundle)
{
    base.OnCreate(bundle);

    Xamarin.Forms.Forms.Init(this, bundle);

    SetPage(new NavigationPage(new MainPage()));
}

internal Page ContentPage
{
    get;
    set;
}

public override void OnBackPressed()
{
    if (this.ContentPage is MainPage)
    {
        base.OnBackPressed();
    }
}
</code></pre>

<p>}
```</p>

<p>次に、MainActivity.ContentPage への設定を行うコードは以下の通り。
PageRenderer を拡張して ExportRenderer することで、すべての Page にフックをかけ、Page の表示時に MainActivity.ContentPage に設定する。</p>

<p>```csharp MyPageRenderer.cs
using System;
using Xamarin.Forms.Platform.Android;
using Android.App;
using Xamarin.Forms;
using ScrollTest.Android;
using Android.Views;
using Android.Graphics;</p>

<p>[assembly:ExportRenderer(typeof(ContentPage), typeof(MyPageRenderer))]</p>

<p>namespace ScrollTest.Android
{</p>

<pre><code>public class MyPageRenderer : PageRenderer
{
    protected override void OnElementChanged(ElementChangedEventArgs&lt;Xamarin.Forms.Page&gt; e)
    {
        base.OnElementChanged(e);

        // なんとなく不安なので weak にしてみた
        var activity = new WeakReference&lt;MainActivity&gt;(this.Context as MainActivity);

        e.NewElement.Appearing += (_, __) =&gt;
        {
            MainActivity a;
            if (activity.TryGetTarget(out a)) {
                a.ContentPage = e.NewElement;    
            }
        };
    }
}
</code></pre>

<p>}
```</p>

<p>これで、画面１(MainPage)の時だけ BACKキーが効くようにできる。</p>

<h3><code>Appearing</code> イベントが必要なの？</h3>

<p>　Xamarin.Forms の Android実装では、画面遷移の度に <strong>「同じインスタンスの MainActivity」</strong> が使いまわされる、さらに <code>OnElementChanged</code> は、各Pageにつき１度しか発生しない。その為、画面１→２→１と遷移すると <code>MainActivity.ContentPage</code> は <code>SecondPage</code> のままになってしまう。ので <code>Appearing</code> イベントで表示の度に MainActivity.ContentPage を設定する必要がある。</p>

<h3><code>AndroidActivity</code> に static な <code>BackPressed</code> イベントがあるんだけど…</h3>

<p>イベントハンドラの定義は
<code>public delegate bool BackButtonPressedEventHandler(object sender, EventArgs e);</code>
となっていて、<code>true</code> を返すと BACK キーを無効にできるようなのだけど、<code>sender</code> は <code>MainActivity</code>だし、<code>EventArgs</code> は Page を取得できないしで使えないじゃん。。。</p>

<p>なんだかすごく発展途上な気がする、その内いろいろ整備されそうなので、それまで待った方が良い気がします。。。</p>
]]></content>
  </entry>
  
</feed>
