<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2014-09-10T23:02:34+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms で複数ボタンの均等割り付けをする]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/10/xamarin-forms-view-equal-width-and-fill-layouting/"/>
    <updated>2014-09-10T22:57:08+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/10/xamarin-forms-view-equal-width-and-fill-layouting</id>
    <content type="html"><![CDATA[<p>　Android では、例えば画面の幅に対して、複数のボタンを同じ幅でいい感じに Fill させることができます。(これを均等割り付けというのが正しいのかはよくわかりませんが)</p>

<!--more-->


<ul>
<li><a href="http://inujirushi123.blog.fc2.com/blog-entry-106.html">LinearLayout を使って均等割り付け : layout_weight &ndash; 戌印-INUJIRUSHI- （Androidあれこれ） &ndash;</a></li>
<li><a href="http://blog.imho.jp/2011/08/android-linearlayout.html">Androidレイアウトの要点だけ: LinearLayoutでパーツを均等に配置したい | スマートフォン要点だけブログ</a></li>
</ul>


<p>これで画面の解像度が違っても、横向きになっても、同じ幅のボタンで埋まる、という事ができます。</p>

<p><a href="http://xamarin.com/forms">Xamarin.Forms</a> でこれを実現するにはどうしたら良いか、試してみました。</p>

<h2>StackLayout を利用した試み</h2>

<p>Xamarin.Forms では、LinearLayout に相当するレイアウトとして <a href="http://iosapi.xamarin.com/?link=T%3aXamarin.Forms.StackLayout">StackLayout</a> があります。</p>

<p>まずはこれを利用してみます。</p>

<p><code>StackLayout</code> を <code>Orientation = Horizontal</code> とし、<code>Children</code> にボタンを3つ配置しています。ボタンの幅は全て <code>HorizontalOptions = FillAndExpand</code> とします。</p>

<p>```csharp App.cs
public class App
{</p>

<pre><code>public static Page GetMainPage()
{   
    return new ContentPage
    { 
        Content = new StackLayout
        {
            HorizontalOptions = LayoutOptions.FillAndExpand,
            VerticalOptions = LayoutOptions.Center,
            Orientation = StackOrientation.Horizontal,
            Children = 
            {
                new Button
                {
                    VerticalOptions = LayoutOptions.Center,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    Text = "one",
                    TextColor = Color.Black,
                    BackgroundColor = Color.Aqua,
                },
                new Button
                {
                    VerticalOptions = LayoutOptions.Center,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    Text = "two two",
                    TextColor = Color.Black,
                    BackgroundColor = Color.Fuschia,
                },   
                new Button
                {
                    VerticalOptions = LayoutOptions.Center,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    Text = "three three three",
                    TextColor = Color.Black,
                    BackgroundColor = Color.Lime,
                },
            },
        },
    };
}
</code></pre>

<p>}
```</p>

<p>　これを iOS/Android 双方で実行すると、こうなりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_view_equal_width_and_fill_layouting_01.png" alt="" /></p>

<p>うーん、そうじゃない（汗
どうやらボタンのテキストが全て表示されるように頑張ってくれちゃうようです。
まあ、これはこれで使える感じもします。</p>

<h2>Grid を利用した試み</h2>

<p>他のレイアウトで考えてみます。Android の TableLayout に相当する <a href="http://iosapi.xamarin.com/?link=T%3aXamarin.Forms.Grid">Grid</a> を使ってみます。</p>

<p>さっきの <code>App.cs</code> の実装を次のように変えます。</p>

<p><code>Grid</code> に1行3列の表を定義します。
列の定義 <code>ColumnDefinition</code> で幅を <code>new GridLength(1, GridUnitType.Star)</code> としているのは、「3列とも同じ比率の幅とする」ことを意味しています。(ということは比率を2:1:1にしたければ、最初の列だけ<code>2</code>にすればOKです)</p>

<p>```csharp App.cs
public class App
{</p>

<pre><code>public static Page GetMainPage()
{   
    var grid = new Grid
    {
        HorizontalOptions = LayoutOptions.FillAndExpand,
        VerticalOptions = LayoutOptions.Center,
        RowDefinitions =
        {
            new RowDefinition() { Height = GridLength.Auto }
        },
        ColumnDefinitions = 
        {
            new ColumnDefinition() { Width = new GridLength(1, GridUnitType.Star) },
            new ColumnDefinition() { Width = new GridLength(1, GridUnitType.Star) },
            new ColumnDefinition() { Width = new GridLength(1, GridUnitType.Star) },
        }
    };

    grid.Children.Add(new Button
    {
        VerticalOptions = LayoutOptions.Center,
        HorizontalOptions = LayoutOptions.FillAndExpand,
        Text = "one",
        TextColor = Color.Black,
        BackgroundColor = Color.Aqua,
    }, 0, 0);

    grid.Children.Add(new Button
    {
        VerticalOptions = LayoutOptions.Center,
        HorizontalOptions = LayoutOptions.FillAndExpand,
        Text = "two two",
        TextColor = Color.Black,
        BackgroundColor = Color.Fuschia,
    }, 1, 0);

    grid.Children.Add(new Button
    {
        VerticalOptions = LayoutOptions.Center,
        HorizontalOptions = LayoutOptions.FillAndExpand,
        Text = "three three three",
        TextColor = Color.Black,
        BackgroundColor = Color.Lime,
    }, 2, 0);

    return new ContentPage
    { 
        Content = grid,
    };
}
</code></pre>

<p>}
```</p>

<p>　これを iOS/Android 双方で実行すると、こうなりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_view_equal_width_and_fill_layouting_02.png" alt="" /></p>

<p>　おーけー、意図したレイアウトになりました。ボタンに入りきらないテキストはiOSだと省略され、Androidだと折り返されるという違いはありますが、レイアウトの一貫性は保つことができました。</p>

<p>　ちなみに横向きにしても大丈夫です。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_view_equal_width_and_fill_layouting_03.png" alt="" /></p>

<h2>まとめ</h2>

<p>　Xamarin.Forms でも、Android+LinearLayoutのような均等配置ができました。
　クロスプラットフォームなので、iOSでも同じように動作します。
iPhone6 が発表されてiOS開発でも多解像度対応が必須になるので、これは有用な感じがします。
（というか Storyboard の AutoLayout では、これと同じことができる気がしないのですが。。。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms と ReactiveProperty で快適MVVM生活]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/09/using-xamarin-forms-with-reactiveproperty/"/>
    <updated>2014-09-09T21:38:29+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/09/using-xamarin-forms-with-reactiveproperty</id>
    <content type="html"><![CDATA[<p>　<a href="http://www.buildinsider.net/mobile/xamarintips/0005">Xamarin.Forms</a> は、Xamarin に新たに搭載されたクロスプラットフォームUIフレームワーク＆MVVMフレームワークです。</p>

<!--more-->


<p>　<a href="http://okazuki.hatenablog.com/entry/2014/05/07/014133">ReactiveProperty</a> は、MVVMの(特に ViewModelの)実装を強力にサポートしてくれる、<a href="http://www.atmarkit.co.jp/fdotnet/introrx/index/">Reactive Extensions</a> を基盤としたライブラリです。</p>

<p> 両者を組み合わせると、Android/iOSアプリが COOL な感じで書けるんじゃないか、という事で試してみました。</p>

<h2>0. 環境など</h2>

<p>Mac + Xamarin Studio を使いますが、Windows + Visual Studio + Xamarin-Addin でもイケると思います。</p>

<h2>1. 導入</h2>

<h3>プロジェクトの作成</h3>

<p>新規ソリューションを、［C#］−［Mobile Apps］−［Blank App(Xamarin.Forms Portable)］で作成します。</p>

<h3>PCL の Profile を変更</h3>

<p>　作成されたソリューションの一番上にあるプロジェクト(.Android とか .iOS が付いていないやつ)のプロジェクト設定を開いて Profile を <strong>PCL 4.5 &ndash; Profile49</strong> に変更します。元々の Profile78 では ReactiveProperty が Nuget からインストールできないためです。最近のプラットフォームを対象にするなら、あまり影響はなさそうです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_01.png" alt="" /></p>

<h3>Nuget で Reactive Extensions と ReactiveProperty を追加</h3>

<p>　メニューの［プロジェクト］ー［Add Packages］で Nuget のダイアログを開き、図のように 「Reactive Extensions &ndash; Main Library」と「ReactiveProperty Portable」を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_02.png" alt="" /></p>

<p>（Reactive Extensions の追加の際、なにやらWarningが出るようですが、とりあえず進めます。）</p>

<h2>2. ViewModel の実装</h2>

<p>　PCL のプロジェクトに、<code>FirstViewModel.cs</code> を作成します。
　<code>FirstViewModel</code> は、以下のようなプロパティとコマンドを持ちます。</p>

<ul>
<li>InputTextプロパティ : EditBox の入力に応じて更新</li>
<li>DisplayTextプロパティ : InputText の変化から1秒後に、InputText を大文字にして更新</li>
<li>Clearコマンド : InputText が &lsquo;clear&rsquo; の時のみ有効。実行すると InputText を空にする。</li>
</ul>


<p>これらの実装が下のようになります。</p>

<p>```csharp FirstViewModel.cs
using System;
using Codeplex.Reactive;
using System.Reactive.Linq;</p>

<p>namespace FormsWithRxProperty.ViewModels
{</p>

<pre><code>public class FirstViewModel
{
    private readonly ReactiveProperty&lt;string&gt; _inputText = 
        new ReactiveProperty&lt;string&gt;("Hoge");
    public ReactiveProperty&lt;string&gt; InputText 
    { 
        get { return _inputText; }
    }

    public ReactiveProperty&lt;string&gt; DisplayText
    {
        get; private set;
    }

    public ReactiveCommand Clear
    {
        get; private set;
    }

    public FirstViewModel()
    {
        // DisplayText は、InputText の変更から1秒後に大文字にして更新
        this.DisplayText = _inputText
            .Delay(TimeSpan.FromSeconds(1))
            .Select(x =&gt; x.ToUpper())
            .ToReactiveProperty();

        // InputText が `clear` の時に実装可能
        this.Clear = _inputText
            .Select(x =&gt; x.Equals("clear"))
            .ToReactiveCommand();
        // 実行されたら、InputText を空にする
        this.Clear.Subscribe(_ =&gt; _inputText.Value = String.Empty);
    }

}
</code></pre>

<p>}
```</p>

<p>　面倒な <code>INotifyPropertyChanged</code> の実装が必要なく、すっきりと記述できます。
　また、他のプロパティに関連して(反応して)値が変化するプロパティや、コマンドの利用可否などが、Reactive Extensions の機能により、流れるように記述できます。</p>

<h2>3. 画面及び ViewModel との Binding の実装</h2>

<p>　画面(UI)は、Xamarin.Forms の恩恵で、Android/iOS 共通で実装できます。XAML も使えますが、よく知らないのでコードでUIを記述します。</p>

<p>　PCL のプロジェクトに、 <code>FirstPage.cs</code> を作成し、以下のように実装します。</p>

<p>```csharp FirstPage.cs
using System;
using Xamarin.Forms;
using FormsWithRxProperty.ViewModels;</p>

<p>namespace FormsWithRxProperty.Pages
{</p>

<pre><code>public class FirstPage : ContentPage
{
    public FirstPage()
    {
        // UI
        var entry = new Entry
        {
            Text = "Hello, Forms!",
            VerticalOptions = LayoutOptions.Center,
            HorizontalOptions = LayoutOptions.FillAndExpand,
        };

        var label = new Label
        {
            VerticalOptions = LayoutOptions.Center,
            HorizontalOptions = LayoutOptions.CenterAndExpand,
        };

        var button = new Button
        {
            Text = "Clear (type 'clear' to enable)",
            VerticalOptions = LayoutOptions.Center,
            HorizontalOptions = LayoutOptions.FillAndExpand,
        };

        this.Content = new StackLayout
        {
            Padding = new Thickness(50f),
            VerticalOptions = LayoutOptions.Start,
            HorizontalOptions = LayoutOptions.Fill,
            Orientation = StackOrientation.Vertical,
            Children =
            {
                entry,
                label,
                button
            }
        };

        // ViewModel との Binding
        this.BindingContext = new FirstViewModel();
        entry.SetBinding&lt;FirstViewModel&gt;(Entry.TextProperty, vm=&gt;vm.InputText.Value);
        label.SetBinding&lt;FirstViewModel&gt;(Label.TextProperty, vm=&gt;vm.DisplayText.Value);
        button.SetBinding&lt;FirstViewModel&gt;(Button.CommandProperty, vm=&gt;vm.Clear);
    }
}
</code></pre>

<p>}
```</p>

<p>　ちょっと長いですが、画面に「エディットボックス」「ラベル」「ボタン」が縦に並んでいるだけです。</p>

<p>　下部の４行で、<code>FirstViewModel</code> の各プロパティ、コマンドと Bind しています。</p>

<p>　もともとあった <code>App.cs</code> は、<code>FirstPage</code> を生成するだけにします。</p>

<p>```csharp App.cs
using System;
using Xamarin.Forms;
using FormsWithRxProperty.Pages;</p>

<p>namespace FormsWithRxProperty
{</p>

<pre><code>public class App
{
    public static Page GetMainPage()
    {   
        return new FirstPage();
    }
}
</code></pre>

<p>}
```</p>

<h2>動かす！</h2>

<p> .Android か .iOS の付いたプロジェクトをスタートアップにして、実行します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_xamarin_forms_with_reactiveproperty_03.gif" alt="" /></p>

<h3>追記 2014.9.10</h3>

<p>実機で動作確認するの忘れてました（実機はAOTなのに対してiOSシミュレータはJITなのでリフレクションとかが普通に動いてしまう）。
実機でも問題なく動作しました！</p>

<h2>まとめ</h2>

<p>　Reactive Extensions のメリットを活かして MVVM を構築できる ReactiveProperty と、ワンソースで Android/iOS の画面を定義でき、さらに Binding までも共通にできる Xamarin.Forms の組み合わせは、今後のモバイルアプリケーション開発をとても効率的にしてくれます、 <strong>そしてなにより楽しい！</strong></p>

<p>　今回のサンプルプログラムは</p>

<ul>
<li><a href="https://github.com/amay077/XamarinFormsWithReactivePropertySample/tree/master">amay077/XamarinFormsWithReactivePropertySample</a></li>
</ul>


<p>　に置きましたので、是非試してみてください。</p>

<h3>ReactiveProperty</h3>

<ul>
<li><a href="http://okazuki.hatenablog.com/entry/2014/05/07/014133">ReactiveProperty オーバービュー &ndash; かずきのBlog@hatena</a></li>
<li><a href="https://reactiveproperty.codeplex.com/releases/view/132232">ReactiveProperty &ndash; MVVM Extensions for Rx &ndash; Download: ReactiveProperty v1.0</a></li>
<li><a href="http://neue.cc/2011/08/26_341.html">neue cc &ndash; ReactiveProperty : Rx + MVVMへの試み</a></li>
<li><a href="http://yone64.wordpress.com/2014/06/20/reactiveproperty%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%80%81reactiveextensions%E5%85%A5%E9%96%80%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89/">ReactivePropertyを使いたい人のための、ReactiveExtensions入門（その１） | 泥庭</a></li>
</ul>


<h3>Xamarin.Forms</h3>

<ul>
<li><a href="http://developer.xamarin.com/guides/cross-platform/xamarin-forms/">Xamarin.Forms | Xamarin</a></li>
<li><a href="http://www.buildinsider.net/mobile/insidexamarin/14">Xamarin.Formsの基本構想と仕組み &ndash; Build Insider</a></li>
<li><a href="http://www.buildinsider.net/tagcloud?tag=Xamarin.Forms">Xamarin.Forms &ndash; Build Insider</a></li>
<li><a href="http://furuya02.hatenablog.com/entry/2014/08/08/003036">Xamarin.Forms ListViewでTwitter風のレイアウトを作成してみました（機種依存コードなし） &ndash; SIN@SAPPOROWORKSの覚書</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[システムの起動時にアプリを起動する]]></title>
    <link href="http://blog.amay077.net/blog/2014/09/01/run-application-on-system-startup/"/>
    <updated>2014-09-01T21:41:43+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/09/01/run-application-on-system-startup</id>
    <content type="html"><![CDATA[<p>ググれば出てくるんだけど、情報が古いので書きなおしてみた。</p>

<!--more-->


<h2>全体</h2>

<p>Android OS の起動が終わると <code>android.intent.action.BOOT_COMPLETED</code> がブロードキャストされるので、それを捕まえて任意の処理をする。</p>

<h2>起動時に呼び出されるコード</h2>

<p>ブロードキャストを捕まえたときに呼ばれるコード。<code>MyActivity</code> を開始している。BroadcastReceiver から Activity を開始するには <code>Intent.FLAG_ACTIVITY_NEW_TASK</code> が必要なので注意。</p>

<p>```java StartupReceiver.java
public class StartupReceiver extends BroadcastReceiver {</p>

<pre><code>private static final String TAG = "StartupReceiver";

@Override
public void onReceive(Context context, Intent intent) {
    Log.d(TAG, "onReceive:" + MyApplication.data);
    Intent intentActivity = new Intent(context, MyActivity.class);
    intentActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intentActivity);
}
</code></pre>

<p>}
```</p>

<h2>AndroidManifest.xml で受信登録</h2>

<p><code>StartupReceiver</code> を登録する。
忘れちゃいけないのが <code>android.permission.RECEIVE_BOOT_COMPLETED</code> による権限の設定。これがないと受信できない。</p>

<p>```xml AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.amay077.reboottest" &gt;

&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" /&gt;

&lt;application
    android:allowBackup="true"
    android:icon="@drawable/ic_launcher"
    android:label="@string/app_name"
    android:theme="@style/AppTheme" &gt;
    &lt;activity
        android:name=".MyActivity"
        android:label="@string/app_name" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MAIN" /&gt;
            &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
        &lt;/intent-filter&gt;

    &lt;/activity&gt;
    &lt;receiver android:name=".StartupReceiver" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;
            &lt;category android:name="android.intent.category.DEFAULT" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;
&lt;/application&gt;
</code></pre>

<p></manifest>
```</p>

<h2>端末を再起動して試す</h2>

<ul>
<li><a href="http://9ensan.com/blog/smartphone/android/android-boot_completed-adb-shell-am-broadcast/">AndroidのBOOT_COMPLETEDの受信とテスト | 9ensanのLifeHack</a></li>
</ul>


<p>で知った <code>adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</code> は GenyMotion でも使えました。
<code>RECEIVE_BOOT_COMPLETED</code> の位置によっては、テストが成功したりしなかったりだと書かれておられますが、上記の <code>AndroidManifest.xml</code> では、テストも実際の再起動も成功しました。</p>

<h2>参考</h2>

<ul>
<li><a href="http://techbooster.jpn.org/andriod/application/1100/">システムの起動時にサービスを実行する « Tech Booster</a>(2010年なのでだいぶ古い、要注意)</li>
<li><a href="http://9ensan.com/blog/smartphone/android/android-boot_completed-adb-shell-am-broadcast/">AndroidのBOOT_COMPLETEDの受信とテスト | 9ensanのLifeHack</a>(2012年、まだまだ古い)</li>
<li><a href="http://stackoverflow.com/questions/20441308/boot-completed-not-working-android/20441442#20441442">broadcastreceiver &ndash; BOOT_COMPLETED not working Android &ndash; Stack Overflow</a>(2013年、これなら何とか)</li>
<li><a href="https://groups.google.com/forum/#!topic/android-group-japan/D1EKohMIji0">BOOT_COMPLETEDが受信出来ない &ndash; Google グループ</a> SDカードにインストールされるとこのブロードキャストを受信できないそうです</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android が使用する debug.keystore の在処]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use/"/>
    <updated>2014-08-28T17:42:04+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use</id>
    <content type="html"><![CDATA[<p>Google Maps などを使用する時、開発中ならば <code>debug.keystore</code> のフィンガープリント(SHA1)を取得する必要がありますが、 debug.keystore がどこにあるのか分からなくてハマった。</p>

<!--more-->


<h2>結論</h2>

<p>から書いておくと</p>

<ul>
<li><a href="http://developer.xamarin.com/guides/android/platform_features/maps_and_location/maps/obtaining_a_google_maps_api_key/">Obtaining a Google Maps API Key | Xamarin</a></li>
</ul>


<p>に書いてある通りで、</p>

<ul>
<li>Windows &ndash; <code>C:¥Users¥[USERNAME]¥AppData¥Local¥Xamarin¥Mono for Android¥debug.keystore</code></li>
<li>OSX &ndash; <code>/Users/[USERNAME]/.local/share/Xamarin/Mono for Android/debug.keystore</code></li>
</ul>


<p>がそれぞれ使われる。</p>

<h2>なぜハマったか？</h2>

<h3>Eclipse と同じだと思ってた</h3>

<p>Java での Android 開発時に設定したディレクトリを使ってくれると思い込んでた。けどよく考えればあれは Android SDK ではなく Eclipse 固有の設定だったのよね。</p>

<h3>ドキュメントが古いと思ってた</h3>

<p>上記で紹介した「Obtaining a Google Maps…」の記事が古いと思ってた。なぜならディレクトリ名に <code>Mono for Android</code> が含まれていて、これは Xamarin.Android の旧製品名だったから。</p>

<h3>Spotlight検索でヒットしなかった</h3>

<p>Mac を使っているのだけど、Spotlight検索（所謂PC内検索）で <code>debug.keystore</code> がヒットしたのがいつもJava-Android開発で使ってる１つだけだったので、.local の中にあるとは気付けず。。。隠しディレクトリだからヒットしないよね。</p>

<p>こんなことでハマるのは自分くらいだろうけど、メモしときます。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cardboard を作ってきました]]></title>
    <link href="http://blog.amay077.net/blog/2014/08/16/make-google-cardboard/"/>
    <updated>2014-08-16T23:42:38+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/08/16/make-google-cardboard</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://connpass.com/event/7735/">日本Androidの会浜松支部 第40回ミーティング #jaghama &ndash; connpass</a></li>
</ul>


<p>で Google Cardboard のクローンを作りました。</p>

<!--more-->


<p>段ボールやレンズ、磁石などの材料は主催の方が用意してくださった( <a href="https://twitter.com/macha1972">@macha1972</a> さんありがとうございます )ので、カッターとガムテープと筆記具くらいを持参するだけですみました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-01.jpg" alt="" /></p>

<p><a href="https://developers.google.com/cardboard/">公式サイト</a> からダウンロードできる型紙を印刷して、段ボールに貼り付け、段ボールを切っていきます。</p>

<p>段ボールが意外と厚くて切るのに苦労しました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-02.jpg" alt="" /></p>

<p>ここまでくるのに約3時間…（-_&ndash;;）
早い人は2時間くらいで終わってたかな・・・。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-03.jpg" alt="" /></p>

<p>切っちゃえば組み立ては簡単(先駆者さんに聞きながらできたからw)
「バター風味」がいい感じに露出しているのは偶然だw</p>

<p>使用した端末は公式に対応しているとされる Galaxy Nexus だったので稼働に特に問題はありません(磁石のスイッチが反応しづらいかなという程度)でしたが、端末の磁場センサーの位置によっては、スイッチの位置を反対側に移動させる必要があるみたいです。(Xperia の人はそうしてました)</p>

<p>さっそく <a href="https://play.google.com/store/apps/details?id=com.google.samples.apps.cardboarddemo&amp;hl=ja">Cardboardアプリ</a> で体験…これはスゴイ！
以前に Ocufes豊橋 で Oculas Lift は体験済みだったのですが、それに匹敵する没入感です。</p>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.divegames.divecitycoaster&amp;hl=ja">Dive City Rollercoaster</a> というアプリが面白いですね。</li>
</ul>


<p>帰宅後、さっそく子供らも体験、しばらくの間ハマってました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/make-google-cardboard-04.jpg" alt="" /></p>

<p>子供の夏休みの自由工作にでもできるかなーと思いますが、大人で3時間かかるのは結構つらいかも。</p>

<p>カッターで段ボールを切るのに力入れすぎて指にマメできたし…。</p>

<p>ワークショップ中のその他の写真は</p>

<ul>
<li><a href="https://www.facebook.com/media/set/?set=o.282944361773276&amp;type=3">日本Androidの会 浜松支部の写真・動画 &ndash; Facebookグループ</a></li>
</ul>


<p>からどうぞ。</p>
]]></content>
  </entry>
  
</feed>
