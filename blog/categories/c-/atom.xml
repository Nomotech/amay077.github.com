<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-10-20T22:04:25+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.Android での Google Map(というか Play Service) 利用が、本家より簡単になった件]]></title>
    <link href="http://amay077.github.io/blog/2013/08/03/gmapv2-from-xamarin-component/"/>
    <updated>2013-08-03T15:29:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/03/gmapv2-from-xamarin-component</id>
    <content type="html"><![CDATA[<p>Xamarin Components に「Google Play Services」が追加されまして。</p>

<!--more-->


<ul>
<li><a href="http://blog.xamarin.com/introducing-the-google-play-services-component-for-xamarin-android/">Introducing the Google Play Services Component for Xamarin.Android | Xamarin Blog</a></li>
</ul>


<p>これが何を意味するかと言うと、これまで Google Play Service を利用するには、ライブラリプロジェクトを作って、アプリから参照するという煩わしい手順が必要でした。</p>

<p>で、これは Android-Eclipse でも同じく面倒だったわけですが、Xamarin.Android  に新しく提供されるこのコンポーネントを使えば、その手間を省くことができます。この点で Eclipse での開発より簡単になりました。</p>

<p>実際に、Play Services の一つである Google Map Android API v2 を使うアプリを作る手順を書いてみます。</p>

<h2>手順</h2>

<h3>1. Google API Console から API key を取得する</h3>

<p>この手順は、これまでと変わらないので、以下のサイトなどを参考にしてください。
package名が必要になるので、先に決めておきましょう。
ここでは <code>com.amay077.sample.googlemapv2sample</code> とします。</p>

<ul>
<li><a href="http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html">throw Life - Google Maps Android API v2を使ってみた</a></li>
</ul>


<p>取得して API key はメモっておきます。</p>

<h3>2. プロジェクト/ソリューションを作る</h3>

<p>Xamarin Studio を起動します。
ここでは Ice Cream Sandwich 用に作ります。(Android Application の方だと Support Library が要るので少し手順が増えるはず)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_01.png" alt="img" /></p>

<h3>3. プロジェクトに「Google Play Service」コンポーネントを追加する</h3>

<p>メニュー → プロジェクト → Get More Components から、、、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_03.png" alt="img" /></p>

<p>Google Play Services を検索して Add to App します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_04.png" alt="img" /></p>

<p>すると、プロジェクトに Google Play Services が追加されます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_05.png" alt="img" /></p>

<p>ここで一度、Xamarin Studio を再起動しておいた方が無難です。
このまま継続したら、追加されたアセンブリがうまく読み込まれてない場合がありました。</p>

<h3>4. 実装する</h3>

<p><code>MainActivity.cs</code> は、最初の内容をごっそり削除して以下のようにします。</p>

<p>```c# MainActivity.cs
using Android.App;
using Android.OS;</p>

<p>namespace GoogleMapV2Sample
{</p>

<pre><code>[Activity (Label = "GoogleMapV2Sample", MainLauncher = true)]
public class MainActivity : Activity
{
    protected override void OnCreate(Bundle bundle)
    {
        base.OnCreate(bundle);

        // Set our view from the "main" layout resource
        SetContentView(Resource.Layout.Main);
    }
}
</code></pre>

<p>}
```</p>

<p>画面定義である <code>Main.axml</code> も以下のように置き換えます。</p>

<p>```xml Resources/layout/Main.axml
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;fragment xmlns:android="http://schemas.android.com/apk/res/android"</p>

<pre><code>android:id="@+id/map"
android:layout_width="match_parent"
android:layout_height="match_parent"
class="com.google.android.gms.maps.MapFragment" /&gt;
</code></pre>

<p>```</p>

<h3>5. AndroidManifest.xml への設定いろいろ</h3>

<p>たぶん一番面倒なところです。</p>

<p>まず Xamarin.Android では、最初は AndroidManifest.xml が生成されていないので、メニュー → プロジェクト → xxx のオプション から、下図のように [Add Android manifest] します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_06.png" alt="img" /></p>

<p>次に作成された AndroidManifest.xml を開いて、以下のようにします。</p>

<p>※1 のところは、最初に決めた Package名に、※2 の時は、先に取得しておいた API key に置き換えてください。</p>

<p>```xml Properties/AndroidManifest.xml
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"</p>

<pre><code>android:versionCode="1" 
android:versionName="1.0" 
package="com.amay077.sample.googlemapv2sample"&gt;  &lt;--------※1


&lt;uses-feature android:glEsVersion="0x00020000" android:required="true" /&gt;
&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
&lt;uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" /&gt;
&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /&gt;


&lt;uses-permission 
    android:name="com.amay077.sample.playservicesample.permission.MAPS_RECEIVE" /&gt;   &lt;--------※1
&lt;permission 
    android:name="com.amay077.sample.playservicesample.permission.MAPS_RECEIVE"   &lt;--------※1
    android:protectionLevel="signature" /&gt;

&lt;application android:label="GoogleMapV2Sample"&gt;
    &lt;meta-data 
        android:name="com.google.android.maps.v2.API_KEY" 
        android:value="AIzaByD1jiFER3le_HFrkOrEhaNIsemoNoDesuU" /&gt;  &lt;--------※2
&lt;/application&gt;
</code></pre>

<p></manifest>
```</p>

<h3>6. 動かす</h3>

<p>設定が正しくできていれば、地図が表示されるはずです。
アプリが落ちるなら Main.cs や Main.axml が、地図が表示されないなら AndroidManifest.xml や Google API Console での設定が間違っていると思います。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/gmapv2_from_xamarin_component_07.png" alt="img" /></p>

<h2>まとめなど</h2>

<p>Google Play Service コンポーネントを使うことでライブラリプロジェクトをなくす事ができました。慣れた人にはどうってこと無い話ですが、説明する人には面倒で、始めて行う人には混乱の元になってたと思います。</p>

<p>もう一つ特筆すべきは、このコンポーネントを Google 自身が開発、提供していることです。</p>

<p>これだけでなく、<a href="http://components.xamarin.com/view/googlemapsios/">Google Map SDK for iOS</a> や <a href="http://components.xamarin.com/view/googleadmob/">Admob 用のコンポーネント</a>も Google 自身が提供しています。</p>

<p>また Microsoft も <a href="http://components.xamarin.com/view/azure-mobile-services/">Azure Mobile Service</a> を自身が提供していますし、なんなんでしょうこのプラットフォーマーの Xamarin への参入ぶりは。</p>

<p>このように本家が開発していることにより、信頼性、機能網羅性、新機能への追従などがとても充実しており、安心して使うことができます。</p>

<p>最後に、</p>

<blockquote class="twitter-tweet"><p>おおおお、すげえ！これでめんどいビルド手順必要なくなった！Google++！でも、Gmaps iOSの1.4アップデートと、Retina対応のため128dpタイルへの対応もしてください…。 / “Google Play Servi…” <a href="http://t.co/mjnN7sE0t7">http://t.co/mjnN7sE0t7</a></p>&mdash; Кочизуфан (@kochizufan) <a href="https://twitter.com/kochizufan/statuses/363116371351052290">August 2, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことなのでよろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pull up to Close を実装してみる、Xamarin.iOS で]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios/"/>
    <updated>2013-07-28T13:51:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios</id>
    <content type="html"><![CDATA[<p>イマドキのスマホアプリでは Pull to Refresh（引っ張って更新）を実装してるアプリをよく目にするのですが、RSS Reader の Feedly では Pull up to Close（上に引っぱって閉じる）も採用しています。</p>

<p>この操作性がなかなか使いやすかったので、自分でも実装してみました。</p>

<!--more-->


<h2>デモ</h2>

<p>こんな感じ。
WebView なんですが、一番下までスクロールして、さらに上に引っ張ると "Pull up to Close" → "Release to Close" とラベルが変わり、そこで離すとコールバックします。</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/AP6xPqwwXMI?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>


<h2>実装してみたコード</h2>

<p><a href="http://xamarin.com/">Xamarin.iOS</a> ですから、C# です。</p>

<p>UIWebView でやってますが、ScrollView なコントロールならだいたい同じ感じでいけるんじゃないかと思います。</p>

<p>```c# PullUpToCloseSampleViewController.cs
public partial class PullUpToCloseSampleViewController : UIViewController
{</p>

<pre><code>public PullUpToCloseSampleViewController() : base ("PullUpToCloseSampleViewController", null)
{
}

public override void ViewDidLoad()
{
    base.ViewDidLoad();

    // WebView が持ってる ScrollView、よく使うので変数化しておく
    // webView は Interface Builder で UIWebView を Outlet にしたもの。
    var scrollView = webView.ScrollView;

    // Bounces の影を消す via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview
    scrollView.Subviews.Where(v =&gt; v is UIImageView)
        .ToList().ForEach(v =&gt; v.Hidden = true);

    // 上に引っ張った時に見える背景とラベル
    var bounceBackground = new UIView(
        new RectangleF(0f, 0f, webView.Frame.Width, webView.Frame.Height));
    bounceBackground.BackgroundColor = UIColor.LightGray;
    var bounceLabel = new UILabel(
        new RectangleF(0f, webView.Frame.Height - 30f, webView.Frame.Width, 30f));
    bounceLabel.Text = "Pull up to Close";
    bounceLabel.TextAlignment = UITextAlignment.Center;
    bounceLabel.BackgroundColor = UIColor.Clear;
    bounceLabel.Opaque = false;

    // 背景とラベルを WebView の一番奥に追加する
    webView.InsertSubview(bounceLabel, 0);
    webView.InsertSubview(bounceBackground, 0);

    // 適当な URL を読み込み
    webView.LoadRequest(NSUrlRequest.FromUrl(new NSUrl("http://yahoo.co.jp/")));

    // 閉じるのに必要な分だけ上に引っ張ったら true になる
    var canClose = false;

    // ドラッグ開始時にフラグOFF(一応)
    scrollView.DraggingStarted += (sender, e) =&gt; 
    {
        canClose = false;
    };

    // ドラッグ終了時、必要量引っ張っていたら OnCloseByPullUp を呼ぶ
    scrollView.DraggingEnded += (sender, e) =&gt; 
    {
        if (canClose)
        {
            OnCloseByPullUp();
        }
    };

    // スクロールした時にいろいろやる
    scrollView.Scrolled += (sender, e) =&gt; 
    {
        var labelFrame = bounceLabel.Frame;

        // コンテンツの一番下まで表示してさらに引っ張ったサイズ
        var offsetY = (scrollView.Frame.Height + scrollView.ContentOffset.Y) 
            - scrollView.ContentSize.Height;

        // 50px 上に引っ張ったら閉じるものとする
        canClose = offsetY &gt; 50f;
        bounceLabel.Text = canClose ? "Release to Close" : "Pull up to Close";

        // ラベルがいつまでも移動しないように
        if (offsetY &gt; labelFrame.Height)
        {
            offsetY = labelFrame.Height;
        }

        // ラベルがドラッグと共に下からせり出してくるように
        labelFrame.Y = scrollView.Frame.Height - offsetY;
        bounceLabel.Frame = labelFrame;
    };
}

// "Release to Close" で離すと呼ばれる
void OnCloseByPullUp()
{
    var v = new UIAlertView("", "Close this view",  null, "Close");
    v.Show ();
}
</code></pre>

<p>}
```</p>

<h2>やってる事</h2>

<ol>
<li>ScrollView の「引っ張った時に見える場所（= Bounce というらしい）」の影を消す。 via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview</li>
<li>背景と、ラベルを WebView 内の一番奥に挿入する（引っ張った時にのみ見えるように）</li>
<li>あとはイベントハンドラでの処理。スクロール中に、「最下部で引っ張り中」だったら "Pull up to Close" ラベルをアニメーションさせながら表示する。50px 以上引っ張ってたら "Release to Close" にラベルを変える。「閉じられるよ」フラグも ON にしとく。</li>
<li>ドラッグ終了イベントで、「閉じられるよ」フラグが立ってたら、コールバックする。</li>
</ol>


<h2>今後</h2>

<p>もうちょっとライブラリっぽくしたいですね。あと引っ張り中にアイコンとか表示させたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS でジェスチャを認識する]]></title>
    <link href="http://amay077.github.io/blog/2013/07/28/recognition-gestures-using-xamarin-ios/"/>
    <updated>2013-07-28T13:49:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/28/recognition-gestures-using-xamarin-ios</id>
    <content type="html"><![CDATA[<p><a href="http://xamarin.com/">Xamarin.iOS</a> でも <code>UIGestureRecognizer</code> が普通に使えるわけですが、Objective-C に比べてコードが短く書けて感動した話です。</p>

<!--more-->


<p>本日の Obj-C の先生はこちら。</p>

<ul>
<li><a href="http://labs.techfirm.co.jp/ipad/cho/466">Gesture Recognizers 〜簡単にタッチ操作を検知 | iPad Techfirm Lab </a></li>
</ul>


<p>このサンプルを Xamarin.iOS に移植してみます。</p>

<h2>サンプルコード</h2>

<p>```c# GesturesSample_ViewDidLoad.cs
// Tap gesture
this.View.AddGestureRecognizer(new UITapGestureRecognizer(tap =>
{</p>

<pre><code>Debug.WriteLine("Double Tap.");
</code></pre>

<p>})
{</p>

<pre><code>NumberOfTapsRequired = 2 // Double tap 
</code></pre>

<p>});</p>

<p>// Drag(Pan) gesture
this.View.AddGestureRecognizer(new UIPanGestureRecognizer(pan =>
{</p>

<pre><code>var p = pan.TranslationInView(this.View);
var v = pan.VelocityInView(this.View);
Debug.WriteLine("Pan. transration:{0}, velocity:{1}", p, v);
</code></pre>

<p>}));</p>

<p>// Pinch gesture
this.View.AddGestureRecognizer(new UIPinchGestureRecognizer(pin =>
{</p>

<pre><code>var scale = pin.Scale;
var v = pin.Velocity;
Debug.WriteLine("Pinch. scale:{0}, velocity:{1}", scale, v);
</code></pre>

<p>}));</p>

<p>// Swipe gesture
this.View.AddGestureRecognizer(new UISwipeGestureRecognizer(sw =>
{</p>

<pre><code>Debug.WriteLine("Swipe.");
</code></pre>

<p>}));</p>

<p>// Rotate gesture
this.View.AddGestureRecognizer(new UIRotationGestureRecognizer(ro =>
{</p>

<pre><code>var rotation = ro.Rotation;
var v = ro.Velocity;
Debug.WriteLine("Rotate. rotation:{0}, velocity:{1}", rotation, v);
</code></pre>

<p>}));</p>

<p>// Long press gesture
this.View.AddGestureRecognizer(new UILongPressGestureRecognizer(lp =>
{</p>

<pre><code>Debug.WriteLine("Long press.");
</code></pre>

<p>}));
```</p>

<p>ViewController 全体のソースは <a href="https://gist.github.com/amay077/6094422">コチラ</a></p>

<p>元のサイトのサンプルコードは 70行弱ありますが、Xamarin.iOS では 45行くらいで書けました。しかも、GestureRecongnizer の登録とハンドラが同じ場所に書けるので見やすい。</p>

<p>しかしこれ、ハンドラとか GesutureRecognizer、破棄しなくていいのかなあ。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio でコードテンプレートを使う]]></title>
    <link href="http://amay077.github.io/blog/2013/07/24/using-code-template-on-xamarin-studio/"/>
    <updated>2013-07-24T17:48:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/24/using-code-template-on-xamarin-studio</id>
    <content type="html"><![CDATA[<p>Visual Studio や Eclipse とか、IDE ならだいたい備えているコードテンプレート、呼び名はそれぞれ違いますが、<code>for</code> ってタイプすると <code>for (object o : items) {  }</code> 的なコードのひな形を生成してくれる機能の事です。</p>

<!--more-->


<p>Xamarin Studio にも当然ありまして、その使い方を説明します。</p>

<h2>きっかけ</h2>

<p>MvvmCross っていうフレームワークの Tutorial 動画で Visual Studio を使っているんですが、その中で多用されてるので、真似してみたくなりました。</p>

<p>例えばこれ</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=_DHDMNB_IeY&amp;list=PLR6WI6W1JdeYSXLbm58jwAKYT7RQR31-W&amp;feature=player_detailpage&amp;t=178">N=0 : A first MvvmCross Application (N+1 days of MvvmCross) | N+1 days of MvvmCross</a></li>
</ul>


<h2>手順</h2>

<h3>1. Xamarin Studio の Preference を開く</h3>

<p>システムメニュー → Preference → テキストエディタ → コード テンプレート です。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_01.png" alt="img1" /></p>

<h3>2. コードテンプレートを作成する</h3>

<p>追加 で "新しいテンプレート" の画面を開き、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_02.png" alt="img2" /></p>

<p>のように設定します。</p>

<ul>
<li>ショートカット : pmvx</li>
<li>グループ : C#</li>
<li>説明 : 適当に</li>
<li>Mime : text/x-csharp</li>
<li>[展開されるテンプレート] にチェックを入れる</li>
</ul>


<p>テンプレート テキスト は以下の通り</p>

<p>```c#
private $type$ $property$;
public $type$ $Property$
{</p>

<pre><code>get { return $property$; }
set { $property$ = value; RaisePropertyChanged(() =&gt; $Property$); }
</code></pre>

<p>}
```</p>

<p><code>$type$</code>, <code>$property$</code>, <code>$Property$</code> という3つの変数を使っています。画面右端にあるドロップダウンで、各変数が選択できるので、それぞれ Default で既定値を設定します。</p>

<p>ここでは、以下のようにしました。</p>

<ul>
<li>type : object</li>
<li>property : _property</li>
<li>Property : MyProperty</li>
</ul>


<p>OK を押して保存します。</p>

<h3>3.  使ってみる</h3>

<p>コードエディタで <code>pmvx</code> とタイプすると、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_03.png" alt="img2" /></p>

<p>となり、タブを2回ほど押すと、</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_code_template_in_xamarin_studio_04.png" alt="img2" /></p>

<p>と、テンプレートコードが挿入されます。
あとは、ハイライトされている部分を変更すると、テンプレート内も連動して変更されます。</p>

<p>これでコード入力が楽になりました。</p>

<p>コードテンプレートのインポート／エクスポートや、Visual Studio との互換性なども調べてみたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio で MvvmCross を使うための準備]]></title>
    <link href="http://amay077.github.io/blog/2013/07/22/using-pcl-on-xamarin-studio/"/>
    <updated>2013-07-22T20:46:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/22/using-pcl-on-xamarin-studio</id>
    <content type="html"><![CDATA[<p>クロスプラットフォーム MVVM フレームワーク「<a href="https://github.com/slodge/MvvmCross">MvvmCross</a>」を Mac の Xamarin Studio で使うための準備についてです。</p>

<!--more-->


<p>基本は、</p>

<ul>
<li><a href="http://stackoverflow.com/questions/17653208/getting-pcl-mvvmcross-nuget-and-xamarin-studio-to-play-nice-on-mac">monotouch - Getting PCL, Mvvmcross, Nuget and Xamarin Studio to play "nice" on Mac - Stack Overflow</a></li>
</ul>


<p>のトレース。主には PCL と Nuget が正しく動くようにする手順です。</p>

<h2>前提条件</h2>

<p>必要な(というか試した)環境は以下の通り。
（Xamarin の PCL サポートがまだ「進行中」なので、将来的には変わる可能性大）</p>

<ul>
<li>Xamarin Studio Version 4.0.10 (beta)</li>
<li>Xamarin.Android Version: 4.8.0 (beta)</li>
<li>Xamarin.iOS Version: 6.3.8.11 (beta)</li>
<li>Xamarin Studio Add-in NuGet Package Management Version 0.5</li>
<li>Mac OS X 10.8.4</li>
</ul>


<h2>手順</h2>

<h3>Xamarin Studio</h3>

<ol>
<li>Mac に Xamarin Studio を入れて、Beta チャンネルに切り替えて更新。</li>
<li>アドインマネージャから NuGet Package Management をインストール。</li>
</ol>


<h3>.NETPortable DLLs を Win機からコピってくる</h3>

<p>Win機の <code>C:¥Program Files (x86)¥Reference Assemblies¥MicrosoftFramework.NETPortable</code> を、Mac の <code>/Library/Frameworks/Mono.framework/External/xbuild-frameworks/.NETPortable/</code> へコピー。</p>

<p>Win機がない場合は、<a href="http://amay077.github.io/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive/">これ</a> などで Win仮想環境を作り、<a href="http://www.microsoft.com/visualstudio/jpn/downloads">Visual Studio Ultimate 2012 90日間試用版</a> を入れるとよい(Express 版は上記DLLsがないのでNG)。</p>

<h3>Nuget にパッチをあててビルド</h3>

<p><a href="http://stackoverflow.com/questions/17653208/getting-pcl-mvvmcross-nuget-and-xamarin-studio-to-play-nice-on-mac">ここ</a> の <strong>Patch to Nuget.Core.dll:</strong> にあるテキストを適当なファイルに保存(ここでは <code>patch.diff</code> とする)して、以下のコマンドを実行。</p>

<p>```sh
git clone https://git01.codeplex.com/nuget
cd nuget
git checkout -b 2.6 origin/2.6</p>

<p>patch -p1 &lt; patch.diff</p>

<p>cd src/Core
xbuild</p>

<p>cp bin/Debug/NuGet.Core.dll  ~/Library/Application\ Support/XamarinStudio-4.0/LocalInstall/Addins/MonoDevelop.PackageManagement.0.5/NuGet.Core.dll
```</p>

<p>以上で、環境準備は終わり。</p>

<h2>試す</h2>

<ol>
<li>Xamarin Studio で Portable Class Library を作成する</li>
<li>プロジェクト設定を見ると Xamarin.Android、Xamarin.iOS などがあるが、これらを<strong>チェックしてOKしても適用されてない</strong> <img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_pcl_on_xamarin_studio01.png" alt="img1" /></li>
<li>Nuget Manager から mvvmcorss で検索して "MvvmCross - Hot Tuna  Starter Pack" を Add してもエラーになる。<img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_pcl_on_xamarin_studio02.png" alt="img1" /></li>
</ol>


<p>うーん、ダメか？</p>

<h2>プロジェクトファイルをちょっと修正する</h2>

<p>ポータブルクラスライブラリのプロジェクトファイル(xxx.csproj) をテキストエディタで開き、<code>&lt;TargetFrameworkProfile&gt;</code> の値を <code>Profile104</code> に書き換える。(修正前は Profile1 になってた。なぜ Profile104 かと言えば、Visual Studio で作った PCL プロジェクトのプロファイルが 104 だったから、という程度の理解レベル)</p>

<p>```xml xxx.csproj
&lt;?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup></p>

<pre><code>&lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
&lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
&lt;ProductVersion&gt;10.0.0&lt;/ProductVersion&gt;
&lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
&lt;ProjectGuid&gt;{50D8E04F-FDE0-4A65-B388-5698BEFE8DC5}&lt;/ProjectGuid&gt;
&lt;ProjectTypeGuids&gt;{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&lt;/ProjectTypeGuids&gt;
&lt;OutputType&gt;Library&lt;/OutputType&gt;
&lt;RootNamespace&gt;Portable2&lt;/RootNamespace&gt;
&lt;AssemblyName&gt;Portable2&lt;/AssemblyName&gt;
&lt;TargetFrameworkProfile&gt;Profile104&lt;/TargetFrameworkProfile&gt;    &lt;--Here!!!!!
&lt;TargetFrameworkVersion&gt;v4.0&lt;/TargetFrameworkVersion&gt;
</code></pre>

<p>  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "></p>

<pre><code>&lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
</code></pre>

<p>```</p>

<h2>再度試す</h2>

<p>もう一度プロジェクトを開いて Nuget から "MvvmCross - Hot Tuna  Starter Pack" を Add すると、成功する。プロジェクトツリーを見ると必要なDLLやソースコードが配置されている。</p>

<p>これで Xamarin Studio でも PCL が使えそう。
MvvmCross の Tutorial - <a href="http://mvvmcross.wordpress.com/">MvvmCross N+1 Table of Context</a> を試せます。</p>
]]></content>
  </entry>
  
</feed>
