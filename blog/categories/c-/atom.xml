<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2014-04-04T15:36:49+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で FromEventPattern を使うときの注意点]]></title>
    <link href="http://amay077.github.io/blog/2014/04/03/notice-for-fromeventpattern-in-xamarin-ios/"/>
    <updated>2014-04-03T15:29:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/04/03/notice-for-fromeventpattern-in-xamarin-ios</id>
    <content type="html"><![CDATA[<p>Reactive Extensions の <code>FromEventPattern</code> を使うと、イベントを <code>IObservable</code> に変換できて、複数のイベントに時系列な関係を与えたり、他のストリーム処理とシームレスに扱えたりします。</p>

<!--more-->


<ul>
<li><a href="http://www.atmarkit.co.jp/fdotnet/introrx/introrx_02/introrx_02_02.html">イベント・プログラミングとRx － ＠IT</a></li>
</ul>


<p>Xamarin .iOS でも .Android でもこの機能を使うことができて大変便利ですが、Xamarin.iOS の場合 AOT による制限に気をつける必要があります。</p>

<p>以下は、なんの変哲もない、「ボタンを押したらタイトルを ”Clicked!” に変える」コードです。</p>

<p><code>csharp
MyButton.TouchUpInside += (s, e) =&gt; MyButton.SetTitle("Clicked!", UIControlState.Normal);
</code></p>

<p>これを FromEventPattern を使うとこう書けます。</p>

<p><code>csharp DoesNotWorkOnDevice.cs
Observable.FromEventPattern(MyButton, "TouchUpInside")
.Subscribe(x =&gt; MyButton.SetTitle("Clicked!", UIControlState.Normal));
</code></p>

<p>このコード、iOSシミュレータでは正常に動作しますが、 <strong>実機では、ビルドは通りますが動作しません。</strong> 実行時にこんなエラーがでます。</p>

<blockquote><p>System.InvalidOperationException: Could not find event 'TouchUpInside' on object of type 'MonoTouch.UIKit.UIButton'.</p></blockquote>

<p><code>TouchUpInside</code> が無いと言われます。</p>

<p>これは AOT により生成されたコードに、このイベントが含まれないのだと推測します。イベント名を文字列リテラルで指定しているので、そこまでの解析は期待できないですよね。</p>

<p>シミュレータで動作したのは、この場合は AOT でなく JIT で動作しているため。以下でも言及されています。</p>

<ul>
<li><a href="http://www.buildinsider.net/mobile/insidexamarin/05">Xamarin.iOSの仕組みとアプリケーションの構成 - Build Insider</a></li>
</ul>


<blockquote><p>対象がiOSシミュレーターである場合と、iOSデバイスである場合とで、大きく異なる。iOSシミュレーターは、エミュレーターではなく、あくまでMac OS Xが動作しているx86 CPUの上で動作している仮想マシンであり、アプリケーションはJITによって動作する。iOSデバイスはARMであり、iOSデバイス用にビルドされたアプリケーションはAOTによってARMのCPU命令に変換されており、ARM上でしか動作しない。</p></blockquote>

<p>Xamarin.iOS では実機で動作させないと安心ならないと言われる所以です。</p>

<p>さて、このケースでは、FromEventPattern の別なオーバーロードを使うことで解決です。</p>

<p><code>csharp WorkOnDevice.cs
Observable.FromEventPattern(
  h =&gt; MyButton.TouchUpInside+=h,
  h =&gt; MyButton.TouchUpInside-=h)
.Subscribe(x =&gt; MyButton.SetTitle("Clicked!", UIControlState.Normal));
</code></p>

<p>Xamarin.iOS の制限事項は以下に。</p>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/limitations/">Limitations | Xamarin</a></li>
</ul>


<p>これまでこの制限に引っかかった事がなかったのですが、初めて引っかかりました。</p>

<p>メソッドを文字列リテラルで書いた時点で私の負けです、本当にありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ to Objects と Java8-Stream API の対応表]]></title>
    <link href="http://amay077.github.io/blog/2014/03/20/linq-to-objects-vs-java8-stream-api/"/>
    <updated>2014-03-20T15:15:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/20/linq-to-objects-vs-java8-stream-api</id>
    <content type="html"><![CDATA[<p>Java8 で <code>filter</code> や <code>map</code> が使えるようになったー！
というわけで .NET の LINQ to Objects との対応表を作ってみました。</p>

<!--more-->


<ul>
<li>LINQ - <a href="http://msdn.microsoft.com/ja-jp/library/system.linq.enumerable(v=vs.110">Enumerable クラス (System.Linq)</a>.aspx)</li>
<li>Java8 - <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">Stream (Java Platform SE 8 )</a></li>
</ul>


<p>の比較です。</p>

<p>Java の方は</p>

<ul>
<li><a href="http://download.java.net/jdk8/docs/api/java/util/stream/Collectors.html">Collectors (Java Platform SE 8 )</a></li>
</ul>


<p>も使います。</p>

<p>まだ試したものは少ないので間違ってるかもしれない ＆ カテゴライズが適当 なので、編集リクエストしてもらえるとありがたいです。</p>

<table>
<thead>
<tr>
<th></th>
<th> 機能 </th>
<th> LINQ </th>
<th> Java8 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <strong>【基本的なやつ】</strong> </td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td> 抽出 </td>
<td> Where </td>
<td> filter </td>
</tr>
<tr>
<td></td>
<td> 射影 </td>
<td> Select </td>
<td> map </td>
</tr>
<tr>
<td></td>
<td> 並べ替え </td>
<td> OrderBy / OrderByDescending </td>
<td> sorted </td>
</tr>
<tr>
<td></td>
<td> 後続を並べ替え </td>
<td> ThenBy / ThenByDescending </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 平坦化して射影 </td>
<td> SelectMany </td>
<td> flatMap </td>
</tr>
<tr>
<td></td>
<td> <strong>【抽出系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> ｎ件飛ばす </td>
<td> Skip </td>
<td> skip </td>
</tr>
<tr>
<td></td>
<td> 条件を満たすまで飛ばす </td>
<td> SkipWhile </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> ｎ件まで流す </td>
<td> Take </td>
<td> limit </td>
</tr>
<tr>
<td></td>
<td> 条件を満たすまで流す </td>
<td> TakeWhile </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> <strong>【合成系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> 連結 </td>
<td> Concat </td>
<td> concat </td>
</tr>
<tr>
<td></td>
<td> 積集合 </td>
<td> Intersect </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 和集合 </td>
<td> Union </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 差集合 </td>
<td> Except </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 内部結合 </td>
<td> Join </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 外部結合</td>
<td> GroupJoin </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 並びを逆にする </td>
<td> Reverse </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 2つの値を揃えて流す </td>
<td> Zip </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> <strong>【グループ化、集計系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> 重複を無くす </td>
<td> Distinct </td>
<td> distinct </td>
</tr>
<tr>
<td></td>
<td> 畳み込み </td>
<td> Aggregate </td>
<td> reduce </td>
</tr>
<tr>
<td></td>
<td> グループ化 </td>
<td> GroupBy </td>
<td> Collectors.groupingBy </td>
</tr>
<tr>
<td></td>
<td> 平均 </td>
<td> Average </td>
<td> IntStream.average /  Collectors.summarizingXXX </td>
</tr>
<tr>
<td></td>
<td> 件数 </td>
<td> Count / LongCount </td>
<td> count </td>
</tr>
<tr>
<td></td>
<td> 最大 </td>
<td> Max </td>
<td> max </td>
</tr>
<tr>
<td></td>
<td> 最小 </td>
<td> Min </td>
<td> min </td>
</tr>
<tr>
<td></td>
<td> 合計 </td>
<td> Sum </td>
<td> IntStream.sum / Collectors.summarizingXXX</td>
</tr>
<tr>
<td></td>
<td> 先頭 </td>
<td> First / FirstOrDefault </td>
<td> findFirst </td>
</tr>
<tr>
<td></td>
<td> 終端 </td>
<td> Last / LastOrDefault </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> とりあえず値を得る </td>
<td> </td>
<td> findAny </td>
</tr>
<tr>
<td></td>
<td> 集計用の汎用関数？ </td>
<td> </td>
<td> collect </td>
</tr>
<tr>
<td></td>
<td> 1件の値を得る </td>
<td> Single / SingleOrDefault </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 空なら既定値を返す </td>
<td> DefaultIfEmpty </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 全データが条件にマッチするか？ </td>
<td> All </td>
<td> allMatch </td>
</tr>
<tr>
<td></td>
<td> いずれかのデータが条件にマッチするか？ </td>
<td> Any </td>
<td> anyMatch </td>
</tr>
<tr>
<td></td>
<td> いずれかのデータも条件にマッチしないか？ </td>
<td> </td>
<td> noneMatch </td>
</tr>
<tr>
<td></td>
<td> <strong>【生成系】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> 空っぽ </td>
<td> Empty </td>
<td> empty </td>
</tr>
<tr>
<td></td>
<td> 範囲を生成 </td>
<td> Range </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 繰り返す </td>
<td> Repeat </td>
<td> n/a </td>
</tr>
<tr>
<td></td>
<td> 無限リスト生成 </td>
<td> </td>
<td> generate / iterate </td>
</tr>
<tr>
<td></td>
<td> <strong>【その他】</strong> </td>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td></td>
<td> </td>
<td> SequenceEqual </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 列挙 </td>
<td> ToList().ForEach </td>
<td> forEach </td>
</tr>
<tr>
<td></td>
<td> なんか Action を挟む(デバッグ用？) </td>
<td> </td>
<td> peek </td>
</tr>
</tbody>
</table>


<p>ううむ、合成系の機能はほとんどないようです…ので自力でやるしか。
以下、サンプル。</p>

<h2>サンプル</h2>

<p>LINQ の方は Mac+Mono(Xamarin) で試しています（ぼそり</p>

<h3>抽出(Where)、並べ替え(OrderBy)、射影(Select)</h3>

<p>0〜9 を、偶数値だけ抽出して、降順にソートして、値を10倍して、出力。</p>

<p><code>csharp C#
Enumerable.Range(0, 10)
  .Where(x =&gt; x % 2 == 0)
  .OrderByDescending(x =&gt; x)
  .Select(x =&gt; x * 10)
  .ToList().ForEach(Console.WriteLine);
</code></p>

<p><code>java Java
Arrays.asList(0,1,2,3,4,5,6,7,8,9).stream()
  .filter(x -&gt; x % 2 == 0)
  .sorted((x, y) -&gt; y - x)
  .map(x -&gt; x * 10)
  .forEach(System.out::println);
</code></p>

<p><code>
80 60 40 20 0
</code></p>

<h3>平坦化して射影(SelectMany)</h3>

<p>1〜5のリストから、「n×10から始まるn件」のリストを生成。(結果見たほうが分かりやすいな（<sup>_<sup>;)</sup></sup></p>

<p><code>csharp C#
Enumerable.Range(1, 5)
  .SelectMany(x =&gt; Enumerable.Range(10 * x, x))
  .ToList().ForEach(Console.WriteLine);
</code></p>

<p><code>java Java
Arrays.asList(1,2,3,4,5).stream()
  .flatMap(x -&gt; IntStream.range(x * 10, x * 10 + x).boxed())
  .forEach(System.out::println);
</code></p>

<p><code>
10
20 21
30 31 32
40 41 42 43
50 51 52 53 54
</code></p>

<h3>抽出系(Take, Skip)</h3>

<p>1〜10のリストの3件飛ばして、5件取得。</p>

<p><code>csharp C#
Enumerable.Range(1, 10)
  .Skip(3)
  .Take(5)
  .ToList().ForEach(Console.WriteLine);
</code></p>

<p><code>java Java
// 無限リストでも limit あるから大丈夫
Stream.iterate(1, x-&gt; x++)
  .skip(3)
  .limit(5)
  .forEach(System.out::println);
</code></p>

<p><code>
4 5 6 7 8
</code></p>

<p>LINQ には件数でなく条件を指定できる <code>TakeWhile</code> <code>SkipWhile</code> がありますが、Java にはなさそうなので <code>filter</code> で代用しないといけなさそう。</p>

<p><code>csharp C#
Enumerable.Range(1, 10)
  .SkipWhile(x =&gt; x &lt; 4)
  .TakeWhile(x =&gt; x &lt; 9)
  .ToList().ForEach(Console.WriteLine);
</code></p>

<h3>連結(Concat)</h3>

<p>2つのリストをつなげる</p>

<p><code>csharp C#
new int[] { 1, 2, 3 }.Concat(new int[]{ 30, 20, 10 })
.ToList().ForEach(Console.WriteLine);
</code></p>

<p><code>java Java
Stream.concat(
  Arrays.asList(1,2,3).stream(),
  Arrays.asList(30,20,10).stream())
.forEach(System.out::println);
</code></p>

<p>なんで static メソッドやねん…。</p>

<p><code>
1 2 3 30 20 10
</code></p>

<h3>積集合(Intersect)、和集合(Union)、差集合(Except)</h3>

<p>積集合：2つのリストから重複をなくす。
和集合：2つのリストをマージする。
差集合：リスト1を基準にリスト2との差分を得る。</p>

<p>```csharp C#
var list1 = new int[]{1,2,3,4,5,6};
var list2 = new int[]{8,7,6,5,4};</p>

<p>list1.Intersect(list2)
  .ToList().ForEach(Console.WriteLine);</p>

<p>list1.Union(list2)
  .ToList().ForEach(Console.WriteLine);</p>

<p>list1.Except(list2)
  .ToList().ForEach(Console.WriteLine);
```</p>

<p>```java Java
// 自力で実現かよｗ
list1.stream().filter(x -> list2.stream().anyMatch(y -> y == x))
  .forEach(System.out::println);</p>

<p>Stream.concat(list1.stream(),
  list2.stream().filter(x -> list1.stream().noneMatch(y -> y == x)))
  .forEach(System.out::println);</p>

<p>list1.stream().filter(x -> list2.stream().noneMatch(y -> y == x))
  .forEach(System.out::println);
```</p>

<p><code>
4 5 6 // 積
1 2 3 4 5 6 8 7 // 和
1 2 3 // 差
</code></p>

<h3>内部結合(Join)</h3>

<p>商品マスタと売上テーブルを INNER JOIN する的な。</p>

<p>```csharp C#
var master = new [] {</p>

<pre><code>new { Id = 1, Name = "Apple" },
new { Id = 2, Name = "Grape" }
</code></pre>

<p>};</p>

<p>var sales = new [] {</p>

<pre><code>new { Id = 1, Sales = 100 },
new { Id = 2, Sales = 200 },
new { Id = 2, Sales = 300 },
new { Id = 3, Sales = 400 },
</code></pre>

<p>};</p>

<p>master.Join(sales,
  outer=>outer.Id,
  inner=>inner.Id,
  (o, i) => new { o.Name, i.Sales })
.ToList().ForEach(Console.WriteLine);
```</p>

<p>```java Java
// 自力
List&lt;Pair&lt;Integer, String>> master = Arrays.asList(
  new Pair&lt;>(1, "Apple"),
  new Pair&lt;>(2, "Grape")
);</p>

<p>List&lt;Pair&lt;Integer, Integer>> sales = Arrays.asList(
  new Pair&lt;>(1, 100),
  new Pair&lt;>(2, 200),
  new Pair&lt;>(2, 300),
  new Pair&lt;>(3, 400)
);</p>

<p>master.stream()
  .flatMap(outer -> sales.stream()</p>

<pre><code>.filter(inner -&gt; outer.getKey() == inner.getKey())
.map(z-&gt; new Pair&lt;String, Integer&gt;(outer.getValue(), z.getValue())))
</code></pre>

<p>  .forEach(System.out::println);
```</p>

<p><code>
{ Name = Apple, Sales = 100 }
{ Name = Grape, Sales = 200 }
{ Name = Grape, Sales = 300 }
</code></p>

<h3>外部結合(GroupJoin)</h3>

<p>商品マスタと売上テーブルを OUTER JOIN する的な。結合先のテーブルに行が見つからなかったものは null になる。</p>

<p>```csharp C#
var master = new [] {</p>

<pre><code>new { Id = 1, Name = "Apple" },
new { Id = 2, Name = "Grape" },
new { Id = 5, Name = "Orange" },
</code></pre>

<p>};</p>

<p>var sales = new [] {  // Orange は無い</p>

<pre><code>new { Id = 1, Sales = 100},
new { Id = 2, Sales = 200},
new { Id = 3, Sales = 400},
</code></pre>

<p>};</p>

<p>master.GroupJoin(sales,
  outer=>outer.Id,
  inner=>inner.Id,
  (o, i) => new { o.Name, FirstOfSales = i.Select(</p>

<pre><code>x=&gt;(int?)x.Sales).FirstOrDefault() }) // 無かったら null にしたいので null許容型にしてから FirstOrDefault
</code></pre>

<p>.ToList().ForEach(Console.WriteLine);
```</p>

<p>たぶん普通は First じゃなくて Sum とか使うんだろう。</p>

<p>```java Java
// これも自力
List&lt;Pair&lt;Integer, String>> master = Arrays.asList(
  new Pair&lt;>(1, "Apple"),
  new Pair&lt;>(2, "Grape"),
  new Pair&lt;>(5, "Orange")
);</p>

<p>List&lt;Pair&lt;Integer, Integer>> sales = Arrays.asList(
  new Pair&lt;>(1, 100),
  new Pair&lt;>(2, 200),
  new Pair&lt;>(2, 300),
  new Pair&lt;>(3, 400)
);</p>

<p>master.stream().map(outer->new Pair&lt;String, Optional<Integer>>(outer.getValue(),
  sales.stream()</p>

<pre><code>.filter(inner-&gt;inner.getKey() == outer.getKey()) // Id でフィルタ
  .map(x-&gt;x.getValue()) // Sales だけに射影
  .findFirst())) // 同一Id中の先頭
</code></pre>

<p>  .forEach(System.out::println);
```</p>

<p>```
[.NET]
{ Name = Apple, FirstOfSales = 100 }
{ Name = Grape, FirstOfSales = 200 }
{ Name = Orange, FirstOfSales = } // 相手が居ないやつは null になる</p>

<p>[Java]
Apple=Optional[100]
Grape=Optional[200]
Orange=Optional.empty // Option だから empty になるのは良い
```</p>

<h3>2つの値を揃えて流す(Zip)</h3>

<p>２つのリストの値をひとつずつセットにして流す。</p>

<p>```csharp C#
var arr1 = new int[] { 1, 2, 3, 4, 5 };
var arr2 = new string[] { "hoge", "fuga", "piyo" };</p>

<p>arr1.Zip(arr2, (x, y) =>  new {x, y})</p>

<pre><code>.ToList()
.ForEach(Console.WriteLine);
</code></pre>

<p>```</p>

<p><code>java Java
// FIXME どうやるの？ Streams.zip はどこいった？
</code></p>

<p><code>
{ x = 1, y = hoge }
{ x = 2, y = fuga }
{ x = 3, y = piyo }
</code></p>

<h3>重複を無くす(Distinct)</h3>

<p>重複する数値リストから重複をなくす。</p>

<p><code>csharp C#
new int[]{1,3,4,3,2,4}
  .Distinct()
  .ToList().ForEach(Console.WriteLine);
</code></p>

<p><code>java Java
Arrays.asList(1,3,4,3,2,4).stream()
  .distinct()
  .forEach(System.out::println);
</code></p>

<p><code>
1 3 4 2
</code></p>

<h3>畳み込み</h3>

<p>いろいろな集計の素、畳み込み。言語により fold とか reduce とか aggregate とか、いろいろな呼び名がありますね。
よい例が浮かなかったので Max を実装してみました。</p>

<p>```csharp C#
var max = new int[]{1,5,3,7,2,4}</p>

<pre><code>.Aggregate(Int32.MinValue, (x, y) =&gt; Math.Max(x, y));
</code></pre>

<p>Console.WriteLine(max);
```</p>

<p><code>java Java
int max = Arrays.asList(1,5,3,7,2,4).stream()
  .reduce(Integer.MIN_VALUE, (x, y) -&gt; Math.max(x, y));
System.out.println(max);
</code></p>

<p><code>
7
</code></p>

<h3>グループ化</h3>

<p>リストの要素をキーにしてグループ化する。Salesは合計を計算する。</p>

<p>```csharp C#
var sales = new [] {</p>

<pre><code>new { Id = 1, Sales = 100 },
new { Id = 2, Sales = 200 },
new { Id = 2, Sales = 300 },
new { Id = 3, Sales = 400 },
</code></pre>

<p>};</p>

<p>sales.GroupBy(x=>x.Id, (Id, groupedSales) => new {Id,</p>

<pre><code>SumOfSales = groupedSales.Sum( element =&gt; element.Sales) // Sales は合計する
</code></pre>

<p>  })
  .ToList().ForEach(Console.WriteLine);
```</p>

<p>（LINQ ではありませんが、 <code>List.LookUp</code> を使って実現することもできるようです → <a href="http://qiita.com/amay077/items/9d2941283c4a5f61f302#comment-82388821b902ad7999b0">コメント:2014/03/22 00:29</a>）</p>

<p>```java Java
// javafx に Pair があったので Tuple 代わりに使っちゃった
List&lt;Pair&lt;Integer, Integer>> list1 = Arrays.asList(
  new Pair&lt;>(1, 100),
  new Pair&lt;>(2, 200),
  new Pair&lt;>(2, 300),
  new Pair&lt;>(3, 400)
);</p>

<p>list1.stream().collect(Collectors.groupingBy(x -> x.getKey()))
  .entrySet().stream() // group化の結果が Map なので、エントリを Stream 化
  .map(x -> new Pair&lt;Integer, Integer>(</p>

<pre><code>x.getKey(), // Key が Id に相当
x.getValue().stream().collect(Collectors.summingInt(y-&gt;y.getValue())))) // Value が List なのでまた Stream 化して合計を得る
</code></pre>

<p>  .forEach(System.out::println);</p>

<p>// Collectors.groupingBy 使わずに Map.merge を使ったほうが分かりやすい気も。。。
list1.stream().collect(
  () -> new HashMap&lt;Integer, Integer>(),
  (map, item) -> map.merge(item.getKey(), item.getValue(), (x, y) -> x + y), // 同じキーの値を加算してく
  (left, right) -> left.putAll(right))
  .forEach((k, v) -> System.out.println(k + ":" + v));
```</p>

<p>Java の方、カオスすぎる…。.NET の <code>IGrouping</code> を Map でやってるからだな。</p>

<p>```
[.NET]
{ Id = 1, SumOfSales = 100 }
{ Id = 2, SumOfSales = 500 } // ID=2 の Sales が合計されている
{ Id = 3, SumOfSales = 400 }</p>

<p>[Java]
1=100
2=500
3=400
```</p>

<h3>合計(Sum)、最大(Max)、最小(Min)、平均(Average)、件数(Count)、先頭(First)、終端(Last)</h3>

<p>集計いろいろ。</p>

<p><code>csharp C#
var list1 = Enumerable.Range(0, 10);
Console.WriteLine("Sum={0}", list1.Sum());
Console.WriteLine("Max={0}", list1.Max());
Console.WriteLine("Min={0}", list1.Min());
Console.WriteLine("Count={0}", list1.Count());
Console.WriteLine("First={0}", list1.First());
Console.WriteLine("Last={0}", list1.Last());
Console.WriteLine("Average={0}", list1.Average());
</code></p>

<p>```java Java
List<Integer> list1 = Arrays.asList(0,1,2,3,4,5,6,7,8,9);
IntSummaryStatistics stats = list1.stream().collect(Collectors.summarizingInt(x -> x)); // Max,Min,Count,Average が取得できる
System.out.println("Sum=" + stats.getSum());
System.out.println("Max=" + stats.getMax());
System.out.println("Min=" + stats.getMin());
System.out.println("Count=" + stats.getCount());
System.out.println("First=" + list1.stream().findFirst().orElse(-1)); // summarizing では取れない
System.out.println("Last=" + list1.stream().sorted((x,y) -> y-x).findFirst().orElse(-1)); // 微妙
System.out.println("Average=" + stats.getAverage());</p>

<p>System.out.println("Average=" + IntStream.range(0, 10).average()); // 型指定 Stream なら average, sum がある（結果は Option に包まれる）
```</p>

<p><code>
Sum=45
Max=9
Min=0
Count=10
First=0
Last=9
Average=4.5
</code></p>

<p>…疲れた。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ふたつの Iterator を LINQ で]]></title>
    <link href="http://amay077.github.io/blog/2014/03/19/pair-iterator-implements-by-linq/"/>
    <updated>2014-03-19T00:33:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/19/pair-iterator-implements-by-linq</id>
    <content type="html"><![CDATA[<p>ふたつの Iterator を LINQ で</p>

<ul>
<li><a href="http://d.hatena.ne.jp/Nagise/20140315/1394884271">ふたつのIterator - プログラマーの脳みそ</a></li>
</ul>


<p>を拝見しました。</p>

<!--more-->


<p>コメントで「Zip じゃん」というのがあり、「確かに！」と思ったのでやってみました。</p>

<h2>C＃ の場合</h2>

<p>```csharp
// using using System.Linq;</p>

<p>var arr1 = new int[] { 1,2,3,4,5 };
var arr2 = new string[] { "hoge", "fuga", "piyo" };</p>

<p>arr1.Zip(arr2, (x, y) =>  new {x, y})</p>

<pre><code>.ToList()
.ForEach(Console.WriteLine);
</code></pre>

<p>```</p>

<h4>結果</h4>

<p><code>
{ x = 1, y = hoge }
{ x = 2, y = fuga }
{ x = 3, y = piyo }
</code></p>

<p>うむ、シンプル。要素数が違ってても少ない方に合わせてくれます。</p>

<h2>Java の場合</h2>

<p><a href="https://code.google.com/p/reactive4java/">reactive4java</a> というライブラリがありまして、これは Java で Reactive Extensions を実現するライブラリなのですが、LINQ的な機能が <code>Interactive</code> というクラスで提供されています。</p>

<p>これを使うと Zip ができます。</p>

<p>```java
//import hu.akarnokd.reactive4java.base.Func2;
//import hu.akarnokd.reactive4java.interactive.Interactive;</p>

<p>Iterable<Integer> array1 = Arrays.asList(1,2,3,4,5);
Iterable<String> array2 = Arrays.asList("hoge", "fuga", "piyo");</p>

<p>Iterator&lt;Pair&lt;Integer, String>> zippedIter =</p>

<pre><code>    Interactive.zip(array1, array2, 
            new Func2&lt;Integer, String, Pair&lt;Integer, String&gt;&gt;() {
@Override
public Pair&lt;Integer, String&gt; invoke(Integer x, String y) {
    return new Pair&lt;Integer, String&gt;(x, y);
}
</code></pre>

<p>}).iterator();</p>

<p>while (zippedIter.hasNext()) {</p>

<pre><code>Pair&lt;Integer, String&gt; p = zippedIter.next();
Log.d("StartupActivity", String.format("x=%d, y=%s", p.first, p.second));
</code></pre>

<p>}
```</p>

<p>ああ、Android で試したので <code>Pair</code> とか使ってしまった。
普通の Java の場合は自作の Tuple などに置き換えを。</p>

<h4>結果</h4>

<p><code>
x=1, y=hoge
x=2, y=fuga
x=3, y=piyo
</code></p>

<p>C# より冗長ですけど、いい感じで利用できるのではと思います。</p>

<p>reactive4java が Java8 のラムダ式に対応してくれると、上のコードはもっと簡潔に書けます。</p>

<p><a href="https://code.google.com/p/reactive4java/wiki/Reactive4Java8">Reactive4Java8</a> には、対応してる感じが見られますが、<a href="https://code.google.com/p/reactive4java/">Top ページ</a> によると、どうやら、「reactive4java の開発は終了し、<a href="https://github.com/Netflix/RxJava">RxJava</a> の開発に参加するつもりだ」みたいなことが書いてあります。</p>

<p>また、RxJava でなく reactive4java を使う利点として、<code>Interactive</code> 機能群の存在を挙げています。
単純に LINQ 的な機能を Java で使いたいならば、 reactive4java はまだまだ役に立つと思います。</p>

<p>最後に、もしあなたが Android 開発をしていて、Java の冗長さに嫌気がさしているなら、<a href="http://xamarin.com/csharp"><strong>Xamarin へどうぞ</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS アプリでアラート出してボタンが押されるまで待つ？方法を Objective-C と Xamarin.iOS で比べてみた]]></title>
    <link href="http://amay077.github.io/blog/2014/03/10/using-uialertview-objc-vs-xamarin/"/>
    <updated>2014-03-10T22:09:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/03/10/using-uialertview-objc-vs-xamarin</id>
    <content type="html"><![CDATA[<p>なんか割とニーズがあるみたいで。</p>

<!--more-->


<ul>
<li><a href="http://teapipin.blog10.fc2.com/blog-entry-224.html">【Objective-C】アラート（UIAlertView）でボタンを押すまで次の処理を待つ方法 - creativi.tea</a></li>
<li><a href="http://cocoadays.blogspot.jp/2011/05/ios.html">Cocoaの日々: [iOS] 非同期処理を同期処理に変える</a></li>
<li><a href="http://qiita.com/edo_m18/items/cb1d9061d91e572b58eb">[Objective-C] UIAlertViewを同期処理する - Qiita </a></li>
</ul>


<h2>Objective-C の場合</h2>

<p><code>UIAlertView</code> は、結果を受け取るのが deletgate で、 Objective-C では、(Blocks を使わなければ) 受け取りが別メソッドになってしまう、しかも複数のアラートの結果が同じメソッドに飛んでくるので、tag値で分岐…とかいろいろで、ホントに使うのが面倒ですね。</p>

<p>さらに、「アラートの結果を受け取ってから、次の処理を行う」という処理を素直に記述したいと思うと、上で示したような「アラートを表示して、結果が得られるまで while で待つ」というなんとも不格好なコードになってしまいます。下にも書いてみました。（あ、メンバ変数も使わざるを得ないし。）</p>

<p>```objective-c HogeViewController.m
@implementation HogeViewController {</p>

<pre><code>NSInteger _buttonIndex;
</code></pre>

<p>}</p>

<ul>
<li>(IBAction)buttonTouchUp:(id)sender
{
  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil

<pre><code>                          message:NSLocalizedString(@"なにか押して",@"")
                         delegate:self
                cancelButtonTitle:@"Cancel"
                otherButtonTitles:@"OK", nil];
</code></pre>

<p>  [alert show];</p>

<p>  // ボタンが押されるまで待つ
  <em>buttonIndex = -1;
  while (</em>buttonIndex == -1) {</p>

<pre><code>  [[NSRunLoop currentRunLoop]
   runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.5f]]; // 0.5秒
</code></pre>

<p>  }</p>

<p>  label1.text = [NSString stringWithFormat:@"%d 番目のボタンを押したね", (int)_buttonIndex];
}</p></li>
</ul>


<p>-(void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{</p>

<pre><code>_buttonIndex = buttonIndex;
</code></pre>

<p>}
```</p>

<p><code>[NSRunLoop runUntilDate]</code> なんて VB6 の <code>DoEvents</code> ですもんねなつかしい。</p>

<h2>Xamarin.iOS(C#) の場合</h2>

<p>Objective-C ではややこしかった「アラートを出す→ボタンを押す→次の処理へ」という流れ、 Xamarin.iOS と C# ならこんなにシンプルに書けます。</p>

<p>```csharp HogeViewController.cs
async void OnButtonTouch(object sender, EventArgs e)
{</p>

<pre><code>var buttonIndex = await MsgBox("", "なにか押して", "Cancel", "OK");
label1.Text = buttonIndex.ToString() + "番目を押したね";  
</code></pre>

<p>}</p>

<p>static Task<int> MsgBox(string title, string message,</p>

<pre><code>string cancelButtonTitle, params string[] buttons)
</code></pre>

<p>{</p>

<pre><code>var comp = new TaskCompletionSource&lt;int&gt;();

var alert = new UIAlertView(title, message, null, cancelButtonTitle, buttons);
alert.Clicked += (_, e) =&gt; comp.TrySetResult(e.ButtonIndex);
alert.Show();

return comp.Task;
</code></pre>

<p>}
```</p>

<p>VB6 が懐かしくて <code>MsgBox</code> ってメソッドにしちゃいましたよ。</p>

<p><code>MsgBox</code> は、Task を返す <strong>非同期な</strong> メソッドです。この非同期処理が終了するのは、<code>TaskCompletionSource.TrySetResult</code> が呼び出された時、つまりアラートのボタンが押された時です。この非同期処理の戻り値はもちろん押したボタンのインデックスです。</p>

<p>非同期メソッドである <code>MsgBox</code> を呼び出す側には、キーワード <code>await</code> が付いています。
これをつけると、次行以降の処理は、非同期の MsgBox が完了した後、順次実行されます、つまり待っているわけではなく、どちらかというと、 <strong>処理を後続に付け足す</strong> 感じ。
さらに、この後続処理はUIスレッドで実行されるので、UIパーツへのアクセスも問題ありません。</p>

<p><code>async</code> はメソッド内で <code>await</code> を使うときにつけるお約束。</p>

<p>async/await は一見、ただの同期処理に見えるので理解して使う必要がありますが、Objective-C のコードに比べて、とても簡潔に、流れるように書くことができるのが分かると思います。</p>

<p><strong>C# の非常に強力な言語機能は、<a href="https://xamarin.com/">Xamarin</a> を選択する大きな理由の一つです。</strong></p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/4613071/messagebox-show-and-dialogresult-equivalent-in-monotouch">c# - Messagebox.Show and DialogResult equivalent in MonoTouch - Stack Overflow</a></li>
<li><a href="http://ufcpp.wordpress.com/2012/11/12/asyncawait%e3%81%a8%e5%90%8c%e6%99%82%e5%ae%9f%e8%a1%8c%e5%88%b6%e5%be%a1/">async/awaitと同時実行制御 | ++C++; // 未確認飛行 C ブログ</a></li>
<li><a href="http://www.slideshare.net/bleistift/asyncawait2">async/await不要論</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin によるクロスプラットフォームモバイルアプリ開発、資料と補足]]></title>
    <link href="http://amay077.github.io/blog/2014/02/27/slides-from-my-xamarin-introduction/"/>
    <updated>2014-02-27T21:40:00+09:00</updated>
    <id>http://amay077.github.io/blog/2014/02/27/slides-from-my-xamarin-introduction</id>
    <content type="html"><![CDATA[<p>2/26 の <a href="http://atnd.org/events/47898">うずらインキュベータ</a> という勉強会で、Xamarin の話をしました。</p>

<!--more-->




<iframe src="http://www.slideshare.net/slideshow/embed_code/31674661" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/amay077/xamarin-31674661" title="Xamarin によるクロスプラットフォームモバイルアプリ開発" target="_blank">Xamarin によるクロスプラットフォームモバイルアプリ開発</a> </strong> from <strong><a href="http://www.slideshare.net/amay077" target="_blank">amay 077</a></strong> </div></p>

<p>45分という長い時間話すのは勉強会では初めてだったのですが、なんとか説明し切ることができました。（ちょっとデモが中途半端になってしまいましたが）</p>

<p>資料は <a href="http://qiita.com/tags/xamarin">Qiita に書いてきた</a> 内容のまとめみたいなものですが、少し補足します。</p>

<h2>Xamarin で作った経験あるの？</h2>

<p>仕事では、まだ無いです（<sup>_<sup>;）</sup></sup>
個人アプリでは「<a href="https://itunes.apple.com/us/app/fu-shifoto/id806913229">富士フォト</a>」というのを iOS 用は Xamarin.iOS で作りました。<a href="https://play.google.com/store/apps/details?id=com.amay077.android.fujiphoto">Android</a> は Java ですが Xamarin 化したいな。</p>

<h2>Win+Visual Studio ではダメなの？</h2>

<p>個人の見解ですから（<sup>_<sup>;）</sup></sup>
私も元々は Windowsの開発がメインで Visual Studio の強力さは知っていますが、iOS やるならどういう形にせよ Mac+Xcode を扱わないといけないので、慣れておいた方がよいかなと。</p>

<p>また、Microsoft との提携以降、Microsoft のエバンジェリストさんや MVP の方々が Visual Studio + Xamarin の話をものすごく展開されているので、そちらにお任せした次第です。</p>

<h2>実行モデルのとこ</h2>

<p>JavaSE が .NET に置き換わる図になっていますが、実際には少し違っていて、JavaSE のラッパもあります。例えば文字列型には、<code>System.String</code> と <code>Java.Lang.String</code> があります。当然、理由がなければ前者を使った方がよいわけですが。</p>

<p>iOS のスタックに関しては、実はどこからどこまでが「CocoaTouch」なのかよく分かってません。</p>

<h2>他のクロスプラットフォーム開発ツールとの比較</h2>

<p>Titanium, AIR については2年くらい前に少し触ったことがあります。PhoneGap と DelphiXE についてはスペックを見て＆詳しい方からの情報を元にしてます。</p>

<p>Titanium は次期 <a href="http://titanium-mobile.jp/38">Ti.Next</a> では JavaScriptCore を使ってすんごく速くなるそうですし、AIR も当時よりだいぶ <a href="http://www.slideshare.net/pik256/dev-sumi2014-13c4rev">高速になったらしい</a> です。</p>

<h2>C# のとこ</h2>

<p>https://xamarin.com/csharp よりは悪意のないコードかとｗ
（Objective-C と比較しようとすると Obj-C の方が画面に入らないので Java との比較にしました。）</p>

<p>こんなところで。
何かおかしなところがあったらコメント頂けるとありがたいです。</p>
]]></content>
  </entry>
  
</feed>
