<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: baas | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/baas/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-02-03T02:29:06+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin で Windows Azure モバイルサービスを使う(その3:プッシュ通知編)]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/19/using-azure-mobile-services-in-xamarin-3/"/>
    <updated>2013-12-19T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/19/using-azure-mobile-services-in-xamarin-3</id>
    <content type="html"><![CDATA[<p>たぶん最終回です。<a href="http://qiita.com/amay077/items/ea510071bee85569dc18">前回</a> は、OAuth認証を実装しました。
今回は、前回のサンプルの続きとして、Xamarin.iOS + Azure Mobile Service によるプッシュ通知を実装してみます。</p>

<!--more-->


<p>プッシュ通知を組み込むためのチュートリアルはこちら</p>

<ul>
<li><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp">Get started with push notifications (Xamarin iOS) | Mobile Dev Center</a></li>
</ul>


<p>では、早速いってみましょう。</p>

<h2>プッシュ通知用の証明書ファイルを作成する</h2>

<blockquote><ol>
<li>Generate the Certificate Signing Request file</li>
<li>Register your app and enable push notifications</li>
<li>Create a provisioning profile for the app</li>
</ol>
</blockquote>

<p>についてです。</p>

<p>iOS でプッシュ通知を行うには Apple Push Notification Service(APNS) を使用しますので、その準備から始まります。
「もう知ってるよ」という人は 「4. Configure Mobile Services」から読んでも良いかと思います。</p>

<p>初めて行う人は、こちら↓の説明の方が日本語で分かりやすいかと思います。</p>

<ul>
<li><a href="http://blog.katty.in/4040">iPhoneのプッシュ通知(APNS)の証明書の作り方 | 三度の飯とエレクトロン</a></li>
</ul>


<p>この手順で最後に必要なのは「p12ファイル」です。パスワードはかかっていても問題ありません。</p>

<h2>Azure モバイルサービスにプッシュの設定をする</h2>

<blockquote><p>4 Configure Mobile Services</p></blockquote>

<p>についてです。</p>

<p>まず、Azure マネージメントポータル (<a href="https://manage.windowsazure.com/">https://manage.windowsazure.com/</a>) から、モバイルサービス → 項目 → を選んで、上部にある「プッシュ」を選択します。
次に「apple プッシュ通知の設定」の証明書に、先に手順で入手した 「.p12ファイル」をアップロードします。パスワードはその時決めたものを入力します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_02.png" alt="" /></p>

<h2>アプリケーションにプッシュ通知を実装する</h2>

<blockquote><p>5 Add push notifications to your app</p></blockquote>

<p>について。ここ、ハマりどころ多いです。</p>

<p>Xamarin Studio で、前回のサンプルを開いてコードを追加していきます。</p>

<p><code>AppDelegate.cs</code> に、端末を識別するためのIDを保持するプロパティを作ります。</p>

<p><code>csharp AppDelegate.cs
public string DeviceToken { get; set; }
</code></p>

<p><code>ToDoItem.cs</code> にも同じく DeviceToken を追加します。
が、説明にある <code>[DataMember…</code> は間違いです。正しくは <code>[JsonProperty…</code> です。</p>

<p><code>csharp ToDoItem.cs
×[DataMember(Name = "deviceToken")]
[JsonProperty(PropertyName = "deviceToken")]
public string DeviceToken { get; set; }
</code></p>

<p>再び <code>AppDelegate.cs</code> に戻って、アプリが起動完了した時に、APNS サーバにアプリを登録するコードを追加します。</p>

<p>```csharp AppDelegate.cs
public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)
{</p>

<pre><code>UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | 
    UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;
UIApplication.SharedApplication.RegisterForRemoteNotificationTypes(notificationTypes); 

return true;
</code></pre>

<p>}
```</p>

<p>次に同じく  <code>AppDelegate.cs</code> に、アプリ登録完了時にデバイストークンを受け取るコールバックを実装します。</p>

<p><strong>ここが2つ目のハマりポイントです。</strong>
<code>deviceToken.Description</code> を使用していますが、これは iOSネイティブと異なり <strong>空白入りの文字列を返す</strong> ようです。そのためそのまま DeviceToken として利用すると、通知が来ません。エラーにもならないので原因究明に数時間要しました…。<code>Replace</code> で空白も取り除きます。</p>

<p>```csharp AppDelegate.cs
public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{</p>

<pre><code>string trimmedDeviceToken = deviceToken.Description;
if (!string.IsNullOrWhiteSpace(trimmedDeviceToken))
{
    trimmedDeviceToken = trimmedDeviceToken.Trim('&lt;');
    trimmedDeviceToken = trimmedDeviceToken.Trim('&gt;');
    trimmedDeviceToken = trimmedDeviceToken.Replcae(“ “, “”); // ←追加
}
DeviceToken = trimmedDeviceToken;
</code></pre>

<p>}
```</p>

<p>そして、<code>AppDelegate.cs</code> に、プッシュ通知受信時のコードを書きます。</p>

<p>```csharp AppDelegate.cs
public override void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo)
{</p>

<pre><code>Debug.WriteLine(userInfo.ToString());
NSObject inAppMessage;

bool success = userInfo.TryGetValue(new NSString("inAppMessage"), out inAppMessage);

if (success)
{
    var alert = new UIAlertView("Got push notification", inAppMessage.ToString(), null, "OK", null);
    alert.Show();
}
</code></pre>

<p>}
```</p>

<p>最後に <code>QSTodoListViewController.cs</code> の <code>OnAdd</code> を次のように変更して、追加するデータに DeviceToken を含めるようにします。この値を使って、Azure 側でプッシュ通知を送ります。</p>

<p>```csharp QSTodoListViewController.cs
var deviceToken = ((AppDelegate)UIApplication.SharedApplication.Delegate).DeviceToken;</p>

<p>var newItem = new ToDoItem()
{</p>

<pre><code>Text = itemText.Text, 
Complete = false,
DeviceToken = deviceToken
</code></pre>

<p>};
```</p>

<p>コードの記述はこれで終わりですが、Xamarin Studio から、iOS アプリを実機で動かしたことがない人は、iOS Developer Account の設定をしておきましょう。</p>

<p>システムメニュー → Preferences、Environment → Developer Accounts から追加しておきます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_03.png" alt="" /></p>

<h2>マネージメントポータルで、データの追加時のスクリプトを登録する</h2>

<blockquote><p>6 Update the registered insert script in the Management Portal</p></blockquote>

<p>についてです。</p>

<p>まず、マネージメントポータル <a href="https://manage.windowsazure.com/">https://manage.windowsazure.com/</a> を開き、モバイルサービス → サービス名 → データ → テーブル名 と選択します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_04.png" alt="" /></p>

<p>次に、スクリプト を選択し、ドロップダウンから「挿入」を選択します。テーブルにデータが追加された時に実行するスクリプトが表示されます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_05.png" alt="" /></p>

<p>スクリプトを以下に置き換えます。</p>

<p>```js
function insert(item, user, request) {</p>

<pre><code>request.execute();
// Set timeout to delay the notification, to provide time for the 
// app to be closed on the device to demonstrate toast notifications
setTimeout(function() {
    push.apns.send(item.deviceToken, {
        alert: "Toast: " + item.text,
        payload: {
            inAppMessage: "Hey, a new item arrived: '" + item.text + "'"
        }
    });
}, 2500);
</code></pre>

<p>}
```</p>

<p>これにより、データの追加から 2.5秒後に、APNS にプッシュ通知のリクエストを投げます。</p>

<h2>動かす</h2>

<blockquote><p>7 Test push notifications in your app</p></blockquote>

<p>やっと試せます。</p>

<p>Xamarin Studio から、実機で実行します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_06.png" alt="" /></p>

<p>アプリ起動直後、通知の受信を許可するかどうかを尋ねられますので「Yes」で。(一度答えると二度と出ないのでしょうか？なのでチュートリアルの画像で。)</p>

<p><img src="http://www.windowsazure.com/media/devcenter/mobile/mobile-quickstart-push1-ios.png" alt="" /></p>

<p>Twitter 認証後、適当に項目を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_07.png" alt="" /></p>

<p>しばらく待っていると…</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_08.png" alt="" /></p>

<p>無事、プッシュ通知を受信できましたー。
(実はここに辿り着くまで数十回試しているので最初に通知を受け取った時の感激と言ったら…)</p>

<p>まあ、たぶんどっかでハマるだろうなーと思いながら、やっぱりハマった！という感じでしたので、皆さんも最初はどこかでハマるんじゃないかと。</p>

<p>ハマりどころは文中にも書きましたが、下にもトラブルシューティングとして書きました。何かのお役に立てば。</p>

<h2>トラブルシューティング</h2>

<h3>iOS Dev Center で Bundle ID 入力したらエラーになった</h3>

<p>プロジェクト名に アンダースコア が含まれてるとダメです。
Xamarin Studio のプロジェクト プロパティ → iOS Application で直しましょう。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_09.png" alt="" /></p>

<h3>アプリが起動直後(認証を通過した後)に落ちるようになった</h3>

<p><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp">チュートリアル</a>にある、</p>

<p><code>csharp
[DataMember(Name = "deviceToken")]
public string DeviceToken { get; set; }
</code></p>

<p>は間違いです。下記が正しいです。</p>

<p><code>csharp
[JsonProperty(PropertyName = "deviceToken")]
public string DeviceToken { get; set; }
</code></p>

<h3>クライアントで「追加」しても、プッシュ通知が来ません</h3>

<p>まずは、Azure マネージメントポータルで「ログ」を見てみましょう。
下記からアクセスできます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_3_01.png" alt="" /></p>

<p>データ挿入時のスクリプトでエラーが出ていれば、ここに出力されるはずです。スクリプト内で <code>console.log</code> した内容もここに出力されます。</p>

<h3>それでもまだ、プッシュ通知が来ません</h3>

<p><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp">チュートリアル</a>にある、</p>

<p>```csharp
public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{</p>

<pre><code>string trimmedDeviceToken = deviceToken.Description;
if (!string.IsNullOrWhiteSpace(trimmedDeviceToken))
{
    trimmedDeviceToken = trimmedDeviceToken.Trim('&lt;');
    trimmedDeviceToken = trimmedDeviceToken.Trim('&gt;');
}
DeviceToken = trimmedDeviceToken;
</code></pre>

<p>}
```</p>

<p>は、コードが足りません。これでは <code>trimmedDeviceToken</code> の文字列内に空白が含まれてしまい、正しい DeviceToken にならないようです。</p>

<p>```csharp
public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{</p>

<pre><code>string trimmedDeviceToken = deviceToken.Description;
if (!string.IsNullOrWhiteSpace(trimmedDeviceToken))
{
    trimmedDeviceToken = trimmedDeviceToken.Trim('&lt;');
    trimmedDeviceToken = trimmedDeviceToken.Trim('&gt;');
    trimmedDeviceToken = trimmedDeviceToken.Replcae(“ “, “”); // ←追加
}
DeviceToken = trimmedDeviceToken;
</code></pre>

<p>}
```</p>

<p>と、空白を除去する必要があります。</p>

<h3>しかしそれでもまだ、プッシュ通知が来ません</h3>

<p>最初の手順、キーチェーンアクセスで CSR を作る時、「ユーザーのメールアドレス」「通称」を iOS Developer Center に登録しているものと同じにする必要があるみたいです。これが間違っていると、.p12 ファイルを書き出す時に選択すべき「Apple Development IOS Push Services: net.azure-mobile.amay077-baas-test」という鍵が見つからない(文字化けしてる)はずです。</p>

<p>また、iOS Developer Center に .p12 ファイルを再登録するとプロビジョニングファイルを再作成→端末に更新する必要があります。</p>

<p>これらを忘れると通知が来ません。そしてエラーにもならないので厄介です。</p>

<h2>雑感</h2>

<p>しかし <a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp#add-push">Azure のチュートリアル</a>、これ一度も試してないんじゃないの？</p>

<p>クラス名の接頭辞や大文字小文字の間違いはまだかわいいものだけど、ここミスると致命的という点が２つも。一度辿れば気づくと思うんだけどなあ。
最後にある completed example project ではちゃっかり正しいコードだったりするので、コンテンツの修正漏れなんだろうか。。。</p>

<p>それはともかく、何かトラブルがあると Xamarin のようなネイティブに皮を被せてるプラットフォームは途端に不安になります。どこに原因があるのか追求しづらいから。</p>

<p>今回も、コードの修正後、いきなりアプリが落ちるようになって、まずα版を使っていたのでそれを疑って stable に戻して、次に実機が悪いのかとシミュレータで動かしてみたり、いろいろ試行錯誤してやっとチュートリアルの誤記だと分かったり。まだノウハウが無いといえばそれまで、α版が自己責任なのはその通りですが、イレギュラー時のリスクはあるなあと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin で Windows Azure モバイルサービスを使う(その2:認証編)]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/18/using-azure-mobile-services-in-xamarin-2/"/>
    <updated>2013-12-18T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/18/using-azure-mobile-services-in-xamarin-2</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/40bd5918284fd40d0edc">前回</a> は、Microsoft の BaaS である Azureモバイルサービスをとりあえず使ってみる所まで紹介しました。</p>

<p>今回は、OAuth による認証、Twitter や Facebook でログインする機能について触れてみます。</p>

<!--more-->


<p>前回用意したサンプルの続きとして進めます。</p>

<p>認証を組み込むためのチュートリアルはこちら</p>

<ul>
<li><a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-xamarin-ios/">Get started with authentication (Xamarin iOS) | Mobile Dev Center</a></li>
</ul>


<p>英語版だからと謝罪してくれるのは Microsoft だけですね。</p>

<h2>1. モバイルサービスに認証を設定する</h2>

<blockquote><p>Register your app for authentication and configure Mobile Services</p></blockquote>

<p>のところです。</p>

<p>まずは <a href="https://manage.windowsazure.com">https://manage.windowsazure.com</a> にアクセスし、モバイル サービス から、前回作った名前をクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_01.png" alt="" /></p>

<p>次に上部メニューからダッシュボードを選択します。表示されるページの左下の方にある「モバイルサービスURL」の値をコピーしておきます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_02.png" alt="" /></p>

<p>次に、どのサービスの認証を利用するかを決めます（Microsoft, Facebook, Twitter, Google）。この説明では Twitter を使うことにします。</p>

<p>Twitter での操作方法は下を開きます。</p>

<ul>
<li><a href="http://www.windowsazure.com/ja-jp/develop/mobile/how-to-guides/register-for-twitter-authentication/">モバイル サービスでの Twitter ログイン用のアプリケーションの登録</a></li>
</ul>


<p>説明が充実してるので上記に従ってください。要は「コンシューマ キー」と「コンシューマー シークレット」が得られれば OK です。</p>

<p>ではマネージメントポータルの説明に戻ります。</p>

<blockquote><ol>
<li>Back in the Management Portal</li>
</ol>
</blockquote>

<p>です。</p>

<p>上部メニューの ID をクリック、その後、「twitter 設定」に先ほど取得した コンシューマ キー とコンシューマ シークレット を貼り付けて、一番下にある「保存」をクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_03.png" alt="" /></p>

<p>続いて、テーブルに権限を与えます</p>

<blockquote><p>Restrict permissions to authenticated users</p></blockquote>

<p>のところ。</p>

<p>まず上部メニューの データ → TodoItem をクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_04.png" alt="" /></p>

<p>次に、アクセス許可 をクリックし、全ての項目で「認証されたユーザーのみ」を選択します。その後「保存」します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_05.png" alt="" /></p>

<p>マネージメントポータル側の設定は以上です。
Twitter での認証設定を追加し、またテーブルには、認証されたユーザーでしかアクセスできない権限を設定しました。</p>

<p>結果、前回動かしたサンプルプログラムはこの設定を行う事で動作しなくなります。(401エラー)</p>

<p>次に Xamarin Studio でコードを変更していきます。</p>

<h2>2. アプリケーションに認証を追加する</h2>

<blockquote><p>Add authentication to the app</p></blockquote>

<p>のところです。</p>

<ol>
<li>〜 7. まであります。流れは説明通りですが、クラス名や大文字小文字が微妙に違うので注意が必要です。(<code>TodoService</code> は <code>QSTodoService</code> と読み替える必要があるなど)</li>
</ol>


<p>これらを修正したソース２つ <code>QSTodoService.cs</code> と <code>QSTodoListViewController.cs</code> を gist に貼り付けました。</p>

<ul>
<li><a href="https://gist.github.com/amay077/7960424">gist &ndash; QSTodoListViewController.cs and QSTodoService.cs</a></li>
</ul>


<p>修正前との差分が見たい方は <a href="https://gist.github.com/amay077/7960424/revisions">Revisions</a> で見られます。</p>

<p>あ、今回は Twitter なので、
<code>MobileServiceAuthenticationProvider.MicrosoftAccount</code> を忘れずに
<code>MobileServiceAuthenticationProvider.Twitter</code> に置き換えてくださいね。</p>

<p>これでコードの修正は終わりです。</p>

<ol>
<li>動かしてみる</li>
</ol>


<p>さて、iOS シミュレータ で動かしてみましょう。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_2_06.gif" alt="" /></p>

<p>こんな感じで、Twitter による認証機能をアプリに組み込むことができました。</p>

<p>今日は以上です。次回は Push 通知を行ってみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin で Windows Azure モバイルサービスを使う(その１)]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/14/using-azure-mobile-services-in-xamarin-1/"/>
    <updated>2013-12-14T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/14/using-azure-mobile-services-in-xamarin-1</id>
    <content type="html"><![CDATA[<p>Xamarin で BaaS を使うことについて、 <a href="http://qiita.com/koji_yusa/items/a6878bef10577ee744b5">koji_yusa さん</a>や <a href="http://qiita.com/kochizufan/items/c91b3a59a56d8fc54bb7">kochizufan さん</a> が、Parse の使用方法について書いてくれました。</p>

<!--more-->


<p>BaaS の中では Parse が一番知名度が高いでしょう。しかし！Microsoft も BaaS を提供しています。</p>

<p>Azure の名を冠しているため、「どうせ IaaS でしょ」とスルーする人が多いんじゃないかと思うので、今回は Microsoft の BaaS である「Azure モバイルサービス」について書きます。</p>

<h2>Azureモバイルサービス vs Parse</h2>

<ul>
<li><a href="http://www.windowsazure.com/ja-jp/pricing/details/mobile-services/">Windows Azure モバイルサービス &ndash; 料金詳細</a></li>
<li><a href="https://parse.com/plans">Parse &ndash; Pricing</a></li>
</ul>


<p>実際のところは、Parse に比べて Azure の方がスペックは低いです。無料版では、API呼び出し回数は、Azure が50万回に対して、Parse は100万回、ストレージは、Azyreが20MB(!)に対して Parse が1GB などです。</p>

<p>唯一、Azure にのみある機能は「スケジュールされたジョブ」、いわゆる cron みたいなジョブの定期呼び出し機能です。無料版では1時間に1回の利用に限定されるようですが、日時処理には十分使えるでしょう。</p>

<p><a href="http://mb.cloud.nifty.com/price.htm">Nifty の BaaS</a> と比べても劣勢ですね、あれれ？</p>

<h2>Azure モバイルサービスを Xamarin から使う</h2>

<p>Microsoft と Xamarin との提携により、Xamarin から Azure モバイルサービスは、簡単に利用することができます。提携前からライブラリの提供など対応は充実していましたが、提携により Microsoft のサイトでチュートリアルが公開されるなど、より充実しました。</p>

<p>そのチュートリアルを辿ってみます。</p>

<p>ちなみに環境は Mac + Xamarin Studio です。Win + Visual Studio でも同じ手順ですが、iOS 用のサンプルなので、iOS ならビルドと実行の為に Mac が必要です。Win しかないなら Android 用に置き換えて試せます。</p>

<h3>1. Windows Azure にサインアップする</h3>

<p>モバイルサービスを利用するには、まず Windows Azure に登録しなければなりません。本人確認のために、クレジットカードや携帯電話番号が必要になるのが煩わしいかもですが、勝手に請求されたりはしませんのでご安心を。</p>

<p>手順は↓が詳しいので割愛します。</p>

<ul>
<li><a href="http://wordpress-web.azurewebsites.net/guide">Windows Azureに登録する | 初心者でも30分でできる　ビジネスで使える！WordPressでWebサイト</a></li>
</ul>


<h3>2. モバイルサービスを作成する</h3>

<p>サインアップできたら Windows Azure マネージメントポータルを開きます。迷ったらここ。アドレスは、</p>

<ul>
<li><a href="https://manage.windowsazure.com/">https://manage.windowsazure.com/</a></li>
</ul>


<p>です。</p>

<p>下のような画面になるので、左メニューから モバイルサービス → 新しいモバイル サービスを作成する と進みます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_01.png" alt="" /></p>

<p>URL に任意のIDを入力します(世界で一意になる必要があります)。また、地域を「東アジア」にします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_02.png" alt="" /></p>

<p>続いて SQL Server の設定をします。ログイン名に任意のユーザー名、パスワードに任意のパスワードを設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_03.png" alt="" /></p>

<p>ウィザードを終わると、マネージメントポータルに戻ります。しばらくの「作製中…」の後、状態が「準備完了」となり、これでモバイルサービスは作成完了です。</p>

<h3>3. Xamarin.iOS アプリケーションからモバイルサービスを使ってみる</h3>

<p>作成したモバイルサービスをクリックします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_04.png" alt="" /></p>

<p>ここから、一気です。</p>

<ol>
<li>まずプラットフォームで「Xamarin」を選択し、</li>
<li>「新しい XAMARIN アプリケーションを作成する」を展開、</li>
<li>「TodoItem テーブルを作成する」をクリックして「作成されました」となるまで待ち、</li>
<li>Xamarin.iOS 用のサンプルアプリケーションをダウンロードします。</li>
</ol>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_05.png" alt="" /></p>

<p>ダウンロードした zip ファイルを解答し、Xamarin Studio で開きます。
参照 や Components を見ると、Azure Mobile Service 用のライブラリが組み込まれている事が分かります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_06.png" alt="" /></p>

<p>Debug で iPhone シミュレータで動かしてみます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_07.gif" alt="" /></p>

<p>上の動画のように適当なアイテムを追加した後、ブラウザのマネージメントポータルで追加したデータを確認してみます。</p>

<p>上部のメニュー から データ → TodoItem と進むと、追加されたデータが確認できます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_azure_mobile_service_by_xamarin_1_08.gif" alt="" /></p>

<p>以上です。Xamarin.iOS で Azure モバイルサービスにデータを登録するサンプルが手に入りました。</p>

<h3>4. サンプルのコードを眺めてみる</h3>

<p>これで終わってもアレなので、コードを見てみます。
まず前述した Azure Mobile Service 用のライブラリが組みこまれていますが、これは、 Xamarin の Components ストアで提供されている、</p>

<ul>
<li><a href="http://components.xamarin.com/view/azure-mobile-services">Azure Mobile Services / Components / Xamarin</a></li>
</ul>


<p>です。これを主に使っているのは <code>QSTodoService.cs</code> です。</p>

<p><code>QSTodoService.cs</code> を見てみると、まず NameSpace から。</p>

<p><code>csharp
using Microsoft.WindowsAzure.MobileServices;
</code></p>

<p>次にコンストラクタなど。</p>

<p><code>MobileServiceClient</code> がメインクラスですが、これを使う前に <code>CurrentPlatform.Init()</code> が必要です(DI だか IoC だかですかね)。</p>

<p>そして <code>MobileServiceClient.GetTable&lt;ToDoItem&gt;()</code> をすることで Azure 上のテーブルを取得しています。まだデータは読み込みません。</p>

<p>```csharp
MobileServiceClient client;
IMobileServiceTable<ToDoItem> todoTable;</p>

<p>/<em>*省略</em>/</p>

<p>QSTodoService ()
{</p>

<pre><code>CurrentPlatform.Init ();

// Initialize the Mobile Service client with your URL and key
client = new MobileServiceClient (applicationURL, applicationKey, this);

// Create an MSTable instance to allow us to work with the TodoItem table
todoTable = client.GetTable &lt;ToDoItem&gt; ();
</code></pre>

<p>}
```</p>

<p>データの読み込みは、<code>RefreshDataAsync</code> にて。さりげなく async で。</p>

<p>```csharp
public List<ToDoItem> Items { get; private set;}</p>

<p>async public Task&lt;List<ToDoItem>> RefreshDataAsync()
{</p>

<pre><code>try {
    // This code refreshes the entries in the list view by querying the TodoItems table.
    // The query excludes completed TodoItems
    Items = await todoTable
        .Where (todoItem =&gt; todoItem.Complete == false).ToListAsync ();

} catch (MobileServiceInvalidOperationException e) {
    Console.Error.WriteLine (@"ERROR {0}", e.Message);
    return null;
}

return Items;
</code></pre>

<p>}
```</p>

<p>今回はこんなところで。</p>

<p>次回は、 Azure モバイルサービスの続きで、このサンプルに認証周りの機能を実装してみます。</p>
]]></content>
  </entry>
  
</feed>
