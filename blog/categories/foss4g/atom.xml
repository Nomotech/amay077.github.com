<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: foss4g | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/foss4g/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-10-12T02:20:06+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[図形の移動が、こんなに簡単に実装できる時代になりました]]></title>
    <link href="http://blog.amay077.net/blog/2014/12/13/moving-shapes-its-easy/"/>
    <updated>2014-12-13T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/12/13/moving-shapes-its-easy</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2014/foss4goss4g">FOSS4G Advent Calendar 2014 12日目</a> の記事です。</p>

<p>　FOSS4G と言えば GIS、GIS と言えば図形編集ですね。図形を追加したり移動したり回転したりできる機能です。面倒なんですよ、これプログラミングするの。</p>

<p>　なにが面倒かというと、色んな状態（マウスの状態＜左/右ボタンが押されている/押されてない、マウスダウン時の座標、現在の座標＞、図形の状態＜選択されている/いない＞）などなどがコードの中に入り乱れて、スパゲッティコードになりがちというか「なります」。</p>

<!--more-->


<p>　例えば「図形の移動」のフローは、</p>

<ol>
<li>図形をマウスダウン（＝選択）</li>
<li>そのままマウスムーブ（＝移動）</li>
<li>マウスボタンを離して終了</li>
</ol>


<p>と、極めて単純なんですね。これが普通にコーディングするとフラグや状態管理の嵐になってしまう。</p>

<p>　と言ってた時代は終わりました。
　例えば、下の画面。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/simply_shape_dragging_using_rx_01.gif" alt="" /></p>

<p>　これは、白い四角形をドラッグで移動できるというスマホアプリの例ですが、これの実装の主要部分はたったの <strong>６行</strong> です。</p>

<p>```csharp
rectangle.DownEvent() // 1.図形をマウスダウン</p>

<pre><code>.SelectMany(rectangle.MoveEvent())  // 2.そのままマウスムーブ
.Subscribe(e =&gt; {
    rectangle.SetX(e.RawX); // 移動の度に図形を移動
    rectangle.SetY(e.RawY);
});
</code></pre>

<p>```</p>

<p>　このコードをよく見ると、上に書いたフローと似ているのが分かります。人が考えたままコードに落とし込める。しかもフラグとか状態管理とかのゴミが一切ない。素晴らしい！(3. に該当するコードが必要な気がするけどまあいいや）</p>

<p>　これを実現しているのは<a href="http://ninjinkun.hatenablog.com/entry/introrxja">リアクティブプログラミング</a>という概念。なんでもかんでもストリーム(時系列にデータが降ってくる何か)で捉えよう、イベントでさえも。イベントはストリームであるので、あとはストリームの加工や他のストリームとの合成でどうにかできてしまいます。</p>

<p>　リアクティブ＋図形うんぬんの他の例は、</p>

<ul>
<li><a href="http://act.neue.cc/rxjs/canvas.htm">RxJS + Canvas</a></li>
</ul>


<p>などがあります。これは HTML なのですぐ試せますしコード（Javascript）も見られます。</p>

<p>　リアクティブプログラミング用の著名なライブラリはほとんどオープンソース、リアクティブプログラミング＋FOSS4G で <strong>RxGIS</strong> （なんかカッコいいから言ってみたかっただけ）</p>

<p>　いつかまたGIS作るみたいな仕事があったら、絶対 Rx 使ってつくるぞ！と思ってますのでよろしくお願いします。</p>

<p>（上のコード例の全コードは <a href="https://gist.github.com/amay077/1d22ba8ffa8ad95e9393">gist</a> にあります。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSS4G 開発者の為の、図形演算ライブラリガイド]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev/"/>
    <updated>2013-12-16T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev</id>
    <content type="html"><![CDATA[<p>これは <a href="http://atnd.org/events/45511">FOSS4G Advent Calendar 2013</a> と、<a href="http://qiita.com/advent-calendar/2013/xamarin">Xamarin Advent Calendar 2013</a>  のクロスポストになります。</p>

<p>地図に関するシステムを作っていますと、必ず必要になるのが図形と図形の演算です。(結合 とか、分割とか、そういうの）</p>

<!--more-->


<p>私にとっては自分で実装するのは、とても大変な部類なのですが、今日では、いろいろなオープンソースライブラリが存在していて、それを使わせて頂いています。</p>

<p>今日は、それらの紹介をします。</p>

<h2>図形演算ライブラリ達</h2>

<h3>JTS Topology Suite (JTS)</h3>

<ul>
<li><a href="http://sourceforge.net/projects/jts-topo-suite/">http://sourceforge.net/projects/jts-topo-suite/</a></li>
<li>言語：Java</li>
<li>ライセンス：LGPL</li>
</ul>


<p>これがなければ死んでいた案件多し。いろいろな言語に移植され、事実上標準のライブラリ。LGPL ということだけが要注意であり少し残念。</p>

<h3>GEOS</h3>

<ul>
<li><a href="http://trac.osgeo.org/geos/">http://trac.osgeo.org/geos/</a></li>
<li>言語：C++</li>
<li>ライセンス：LGPL</li>
</ul>


<p>JTS を C++ に移植したライブラリ。なので機能、ライセンスともに JTS とほとんど一緒。osgeo のツールをビルドする時に出てくること多い。</p>

<h3>Net Topology Suite (NTS)</h3>

<ul>
<li><a href="https://code.google.com/p/nettopologysuite/">https://code.google.com/p/nettopologysuite/</a></li>
<li>言語：C#</li>
<li>ライセンス：LGPL</li>
</ul>


<p>JTS を .NET に移植したライブラリ。最初見た頃は、Not Implemented  な機能が多かったけど、だいぶ揃ってきたのかな。</p>

<h3>Esri Geometry API for Java</h3>

<ul>
<li><a href="https://github.com/Esri/geometry-api-java">https://github.com/Esri/geometry-api-java</a></li>
<li>言語：Java</li>
<li>ライセンス：Apache 2.0</li>
</ul>


<p>この間の FOSS4GJ 2013 Tokyo で教えてもらった、Yet Another 図形演算ライブラリ。GIS の世界シェアトップである ESRI社がオープンソースで公開しています。だから品質は折り紙つき（のハズだ）。Apache ライセンスなのも嬉しい。</p>

<h3>Clipper</h3>

<ul>
<li><a href="http://www.angusj.com/delphi/clipper.php">http://www.angusj.com/delphi/clipper.php</a></li>
<li>言語：Delphi、C++、C#、Python、Perl、Ruby、Haskell</li>
<li>ライセンス：Boost Software License</li>
</ul>


<p>名前の通り Clip(つまり AND(Intersection)演算)と Offset(Buffer の片側だけ)に特化したライブラリ。</p>

<h3>Boost:Geometry</h3>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html">http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html</a></li>
<li>言語：C++</li>
<li>ライセンス：Boost Software License</li>
</ul>


<p>そういえば、C++ の拡張ライブラリである Boost にも Geometry が入ったのでしたね。Screenshot がなかなか圧巻です。</p>

<h3>DotSpatial</h3>

<ul>
<li><a href="http://dotspatial.codeplex.com/">http://dotspatial.codeplex.com/</a></li>
<li>言語：C#</li>
<li>ライセンス：LGPL</li>
</ul>


<p>ライブラリというよりはアプリケーションなのかな？ソースコードの中に <code>DotSpatial.Topology</code> などが見えます。</p>

<h3>JSTS Topology Suite</h3>

<ul>
<li><a href="https://github.com/bjornharrtell/jsts">https://github.com/bjornharrtell/jsts</a></li>
<li>言語：JavaScript</li>
<li>ライセンス：LGPL</li>
</ul>


<p>探してみたらやっぱりあった JTS の JavaScript への移植版。ライセンスは(ry</p>

<h3>GeoScript</h3>

<ul>
<li><a href="http://geoscript.org/">http://geoscript.org/</a></li>
<li>言語：JavaScript</li>
<li>ライセンス：MIT</li>
</ul>


<p>JavaScript製のライブラリ。最近は D3.js による視覚表現が流行ってきたので、内部ではこのようなライブラリが使われているのでしょうか。</p>

<h2>試しに使ってみよう</h2>

<p>Xamarin Advent Calendar と絡めるために無理やり Xamarin Studio で、という事は必然的に Net Topology Suite を使ってみます。</p>

<p>Xamarin Studio は、Android/iOS アプリを作るためだけじゃなくて、コンソールアプリとかも作ることができますよ、と言いたいだけです。</p>

<h3>準備</h3>

<p>まず Xamarin Studio で C# → コンソールアプリのプロジェクトを作ります。</p>

<p>次に、まず NTS を参照に追加しますが、Nuget という仕組みを使います。
Xamarin Studio に Nuget を導入する手順は、</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-nuget-addin">mrward / monodevelop-nuget-addin</a></li>
</ul>


<p>を参考にしてください。</p>

<h3>コードを書く</h3>

<p>こんな感じです。</p>

<p>```csharp Program.cs
using System;
using GeoAPI.Geometries;
using NetTopologySuite;</p>

<p>namespace TopologyTest
{</p>

<pre><code>class MainClass
{
    public static void Main(string[] args)
    {
        var service = NtsGeometryServices.Instance;
        var gf = service.CreateGeometryFactory();

        var polygonA = gf.CreatePolygon(new Coordinate[]
            {
                new Coordinate(34.0, 136.0),
                new Coordinate(34.0, 138.0),
                new Coordinate(37.0, 138.0),
                new Coordinate(37.0, 136.0),
                new Coordinate(34.0, 136.0)
            });

        var polygonB = gf.CreatePolygon(new Coordinate[]
            {
                new Coordinate(36.0, 137.0),
                new Coordinate(35.0, 137.0),
                new Coordinate(35.0, 140.0),
                new Coordinate(36.0, 137.0)
            });

        polygonA.Intersection(polygonB).ToConsole("Intersection");
        polygonA.Union(polygonB).ToConsole("Union");
        polygonA.SymmetricDifference(polygonB).ToConsole("SymmetricDifference");
        polygonA.Difference(polygonB).ToConsole("Difference");
        polygonB.Buffer(0.5).ToConsole("Buffer");
    }

}

public static class GeomExtensions
{
    public static void ToConsole(this IGeometry geom, string tag) {
        Console.WriteLine(tag + " - " + geom.ToString());
    }
}
</code></pre>

<p>}
```</p>

<p>Intersection(AND)、Union(OR)、SymmeticDifference(XOR)、Difference(A &ndash; B)、Buffer(ふくらます)について試しています。</p>

<p>実行すると、コンソールに結果の座標群がずらーと出力されます。</p>

<h2>見える化してよ</h2>

<p>プログラムによる視覚化は、、、ごめんなさい面倒だったので作りませんでした。</p>

<p>その代わり、GeoJSON 化して GitHub にアップして視覚化しました。</p>

<p>まず演算対象の <code>geometryA</code> と <code>geometryB</code> です。(外側の枠は気にしないでください)</p>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson">https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/01_polygonA.geojson"></script>


<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson">https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/02_polygonB.geojson"></script>


<h3>Intersection(AND)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson">https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/03_polygonA_intersection_B.geojson"></script>


<h3>Union(OR)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson">https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/04_polygonA_union_B.geojson"></script>


<h3>SymmetricDifference(XOR)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson">https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/05_polygonA_symmetricdifference_B.geojson"></script>


<h3>Difference(A &ndash; B)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson">https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/06_polygonA_difference_B.geojson"></script>


<h3>Buffer(Bを膨らます)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson">https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/07_geometryB_buffer.geojson"></script>


<p>いやー 便利ですね GitHub 。大量のマーカーは自動的にクラスター化までしてくれるそうですよ。</p>

<ul>
<li><a href="https://github.com/blog/1541-geojson-rendering-improvements">GeoJSON rendering improvements</a>。</li>
</ul>


<p>こちらは、 Leaflet.js、OpenStreetMap、<a href="https://www.mapbox.com/maki/">Maki Project</a> などの FOSS4G が使われています。いいですね。</p>

<p>さて、なんの話か分からなくなってきたので、こちらからは以上です。</p>
]]></content>
  </entry>
  
</feed>
