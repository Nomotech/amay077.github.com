<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-06-15T19:53:12+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[地理院地図の標高タイル(CSV)を描画してみた]]></title>
    <link href="http://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api/"/>
    <updated>2013-11-05T21:11:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api</id>
    <content type="html"><![CDATA[<p>国土地理院が提供している API の一つに「標高タイル」というものがあります。</p>

<!--more-->


<p>タイルというと、Googleマップや OpenStreetMap などの Web地図では通常、画像を指しますが、標高タイルAPIでは <strong>「画素毎の高度(ｍ)」</strong> が取得できます。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/development/demtile.html">標高タイル仕様 &ndash; 地理院地図</a></li>
<li><a href="http://cyberjapandata.gsi.go.jp/xyz/dem/14/14547/6463.txt">サンプルURL</a></li>
</ul>


<p>これは面白い、ということで使ってみました。</p>

<h2>サンプル</h2>

<ul>
<li><a href="http://jsdo.it/amay077/jjod">地理院地図の標高タイル(CSV)を描画してみた &ndash; jsdo.it</a></li>
</ul>


<h3>Google Map</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_01.png" alt="img1" /></p>

<h3>標高タイルAPI で取得した標高値を描画</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_02.png" alt="img1" /></p>

<h2>何をしているか？</h2>

<p>下は、このサンプルのコードの抜粋ですが、ポイントは２つ</p>

<ul>
<li>getTile で通常 img 要素を生成して返すが、代わりに canvas 要素に返す</li>
<li>標高API をコールして得られた CSV をパースし、 高さに応じた色を計算して、canvas に矩形を描画する</li>
</ul>


<p>さすがに1ピクセル毎に描画すると重すぎるので、初期値では 16ピクセルずつに間引きしています(画面の DotSize で変更できます)。</p>

<p>クライアント側でレンダリングしているので、色などが動的に変更できます。</p>

<p>```javascript</p>

<pre><code>map.mapTypes.set("GsiMaps", {
  name:"標高タイル",
  tileSize:new google.maps.Size(256,256),
  minZoom:14, // 標高タイルは Lv:14 しか用意されてないので
  maxZoom:14, 
  getTile:function(tileCoord, zoom, ownerDocument) {

    // 普通は img だけど、標高タイルは CSV で画素毎の標高値が取得できるので、
    // クライアント側で描画するために Canvas を使う
    var canvas = ownerDocument.createElement("canvas");
    canvas.width = 256;
    canvas.height = 256;

    var x = (tileCoord.x % Math.pow(2, zoom)).toString();
    var y = tileCoord.y.toString();

    // 各画素の標高値を取得する
    canvas.tileUrl = "http://cyberjapandata.gsi.go.jp/xyz/dem/" + zoom +  "/" + x + "/" + y + ".txt";
    // 標高を描画する
    renderDem(canvas);
    renderedTiles[canvas.tileUrl] = canvas; // タイル再描画の為にとっておく
    return canvas;
  }
});

// 標高タイルを描画する
function renderDem(canvas) {
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, 256, 256);

  $.get(canvas.tileUrl, function(data) {
    // CSV が得られるのでパース
    var lines = data.split(/\r\n|\r|\n/);
    for (var i = 0; i &lt; lines.length; i+=dotSize) {
      var cols = lines[i].split(',');
      for (var j = 0; j &lt; cols.length; j+=dotSize) {
        if (cols[j] == 'e') { // エラーの画素には 'e' が入ってる
          continue;
        }

        // 標高0ｍ を startColor、標高1000ｍを endColor としたグラデーション色を設定する。
        ctx.fillStyle = $.xcolor
        .gradientlevel(startColor, endColor, cols[j] / 1000.0 * 100.0, 100)
        .getCSS();
        ctx.fillRect(j, i, dotSize, dotSize);
      }
    }
  });
}
</code></pre>

<p>```</p>

<h2>まとめ</h2>

<p>ただの標高値を地図に表すなら画像でいいじゃん！とか言われそうですが、よいアイデアが浮かばなかったのでまずは素直に使ってみました。</p>

<p>たとえば、移動手段による移動コストの違い(車だと坂道余裕だけど自転車だとキツい)みたいなのを視覚化するのに使えるような気がします。</p>

<p>今回は、Canvas を使ったのでこの程度ですが、WebGL とかを使えば、Google Map の地形図に負けない、美しい3D地図が描画できるはずです。</p>

<p>他に例を見ない、野心的な試みだと思うので、何か面白い使い方ができるといいなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない]]></title>
    <link href="http://blog.amay077.net/blog/2013/10/11/denshikokudo-on-googlemap/"/>
    <updated>2013-10-11T13:55:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/10/11/denshikokudo-on-googlemap</id>
    <content type="html"><![CDATA[<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>

<!--more-->


<h2>2013.11.03 追記</h2>

<p>電子国土Web.NEXT という名称で試験公開されていたものが、「地理院地図」「地理院タイル」として正式公開されました。</p>

<ul>
<li><a href="http://www.gsi.go.jp/johofukyu/johofukyu40032.html">地理院地図の公開について | 国土地理院</a></li>
<li><a href="http://portal.cyberjapan.jp/help/development.html#siyou">地理院タイルを用いた開発 | 地理院地図</a></li>
</ul>


<p>地理院タイルは <a href="http://portal.cyberjapan.jp/help/development/oldScheme.html">従来版タイル</a> と仕様が異なります。従来版タイルは <strong>2013年度中に提供終了予定</strong> との事ですし、新しい地理院タイルの方が大幅に仕様が簡略化されたので、こちらを使った方が良いです。</p>

<p>このエントリも「電子国土」を「地理院地図（地理院タイル）」に修正しました。</p>

<hr />

<h2>2013.10.17 追記</h2>

<p><a href="http://qiita.com/amay077/items/979dfc858a21c8bbb7a9#comment-6d0be86c2ba90df50808">コメント</a>で頂いていますが、現在は、 <strong>「日本向けにローカライズされた」</strong> Googleマップ側でも表記が修正されたようで、当初「問題がある」と言われていた地域は問題が解消されているように見えます。
<strong>ただし、下記のように Google Maps API で「region=JP」が指定されている場合に限ります。</strong></p>

<ul>
<li><a href="http://d.hatena.ne.jp/kitokitoki/20130415/p1">Google Maps API v3 で 日本海（東海）と「東海」が併記されるのを避けるには &ndash; わからん</a></li>
</ul>


<p>これによって「Googleマップ禁止令はもはや無用である」と考えることもできますし、「依然として国の制御下には無い」と考えることもできます。</p>

<p>以下の情報は必要なくなるかも知れませんが、今後「Googleマップ以外の選択肢」の一つとして参考になれば幸いです。</p>

<p>&mdash; 追記ここまで &mdash;</p>

<hr />

<ul>
<li><a href="http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 &ndash; NAVER まとめ</a></li>
<li><a href="http://shinka3.exblog.jp/20690859/">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>
<li><a href="https://twitter.com/nissyyu/status/387870282570272768">Twitter &ndash; うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>
</ul>


<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>

<p>で、対策としてはいくつかあります。。。</p>

<h4>画像の地図や PDF に変える</h4>

<ul>
<li>どんな時代錯誤ですか</li>
</ul>


<h4>他の地図APIを使う</h4>

<ul>
<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>
<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>
<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>
<li>Bing, OSM は「制御下には無い」でしょう。</li>
</ul>


<h4>GoogleMapの問題のある表記を「正しい表記」に上書きする</h4>

<ul>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（^_^;）</li>
<li>これ→<a href="http://jsdo.it/toaSoku/gmapforjapan">日本政府に「禁止されない」 Google Maps &ndash; jsdo.it &ndash; Share JavaScript, HTML5 and CSS</a></li>
<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>
</ul>


<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>

<h2>ではどうするか？</h2>

<p><a href="http://portal.cyberjapan.jp/">地理院地図</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>

<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>

<p>ただし、Google Map API から地理院地図の地図APIに移行することは、前述の通り、それなりのコストが発生します。</p>

<p>ので、 <strong>「Google Map API を使って地理院地図を利用する方法」</strong> を紹介します。</p>

<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>

<p>既に実現されてる方々がいらっしゃいます。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws">Googleマップを使って国土地理院の地図を見る</a></li>
<li><a href="http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>
</ul>


<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで地理院地図(地理院タイル)を使う、 最もシンプルな実装例を紹介します。</p>

<h3>1. Googleマップを表示するページを用意する</h3>

<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>

<ul>
<li><a href="http://jsdo.it/amay077/tM0q">Google Maps Javascript API v3 の使用例</a></li>
</ul>


<p>HTML+Javascript のソースコードはこんな感じ(<a href="http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>

<p>```html google.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>2. 地理院地図(地理院タイル)を表示するように置き換える</h3>

<ul>
<li><a href="http://jsdo.it/amay077/wFtJ">Google Maps Javascript API v3 での地理院地図の表示例</a></li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/denshikokudo_on_googlemap_01.png" alt="" /></p>

<p>表示が地理院地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、ロゴの表示が必要なので、左下に置いています。(地理院地図の正式なロゴが公開されたら置き換えてください)</p>

<p>という処理を追加したのが、下のコード。
変更が１行、追加行が30行くらいです。
変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。
<a href="https://gist.github.com/amay077/6928205/revisions">gist</a> でも diff を見られます。</p>

<p>```html gsi_map.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: "GsiMaps", // 地理院地図の英語表記は「GIS Maps」
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);

  map.setOptions({
    mapTypeControl: false // 右上の地図タイプ選択を消す
  });

  // 地理院タイルを Overlay する
  // via http://portal.cyberjapan.jp/help/development.html
  map.mapTypes.set("GsiMaps", {
    name:"地理院地図(GSI Maps)",
    tileSize:new google.maps.Size(256,256),
    minZoom:5,
    maxZoom:18, 
    getTile:function(tileCoord, zoom, ownerDocument) {
      var img = ownerDocument.createElement("img");
      img.style.width = "256px";
      img.style.height = "256px";
      var x = (tileCoord.x % Math.pow(2, zoom)).toString();
      var y = tileCoord.y.toString();
      img.src = "http://cyberjapandata.gsi.go.jp/xyz/std/" + zoom +  "/" + x + "/" + y + ".png";
      return img;
    }
  });

   // 左下に電子国土ロゴを表示(TODO: 地理院地図の正式なロゴが公開されたら置き換える)
  var logo = document.createElement('DIV');
  logo.style.padding = '3px';
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo);
  logo.innerHTML = '&lt;a href="http://portal.cyberjapan.jp/portalsite/kiyaku/index.html" target="_blank"&gt;&lt;img style="width:32px, height:32px" src="http://cyberjapan.jp/images/icon01.gif" alt="電子国土" /&gt;&lt;/a&gt;';    }
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>不安とか懸念とか…</h3>

<h4>地図の表示が Google に比べて…</h4>

<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>

<h4>「試験公開」ってなってるんですけど…</h4>

<p>地理院地図は「正式公開」になったので安心ですね。</p>

<p>旧Verについては、2013年度中に運用停止とのことです。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/oldver.html">地理院地図｜旧版情報</a></li>
</ul>


<h4>利用規約とかどうなってるの？</h4>

<p><a href="http://portal.cyberjapan.jp/help/termsofuse.html">地理院地図｜利用規約</a> を見てください。</p>

<h2>まとめ</h2>

<p>いかがでしょうか？</p>

<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」地理院地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>

<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>

<p>地理院地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>

<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>

<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ディレクトリを再帰的にたどってファイル一覧を出力する]]></title>
    <link href="http://blog.amay077.net/blog/2013/10/02/enum-files-recursive-on-nodejs/"/>
    <updated>2013-10-02T19:20:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/10/02/enum-files-recursive-on-nodejs</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/_shimizu">@_shimizu</a> さんの</p>

<!--more-->


<ul>
<li><a href="http://shimz.me/blog/node-js/2944">[node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する | GUNMA GIS GEEK</a></li>
</ul>


<p>の派生品です。ファイルパスを出力するだけにしました。</p>

<p>```js enumFilesRecursive.js
var fs = require(&ldquo;fs&rdquo;)</p>

<pre><code>, path = require("path")
, dir = process.argv[2] || '.'; //引数が無いときはカレントディレクトリを対象とする
</code></pre>

<p>var walk = function(p, fileCallback, errCallback) {</p>

<pre><code>fs.readdir(p, function(err, files) {
    if (err) {
        errCallback(err);
        return;
    }

    files.forEach(function(f) {
        var fp = path.join(p, f); // to full-path
        if(fs.statSync(fp).isDirectory()) {
            walk(fp, fileCallback); // ディレクトリなら再帰
        } else {
            fileCallback(fp); // ファイルならコールバックで通知
        }
    });
});
</code></pre>

<p>};</p>

<p>// 使う方
walk(dir, function(path) {</p>

<pre><code>console.log(path); // ファイル１つ受信  
</code></pre>

<p>}, function(err) {</p>

<pre><code>console.log("Receive err:" + err); // エラー受信
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marked.js で Markdown をクライアント側でパースして表示する]]></title>
    <link href="http://blog.amay077.net/blog/2013/08/06/parse-markdown-using-markedjs/"/>
    <updated>2013-08-06T21:10:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/08/06/parse-markdown-using-markedjs</id>
    <content type="html"><![CDATA[<p><a href="http://phyzkit.net/typescript/">Typescript クイックガイド</a> で、ソースを見たら Markdown で書かれてたのをみて「カッケー」と思ったのと、<a href="http://www.atmarkit.co.jp/ait/articles/1302/05/news091.html">利用規約やプライバシーポリシーは Github に置くといいよ</a> というのを見て、なら「github に .markdown ファイルを置いてクライアントサイドでスタイリングできたら嬉しいじゃん？」と思いやってみた。</p>

<!--more-->


<h2>Javascript による markdown パーサいろいろ</h2>

<p>上記 Typescript クイックガイド では <a href="https://github.com/chjj/marked">marked.js</a> が使われているようだが、他にもいろいろある模様。下記にて比較してくださっている。</p>

<ul>
<li><a href="http://kannokanno.hatenablog.com/entry/2013/06/19/132042">JavaScript &ndash; Markdownパーサーのshowdown.js、markdown-js、markedを簡単比較 &ndash; ぼっち勉強会</a></li>
</ul>


<p>もともと marked.js を使おうと思ってたし、上記サイトでも問題無さそうだったので、そのままいく。</p>

<h2>使い方</h2>

<p>marked.js を読み込んだ後、</p>

<p><code>js
var formatted = marked(markdown_text)
</code>
で、HTML に整形された文字列が返されるというシンプルなもの。(整形オプションがいろいろあるようだが割愛)</p>

<p>Typescript クイックガイドでは、HTML 内に Markdown テキストがベタ書きされていたが、せっかくなので管理がしやすいように外部 Markdown ファイルを読みこむようにしてみた。</p>

<p>```html md_renderer.html
&lt;!DOCTYPE html>
<html lang="ja"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="utf-8"&gt;

    &lt;title&gt;Markdown renderer&lt;/title&gt;
    &lt;meta name="description" content="Markdown renderer"&gt;

    &lt;!-- bootstrap --&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css" rel="stylesheet"&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap-responsive.css" rel="stylesheet"&gt;

    &lt;!-- js libraries --&gt;
    &lt;script type="text/javascript" src="js/jquery-2.0.3.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/marked.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        $(document).ready(function(){
            var target = $("#markdown_content");

            $.ajax({
                url: target[0].attributes["src"].value,
            }).success(function(data){
                target.append(marked(data));
            }).error(function(data){
                target.append("This content failed to load.");
            });
        });
    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;!-- Content --&gt;
    &lt;div class="container"&gt;
        &lt;div id="markdown_content" src="./sample.markdown"&gt; &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>一番下の <code>&lt;div id="markdown_content" src="./sample.markdown"&gt;</code> の src に読み込む Markdown ファイルを指定するようにした。</p>

<p>bootstrap で見栄えを良くしているが、必須ではない。</p>

<p>こちらが <a href="https://dl.dropboxusercontent.com/u/264530/qiita/md_renderer/md_renderer.html">デモ</a> 。</p>

<p>さすがに描画に少し時間がかかるみたいです。
<code>marked()</code> は非同期版もあるようなので、そちらを使うべきだったかな。</p>

<p>これで、データ(Markdown)とプレゼンテーション部(HTML)を分離できて、なんか良さげな感じがする。</p>

<p>Octopress とか、HTMLを生成しちゃうんじゃなくて、クライアントサイドで 「Markdown を描画する」できると、投稿の手間が減って良いかもですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 製のチャート描画ライブラリのメモ]]></title>
    <link href="http://blog.amay077.net/blog/2013/07/17/list-of-chart-library-for-javascript/"/>
    <updated>2013-07-17T19:39:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/07/17/list-of-chart-library-for-javascript</id>
    <content type="html"><![CDATA[<p>Javascript 製のチャート描画ライブラリをいくつか調べたので備忘録として残しておく。</p>

<!--more-->


<p>やりたいのは、ストリーミングで次々やってくるデータをリアルタイムに表示する事。しかも順方向だけじゃなくて過去方向にも戻りたい。</p>

<h2>smoothiecharts</h2>

<p><a href="http://smoothiecharts.org/">http://smoothiecharts.org/</a></p>

<p>シンプルで、使うのも簡単。が、逆再生ができるのかよく分からなかったので保留。</p>

<h2>Cubism.js</h2>

<p><a href="http://square.github.io/cubism/">http://square.github.io/cubism/</a></p>

<p>言わずと知れたビジュアライゼーションライブラリ <a href="http://d3js.org/">D3</a> のプラグイン。
なんか見た目がクール。
あまり突っ込んで調べてないので、要件を満たすかは不明。
ちなみにモバイル決済の Square によるオープンソースプロジェクト。
D3 自体でもいろいろなチャート描画ができるが、なんか勝手に Fat なイメージを持ってる。</p>

<h2>Flot</h2>

<p><a href="http://www.flotcharts.org/">http://www.flotcharts.org/</a></p>

<p>こちらは jQuery のプラグイン。</p>

<p>使い方が簡単で、配列を描画させてるだけだったので、配列操作で逆再生にも対応できそう。</p>

<h2>Google Chart</h2>

<p><a href="https://developers.google.com/chart">https://developers.google.com/chart</a></p>

<p>大御所。
なんか &ldquo;Connect to your data in realtime&rdquo; って謡ってるので、できそうな感じもするが試してない。これも高機能であるが故にレスポンス大丈夫かなあと勝手に思っている。</p>

<h2>amCharts</h2>

<p><a href="https://amcharts.zendesk.com/entries/22592917-Creating-charts-with-real-time-data">https://amcharts.zendesk.com/entries/22592917-Creating-charts-with-real-time-data</a></p>

<p>amCharts というプロダクトで、リアルタイムなチャートが実現できる模様。参考程度に。</p>

<h2>その他</h2>

<p>やりたいことは株価チャートに近いのでそっち方面で探すとたくさんありそうだけど、株価に特化しちゃってて機能過多＆使いづらい感。</p>

<h2>参考</h2>

<p>タイムリーにも同じようなまとめをしてくださってる方が居たのでメモ</p>

<ul>
<li><a href="http://qiita.com/hurutoriya/items/727296839a2ec638fdc4">グラフ描画に良さげなJavaScriptライブラリ &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
