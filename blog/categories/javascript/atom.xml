<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-10-16T11:04:44+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Googleマップ禁止令が出たのなら、電子国土地図をGoogleマップで使えばいいじゃない]]></title>
    <link href="http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap/"/>
    <updated>2013-10-11T13:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap</id>
    <content type="html"><![CDATA[<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>

<!--more-->


<ul>
<li><a href="http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 - NAVER まとめ</a></li>
<li><a href="http://shinka3.exblog.jp/20690859/">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>
<li><a href="https://twitter.com/nissyyu/status/387870282570272768">Twitter - うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>
</ul>


<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>

<p>で、対策としてはいくつかあります。。。</p>

<h4>画像の地図や PDF に変える</h4>

<ul>
<li>どんな時代錯誤ですか</li>
</ul>


<h4>他の地図APIを使う</h4>

<ul>
<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>
<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>
<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>
<li>Bing, OSM は「制御下には無い」でしょう。</li>
</ul>


<h4>GoogleMapの問題のある表記を「正しい表記」に上書きする</h4>

<ul>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（<sup>_<sup>;）</sup></sup></li>
<li>これ→<a href="http://jsdo.it/toaSoku/gmapforjapan">日本政府に「禁止されない」 Google Maps - jsdo.it - Share JavaScript, HTML5 and CSS</a></li>
<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>
</ul>


<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>

<h2>ではどうするか？</h2>

<p><a href="http://portal.cyberjapan.jp/">電子国土</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>

<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>

<p>ただし、Google Map API から電子国土の地図APIに移行することは、前述の通それなりのコストが発生します。</p>

<p>ので、ここでは、 <strong>「Google Map API を使って電子国土地図を利用する方法」</strong> を紹介します。</p>

<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>

<p>既に実現されてる方々がいらっしゃいます。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws">Googleマップを使って国土地理院の地図を見る</a></li>
<li><a href="http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>
</ul>


<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで電子国土地図を使う、 最もシンプルな実装例を紹介します。</p>

<h3>1. Googleマップを表示するページを用意する</h3>

<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>

<ul>
<li><a href="http://jsdo.it/amay077/tM0q">Google Maps Javascript API v3 の使用例</a></li>
</ul>


<p>HTML+Javascript のソースコードはこんな感じ(<a href="http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>

<p>```html google.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>2. 電子国土地図を表示するように置き換える</h3>

<ul>
<li><a href="http://jsdo.it/amay077/wFtJ">Google Maps Javascript API v3 での電子国土地図の表示例</a></li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/denshikokudo_on_googlemap_01.png" alt="" /></p>

<p>表示が電子国土の地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、「電子国土」のロゴの表示が必要なので、左下に置いています。</p>

<p>という処理を追加したのが、下のコード。
変更が１行、追加行が６０行くらい（ちと長い?）です。
変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。
<a href="https://gist.github.com/amay077/6928205/revisions">gist</a> でも diff を見られます。</p>

<p>```html denshikokudo.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: "DenshiKokudo",   // ← 電子国土を使うように変更
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);

  // ↓↓電子国土地図を Overlay する↓↓
  map.setOptions({
    mapTypeControl: false // 右上の地図タイプ選択を消す
  });

  // via http://portal.cyberjapan.jp/portalsite/version/v4/index.html
  var dataset = [null, null, null, null, null, "JAIS","JAIS","JAIS","JAIS", "BAFD1000K",
    "BAFD1000K", "BAFD1000K", "BAFD200K","BAFD200K","BAFD200K", "DJBMM","DJBMM",
    "DJBMM", "FGD"];

  map.mapTypes.set("DenshiKokudo", {
    name:"電子国土",
    tileSize:new google.maps.Size(256,256),
    minZoom:5,
    maxZoom:18, 
    getTile:function(tileCoord, zoom, ownerDocument) {
      var img = ownerDocument.createElement("img");
      img.style.width = "256px";
      img.style.height = "256px";
      var x = (tileCoord.x % Math.pow(2, zoom)).toString();
      var y = tileCoord.y.toString();
      var tileX = "0000000".substr(0, (7 - x.length)) + x;
      var tileY = "0000000".substr(0, (7 - y.length)) + y;
      var dir = "";
      for( var i = 0; i &lt; 6; i++ ) {
        dir += tileX.charAt(i) + tileY.charAt(i) + "/";
      }
      img.src = "http://cyberjapandata.gsi.go.jp/sqras/all/" + dataset[zoom] + "/latest/" + zoom + "/" + dir + tileX + tileY + ".png";
      return img;
    }
  });

  // 左下に電子国土ロゴを表示する
  var logo = document.createElement('DIV');
  logo.style.padding = '3px';
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo);
  logo.innerHTML = '&lt;a href="http://portal.cyberjapan.jp/portalsite/kiyaku/index.html" target="_blank"&gt;&lt;img style="width:32px, height:32px" src="http://cyberjapan.jp/images/icon01.gif" alt="電子国土" /&gt;&lt;/a&gt;';    
  // ↑↑電子国土地図を Overlay する↑↑
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>不安とか懸念とか…</h3>

<h4>地図の表示が Google に比べて…</h4>

<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>

<h4>「試験公開」ってなってるんですけど…</h4>

<p>なにが「試験公開」なのかよくわからないです。電子国土Web.NEXT が試験公開で、地図画像自体は「正式」公開なのでしょうか。。。</p>

<p>運用予定についてのページ <a href="http://portal.cyberjapan.jp/portalsite/version/djapan_yotei.html#v234">電子国土Webシステムの今後の予定について</a> をチェックしておくと良さそうです。</p>

<h4>利用規約とかどうなってるの？</h4>

<p><a href="http://portal.cyberjapan.jp/portalsite/q_and_a/index.html">電子国土Webシステムの利用に関するフロー</a> を見てください。</p>

<h2>まとめ</h2>

<p>いかがでしょうか？</p>

<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」電子国土の地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>

<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>

<p>電子国土地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>

<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>

<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ディレクトリを再帰的にたどってファイル一覧を出力する]]></title>
    <link href="http://amay077.github.io/blog/2013/10/02/enum-files-recursive-on-nodejs/"/>
    <updated>2013-10-02T19:20:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/02/enum-files-recursive-on-nodejs</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/_shimizu">@_shimizu</a> さんの</p>

<!--more-->


<ul>
<li><a href="http://shimz.me/blog/node-js/2944">[node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する | GUNMA GIS GEEK</a></li>
</ul>


<p>の派生品です。ファイルパスを出力するだけにしました。</p>

<p>```js enumFilesRecursive.js
var fs = require("fs")</p>

<pre><code>, path = require("path")
, dir = process.argv[2] || '.'; //引数が無いときはカレントディレクトリを対象とする
</code></pre>

<p>var walk = function(p, fileCallback, errCallback) {</p>

<pre><code>fs.readdir(p, function(err, files) {
    if (err) {
        errCallback(err);
        return;
    }

    files.forEach(function(f) {
        var fp = path.join(p, f); // to full-path
        if(fs.statSync(fp).isDirectory()) {
            walk(fp, fileCallback); // ディレクトリなら再帰
        } else {
            fileCallback(fp); // ファイルならコールバックで通知
        }
    });
});
</code></pre>

<p>};</p>

<p>// 使う方
walk(dir, function(path) {</p>

<pre><code>console.log(path); // ファイル１つ受信  
</code></pre>

<p>}, function(err) {</p>

<pre><code>console.log("Receive err:" + err); // エラー受信
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marked.js で Markdown をクライアント側でパースして表示する]]></title>
    <link href="http://amay077.github.io/blog/2013/08/06/parse-markdown-using-markedjs/"/>
    <updated>2013-08-06T21:10:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/08/06/parse-markdown-using-markedjs</id>
    <content type="html"><![CDATA[<p><a href="http://phyzkit.net/typescript/">Typescript クイックガイド</a> で、ソースを見たら Markdown で書かれてたのをみて「カッケー」と思ったのと、<a href="http://www.atmarkit.co.jp/ait/articles/1302/05/news091.html">利用規約やプライバシーポリシーは Github に置くといいよ</a> というのを見て、なら「github に .markdown ファイルを置いてクライアントサイドでスタイリングできたら嬉しいじゃん？」と思いやってみた。</p>

<!--more-->


<h2>Javascript による markdown パーサいろいろ</h2>

<p>上記 Typescript クイックガイド では <a href="https://github.com/chjj/marked">marked.js</a> が使われているようだが、他にもいろいろある模様。下記にて比較してくださっている。</p>

<ul>
<li><a href="http://kannokanno.hatenablog.com/entry/2013/06/19/132042">JavaScript - Markdownパーサーのshowdown.js、markdown-js、markedを簡単比較 - ぼっち勉強会</a></li>
</ul>


<p>もともと marked.js を使おうと思ってたし、上記サイトでも問題無さそうだったので、そのままいく。</p>

<h2>使い方</h2>

<p>marked.js を読み込んだ後、</p>

<p><code>js
var formatted = marked(markdown_text)
</code>
で、HTML に整形された文字列が返されるというシンプルなもの。(整形オプションがいろいろあるようだが割愛)</p>

<p>Typescript クイックガイドでは、HTML 内に Markdown テキストがベタ書きされていたが、せっかくなので管理がしやすいように外部 Markdown ファイルを読みこむようにしてみた。</p>

<p>```html md_renderer.html
&lt;!DOCTYPE html>
<html lang="ja"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="utf-8"&gt;

    &lt;title&gt;Markdown renderer&lt;/title&gt;
    &lt;meta name="description" content="Markdown renderer"&gt;

    &lt;!-- bootstrap --&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css" rel="stylesheet"&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap-responsive.css" rel="stylesheet"&gt;

    &lt;!-- js libraries --&gt;
    &lt;script type="text/javascript" src="js/jquery-2.0.3.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/marked.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        $(document).ready(function(){
            var target = $("#markdown_content");

            $.ajax({
                url: target[0].attributes["src"].value,
            }).success(function(data){
                target.append(marked(data));
            }).error(function(data){
                target.append("This content failed to load.");
            });
        });
    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;!-- Content --&gt;
    &lt;div class="container"&gt;
        &lt;div id="markdown_content" src="./sample.markdown"&gt; &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>一番下の <code>&lt;div id="markdown_content" src="./sample.markdown"&gt;</code> の src に読み込む Markdown ファイルを指定するようにした。</p>

<p>bootstrap で見栄えを良くしているが、必須ではない。</p>

<p>こちらが <a href="https://dl.dropboxusercontent.com/u/264530/qiita/md_renderer/md_renderer.html">デモ</a> 。</p>

<p>さすがに描画に少し時間がかかるみたいです。
<code>marked()</code> は非同期版もあるようなので、そちらを使うべきだったかな。</p>

<p>これで、データ(Markdown)とプレゼンテーション部(HTML)を分離できて、なんか良さげな感じがする。</p>

<p>Octopress とか、HTMLを生成しちゃうんじゃなくて、クライアントサイドで 「Markdown を描画する」できると、投稿の手間が減って良いかもですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 製のチャート描画ライブラリのメモ]]></title>
    <link href="http://amay077.github.io/blog/2013/07/17/list-of-chart-library-for-javascript/"/>
    <updated>2013-07-17T19:39:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/07/17/list-of-chart-library-for-javascript</id>
    <content type="html"><![CDATA[<p>Javascript 製のチャート描画ライブラリをいくつか調べたので備忘録として残しておく。</p>

<!--more-->


<p>やりたいのは、ストリーミングで次々やってくるデータをリアルタイムに表示する事。しかも順方向だけじゃなくて過去方向にも戻りたい。</p>

<h2>smoothiecharts</h2>

<p>http://smoothiecharts.org/</p>

<p>シンプルで、使うのも簡単。が、逆再生ができるのかよく分からなかったので保留。</p>

<h2>Cubism.js</h2>

<p>http://square.github.io/cubism/</p>

<p>言わずと知れたビジュアライゼーションライブラリ <a href="http://d3js.org/">D3</a> のプラグイン。
なんか見た目がクール。
あまり突っ込んで調べてないので、要件を満たすかは不明。
ちなみにモバイル決済の Square によるオープンソースプロジェクト。
D3 自体でもいろいろなチャート描画ができるが、なんか勝手に Fat なイメージを持ってる。</p>

<h2>Flot</h2>

<p>http://www.flotcharts.org/</p>

<p>こちらは jQuery のプラグイン。</p>

<p>使い方が簡単で、配列を描画させてるだけだったので、配列操作で逆再生にも対応できそう。</p>

<h2>Google Chart</h2>

<p>https://developers.google.com/chart</p>

<p>大御所。
なんか "Connect to your data in realtime" って謡ってるので、できそうな感じもするが試してない。これも高機能であるが故にレスポンス大丈夫かなあと勝手に思っている。</p>

<h2>amCharts</h2>

<p>https://amcharts.zendesk.com/entries/22592917-Creating-charts-with-real-time-data</p>

<p>amCharts というプロダクトで、リアルタイムなチャートが実現できる模様。参考程度に。</p>

<h2>その他</h2>

<p>やりたいことは株価チャートに近いのでそっち方面で探すとたくさんありそうだけど、株価に特化しちゃってて機能過多＆使いづらい感。</p>

<h2>参考</h2>

<p>タイムリーにも同じようなまとめをしてくださってる方が居たのでメモ</p>

<ul>
<li><a href="http://qiita.com/hurutoriya/items/727296839a2ec638fdc4">グラフ描画に良さげなJavaScriptライブラリ - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
