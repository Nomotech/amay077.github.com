<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: googlemapsapi | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/googlemapsapi/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-18T15:21:43+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[カスタムマーカーに対応した Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/07/10/xamarin_forms_googlemaps_v1_4_0_released/"/>
    <updated>2016-07-10T18:32:39+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/07/10/xamarin_forms_googlemaps_v1_4_0_released</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました。</p>

<!--more-->


<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/1.4.0">NuGet Gallery | Xamarin.Forms.GoogleMaps 1.4.0</a></li>
</ul>


<p>待望？のカスタムマーカーに対応しました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_001.png" alt="image001" /></p>

<h2>カスタムマーカーの使い方</h2>

<p><code>Pin.Icon</code> に <code>BitmapDescriptorFactory</code> により生成される <code>BitmapDescriptor</code> を設定します。</p>

<p><code>BitmapDescriptorFactory</code> の３つのファクトリメソッドにより、
「デフォルトマーカーの色を変える」「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」
の３つが使用できます。</p>

<h3>デフォルトマーカーの色を変える</h3>

<p><a href="https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_marker.html?hl=ja#ae320cb082a68c22eb1f37955f8e56228"><code>iOS:GMSMarker.markerImageWithColor</code></a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float"><code>Android:BitmapDescriptorFactory.defaultMarker</code></a>) に対応する、既定のマーカー形状の色のみを変える機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>

<p><code>csharp
pin.Icon = BitmapDescriptorFactory.DefaultMarker(Color.Pink);
</code></p>

<h3>プラットフォーム毎の画像リソースを使用する</h3>

<p><a href="https://developers.google.com/maps/documentation/ios-sdk/marker?hl=ja#_7"><code>iOS:UIImage.imageNamed</code></a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float"><code>Android:BitmapDescriptorFactory.fromAsset</code></a>) に対応する、プラットフォーム固有の画像リソースを、マーカー画像として使用する機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.FromBundle(string)</code> メソッドを使用します。</p>

<p><code>csharp
pin.Icon = BitmapDescriptorFactory.FromBundle("image01.png");
</code></p>

<p>引数の bundleName は、 <strong>同じ名称で</strong> 、プラットフォーム毎に次のように用意されている必要があります。</p>

<h4>Android の場合</h4>

<p>Android側のプロジェクトの <code>Assets</code> ディレクトリ内に <code>image01.png</code> を追加し、 Build Action を ”Android Asset” に設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_002.png" alt="image001" /></p>

<h4>iOS の場合</h4>

<p>iOS側のプロジェクト <code>image01.png</code> を追加し、 Build Action を ”BundleResource” に設定します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_003.png" alt="image001" /></p>

<h3>共通の画像リソースを使用する</h3>

<p>画像を <code>Stream</code> を直接指定できる、機能です。</p>

<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>

<p>```csharp
// PCLプロジェクトに EmbeddedResouece として追加した &ldquo;marker01.png&rdquo; を読み込んで Stream 化
var assembly = typeof(CustomPinsPage).GetTypeInfo().Assembly;
var stream = assembly.GetManifestResourceStream($&ldquo;XFGoogleMapSample.marker01.png&rdquo;);</p>

<p>// Stream をマーカーに設定
pin.Icon = BitmapDescriptorFactory.FromStream(stream);
```</p>

<h2>【注意】プラットフォーム毎のマーカーサイズの違い</h2>

<p>「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」で見られる現象なのですが、iOS と Android では <strong>同じサイズの画像を指定しているのに iOS の方が大きく描画されます</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_v1_4_0_released_004.png" alt="image001" /></p>

<p>なぜこうなるのか分かりませんが、 <a href="https://developers.google.com/maps/documentation/ios-sdk/intro?hl=ja">Google Maps SDK for iOS</a> と <a href="https://developers.google.com/maps/documentation/android-api/intro?hl=ja">Google Maps Android API</a> を直接使用した時もこうなるので、両者の仕様というかプラットフォーム自体の仕様なのかも知れません。</p>

<p>特に <code>BitmapDescriptorFactory.FromStream</code> を使用した時には使い勝手が悪いのですが、「ネイティブの Google Maps SDK の機能を共通APIでラップする」のが第一目標なので、とりあえず画像を何も加工しない実装でリリースしました。</p>

<p>何か原因などについてヒントがある方は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues/40">Why custom pin icon in iOS bigger than Android? · Issue #40 · amay077/Xamarin.Forms.GoogleMaps</a></li>
</ul>


<p>に書いてもらえると助かります（日本語で大丈夫です）。</p>

<h2>サンプルプログラム</h2>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">XFGoogleMapSample</a> の <a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/XFGoogleMapSample/CustomPinsPage.xaml.cs"><code>CustomPinsPage.xaml.cs</code></a> でこれらの機能を使用しています。</p>

<p>是非使ってみてください。よければ <a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Github リポジトリ</a> に Star ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin.Forms 向けの地図ライブラリ「Xamarin.Forms.GoogleMaps」をリリースしました]]></title>
    <link href="http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/"/>
    <updated>2016-06-27T23:59:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps</id>
    <content type="html"><![CDATA[<p>Xamarin.Forms で使える地図ライブラリは、公式が出している</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.Maps/">Xamarin.Forms.Maps</a> &ndash; Maps models and renderers for Xamarin.Forms</li>
</ul>


<p>があるのですが、非常に機能が少ないです（ピンがおけるだけで、図形の描画すらできません）。</p>

<!--more-->


<p>なので、別な選択肢としての「Xamarin.Forms向け地図ライブラリ」を開発し始めました。</p>

<p>それがこちら</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/">Xamarin.Forms.GoogleMaps</a> &ndash; Yet another Maps library for Xamarin.Forms that optimized for Google maps.</li>
</ul>


<p>です。</p>

<p>iOS では MapKit に代わり <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a> を使用し、 Android/iOS 共に Google Maps に特化することで、API の共通化を容易にし、恐らくAPI共通化の足枷になっているであろう UWP(Bing maps) のサポートは最小限に留めています。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_01.png" alt="screenshot1" /></p>

<h2>現在の機能</h2>

<p>現在のバージョンは 1.1.0 。
公式の Xamarin.Forms.Maps に比べて、ライン・ポリゴン・円を追加できるようになりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_forms_googlemaps_intro_02.png" alt="screenshot2" /></p>

<p>詳しい比較は</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/wiki/Xamarin.Forms.Maps-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83">Xamarin.Forms.Maps との比較 &ndash; Xamarin.Forms.GoogleMaps Wiki</a></li>
</ul>


<p>にあります。</p>

<h2>サンプルプログラム</h2>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample">Xamarin.Forms.GoogleMaps/XFGoogleMapSample &ndash; github</a></li>
</ul>


<p>にあります。</p>

<p>Google Maps の APIキーを Android / iOS それぞれで取得する必要があります。</p>

<ul>
<li>Android &ndash;  <a href="http://www.buildinsider.net/mobile/xamarintips/0020">Xamarin.Androidで地図を表示するには？（Google Maps使用） &ndash; Build Insider</a></li>
<li>iOS &ndash; <a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS  |  Google Developers</a> の「クイック スタート ステップ」
をそれぞれ参照してください。</li>
</ul>


<h2>オープンソース</h2>

<p><a href="http://open.xamarin.com/">Xamarin Open Source SDK</a> により、 Xamarin.Forms のソースコードもオープンソースになったので、 <a href="https://github.com/xamarin/Xamarin.Forms/tree/master/Xamarin.Forms.Maps">Xamarin.Forms/Xamarin.Forms.Maps &ndash; github</a> などを Fork して作りました。</p>

<p>このライブラリ自体もオープンソースであり、</p>

<ul>
<li><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps">Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>
</ul>


<p>で開発しています。（スターを付けてもらえると作者がよろこびます）</p>

<p><a href="https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues">要望、コメントなど</a>もらえると嬉しいです。よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Component for iOS の CoordinateBounds について]]></title>
    <link href="http://blog.amay077.net/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk/"/>
    <updated>2014-01-16T18:05:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk</id>
    <content type="html"><![CDATA[<p>すごくニッチな話ですけど、Xamarin Components にある Google Maps を Xamarin.iOS で使った。</p>

<!--more-->


<ul>
<li><a href="http://components.xamarin.com/view/googlemapsios">Google Maps /Components</a></li>
</ul>


<p>このライブラリの中に <code>CoordinateBounds</code> という「領域」を表すクラスがある。これは <a href="https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja">GMSCoordinateBounds</a> の Binding だ。</p>

<p>で、CoordinateBounds には <code>Including</code> (<a href="https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja#a63cffdf310ca19c6bab74c9a4034aadd">includingCoordinate</a>) というメソッドがあって、これを呼ぶと指定した座標が入るように領域を拡幅してくれる、便利だ。</p>

<p>で、最初はこのクラスをこう使っていた。</p>

<p><code>csharp
var bounds = new CoordinateBounds();
bounds.Including(new CLLocationCoordinate2D(34d, 134d));
bounds.Including(new CLLocationCoordinate2D(33d, 133d));
bounds.Including(new CLLocationCoordinate2D(35d, 135d));
</code></p>

<p>動かしてみて、この使い方だと <code>bounds</code> から期待した結果が得られないことに気づいた。範囲が -180〜+180 になってしまった。</p>

<p>正しくはこう。</p>

<p>```csharp
var bounds = new CoordinateBounds(</p>

<pre><code>new CLLocationCoordinate2D(34d, 134d),
new CLLocationCoordinate2D(33d, 133d));
</code></pre>

<p>bounds.Including(new CLLocationCoordinate2D(35d, 135d));
```</p>

<p>これだと結果は、正しく [33,133 &ndash; 35,135] を返す。</p>

<p>処理上、生成時に２つの座標が揃ってないケースだったので、「あ、デフォルトコンストラクタあるじゃん」と使ってたらハマった。本家 iOS 版の方には引数無しの initXXX は無かった。</p>

<p>Objective-C の仕様上 alloc して init しないのを防げない、んだっけ？
だから、Xamarin.iOS の Binding でデフォルトコンストラクタを隠せないのかな？
突っ込んで調べてないけど、Binding ライブラリを使う時は注意しましょう、ちゃんと本家のAPIリファレンスを見ましょう、というお話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地理院地図の標高タイル(CSV)を描画してみた]]></title>
    <link href="http://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api/"/>
    <updated>2013-11-05T21:11:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api</id>
    <content type="html"><![CDATA[<p>国土地理院が提供している API の一つに「標高タイル」というものがあります。</p>

<!--more-->


<p>タイルというと、Googleマップや OpenStreetMap などの Web地図では通常、画像を指しますが、標高タイルAPIでは <strong>「画素毎の高度(ｍ)」</strong> が取得できます。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/development/demtile.html">標高タイル仕様 &ndash; 地理院地図</a></li>
<li><a href="http://cyberjapandata.gsi.go.jp/xyz/dem/14/14547/6463.txt">サンプルURL</a></li>
</ul>


<p>これは面白い、ということで使ってみました。</p>

<h2>サンプル</h2>

<ul>
<li><a href="http://jsdo.it/amay077/jjod">地理院地図の標高タイル(CSV)を描画してみた &ndash; jsdo.it</a></li>
</ul>


<h3>Google Map</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_01.png" alt="img1" /></p>

<h3>標高タイルAPI で取得した標高値を描画</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_02.png" alt="img1" /></p>

<h2>何をしているか？</h2>

<p>下は、このサンプルのコードの抜粋ですが、ポイントは２つ</p>

<ul>
<li>getTile で通常 img 要素を生成して返すが、代わりに canvas 要素に返す</li>
<li>標高API をコールして得られた CSV をパースし、 高さに応じた色を計算して、canvas に矩形を描画する</li>
</ul>


<p>さすがに1ピクセル毎に描画すると重すぎるので、初期値では 16ピクセルずつに間引きしています(画面の DotSize で変更できます)。</p>

<p>クライアント側でレンダリングしているので、色などが動的に変更できます。</p>

<p>```javascript</p>

<pre><code>map.mapTypes.set("GsiMaps", {
  name:"標高タイル",
  tileSize:new google.maps.Size(256,256),
  minZoom:14, // 標高タイルは Lv:14 しか用意されてないので
  maxZoom:14, 
  getTile:function(tileCoord, zoom, ownerDocument) {

    // 普通は img だけど、標高タイルは CSV で画素毎の標高値が取得できるので、
    // クライアント側で描画するために Canvas を使う
    var canvas = ownerDocument.createElement("canvas");
    canvas.width = 256;
    canvas.height = 256;

    var x = (tileCoord.x % Math.pow(2, zoom)).toString();
    var y = tileCoord.y.toString();

    // 各画素の標高値を取得する
    canvas.tileUrl = "http://cyberjapandata.gsi.go.jp/xyz/dem/" + zoom +  "/" + x + "/" + y + ".txt";
    // 標高を描画する
    renderDem(canvas);
    renderedTiles[canvas.tileUrl] = canvas; // タイル再描画の為にとっておく
    return canvas;
  }
});

// 標高タイルを描画する
function renderDem(canvas) {
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, 256, 256);

  $.get(canvas.tileUrl, function(data) {
    // CSV が得られるのでパース
    var lines = data.split(/\r\n|\r|\n/);
    for (var i = 0; i &lt; lines.length; i+=dotSize) {
      var cols = lines[i].split(',');
      for (var j = 0; j &lt; cols.length; j+=dotSize) {
        if (cols[j] == 'e') { // エラーの画素には 'e' が入ってる
          continue;
        }

        // 標高0ｍ を startColor、標高1000ｍを endColor としたグラデーション色を設定する。
        ctx.fillStyle = $.xcolor
        .gradientlevel(startColor, endColor, cols[j] / 1000.0 * 100.0, 100)
        .getCSS();
        ctx.fillRect(j, i, dotSize, dotSize);
      }
    }
  });
}
</code></pre>

<p>```</p>

<h2>まとめ</h2>

<p>ただの標高値を地図に表すなら画像でいいじゃん！とか言われそうですが、よいアイデアが浮かばなかったのでまずは素直に使ってみました。</p>

<p>たとえば、移動手段による移動コストの違い(車だと坂道余裕だけど自転車だとキツい)みたいなのを視覚化するのに使えるような気がします。</p>

<p>今回は、Canvas を使ったのでこの程度ですが、WebGL とかを使えば、Google Map の地形図に負けない、美しい3D地図が描画できるはずです。</p>

<p>他に例を見ない、野心的な試みだと思うので、何か面白い使い方ができるといいなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google API Console の API Access って…]]></title>
    <link href="http://blog.amay077.net/blog/2013/10/30/multi-apps-in-google-api-console/"/>
    <updated>2013-10-30T20:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/10/30/multi-apps-in-google-api-console</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/apis/console/">Google API Console</a> の API Access って、複数のアプリを登録できたんですね。気づかなかった。。。</p>

<!--more-->


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/multi_apps_in_google_api_console_01.png" alt="img1" /></p>

<blockquote><p>&lt;SHA1フィンガープリント>;&lt;アプリのパッケージ名>&lt;改行><br/>
&lt;SHA1フィンガープリント>;&lt;アプリのパッケージ名></p></blockquote>

<p>って書けばよかったんだ。</p>

<p>新しくなった <a href="https://cloud.google.com/console">Cloud Console</a> では、 +/&ndash; ボタンが付いて分かりやすい。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/multi_apps_in_google_api_console_02.png" alt="img1" /></p>
]]></content>
  </entry>
  
</feed>
