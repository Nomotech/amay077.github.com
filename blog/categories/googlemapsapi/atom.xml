<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GoogleMapsAPI | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/googlemapsapi/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-11-03T17:11:13+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google API Console の API Access って…]]></title>
    <link href="http://amay077.github.io/blog/2013/10/30/multi-apps-in-google-api-console/"/>
    <updated>2013-10-30T20:00:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/30/multi-apps-in-google-api-console</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/apis/console/">Google API Console</a> の API Access って、複数のアプリを登録できたんですね。気づかなかった。。。</p>

<!--more-->


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/multi_apps_in_google_api_console_01.png" alt="img1" /></p>

<blockquote><p>&lt;SHA1フィンガープリント>;&lt;アプリのパッケージ名>&lt;改行><br/>
&lt;SHA1フィンガープリント>;&lt;アプリのパッケージ名></p></blockquote>

<p>って書けばよかったんだ。</p>

<p>新しくなった <a href="https://cloud.google.com/console">Cloud Console</a> では、 +/- ボタンが付いて分かりやすい。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/multi_apps_in_google_api_console_02.png" alt="img1" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爆速エミュレータで Google Maps Android API v2 を動かす]]></title>
    <link href="http://amay077.github.io/blog/2013/10/20/using-gmapv2-on-intel-emulator/"/>
    <updated>2013-10-20T21:58:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/20/using-gmapv2-on-intel-emulator</id>
    <content type="html"><![CDATA[<p>Google APIs のエミュレータで Google Map Android API v2 が動くようになったのですが、やっぱり遅い、使えん。
という訳で、Intel の爆速エミュレータで GMapV2 を使う手順の備忘録です。(ご利用は自己責任で)</p>

<!--more-->


<h2>爆速エミュレータの導入</h2>

<p>こちら等を参考にセットアップします。</p>

<ul>
<li><a href="http://qiita.com/gabu/items/8bc1a11f1382409f1d2a">Android再入門 - エミュレータの作成</a></li>
</ul>


<h2>エミュレータで Google Maps Android API v2 を動かす</h2>

<p><code>com.google.android.gms.apk</code> と <code>com.android.vending.apk</code> が必要なのでどうにかして入手しインストールします。(ほとんど答えだけど下記参照)</p>

<ul>
<li><a href="http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator">Running Google Maps v2 on Android Emulator - Stack Overflow</a></li>
</ul>


<p>apk が古いとうまく動作しません。なるべく新しいものを探しましょう。(ﾎﾞｿ</p>

<h2>AndroidManifest.xml から com.google.android.maps の定義を消す</h2>

<p>意外とハマったのがコレ。</p>

<p><code>AndroidManifest.xml</code> で</p>

<p><code>
&lt;uses-library android:name="com.google.android.maps" /&gt;
</code></p>

<p>が定義してあると、</p>

<p><code>
10-20 11:35:52.977: E/PackageManager(1178): Package xxxx requires unavailable shared library com.google.android.maps; failing!
</code></p>

<p>というエラーになります。</p>

<p>この <code>com.google.android.maps</code> は Google Maps API v1 で必要だったもので、v2 では必要ありません。削除しましょう。</p>

<p>v2 の使い方を説明するブログやサイトで、これが含まれてしまってるものがあるようです。(かくいう自分もそんなサイトからコピペしてきたまま使ってたのでエラーになりました（汗）</p>

<h2>動かす</h2>

<p>あとは、実機と変わりません。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gmapv2_on_intel_emulator_01.png" alt="img" /></p>

<p>やばい、PC性能とネットワーク環境のおかげで実機より快適になったｗ</p>

<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/ria10/20121218/1355794748">AndroidでGoogle Maps v2 をエミュレータで動かしてしかも爆速 - リア充爆発日記</a></li>
<li><a href="http://denshikousaku.net/how-to-make-android-google-maps-v2-work-in-android-emulator">エミュレータでGoogle Maps for Android V2を動かす方法 | アプリ開発とRaspberry PIとArduino実験</a></li>
<li><a href="http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator">Running Google Maps v2 on Android Emulator - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない]]></title>
    <link href="http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap/"/>
    <updated>2013-10-11T13:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap</id>
    <content type="html"><![CDATA[<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>

<!--more-->


<h2>2013.11.03 追記</h2>

<p>電子国土Web.NEXT という名称で試験公開されていたものが、「地理院地図」「地理院タイル」として正式公開されました。</p>

<ul>
<li><a href="http://www.gsi.go.jp/johofukyu/johofukyu40032.html">地理院地図の公開について | 国土地理院</a></li>
<li><a href="http://portal.cyberjapan.jp/help/development.html#siyou">地理院タイルを用いた開発 | 地理院地図</a></li>
</ul>


<p>地理院タイルは <a href="http://portal.cyberjapan.jp/help/development/oldScheme.html">従来版タイル</a> と仕様が異なります。従来版タイルは <strong>2013年度中に提供終了予定</strong> との事ですし、新しい地理院タイルの方が大幅に仕様が簡略化されたので、こちらを使った方が良いです。</p>

<p>このエントリも「電子国土」を「地理院地図（地理院タイル）」に修正しました。</p>

<hr />

<h2>2013.10.17 追記</h2>

<p><a href="http://qiita.com/amay077/items/979dfc858a21c8bbb7a9#comment-6d0be86c2ba90df50808">コメント</a>で頂いていますが、現在は、 <strong>「日本向けにローカライズされた」</strong> Googleマップ側でも表記が修正されたようで、当初「問題がある」と言われていた地域は問題が解消されているように見えます。
<strong>ただし、下記のように Google Maps API で「region=JP」が指定されている場合に限ります。</strong></p>

<ul>
<li><a href="http://d.hatena.ne.jp/kitokitoki/20130415/p1">Google Maps API v3 で 日本海（東海）と「東海」が併記されるのを避けるには - わからん</a></li>
</ul>


<p>これによって「Googleマップ禁止令はもはや無用である」と考えることもできますし、「依然として国の制御下には無い」と考えることもできます。</p>

<p>以下の情報は必要なくなるかも知れませんが、今後「Googleマップ以外の選択肢」の一つとして参考になれば幸いです。</p>

<p>-- 追記ここまで --</p>

<hr />

<ul>
<li><a href="http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 - NAVER まとめ</a></li>
<li><a href="http://shinka3.exblog.jp/20690859/">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>
<li><a href="https://twitter.com/nissyyu/status/387870282570272768">Twitter - うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>
</ul>


<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>

<p>で、対策としてはいくつかあります。。。</p>

<h4>画像の地図や PDF に変える</h4>

<ul>
<li>どんな時代錯誤ですか</li>
</ul>


<h4>他の地図APIを使う</h4>

<ul>
<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>
<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>
<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>
<li>Bing, OSM は「制御下には無い」でしょう。</li>
</ul>


<h4>GoogleMapの問題のある表記を「正しい表記」に上書きする</h4>

<ul>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（<sup>_<sup>;）</sup></sup></li>
<li>これ→<a href="http://jsdo.it/toaSoku/gmapforjapan">日本政府に「禁止されない」 Google Maps - jsdo.it - Share JavaScript, HTML5 and CSS</a></li>
<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>
</ul>


<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>

<h2>ではどうするか？</h2>

<p><a href="http://portal.cyberjapan.jp/">地理院地図</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>

<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>

<p>ただし、Google Map API から地理院地図の地図APIに移行することは、前述の通り、それなりのコストが発生します。</p>

<p>ので、 <strong>「Google Map API を使って地理院地図を利用する方法」</strong> を紹介します。</p>

<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>

<p>既に実現されてる方々がいらっしゃいます。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws">Googleマップを使って国土地理院の地図を見る</a></li>
<li><a href="http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>
</ul>


<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで地理院地図(地理院タイル)を使う、 最もシンプルな実装例を紹介します。</p>

<h3>1. Googleマップを表示するページを用意する</h3>

<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>

<ul>
<li><a href="http://jsdo.it/amay077/tM0q">Google Maps Javascript API v3 の使用例</a></li>
</ul>


<p>HTML+Javascript のソースコードはこんな感じ(<a href="http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>

<p>```html google.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>2. 地理院地図(地理院タイル)を表示するように置き換える</h3>

<ul>
<li><a href="http://jsdo.it/amay077/wFtJ">Google Maps Javascript API v3 での地理院地図の表示例</a></li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/denshikokudo_on_googlemap_01.png" alt="" /></p>

<p>表示が地理院地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、ロゴの表示が必要なので、左下に置いています。(地理院地図の正式なロゴが公開されたら置き換えてください)</p>

<p>という処理を追加したのが、下のコード。
変更が１行、追加行が30行くらいです。
変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。
<a href="https://gist.github.com/amay077/6928205/revisions">gist</a> でも diff を見られます。</p>

<p>```html gsi_map.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: "GsiMaps", // 地理院地図の英語表記は「GIS Maps」
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);

  map.setOptions({
    mapTypeControl: false // 右上の地図タイプ選択を消す
  });

  // 地理院タイルを Overlay する
  // via http://portal.cyberjapan.jp/help/development.html
  map.mapTypes.set("GsiMaps", {
    name:"地理院地図(GSI Maps)",
    tileSize:new google.maps.Size(256,256),
    minZoom:5,
    maxZoom:18, 
    getTile:function(tileCoord, zoom, ownerDocument) {
      var img = ownerDocument.createElement("img");
      img.style.width = "256px";
      img.style.height = "256px";
      var x = (tileCoord.x % Math.pow(2, zoom)).toString();
      var y = tileCoord.y.toString();
      img.src = "http://cyberjapandata.gsi.go.jp/xyz/std/" + zoom +  "/" + x + "/" + y + ".png";
      return img;
    }
  });

   // 左下に電子国土ロゴを表示(TODO: 地理院地図の正式なロゴが公開されたら置き換える)
  var logo = document.createElement('DIV');
  logo.style.padding = '3px';
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo);
  logo.innerHTML = '&lt;a href="http://portal.cyberjapan.jp/portalsite/kiyaku/index.html" target="_blank"&gt;&lt;img style="width:32px, height:32px" src="http://cyberjapan.jp/images/icon01.gif" alt="電子国土" /&gt;&lt;/a&gt;';    }
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>不安とか懸念とか…</h3>

<h4>地図の表示が Google に比べて…</h4>

<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>

<h4>「試験公開」ってなってるんですけど…</h4>

<p>地理院地図は「正式公開」になったので安心ですね。</p>

<p>旧Verについては、2013年度中に運用停止とのことです。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/oldver.html">地理院地図｜旧版情報</a></li>
</ul>


<h4>利用規約とかどうなってるの？</h4>

<p><a href="http://portal.cyberjapan.jp/help/termsofuse.html">地理院地図｜利用規約</a> を見てください。</p>

<h2>まとめ</h2>

<p>いかがでしょうか？</p>

<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」地理院地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>

<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>

<p>地理院地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>

<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>

<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metersToEquatorPixels を Google Maps Android API v2 で]]></title>
    <link href="http://amay077.github.io/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2/"/>
    <updated>2013-10-09T00:21:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2</id>
    <content type="html"><![CDATA[<p>Google Map API v1 には、「地図上の距離(ｍ)を画面上の距離(ピクセル)に変換する」ためのメソッド <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float">Projection.metersToEquatorPixels</a>) がありましたが、v2 ではなくなってしまいました。</p>

<!--more-->


<p>ので、以下のような代替関数を作ってみました。</p>

<p>```java metersToEquatorPixels.java
public static int metersToEquatorPixels(GoogleMap map, LatLng base, float meters) {</p>

<pre><code>final double OFFSET_LON = 0.5d;

Location baseLoc = new Location("");
baseLoc.setLatitude(base.latitude);
baseLoc.setLongitude(base.longitude);

Location dest = new Location("");
dest.setLatitude(base.latitude);
dest.setLongitude(base.longitude + OFFSET_LON);

double degPerMeter = OFFSET_LON / baseLoc.distanceTo(dest); // 1m は何度？
double lonDistance = meters * degPerMeter; // m を度に変換

Projection proj = map.getProjection();
Point basePt = proj.toScreenLocation(base);
Point destPt = proj.toScreenLocation(new LatLng(base.latitude, base.longitude + lonDistance));

return Math.abs(destPt.x - basePt.x);
</code></pre>

<p>}
```</p>

<p>行っていることは単純で、基準となる緯度経度:<code>base</code> から、適当に(ここでは 0.5度)東へ移動した緯度経度を <code>Location.distanceTo</code> で求め、その結果から、「1ｍは何度か？」を求めます。あとは、この係数を使って 地図上の距離:<code>meters</code> を度に変換し、最後に、<code>base</code> と移動後の緯度経度それぞれを画面座標に変換して、画面上の距離を返す、というものです。</p>

<p>「1ｍは何度か？」は、赤道上の値を使っても良いのですが、緯度によって値が大きく変わるので、このような手法を取りました。</p>

<p>ただこれでも、求める距離の精度によっては、<code>OFFSET_LON</code> の値の調整が必要な気がします。また、経度:0 をまたぐような地域では正しく動かない気がします。(いずれも未検証)</p>

<p>また、緯度方向にもそれなりに正確な数値を出すには、上記と同じことを緯度に対しても行う必要があります。(これは v1 の API にもなかった)</p>

<p>v2 になって、描画系でピクセル座標を意識することはなくなったんであまり使うことも無いと思いますが、なにかで必要になったら思い出す程度で。</p>

<h3>追記</h3>

<p>あとで気づいたんですが、 v1 の <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float">Projection.metersToEquatorPixels</a>) は、赤道上の距離で算出してたんですね。それと比べるとちょっとオーバースペックでした。</p>

<p> それと、この記事を書く前に私のツイートを読まれた @honjo2 さんが、 v1 と同じ(赤道の距離を使う)仕様の関数を公開してくださいました。</p>

<blockquote class="twitter-tweet"><p>どうぞ <a href="https://t.co/quYnqvn1tw">https://t.co/quYnqvn1tw</a> RT <a href="https://twitter.com/amay077">@amay077</a>: Google Map Android v2 になって metersToEquatorPixels がなくなっちゃったのが地味に不便だ。</p>&mdash; 本城 博昭 (@honjo2) <a href="https://twitter.com/honjo2/statuses/387368608541589505">October 8, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[moveCamera(CameraUpdateFactory.newLatLngBounds で落ちる]]></title>
    <link href="http://amay077.github.io/blog/2013/09/29/movecamera-with-cameraupdatefactory-newlatlngbounds-crashes/"/>
    <updated>2013-09-29T21:16:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/29/movecamera-with-cameraupdatefactory-newlatlngbounds-crashes</id>
    <content type="html"><![CDATA[<p>Google Map Android API v2 では、指定した範囲にいいかんじにズームしてくれるメソッドがあって（これを使うと下記事のようなことができる）、とても便利なのですが、普通に使ってたら落ちました（泣</p>

<!--more-->


<ul>
<li><a href="http://tryworks-design.com/?p=1530">Android GooglMapを使い、現在値と目的地を（２点間）を表示させる。 | App Camp</a></li>
</ul>


<p>その理由と、対策を記録しておきます。</p>

<h2>エラーになるコード</h2>

<p>GoogleMap v2 を使ったよくあるコード。</p>

<p>```java MainActivity.java
@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

SupportMapFragment fragment = ((SupportMapFragment)getSupportFragmentManager()
        .findFragmentById(R.id.map));
GoogleMap gmap = fragment.getMap();

LatLngBounds bounds = LatLngBounds.builder()
    .include(new LatLng(35.4433011,139.646108)) // 横浜
    .include(new LatLng(35.6846001,139.696919)) // 東京
    .build();

gmap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 15));
</code></pre>

<p>}
```</p>

<p>起動時に、横浜-東京 が画面内に入るようにズームする、つもりのコード。</p>

<p>これは以下のエラーになる。</p>

<blockquote><p>09-29 20:22:58.508: E/AndroidRuntime(18904): FATAL EXCEPTION: main<br/>
09-29 20:22:58.508: E/AndroidRuntime(18904): java.lang.RuntimeException: Unable to start activity ComponentInfo{com.amay077.<br/>android/com.amay077.android.mapsample.view.MainActivity}: java.lang.IllegalStateException: Map size should not be 0. Most likely, layout has not yet occured for the map view.</p></blockquote>

<h2>エラーの原因</h2>

<p>StackOverflow さまに載ってた。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/13692579/movecamera-with-cameraupdatefactory-newlatlngbounds-crashes">android - moveCamera with CameraUpdateFactory.newLatLngBounds crashes - Stack Overflow</a></li>
</ul>


<p>また、<a href="https://developers.google.com/maps/documentation/android/views#changing_camera_position">APIリファレンス</a> にも次のように記載がある。</p>

<blockquote><p>Note: Only use the simpler method newLatLngBounds(boundary, padding) to generate a CameraUpdate if it is going to be used to move the camera after the map has undergone layout. During layout, the API calculates the display boundaries of the map which are needed to correctly project the bounding box. In comparison, you can use the CameraUpdate returned by the more complex method newLatLngBounds(boundary, width, height, padding) at any time, even before the map has undergone layout, because the API calculates the display boundaries from the arguments that you pass.</p></blockquote>

<p>意訳すると <code>newLatLngBounds(boundary, padding)</code> は、レイアウトが完了した後で使ってね、そうでない場合は、<code>newLatLngBounds(boundary, width, height, padding)</code> を使ってね。ということらしい。</p>

<p>確かに <code>onCreate</code> ではまだレイアウトされていないので納得。</p>

<h2>対策</h2>

<p>上の StackOverflow でも解決策として、<code>ViewTreeObserver.addOnGlobalLayoutListener</code> を使って、レイアウトが完了したタイミングで moveCamera する方法が紹介されているが、もうちっとシンプルにできないかなと思っていたところ、ちょうど別件で「ビューのサイズが確定(して Width/Height が取得できる)タイミング」を調べていて、同じく StackOverflow で以下の情報を発見。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4393612/when-can-i-first-measure-a-view/15301092#15301092">android - When Can I First Measure a View? - Stack Overflow</a></li>
</ul>


<p>これによると <code>view.post(new Runnable() { … })</code> のタイミングでも OK らしいので、今回はこれを使ってみる。</p>

<p>```java MainActivity.java
@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

SupportMapFragment fragment = ((SupportMapFragment)getSupportFragmentManager()
        .findFragmentById(R.id.map));
final GoogleMap gmap = fragment.getMap();

// NOTE MainActivity.this.runOnUiThread(new Runnable() { ではダメだった
fragment.getView().post(new Runnable() {
    @Override
    public void run() {
        LatLngBounds bounds = LatLngBounds.builder()
                .include(new LatLng(35.4433011,139.646108)) // 横浜
                .include(new LatLng(35.6846001,139.696919)) // 東京
                .build();

        gmap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 15));
    }
});
</code></pre>

<p>}
```</p>

<p>としたところ、正常に地図がズームされました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/movecamera_with_cameraupdatefactory_newlatlngbounds_crashes_01.png" alt="img" /></p>

<p>ちなみに、処理をメインスレッド上で行う <code>Activity.runOnUiThread</code> や <code>Handler.post</code> では NG、冒頭と同じエラーでした。処理は UIスレッド上で行われるけど、Map はまだレイアウト未完了、という事だと思います。</p>

<p>起動時の処理は、全ての View で post 内に書いておいた方がいいのかも。</p>
]]></content>
  </entry>
  
</feed>
