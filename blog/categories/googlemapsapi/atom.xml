<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GoogleMapsAPI | Experiments Never Fail]]></title>
  <link href="http://amay077.github.com/blog/categories/googlemapsapi/atom.xml" rel="self"/>
  <link href="http://amay077.github.com/"/>
  <updated>2013-02-25T19:42:13+09:00</updated>
  <id>http://amay077.github.com/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Maps API v2 のマーカーの Anchor を探る]]></title>
    <link href="http://amay077.github.com/blog/2013/02/19/googlemap-v2-anchor/"/>
    <updated>2013-02-19T23:10:00+09:00</updated>
    <id>http://amay077.github.com/blog/2013/02/19/googlemap-v2-anchor</id>
    <content type="html"><![CDATA[<p>Google Maps API の Marker には、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/MarkerOptions#anchor(float,%20float">Anchor</a> というプロパティがあり、緯度経度と、画像のどの位置をマッピングさせるかを設定する事ができます。</p>

<!-- more -->


<p>Marker の既定の画像は、よく見るピンみたいなやつですが、既定の Anchor は、0.5f/1.0f になっています。設定値は、画像に対する「x軸の割合」と「y軸の割合」で、言わんとすることは、「緯度経度の位置を画像の、横方向はちょうど真ん中、縦方向は最下部に合わせる」という事です。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/marker_anchor.png" alt="Marker.anchor の設定値" /></p>

<p>以下のように、設定値を変更すると、それぞれマーカーの表示位置が変わります。(Android SDK に同梱される Google Maps API v2 のサンプルをベースにしています)</p>

<p>```java anchor_center_bottom.java
mAdelaide = mMap.addMarker(new MarkerOptions()</p>

<pre><code>.position(ADELAIDE)
.title("Adelaide")
.snippet("Population: 1,213,000")
.anchor(0.5f, 1.0f)); // 既定値と同じ
</code></pre>

<p><code>
</code>java anchor_left_top.java
mAdelaide = mMap.addMarker(new MarkerOptions()</p>

<pre><code>.position(ADELAIDE)
.title("Adelaide")
.snippet("Population: 1,213,000")
.anchor(0.0f, 0.0f)); // 左上
</code></pre>

<p><code>
</code>java anchor_right_middle.java
mAdelaide = mMap.addMarker(new MarkerOptions()</p>

<pre><code>.position(ADELAIDE)
.title("Adelaide")
.snippet("Population: 1,213,000")
.anchor(1.0f, 0.5f)); // 右中
</code></pre>

<p>```</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/marker_anchor_sample.png" alt="Marker.anchor examples" /></p>

<h2>v1 ではどうだったっけ？</h2>

<p>Google Maps API v1 では、<a href="https://developers.google.com/maps/documentation/android/v1/reference/">ItemizedOverlay</a> の <code>boundCenter</code> と <code>boundCenterBottom</code> に相当する機能ですね。こちらはメソッド名の通り、「中央/中心」と「中央/下部」しか対応してなかったので、より柔軟になったと言えます。</p>

<h2>ハマりどころ</h2>

<ul>
<li>最初、anchor はピクセル指定だ、と勝手に勘違いして、画像のサイズを取得してゴニョゴニョやってたのは内緒。</li>
<li>0.0〜1.0 の範囲であることを忘れて、0〜100 の値を設定すると、<strong>「マーカーが全部消えます」</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 で OpenStreetMap を表示する]]></title>
    <link href="http://amay077.github.com/blog/2012/12/26/osm-on-googlemapv2/"/>
    <updated>2012-12-26T00:18:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/26/osm-on-googlemapv2</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://atnd.org/events/34052">FOSS4G Advent Calendar 2012</a> の 12/26 の記事です。</p>

<p>ベクトル地図が扱える新しい Google Maps Android API v2 については、<a href="http://qiita.com/items/7ad0244c0fb4b431e090">Google Map Android API v2 の v1 からの変更点メモ</a> で書きました。</p>

<p>ここでは、v2 で新しく追加された <code>TileOverlay</code> を使って、OpenStreetMap を重ねてみます。</p>

<!-- more -->


<h2>UrlTileProvider を使って OpenStreetMap を表示する</h2>

<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の TileOverlayDemoActivity.java を見れば一目瞭然なので、それをベースにします。</p>

<h3>サンプルのコード</h3>

<p>``` java TileOverlayDemoActivity.java
/<em>* This returns moon tiles. </em>/
private static final String MOON_MAP_URL_FORMAT =</p>

<pre><code>    "http://mw1.google.com/mw-planetary/lunar/lunarmaps_v1/clem_bw/%d/%d/%d.jpg";
</code></pre>

<p>private GoogleMap mMap;</p>

<p>private void setUpMap() {</p>

<pre><code>mMap.setMapType(GoogleMap.MAP_TYPE_NONE);

TileProvider tileProvider = new UrlTileProvider(256, 256) {
    @Override
    public synchronized URL getTileUrl(int x, int y, int zoom) {
        // The moon tile coordinate system is reversed.  This is not normal.
        int reversedY = (1 &lt;&lt; zoom) - y - 1;
       String s = String.format(Locale.US, MOON_MAP_URL_FORMAT, zoom, x, reversedY);
        URL url = null;
        try {
            url = new URL(s);
        } catch (MalformedURLException e) {
            throw new AssertionError(e);
        }
        return url;
    }
};
mMap.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));
</code></pre>

<p>}
```
修正前のコードは、Google Moon のタイル画像を使用しています。</p>

<p>これを OpenStreetMap を使用するように改造します。</p>

<p>``` java OsmTileOverlayDemoActivity.java
/<em>* This returns moon tiles. </em>/
private static final String OSM_MAP_URL_FORMAT =</p>

<pre><code>    "http://tile.openstreetmap.org/%d/%d/%d.png";
</code></pre>

<p>private GoogleMap mMap;</p>

<p>private void setUpMap() {</p>

<pre><code>mMap.setMapType(GoogleMap.MAP_TYPE_NONE);

TileProvider tileProvider = new UrlTileProvider(256, 256) {
    @Override
    public synchronized URL getTileUrl(int x, int y, int zoom) {
        String s = String.format(Locale.US, OSM_MAP_URL_FORMAT, zoom, x, y);
        URL url = null;
        try {
            url = new URL(s);
        } catch (MalformedURLException e) {
            throw new AssertionError(e);
        }
        return url;
    }
};
mMap.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));
</code></pre>

<p>}
```</p>

<p>できました。うーん、簡単すぎる。
URL は OpenStreetMap のものを使います。y軸の値は、Google Moon では逆順となっていたのを正順のまま使用するだけです。</p>

<p>こんな感じで表示できます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/advent2012_osm.png" alt="OpenStreetMap on Google Map API" /></p>

<p>移動、拡大・縮小だけでなく、API v2 の恩恵で、回転やチルトもできるのが嬉しいですね。</p>

<h2>TileOverlay を透過させる</h2>

<p>さて、ベース地図を Google から他のものに差し替えてしまうならこれまでの使い方で十分でしょう。しかし Google のベクトル3Dグリグリ地図をベース地図として使いたいとは誰しもが思うことでしょう。</p>

<p>ここでは、Google地図の上に TileOverlay を透過で表示することにチャレンジしてみます。
ケースとしては、雨雲レーダーのメッシュや、統計メッシュなどを重ね合わせる事が考えられます。</p>

<p>さて、API v2 のもう一つの新機能 GroundOverlay には <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTransparency(float">setTransparentcy</a> というズバリなメソッドがあり、それを使えば一発です。</p>

<p>しかし、TileOverlay とその関連クラスには、透過に関するメソッドは見当たりません。
そこで TileProvider でダウンロードされた画像データを直接弄って、透過にします。</p>

<p>TileProvider は文字通り <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile">Tile</a> を Provide します。そしてこの Tile はタイル画像データそのものです。</p>

<p><a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data">Tile.data</a> の説明には次のように記述があります。</p>

<blockquote><p>A byte array containing the image data. The image will be created from this data by calling <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/null#decodeByteArray(byte[],%20int,%20int">decodeByteArray(byte[], int, int)</a>).</p></blockquote>

<p>つまりこのプロパティの中身を透過させてあげれば良さげ、という事になります。</p>

<p>上記のコードで使用した UrlTileProvider の <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/UrlTileProvider#getTile(int,%20int,%20int">getTile</a> を override して…と思ったら、
＿人人人人人人人人人＿
＞　突然の final！　＜
￣<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>￣</sup></sup></sup></sup></sup></sup></sup></sup>
という事で override できません。</p>

<p>仕方ががないので、独自の TileProvider を別途用意して、UrlTileProvider を内包する形で <code>TransparencyUrlTileProvider</code> というクラスを実装します。</p>

<p>```java TransparencyUrlTileProvider.java
public class TransparencyUrlTileProvider implements TileProvider {</p>

<pre><code>private static final String OSM_MAP_URL_FORMAT = "http://tile.openstreetmap.org/%d/%d/%d.png";

private int _transparency; // 透過率(0〜255)
private UrlTileProvider _osmTileProv; // 内包する TileProvider

public TransparencyUrlTileProvider(int width, int height, int transparency) {
    _transparency = transparency;

    _osmTileProv = new UrlTileProvider(width, height) {
        @Override
        public URL getTileUrl(int x, int y, int zoom) {
            String s = String.format(Locale.US, OSM_MAP_URL_FORMAT, zoom, x, y);
            URL url = null;
            try {
                url = new URL(s);
            } catch (MalformedURLException e) {
                throw new AssertionError(e);
            }
            return url;
        }
    };
}

@Override
public Tile getTile(int x, int y, int zoom) {
    Tile tile = _osmTileProv.getTile(x, y, zoom);

    // TODO ここで Tile の透過処理を行う

    return tile;
}
</code></pre>

<p>}
```</p>

<p>使う側は、こんな感じになります。</p>

<p>``` java OsmTileOverlayDemoActivity.java
private GoogleMap mMap;</p>

<p>private void setUpMap() {</p>

<pre><code>// mMap.setMapType(GoogleMap.MAP_TYPE_NONE); ベース地図は消さない

mMap.addTileOverlay(
    new TileOverlayOptions()
    .tileProvider(
        new TransparencyUrlTileProvider(256, 256, 100)));
</code></pre>

<p>}
```</p>

<p>ここまでで改造前と同じく OpenStreetMap が「非透過で」表示されるのは確認できます。</p>

<p>次にいよいよ Bitmap の透過処理です。
まず、Tile から Bitmap を抜き出します。API リファレンスによると、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data">Tile.data</a> というメンバがあるハズが…見つかりません。代わりに <code>Tile.bM</code> という byte[] なメンバがあります。こいつで間違いないでしょう。</p>

<p>Tile.bM の byte[] から Bitmap インスタンスを生成します。</p>

<pre><code>Bitmap bitmap = BitmapFactory.decodeByteArray(tile.bM, 0, tile.bM.length);
</code></pre>

<p>次に透過処理ですが、Android ではちょっと面倒なようです。
以下のサイトを参考にさせて頂いて、関数を作成しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/hypercrab/20110730/1312038162">Android: Bitmap の背景を透明にする - 入隠者通信 ～病を嗜む～</a></li>
</ul>


<p>```java makeTransparentBmp.java
private static Bitmap makeTransparentBmp(final Bitmap bmp, int transparency) {</p>

<pre><code> int width = bmp.getWidth(); 
 int height = bmp.getHeight(); 
 int[] pixels = new int[width * height]; 

 Bitmap bitmap = Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888 );
 bmp.getPixels(pixels, 0, width, 0, 0, width, height); 
 for (int y = 0; y &lt; height; y++) { 
   for (int x = 0; x &lt; width; x++) { 
     int pixel = pixels[x + y * width];
     pixels[x + y * width] = Color.argb(transparency, 
             Color.red(pixel), Color.green(pixel), Color.blue(pixel)); 
   } 
 } 
 bitmap.eraseColor(Color.argb(0, 0, 0, 0)); 
 bitmap.setPixels(pixels, 0, width, 0, 0, width, height); 

 return bitmap;
</code></pre>

<p>}
```</p>

<p>では TODO の所に組み込みます。</p>

<p>```java TransparencyUrlTileProvider.java
public class TransparencyUrlTileProvider implements TileProvider {</p>

<pre><code>&lt;前略&gt;

@Override
public Tile getTile(int x, int y, int zoom) {
    Tile tile = _osmTileProv.getTile(x, y, zoom);

    // Tile の透過処理を行う
   Bitmap bmp = BitmapFactory.decodeByteArray(tile.bM, 0, tile.bM.length);
   Bitmap transparentBmp = makeTransparentBmp(bmp, _transparency);

   // Tile を作り直す
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    transparentBmp.compress(CompressFormat.PNG, 100, bos);
    Tile tranparentTile = new Tile(tile.width, tile.height, bos.toByteArray());

    return tranparentTile;
}

&lt;以下略&gt;
</code></pre>

<p>}
```</p>

<p>動かしてみます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/advent2012_osmwithg.png" alt="OpenStreetMap with Google Map API" /></p>

<p>これは、GoogleMap の衛星写真の上に OpenStreetMap を透過して重ねた例です（分かりづらい</p>

<h2>まとめ</h2>

<p>このように Google Maps Android API v2 では、TileProvider を使って、タイル地図画像を簡単に表示させることができます。</p>

<p>Google Maps Javascript API や、MapKit でも他のタイル地図画像を利用することはできましたが、それらよりもより簡単に使えます。ハックというよりも API が公式にサポートしている、という感じです。</p>

<p>これまで Android には、Javascript の OpenLayers や、 iOS の route-me のような、地図タイルデータソースを扱える地図SDKはありませんでした（いや OsmDroid くらいか）</p>

<p>それを Google Maps Android API v2 がサポートしたのですから使わない手はありません。地図SDK としては一番高性能で事実上標準なのですから。</p>

<p>これに、OpenStreetMap や電子国土地図、衛星画像などの背景地図や、統計データメッシュや、アメダスなどの主題図的なタイル地図が重ねられるといろいろできそうだなあ、という感じです。
(Yahoo! さんの<a href="http://weather.yahoo.co.jp/weather/zoomradar/">雨雲レーダー</a> のタイル画像もこっそり試してみて「こりゃ面白い」と思ったので公式に提供して欲しいですｗ)</p>

<p>私にはタイル地図データを作る知識は無いので、タイル地図のポータルみたいなものがあるといいなあと思います。 <a href="https://www.facebook.com/chitaikyo">地図タイル工法協会</a> さんよろしくおねがいします。</p>

<p>というわけで、Android で地図使いたいなら(今のところ) Google Maps API v2 一択！ 他社さんもガンバレ！</p>

<p>※あれ？このネタどこが FOSS4G だ？ま、いっか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 の図形の描画順(zIndex)を探る]]></title>
    <link href="http://amay077.github.com/blog/2012/12/25/googlemap-v2-zindex/"/>
    <updated>2012-12-25T17:48:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/25/googlemap-v2-zindex</id>
    <content type="html"><![CDATA[<p>Google Maps Android API v1 では Overlay をレイヤのように使うことで図形群の前後関係をコントロールできましたが、v2 では <code>Polyline</code> や <code>Polygon</code> クラスに <code>zIndex</code> が導入されました。</p>

<p>いくつかの図形を重ねて描画し、zIndex が与える影響を調べてみました。</p>

<!-- more -->


<h2>zIndex なし の場合</h2>

<p>まず zIndex を指定しない場合。</p>

<ol>
<li>マーカー</li>
<li>線(太)</li>
<li>線(細)</li>
<li>ポリゴン(青)</li>
<li>ポリゴン(緑)</li>
</ol>


<p>の順で <code>GoogleMap</code> に追加しています。</p>

<p>```java NoZindex.java
final LatLng TOKYO = new LatLng(35.691, 139.693);
final LatLng NAGOYA = new LatLng(35.1805, 136.9073);
final LatLng TOYOHASHI = new LatLng(34.770, 137.391);
final LatLng MATSUMOTO = new LatLng(36.239, 137.969);
final LatLng SHIZUOKA = new LatLng(34.99, 138.39);
final LatLng MAEBASHI = new LatLng(36.38, 139.04);</p>

<p>// マーカー
mMap.addMarker(new MarkerOptions()</p>

<pre><code>.position(new LatLng(35.47, 138.71))
.title("富士山"));
</code></pre>

<p>// ライン
mMap.addPolyline(new PolylineOptions()</p>

<pre><code>.add(TOKYO, NAGOYA)
.width(40)
.color(Color.BLUE));
</code></pre>

<p>mMap.addPolyline(new PolylineOptions()</p>

<pre><code>.add(TOKYO, NAGOYA)
.width(10)
.color(Color.RED));
</code></pre>

<p>// ポリゴン
mMap.addPolygon(new PolygonOptions()</p>

<pre><code>.add(TOKYO, MATSUMOTO, TOYOHASHI)
.fillColor(Color.CYAN));
</code></pre>

<p>mMap.addPolygon(new PolygonOptions()</p>

<pre><code>.add(TOKYO, MAEBASHI, SHIZUOKA)
.fillColor(Color.GREEN));
</code></pre>

<p>```</p>

<p>結果、こうなりました。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/zindex_off.png" alt="noZindex" /></p>

<p>前後関係を見ると、奥から</p>

<ol>
<li>ポリゴン(青)</li>
<li>ポリゴン(緑)</li>
<li>線(太)</li>
<li>線(細)</li>
<li>マーカー</li>
</ol>


<p>となりました。描画順＝追加した順、であれば、マーカーや線は、ポリゴンによって覆い隠されてしまうのですが、そうなりませんでした。
図形によって前後関係が決められていて、
奥から ポリゴン → ライン → マーカー となるようです。
ちなみに、zindex を指定しない時の既定値は <code>0</code> です。</p>

<h2>zIndex を設定してみる</h2>

<p>次に zIndex を次のように設定してみます。</p>

<p>```java WithZindex.java
// マーカー
mMap.addMarker(new MarkerOptions()</p>

<pre><code>.position(new LatLng(35.47, 138.71))
.title("富士山"));
</code></pre>

<p>// ライン
mMap.addPolyline(new PolylineOptions()</p>

<pre><code>.add(TOKYO, NAGOYA)
.width(40)
.color(Color.BLUE)
.zIndex(1));
</code></pre>

<p>mMap.addPolyline(new PolylineOptions()</p>

<pre><code>.add(TOKYO, NAGOYA)
.width(10)
.color(Color.RED)
.zIndex(2));
</code></pre>

<p>// ポリゴン
mMap.addPolygon(new PolygonOptions()</p>

<pre><code>.add(TOKYO, MATSUMOTO, TOYOHASHI)
.fillColor(Color.CYAN)
.zIndex(3));
</code></pre>

<p>mMap.addPolygon(new PolygonOptions()</p>

<pre><code>.add(TOKYO, MAEBASHI, SHIZUOKA)
.fillColor(Color.GREEN)
.zIndex(4));
</code></pre>

<p>```</p>

<p>結果は以下のとおり。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/zindex_on.png" alt="noZindex" /></p>

<ol>
<li>線(太)</li>
<li>線(細)</li>
<li>ポリゴン(青)</li>
<li>ポリゴン(緑)</li>
<li>マーカー</li>
</ol>


<p>む、ライン、ポリゴンに関係なく、zIndex で指定した順に奥から描画されているようです。</p>

<h2>Developer Guide の説明</h2>

<p>いつも試してから見る公式ガイドｗ</p>

<ul>
<li><a href="https://developers.google.com/maps/documentation/android/lines#customize_a_polyline">Customize a Polyline - Google Maps Android API v2</a></li>
</ul>


<blockquote><p>Z-index
The stack order of this Polyline, relative to other overlays (polylines, polygons, ground overlays and tile overlays) in the map. A Polyline with a high z-index is drawn above overlays with lower z-indexes. Two overlays with the same z-index are drawn in an arbitrary order. Set this property with PolylineOptions.zIndex(). You can change this after the Polyline has been added to the map with the Polyline.setZIndex() method.</p></blockquote>

<p>まあ、それっぽいことが書いてあるわｗ
どうやら <code>GroundOverlay</code> や <code>TileOverlay</code> にも zIndex があり、前後関係をコントロールできるようですね。</p>

<h2>まとめ</h2>

<p>Google Maps Android API v2 の Polyline と Polygon の zIndex はまとめると次のようになります。</p>

<ul>
<li>指定しない(<code>0</code>)と、追加の順番に関わらず <strong><em>Polyline の方が Polygon よりも手前</em></strong> に描画される。Polyline 同士、Polygon 同士は、追加順に奥から描画される。</li>
<li>指定した場合、Polyline、Polygon の区別なく、<strong><em>zIndex の順で</em></strong> 奥から描画される。</li>
<li>マーカーは常に一番手前に描画される。</li>
</ul>


<p>ということで、zIndex をうまく設定すれば、図形群の前後関係を調整・変更することができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 で大圏コースを表示する]]></title>
    <link href="http://amay077.github.com/blog/2012/12/24/googlemap-v2-geodesic-line/"/>
    <updated>2012-12-24T17:51:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/24/googlemap-v2-geodesic-line</id>
    <content type="html"><![CDATA[<p>GoogleMap は<a href="http://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%AB%E3%82%AB%E3%83%88%E3%83%AB%E5%9B%B3%E6%B3%95">メルカトル図法</a>なので、地図上の２点間を結んだ直線は最短距離になりません。(メルカトル図法で正しいのは角度だけ、でしたよね。)</p>

<p>地球上の２点間の最短距離は「<a href="http://ja.wikipedia.org/wiki/%E5%A4%A7%E5%9C%8F%E3%82%B3%E3%83%BC%E3%82%B9">大圏コース</a>」と呼ばれます。</p>

<p>で、Android 版の新しい API を使うと、この大圏コースを簡単に表示することができます。</p>

<!-- more -->


<p>こんな感じ、赤がただの直線、青が大圏コースです。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/greatcircle.png" alt="greatcircle" /></p>

<p>やり方は以下のとおりで、<code>geodesic</code> を <code>true</code> にすれば大圏コースになります。</p>

<p>```java GeodesicPolyline.java
GoogleMap mMap;</p>

<p>final LatLng TOKYO = new LatLng(35.691, 139.693);
final LatLng HAWAII = new LatLng(19.87, -155.56);</p>

<p>// ただの直線
mMap.addPolyline(new PolylineOptions()</p>

<pre><code>.add(TOKYO, HAWAII)
.width(5)
.color(Color.RED)
.geodesic(false));
</code></pre>

<p>// 大圏コース
mMap.addPolyline(new PolylineOptions()</p>

<pre><code>.add(TOKYO, HAWAII)
.width(5)
.color(Color.BLUE)
.geodesic(true));
</code></pre>

<p>```</p>

<p>Developper Guide に説明があります。</p>

<ul>
<li><a href="https://developers.google.com/maps/documentation/android/lines#geodesic_and_non-geodesic_lines">Polylines and Polygons - Google Maps Android API v2</a></li>
</ul>


<blockquote><p>A Geodesic line is a line that follows the curvature of the earth. In contrast, a non-geodesic line will be drawn using the coordinate system of your screen. By Default, Polyline and Polygon objects will draw non-geodesic lines. You can change any Polyline or Polygon to use geodesic lines by setting the geodesic property to true.</p>

<p>適当訳
Geodesic なラインとは地球上の曲がった線のことです。non-geodesic ってやつは画面座標系で描いた線で、これがデフォルトです。Polyline や Polygon を geodesic にしたければ geodesic プロパティを true にするとよろし。</p></blockquote>

<p>ちなみにこの「２点間の最短距離」は <a href="http://developer.android.com/reference/android/location/Location.html#distanceBetween(double,%20double,%20double,%20double,%20float[]">Location.distanceBetween</a> メソッドで求められます。</p>

<p>どうやら、Javascript 版にはもともとこの機能があったようで、以下のサイトに例があります。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/tsato/geoweb/googlemaps/great-circle/">Googleマップで大圏コースを表示する</a></li>
</ul>


<p>あと、iOS 版の Google Maps API にもあるみた…あれ、ないや。
(余談ですが iOS 版の API には Polygon を描く機能もないんですね)</p>

<ul>
<li><a href="https://developers.google.com/maps/documentation/ios/lines">Polylines - Google Maps SDK for iOS</a></li>
</ul>


<h2>その他</h2>

<p>つか、Android の GoogleMap さん、思いっきり縮小しても世界が画面内に収まらないので、大圏コースの例が見せにくいわ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 の v1 からの変更点メモ]]></title>
    <link href="http://amay077.github.com/blog/2012/12/20/googlemap-andro-api-v2-changes/"/>
    <updated>2012-12-20T16:10:00+09:00</updated>
    <id>http://amay077.github.com/blog/2012/12/20/googlemap-andro-api-v2-changes</id>
    <content type="html"><![CDATA[<p><a href="http://www.atmarkit.co.jp/ait/articles/1212/04/news110.html">Android の Map API が刷新</a>され、</p>

<ul>
<li>ベクトル地図！</li>
<li>回転、視点変更</li>
<li>屋内、地下街マップの表示</li>
</ul>


<p>が可能になりました。Googleマップアプリの機能が API で提供された感じです。これは感涙。</p>

<!-- more -->


<p>v2 になって導入手順が大幅に変わりましたが、 <a href="https://twitter.com/adamrocker">@adamrocker</a> さんが早速解説して下さっています。</p>

<ul>
<li><a href="http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html">throw Life - Google Maps Android API v2を使ってみた</a></li>
</ul>


<p>ここでは、Google Map Android API v1 からの変更点を中心に紹介してみます。</p>

<h2>互換性</h2>

<p><strong><em>あ・り・ま・せ・ん、以上！</em></strong></p>

<p>Fragment 化、3D対応などにより、API の設計思想そのものが変わった様で、既存のコードをそのまま流用できることはないでしょう。
前の MapView に似せた <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/MapView">com.google.android.gms.maps.MapView</a> というクラスがありますが、クラス名が同じだけでメンバは全然別物です。</p>

<h2>じゃあ、v1 のあの機能は v2 でどうやんの？</h2>

<h3>移動、拡大・縮小など</h3>

<p><img src="http://f.cl.ly/items/2d3M3T1v3W3C0H102d3L/gmap2_basic.png" alt="BasicMap" /></p>

<p>v1 では <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/MapController.html">MapController</a> の animateTo とか setZoom で行なっていましたが、そもそも v2 には MapController クラスがなくなっています。</p>

<p>v2 では <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap">GoogleMap</a> クラスの animateCamera() や moveCamera() で移動、拡大・縮小を行います。
これらに加えて、角度(bearing)、視点(tilt) も設定します。animateCamera は Google Earth みたいなアニメーションが定義できてカッコいいですよ。</p>

<p>ちなみに、無段階ズームになった影響で、Zoom の値が int から float になっています。値が示す地図縮尺は変化ないようです。v1 の Zoom=15 と v2 の Zoom=15.0f は同じ意味です。</p>

<h4>参考</h4>

<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の該当箇所を添えておきます。</p>

<ul>
<li>CameraDemoActivity.java</li>
</ul>


<h3>ズームボタンとかの表示ON/OFF</h3>

<p><img src="http://cl.ly/image/40220F3I163f/gmap2_uisettings.png" alt="UISettings" /></p>

<p>v1 では MapView の setBuiltInZoomControls でズームボタンの表示ON/OFF ができました。
v2 では、GoogleMap から <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap#getUiSettings(">UISettings</a> を取得して設定します。
v2 では、ズームボタンの他に、コンパスが増えているのでそれらの表示制御と、各種ジェスチャ(スクロール、回転、チルト)の有効/無効 が設定できます。</p>

<h4>参考</h4>

<ul>
<li>UiSettingsDemoActivity.java</li>
</ul>


<h3>マーカー表示</h3>

<p><img src="http://cl.ly/image/2a0b2C073d1f/gmap2_markers.png" alt="Markers" />
API の使い方で一番大きく変わったのはこの辺りかと思います。</p>

<p>v1 では、MapView に <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/ItemizedOverlay.html">ItemizedOverlay</a> を add して、OverlayItem(＝マーカー)を登録して…って感じでしたが、全滅です。</p>

<p>v2 でのマーカー表示は <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addMarker(com.google.android.gms.maps.model.MarkerOptions">GoogleMap.addMarker</a> を使います。
Overlay の概念が事実上なくなって、GoogleMap クラスから Marker オブジェクトを生成するようになりました。</p>

<p>マーカーのグループ管理ができなくなってちょっと不便に感じます。(v1 では、ローソンとファミマのマーカーを管理するのに、lawsonOverlay と famimaOverlay を用意しておけば良かった)</p>

<p>v2 のメリットは、マーカーがドラッグをサポートするようになったのと、情報ウィンドウ(ふきだし)が標準搭載されたことです。</p>

<h4>参考</h4>

<ul>
<li>MarkerDemoActivity.java</li>
</ul>


<h3>図形(ラインとかポリゴンとか)描画</h3>

<p><img src="http://cl.ly/image/0c3i2E1z3V1r/gmap2_polygons.png" alt="Polygons" />
これも大きく作り替えないといけないところです。</p>

<p>v1 では、Overlay の <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Overlay.html#draw(android.graphics.Canvas,%20com.google.android.maps.MapView,%20boolean">draw</a> を override して、Canvas の drawLine などの描画メソッドを呼び出す感じでした。</p>

<p>v2 では、Overlay がありませんし、Canvas を直接さわれる口がありません。
ではどうするかというと、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon">Polygon</a> , <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polyline">Polyline</a> というクラスが用意されています。</p>

<p>GoogleMap クラスの <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolygon(com.google.android.gms.maps.model.PolygonOptions">addPolygon</a> , <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolyline(com.google.android.gms.maps.model.PolylineOptions">addPolyline</a> メソッドで追加します。Marker と同じく Overlay の概念はありません。</p>

<p>また add した Polygon や Polyline は、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon.html#remove(">remove</a> するか <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#clear(">GoogleMap.clear</a> するまで地図上に登録されています。</p>

<p>v2 になって、描画処理は重くなったなあという印象です。
v1 の感覚で図形を add しまくると、すごくもっさりします。画面に表示すべきものだけ、さらに非同期でパラパラと図形が描画されていくような処理を実装しないとストレスフルな感じになりそうです。</p>

<h4>"表示している領域" の取得方法</h4>

<p>v1 では、getMapCenter , getLatitudeSpan, getLongitudeSpan でなんとなく取得できました。
v2 では、GoogleMap.getProjection で得られる <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/Projection">Projection</a> クラスの getVisibleRegion から取得できます。</p>

<p>注意点は、回転している時とチルトしている時、いずれも "表示している範囲を包括する矩形" が得られるようですが、特にチルトしている時は奥行き分が領域に含まれますので、視点を倒せば倒すほど遠くが見える(領域が広がる)ことになります。画面に表示しているものだけ図形を描画する時など、奥行きはある程度のしきい値を持たないと範囲が広くなりすぎです。</p>

<h4>ハマった所</h4>

<p>Polygon は当然塗りつぶしができるわけですが、これポリゴンの座標群が「時計回り」でないと塗りつぶされません。地理情報システムの業界では、"ポリゴンの外周は時計回り、穴は反時計回り" という常識があるのですが、それに習ったものと思われます。この原因にたどり着くまで、始点と終点が一致してないのかな、少数の切り捨てで一致してないのかとか、小一時間悩みました。</p>

<h4>参考</h4>

<ul>
<li>PolygonDemoActivity.java</li>
<li>PolylineDemoActivity.java</li>
</ul>


<h3>MapView とは一体？</h3>

<p>冒頭で紹介した <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/MapView">com.google.android.gms.maps.MapView</a> ですが、地図の表示はできたものの、その後、位置を移動しようと</p>

<pre><code>GoogleMap gMap = ((MapView) findViewById(R.id.map)).getMap();
gMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(35, 130)));
</code></pre>

<p>というコードを実行した所、 <code>java.lang.NullPointerException: CameraUpdateFactory is not initialized</code> が発生してしまいました。え？どうやって移動するの？</p>

<h4>参考</h4>

<ul>
<li>RawMapViewDemoActivity.java</li>
</ul>


<h2>増えた機能</h2>

<p>v1 感覚だと使うのに苦労しそうな v2 ですが、冒頭で紹介した機能以外に追加されてる機能もあります。</p>

<h3>情報ウィンドウ(ふきだし)</h3>

<p>これこれ、マーカーをタップすると表示される「ふきだし」。
v1 には無かったので、自作か外部ライブラリ使いしか無かったんですよね。
サンプル MarkerDemoActivity.java で使い方が紹介されてます。</p>

<h2>タイルオーバーレイとグラウンドオーバーレイ</h2>

<p>GIS'er 感涙の両機能。
タイルオーバーレイは、他のタイル地図サービスをオーバーレイできる、ってことですね。OpenStreetMap とか。iOS の <a href="http://qiita.com/items/8d89eeea614ce4293514">route-me</a> みたいなことができると期待してます。だれかハックを！
<img src="http://f.cl.ly/items/470S1b1B3a1F3F3z093i/gmap2_tileoverlay.png" alt="TileOverlay" /></p>

<p>グラウンドオーバーレイは、画像ファイルに位置情報を与えてやると、それが地面に張り付いたように表示されるというものです。
<img src="http://f.cl.ly/items/470s2M3g0w3Z2H423B3t/gmap2_groudoverlay.png" alt="GroundOverlay" /></p>

<p>タイルオーバーレイのサンプルは TileOverlayDemoActivity.java 、グラウンドオーバーレイのサンプルは GroundOverlayDemoActivity.java です。</p>

<h2>雑感</h2>

<p>Google Map Android API v2 をざっと使ってみての感想です。</p>

<p>v1 と互換性がなくなり、使い方がガラっと変わったのはある程度想定していました。2次元と3次元の溝は深いです。</p>

<p>Android と関係ないですが、iOS の MapKit も同じようなことになるのではないかと思っています。(地図アプリは 3D に対応しましたが MapKit は 2D のまま。3D用のMapKit は "まったく別のもの" として提供されるのではないかと。)</p>

<p>導入の仕方が難しくなっちゃったなー、と。
なぜ Google API Console で管理するのはよいとしても、ライブラリプロジェクトを参照しないといけないのか、とか。
(実は Fragment 初めて使いました…)</p>

<p>あと、Google Play Service や API Console との結びつきが強くなり、利用状況がモニタリングできる環境が整いつつあります。こりゃ課金も現実味を帯びてきたなあ、と。</p>

<p>そんなわけで、導入がちょいと面倒だったり、v1 と互換性まったくないですけど、なにしろ Googleマップアプリのあの地図レンダリングと機能がアプリに組み込めるのは嬉しい限りです。新たに地図アプリ作るなら使わない手はないですね！</p>

<p>まだ使いこなしてはいないので、順次 Post していきたいと思います。
最後に拙作の Android アプリ「HexRinger」の Map API v2 対応試作版をステマして終わります。</p>

<p><img src="http://cl.ly/image/1n0f1e0c1r3C/gmap2_hexringer.png" alt="HexRinger" /></p>
]]></content>
  </entry>
  
</feed>
