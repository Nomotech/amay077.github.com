<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: droidkaigi | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/droidkaigi/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-10-29T02:15:15+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2017 に Xamarin ネタでトーク応募したよ]]></title>
    <link href="http://blog.amay077.net/blog/2016/10/25/submit-cfp-for-droidkaigi2017/"/>
    <updated>2016-10-25T02:42:51+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/10/25/submit-cfp-for-droidkaigi2017</id>
    <content type="html"><![CDATA[<p>神からの啓示がありまして、 <a href="https://droidkaigi.github.io/2017/">DroidKaigi2017</a> のトークに応募しました。</p>

<!--more-->


<p>昨年 DroidKaigi2016 を聞きにいきました。 Kotlin、Go Mobile のセッションがありました。</p>

<p>当時 Xamarin はまだプロプライエタリな有償の製品でした。今はほとんどオープンソースのプロダクトです。</p>

<p>これはワンチャンあるで！</p>

<p>応募内容は以下です。「○○界隈」いうのがあまり好きではないので、そういうのにこだわらない話をしたいと思っています。</p>

<hr />

<h2>Title</h2>

<p>Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発</p>

<h2>Abstract</h2>

<h3>対象者</h3>

<ul>
<li>Android中級者〜</li>
<li>C# 初心者〜</li>
</ul>


<h3>概要</h3>

<p>Xamarin（ざまりん）は C# によるクロスプラットフォームモバイルアプリ開発ツールです。
Microsoft が2016年4月に買収して、一気に知名度が上がりました。</p>

<p>このセッションでは、 Xamarin とは、Xamarin.Android とは何か、C# や .NET Framework(Mono) の強力な言語・ライブラリ機能について触れ、通常の Android アプリ開発と Xamarin を使ったアプリ開発はどこが違って、どこが同じなのかを説明します。</p>

<p>また、今日のモバイルアプリ開発では、DataBinding、MVVM、Reactive Extensions(Rx) といった、Microsoft が源流となっている手法が広まって来ています。
Xamarin を使うと、MVVMパターンと Rx を使用し、大部分のコードを共有できる Android/iOS 両対応アプリケーションを開発できます。如何にしてコードを共有するか、できない場合にどのような解決策が用意されているかについてお話します。</p>

<h3>目次（仮）</h3>

<h4>1. Xamarin とは？</h4>

<ul>
<li>Xamarin とは何か</li>
<li>Xamarin.Android とは何か</li>
<li>C# の利点(Java, Swift との比較)</li>
</ul>


<h4>2. クロスプラットフォームアプリ開発とコードの共有</h4>

<ul>
<li>MVVMパターン</li>
<li>Reactive Extensions / ReactiveProperty</li>
<li>Portable Class Library(PCL)によるコード共有</li>
<li>プラットフォーム固有の処理を行う方法</li>
</ul>


<h4>3. Open Xamarin、Open Microsoft</h4>

<ul>
<li>Xamarin で使えるライブラリ(C#, Java)</li>
<li>All Xamarin SDKs are open source</li>
<li>.NET Standard</li>
</ul>


<h4>4. Xamarin の使いどころ</h4>

<ul>
<li>採用すべきケースとしなくてよいケース</li>
</ul>


<h2>Topic</h2>

<p>開発環境・ツール (Productivity and Tooling)</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2016アプリを Xamarin.Android に移植した話]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/"/>
    <updated>2016-02-24T00:19:01+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android</id>
    <content type="html"><![CDATA[<p>　DroidKaigi2016 の開催前、<a href="https://github.com/konifar/droidkaigi2016">公式アプリが有志によって開発中</a> とのツイート(だったかな？)を見て、ふとこれを「Xamarin.Android に移植してみよう」と思い、夜な夜なぼちぼちと始めました。</p>

<!--more-->


<p>　後付けですが、移植するにあたり調査したかったのは主に、</p>

<ul>
<li>Android-Java の OSSライブラリがどのくらい Xamarin.Android でも利用可能か？</li>
<li>(勉強をサボっていた)Xamarin.Android での Material Design の適用方法</li>
</ul>


<p>です。</p>

<h2>Xamarin.Android について(知らない人向け)</h2>

<p>　Xamarin.Android は、Android API(Javaクラスライブラリを含む)の薄いラッパーで、クラス・メソッド名などは殆どそのままに、言語が Java から C# になったようなものです。
　なので、 <code>activity_main.xml</code> などのリソースファイルもほぼそのまま転用可能です。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/3232064cc8880c809aee">Xamarin.Android で作った HelloWorld のソースを眺めてみる</a></li>
</ul>


<p>　尚、 Xamarin.Forms というワンソースで複数プラットフォームで動作するアプリを開発できるフレームワークとは別のものです。</p>

<h2>Android プロジェクトの Xamarin.Android への移植方法</h2>

<p>すごく大雑把に、以下のような手順で移植します。</p>

<ol>
<li>Androidプロジェクト(以下 Java と表記)の <code>/res</code> 以下を Xamarin.Androidプロジェクト(以下 Xamarin)配下にコピー</li>
<li>Java のソースコード群を、 package構成を崩さずに Xamarin.Android で再構成（結局のところコードの書き直し）</li>
<li>Java側で使われているOSSライブラリと同等のものを、nuget・Xamarin Components で探してXamarin側に追加（なければ <code>.jar</code> ファイルを入手して Xamarin で使えるように Binding Library を作成）</li>
<li>あとはひたすら try and error and error and error&hellip;</li>
</ol>


<h2>Android Data Binding を、Xamarin ではどうしたか？</h2>

<p>　DroidKaigi2016 のアプリには <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">DataBinding</a> が使われています。ただ、 <code>BaseObservable</code> や <code>ObservalbeField</code> によるガッツリとした OneWay/TwoWay のデータバインディングではなく、POJOなデータクラスを使う <a href="https://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingmode(v=vs.110">OneTime</a>.aspx) なものしかなかったので、Xamarin への移植に際しては <a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> や、 <a href="https://github.com/MvvmCross/MvvmCross">MVVMCross</a> などのデータバインディング機能に頼る必要はありませんでした。</p>

<p>　一方、Android Data Binding のもう一つの(副次的な)機能である View binding(<code>findViewById</code> が要らなくなるアレ)の対応は大変でした。</p>

<p>　まず、<code>activity_main.xml</code> などのデータバインド範囲を括る <code>&lt;layout&gt;&lt;/layout&gt;</code> ですが、このタグは Xamarin Studio は解釈してくれないのでエラーになります。このタグはもれなくコメントアウトが必要でした。また、カスタムデータバインディングが使われている箇所も同じくです。
　なので当然、Android Studio(gradle)が生成する <code>DataBinding</code> クラスも使用できません。
　仕方ない(というか始めからわかっていましたが) <code>ActivityMainBinding</code> などに相当するクラスを必要を満たす範囲で自作しました。レガシーな <code>FindViewByID()</code> を使って。</p>

<p>　Windowsアプリ開発の世界では、「DSL で記述された画面レイアウトからUI要素変数を自動生成する」ことは、IDE である Visual Sutdio が普通に行ってくれます。Xamarinアプリ開発のIDEである Xamarin Studio も、iOS の <code>.storyboard</code> ファイルを読んで、自動的に <code>HogeViewController.designer.cs</code> にUI要素変数を生成してくれます。
　Xamarin.Android でも <code>MainActivity.designer.cs</code> とか生成してくれてもいいのになー、とは頭の片隅で思い続けています。(自作Plug-inとかでなんとかできるのかな？)</p>

<h2>DroidKaigi2016 で使われているJavaライブラリを、Xamarinではどうしたか？</h2>

<p>　DroidKaigi2016アプリでは非常にたくさんのOSSライブラリが<a href="https://github.com/konifar/droidkaigi2016#libraries">使用されており</a>、それを眺めるだけでも非常に勉強になります。このソースを読んで初めて知ったものが何個もありました。
　アプリを Xamarin.Android へ移植するにあたり、これらにどのように対応したかを記します。</p>

<h3>Android Support Libraries</h3>

<p> これらは、nuget パッケージが用意されています。要注意なのは、Xamarin Component にも<a href="https://components.xamarin.com/view/xamandroidsupportdesign">同じものが存在</a>していて、大抵はそちらの方が古くて動かない、ということです。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.CustomTabs/">Xamarin.Android.Support.CustomTabs</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.Design/">Xamarin.Android.Support.Design</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v4/">Xamarin.Android.Support.v4</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/">Xamarin.Android.Support.v7.AppCompat</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.CardView/">Xamarin.Android.Support.v7.CardView</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.RecyclerView/">Xamarin.Android.Support.v7.RecyclerView</a></li>
</ul>


<h3><a href="http://google.github.io/dagger/">Dagger2</a></h3>

<p>　Dependency Injection を Annotation ベースで行うライブラリ。
　これはないかなーと思いましたがありました。Dagger(短剣) に対して、その名も Stiletto(短剣)ｗ</p>

<ul>
<li><a href="http://stiletto.bendb.com/">Stiletto</a> &ndash; Stiletto is a .NET port of Dagger, the lightweight Android dependency injector from Square.</li>
</ul>


<p>　使い方も殆ど一緒。どうも Dagger1 相当の機能のようですが、アプリ側は少しの修正で対応できました。
　もっとも Dagger すら使ったことがなかったので、その理解に少々時間を要しました。
　Stiletto は、Xamarin.iOS でも使えるようですが、残念ながら PCL対応していなさそう。PCL対応のプルリクを送るのは今後やってみたいことの一つです。</p>

<h3><a href="http://square.github.io/retrofit/">Retrofit2</a></h3>

<p>　RESTful API のクライアントをサクッと作れるライブラリ。これも Xamarin 用に移植してくれてる方がいます。</p>

<ul>
<li><a href="http://paulcbetts.github.io/refit/">Refit by paulcbetts</a> &ndash; Refit is a library heavily inspired by Square&rsquo;s Retrofit library</li>
</ul>


<p>　こちらも、 Xamarin.iOS でも利用可能、PCL対応済み、カンペキです。</p>

<h3><a href="http://square.github.io/picasso/">Picasso</a></h3>

<p>　多機能且つ使いやすい Image Loader の Picasso。これは Xamarin の人が nuget パッケージを用意してくれています。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Square.Picasso">Square.Picasso</a></li>
</ul>


<p>Picasso が依存している <code>Square.OkHttp</code>, <code>Square.OkIO</code> も nuget パッケージが用意されていて、一緒に追加されます。</p>

<h3><a href="https://github.com/gfx/Android-Orma">Android-Orma</a></h3>

<p>　DroidKaigi当日には、作者 @gfx さんによる即席ランチセッションも聴けたORMライブラリ。若いライブラリなのでさすがに Xamarin版はありません。
　Xamarin.Android での ORMライブラリといえば <a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/part_3_using_sqlite_orm/">SQLite.NET</a> が有名ですが、使い方が面倒そうだったのと、このアプリのデータ構造と量で、リレーショナルDB使うこともないだろうと、 Key-Value Store である Akavache を使いました。これは以前 Qiita に書いたのでそちらを。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/356ad0028b7e6fbf089f">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する</a></li>
</ul>


<p>　とはいえ、移植の際には、かなり強引な実装をしてしまいました。パフォーマンス悪いのは私の実装が原因です。</p>

<h3><a href="https://github.com/ReactiveX/RxJava">RxJava</a></h3>

<p>　これはもう説明不要でしょう。本家 Rx.NET を使用します。</p>

<ul>
<li><a href="https://github.com/Reactive-Extensions/Rx.NET">Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET</a></li>
</ul>


<h3><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></h3>

<p>　これを使う最大の理由である <code>AndroidSchedulers.mainThread()</code> は、 Rx.NET では、 <code>observable.ObserveOn(SynchronizationContext.Current)</code> で代用できるので、不要でした。</p>

<h3><a href="https://github.com/JakeWharton/ThreeTenABP">ThreeTenABP</a></h3>

<p>　これも .NET の日付時刻系クラス(<code>DateTime</code>, <code>DateTimeOffset</code>, <code>TimeSpan</code>) で特に問題ありませんでした。しかし恥ずかしながらこのライブラリも知りませんで、Java では必須になりそうですね。</p>

<h3><a href="http://facebook.github.io/stetho/">Stetho</a></h3>

<p>　デバッグを強力に支援してくれるライブラリですね。これも知りませんでした。移植の時にはとりあえず関係なさそう、と思って代替品は探していません（汗</p>

<h3><a href="https://github.com/LyndonChin/AndroidFlowLayout">AndroidFlowLayout</a></h3>

<p>　View をいい感じに並べてくれるライブラリ。Xamarin.Android用の nuget パッケージがありました。</p>

<ul>
<li><a href="https://www.nuget.org/packages/AndroidFlowLayout/">AndroidFlowLayout &ndash; NuGet Gallery</a></li>
</ul>


<h3>Google Play services</h3>

<p>　Map とか、Analytics とか。こちらも nuget に一通りパッケージが揃っています。Xamarin Components より優先的に使いましょう。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Maps/">Xamarin Google Play Services &ndash; Maps &ndash; NuGet Gallery</a>　</li>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Analytics/">Xamarin Google Play Services &ndash; Analytics &ndash; Maps &ndash; NuGet Gallery</a>　</li>
</ul>


<h3><a href="https://github.com/jd-alexander/LikeButton">LikeButton</a></h3>

<p>　Facebook の いいね!、Twitter の Fav! のようなボタンを提供してくれるライブラリ。押した時のアニメーションがイイ感じです。
　これの Xamarin 版は探してもなかったので、 LikeButton の <code>.jar</code> ファイルを入手して、自前で Java Binding Library プロジェクトを作って使用しています。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin/tree/master/LikeButton">DroidKaigi2016Xamarin/LikeButton · amay077/DroidKaigi2016Xamarin</a></li>
</ul>


<p>　これを nuget に放流するのはやりたいことの2つ目。いくつかやったら <a href="https://resources.xamarin.com/open-source-contributor.html">Xamarin から subscription もらえる</a>だろうか。。。</p>

<h3><a href="https://github.com/johncarl81/parceler">parceler</a></h3>

<p>　Parcel のことが大嫌いじゃなくなるライブラリ。移植に際しては、ModelクラスはPOCO(POJOの.NET版と思ってください)にしたかったので直接の代替品は探しませんでした。
　ModelクラスのParcel化はなんと <a href="http://www.newtonsoft.com/json">JSON.NET</a> でJSONを介しちゃいました。悪手ですがパフォーマンスが気になる程でないならいいでしょ。</p>

<h3><a href="https://try.crashlytics.com/">Crashlytics</a></h3>

<p>　クラッシュレポート解析サービスですね。Xamarin なら <a href="https://xamarin.com/insights">Xamarin Insights</a> がビルトインで使えるので、通常はそうするでしょう。Crashlytics 自体の Xamarin.Android 用ライブラリは、今のところ<a href="https://twittercommunity.com/t/xamarin-and-fabric/37289/13">存在しないみたい</a>です。</p>

<h3><a href="https://github.com/opacapp/multiline-collapsingtoolbar">multiline-collapsingtoolbar</a></h3>

<p>　 Android Design Support Library の <code>CollapsingToolbarLayout</code> って、タイトルが複数行あると、展開しても表示されない(!)んですね。なんじゃそら！ってのを解決してくれるライブラリです。
　 Xamarin.Android向けのは探したけど見つかりませんでした。移植に際してクリティカルじゃなかったので、複数行にならない <code>CollapsingToolbarLayout</code> のままです。これも nuget パッケージ化したら需要あるかも。</p>

<h3><a href="https://github.com/ozodrukh/CircularReveal">CircularReveal</a></h3>

<p>　Lollipop で追加された CircularReveal アニメーションを、それ以前のOSでも行えるライブラリです。
　これもクリティカルでないので、Xamarin版には移植していません。</p>

<h2>まとめ</h2>

<p>　DroidKaigi2016 の公式アプリは、ホストの @konifar さんはじめ、 <a href="https://github.com/konifar/droidkaigi2016/graphs/contributors">35名</a> の精鋭有志の皆さんによる爆速開発で、 2/13 に v1.00 がリリース、イベント当日もアップデートされ、私も便利に利用させていただきました。
　
　一方、私の Xamarin.Android への移植は今やっと &ldquo;とりあえず&rdquo; 終わったばかり。
　しかも、移植の元にしたのが 2/10 付けのソースですが、その日から現在に至るまで本家にマージされた <strong>Pull Request の数は 200超！</strong> 。
　「これが若さか…。」これらの Xamarin版への移植はおじさんにはとても行う気が起きません。DroidKaigi2016公式アプリの Contributors の皆さんを尊敬します。
　
　が、ひとまず動くようになったので、ソースを公開します。モダンな Androidアプリを Xamarin.Android で実現する例としては有用だと思います。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin">amay077/DroidKaigi2016Xamarin: DroidKaigi2016 アプリをこっそりXamarinに移植</a></li>
</ul>


<p>（できればこれを、 プラットフォーム非互換にできる箇所はPCLへ移動、各画面にViewModelを置いてMVVM化、Xamarin.iOS対応、Xamarin.Forms対応とか、いろいろと育てていきたいと思っているのですが、DroidKaigi参加直後で、あれもこれもやりたい病なので、実現は未定です。）</p>
]]></content>
  </entry>
  
</feed>
