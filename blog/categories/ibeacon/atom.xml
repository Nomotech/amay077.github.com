<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ibeacon | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/ibeacon/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-08T02:23:06+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS と Rx で iBeacon を使ってみた]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/11/using-ibeacon-with-xamarin/"/>
    <updated>2013-12-11T00:12:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/11/using-ibeacon-with-xamarin</id>
    <content type="html"><![CDATA[<p>こちらは、<a href="http://qiita.com/advent-calendar/2013/ibeacon">iBeacon Advent Calendar 2013</a> と <a href="http://qiita.com/advent-calendar/2013/xamarin">Xamarin Advent Calendar 2013</a> とのクロスポストになります。</p>

<p>Xamarin とは、.NET で iOS/Android アプリを開発できるプラットフォームです。詳しくは <a href="http://qiita.com/amay077/items/38ee79b3e3e88cf751b9">こちら</a> をどうぞ。</p>

<p>Xamarin.iOS は、 iOS の APIセットが全て C# で使えますので、 iBeacon 関連の API もそのまま使えます。さらに C# や .NET の強力な言語仕様により、より簡潔に、美しく書くことができます。</p>

<h2>Xamarin.iOS で iBeacon を使うサンプル</h2>

<p>Xamarin で iBeacons を使うサンプルは、Xamarin 自体が既に公開しています。</p>

<ul>
<li><a href="http://blog.xamarin.com/play-find-the-monkey-with-ios-7-ibeacons/">Play ‘Find The Monkey’ with iOS 7 iBeacons | Xamarin Blog</a></li>
<li><a href="https://github.com/mikebluestein/FindTheMonkey">mikebluestein/FindTheMonkey</a></li>
</ul>


<p>これらは iOS7 のリリースから僅か7日後のできごとであり、Xamarin の新OSへの対応力に驚いたものでした。</p>

<p>この紹介だけで終わってもアレなので、このサンプルをより「C# っぽく」修正してみたいと思います。</p>

<h2>サンプルをより「C# っぽく」する</h2>

<p>対象にするのは iBeacon の受信の方です。</p>

<ul>
<li><a href="http://reinforce-lab.github.com/blog/2013/10/21/ibeacon/">iBeaconの解説 &ndash; Reinforce-Lab.&rsquo;s Blog</a></li>
<li><a href="http://brightechno.com/blog/archives/220">iBeacon Tips: 正しいビーコン監視方法 | ブライテクノBlog</a></li>
</ul>


<p>などで勉強したところ、受信の流れは下図のようになるかと思います。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ibeacon_with_xamarin_01.png" alt="img" /></p>

<p>全てのメソッドが非同期でコールバックを受け取るタイプ、また並行処理＆同期とか、なんだか見やすいコードになる気がしません。</p>

<p>C# といえば LINQ、そして LINQ を更に拡張する Rx(Reactive Extensions) を使って、この流れをもう少しスッキリと書いてみます。
Rx は、非同期処理やイベントコールバックを一直線なストリームに変換します。また、ストリームの分配や結合の機能を提供します。最初は JavaScript の <a href="http://techblog.yahoo.co.jp/programming/jquery-deferred/">Deferred</a> みたいなもんだと思ってました。が、使ってく内にとんでもなく高機能なものだと分かり(はじめ)ました。</p>

<p>これを使うと、上の図をそのままコードに落としたような、上から下へ辿れる感じで書くことができます。</p>

<p>まず、修正前のサンプルコードはこちら</p>

<ul>
<li><a href="https://github.com/mikebluestein/FindTheMonkey/blob/master/FindTheMonkey/FindTheMonkeyViewController.cs">FindTheMonkey / FindTheMonkeyViewController.cs</a></li>
</ul>


<p>このコード自体、上の流れに沿ってない気もしますが、まあいいや。</p>

<p>これを Rx で書きなおすと、こうなります。</p>

<h3>2014.4.2 追記</h3>

<p>実際には動かない空想のコードを掲載していたので、実機で動作したコードに書き換えました。</p>

<p>```csharp FindTheMonkeyViewController_after.cs
if (!UserInterfaceIdiomIsPhone)
{
  /<em> 省略 </em>/
} else
{
  InitPitchAndVolume();
  var man = new CLLocationManager();</p>

<p>  man.StartMonitoringAsObservable(beaconRegion) // 監視開始
  .SelectMany(r =></p>

<pre><code>man.RegionEnteredAsObservable() // A:進入の受信
.Amb(man.RequestStateAsObservable(r) // B:リージョン状態要求
  .Where(e =&gt; e.State == CLRegionState.Inside) // 範囲内のみ
  .Select(x =&gt; x.Region as CLBeaconRegion) // CLRegion からcast
.SelectMany(man.StartRangingBeaconsAsObservable) // A/B どちらかを受信したらレンジング開始
  .Where(x =&gt; x.Beacons.Length &gt; 0) // ビーコンが1個以上みつかった場合のみ
  .Select(x =&gt; x.Beacons [0]) // LINQ の Fisrt() でもOk
  .DistinctUntilChanged(x =&gt; x.Proximity) // Proximity が変わった時のみ流す
</code></pre>

<p>  .Subscribe((CLBeacon beacon) =>
  {</p>

<pre><code>// Beacon が見つかった時に行う処理を書く
</code></pre>

<p>  });
}
```</p>

<p>```csharp CLLocationManagerExtensions.cs
public static class CLLocationManagerExtensions
{
  // リージョン監視を開始して、開始通知を IObservable で得る拡張メソッド
  public static IObservable<CLBeaconRegion> StartMonitoringAsObservable(</p>

<pre><code>this CLLocationManager man, CLBeaconRegion beaconRegion)
</code></pre>

<p>  {</p>

<pre><code>return Observable.Defer(() =&gt;
{
  var o = Observable.FromEventPattern&lt;CLRegionEventArgs&gt;(
        h =&gt; man.DidStartMonitoringForRegion += h, 
        h =&gt; man.DidStartMonitoringForRegion -= h)
  .Select(x =&gt; x.EventArgs.Region as CLBeaconRegion);

  man.StartMonitoring(beaconRegion);          
  return o;
});
</code></pre>

<p>  }</p>

<p>  // リージョンへの進入を IObservable で得る拡張メソッド
  public static IObservable<CLBeaconRegion> RegionEnteredAsObservable(</p>

<pre><code>this CLLocationManager man)
</code></pre>

<p>  {</p>

<pre><code>return Observable.FromEventPattern&lt;CLRegionEventArgs&gt;(
  h =&gt; man.RegionEntered += h, h =&gt; man.RegionEntered -= h)
    .Select(e =&gt; e.EventArgs.Region as CLBeaconRegion);
</code></pre>

<p>  }</p>

<p>  // リージョンの状態を要求して、結果を IObservable で得る拡張メソッド
  public static IObservable<CLRegionStateDeterminedEventArgs> RequestStateAsObservable(</p>

<pre><code>this CLLocationManager man, CLBeaconRegion beaconRegion)
</code></pre>

<p>  {</p>

<pre><code>return Observable.Defer&lt;CLRegionStateDeterminedEventArgs&gt;(() =&gt; 
{
  var o = Observable.FromEventPattern&lt;CLRegionStateDeterminedEventArgs&gt;(
  h =&gt; man.DidDetermineState += h, h =&gt; man.DidDetermineState -= h)
    .Select(e =&gt; e.EventArgs);

  man.RequestState(beaconRegion);
  return o;
});
</code></pre>

<p>  }</p>

<p>  // レンジングを開始してビーコン信号を IObservable で得る拡張メソッド
  public static IObservable<CLRegionBeaconsRangedEventArgs> StartRangingBeaconsAsObservable(</p>

<pre><code>this CLLocationManager man, CLBeaconRegion beaconRegion)
</code></pre>

<p>  {</p>

<pre><code>return Observable.Defer(() =&gt; 
{
  var o = Observable.FromEventPattern&lt;CLRegionBeaconsRangedEventArgs&gt;(
  h =&gt; man.DidRangeBeacons += h, h =&gt; man.DidRangeBeacons -= h)
    .Select(e =&gt; e.EventArgs);

  man.StartRangingBeacons(beaconRegion);
  return o;
});
</code></pre>

<p>  }
}
```</p>

<p>実機で動作するサンプルを</p>

<ul>
<li><a href="https://github.com/amay077/FindTheMonkey">amay077/FindTheMonkey</a></li>
</ul>


<p>に置きました。</p>

<p><code>locationMgr.StartMonitoringAsObservable</code> で始まるところがキモですね。各々の機能は <code>CLLocationManagerExtensions.cs</code> の拡張メソッドで逃してます。これも C# の利点(たしか Objective-C にもあったっけ)。</p>

<p>リージョン監視の開始通知を受け取ったら進入の検知(A)をしつつ、もうひとつの処理で開始位置のリージョン状態を得て、それがリージョン内だったら値を流す(B)。これらは <code>.Amb</code> で合流。 <code>.Amb</code> は右辺と左辺のどちらか先に返された最初の結果を後続に流すというものです。つまり、B がリージョン外だったら自動的に A の <code>didEnterRegion</code> を待つことになります。</p>

<p>最後に、レンジングを開始して受信する度に結果(ビーコン信号)を流します。</p>

<p>んで、これを購読(<code>.Subscribe</code>)することで処理を開始して、結果を <code>// Beacon が見つかった時に行う処理を書く</code> のところで受け取る仕組みです。</p>

<p>このように Rx を使うことで、非同期のコールバックを含む処理を直列に書け、処理の並列化や合成も簡単に行えます。</p>

<p>Objective-C でも <a href="http://qiita.com/somtd@github/items/8409ddd6d0927c04c1dd">ReactiveCocoa</a> とか使うとできるのかな？(でもやっぱり構文が…)</p>

<p>そんなわけで、少しでも Xamarin に興味持っていただけたら幸いです。(これが言いたかった)</p>
]]></content>
  </entry>
  
</feed>
