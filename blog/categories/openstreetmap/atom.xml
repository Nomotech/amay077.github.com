<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenStreetMap | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/openstreetmap/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2014-01-02T11:29:16+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Maps Android API v2 で OpenStreetMap を表示する]]></title>
    <link href="http://amay077.github.io/blog/2012/12/26/osm-on-googlemapv2/"/>
    <updated>2012-12-26T00:18:00+09:00</updated>
    <id>http://amay077.github.io/blog/2012/12/26/osm-on-googlemapv2</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://atnd.org/events/34052">FOSS4G Advent Calendar 2012</a> の 12/26 の記事です。</p>

<p>ベクトル地図が扱える新しい Google Maps Android API v2 については、<a href="http://qiita.com/items/7ad0244c0fb4b431e090">Google Map Android API v2 の v1 からの変更点メモ</a> で書きました。</p>

<p>ここでは、v2 で新しく追加された <code>TileOverlay</code> を使って、OpenStreetMap を重ねてみます。</p>

<!-- more -->


<h2>UrlTileProvider を使って OpenStreetMap を表示する</h2>

<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の TileOverlayDemoActivity.java を見れば一目瞭然なので、それをベースにします。</p>

<h3>サンプルのコード</h3>

<p>``` java TileOverlayDemoActivity.java
/<em>* This returns moon tiles. </em>/
private static final String MOON_MAP_URL_FORMAT =</p>

<pre><code>    "http://mw1.google.com/mw-planetary/lunar/lunarmaps_v1/clem_bw/%d/%d/%d.jpg";
</code></pre>

<p>private GoogleMap mMap;</p>

<p>private void setUpMap() {</p>

<pre><code>mMap.setMapType(GoogleMap.MAP_TYPE_NONE);

TileProvider tileProvider = new UrlTileProvider(256, 256) {
    @Override
    public synchronized URL getTileUrl(int x, int y, int zoom) {
        // The moon tile coordinate system is reversed.  This is not normal.
        int reversedY = (1 &lt;&lt; zoom) - y - 1;
       String s = String.format(Locale.US, MOON_MAP_URL_FORMAT, zoom, x, reversedY);
        URL url = null;
        try {
            url = new URL(s);
        } catch (MalformedURLException e) {
            throw new AssertionError(e);
        }
        return url;
    }
};
mMap.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));
</code></pre>

<p>}
```
修正前のコードは、Google Moon のタイル画像を使用しています。</p>

<p>これを OpenStreetMap を使用するように改造します。</p>

<p>``` java OsmTileOverlayDemoActivity.java
/<em>* This returns moon tiles. </em>/
private static final String OSM_MAP_URL_FORMAT =</p>

<pre><code>    "http://tile.openstreetmap.org/%d/%d/%d.png";
</code></pre>

<p>private GoogleMap mMap;</p>

<p>private void setUpMap() {</p>

<pre><code>mMap.setMapType(GoogleMap.MAP_TYPE_NONE);

TileProvider tileProvider = new UrlTileProvider(256, 256) {
    @Override
    public synchronized URL getTileUrl(int x, int y, int zoom) {
        String s = String.format(Locale.US, OSM_MAP_URL_FORMAT, zoom, x, y);
        URL url = null;
        try {
            url = new URL(s);
        } catch (MalformedURLException e) {
            throw new AssertionError(e);
        }
        return url;
    }
};
mMap.addTileOverlay(new TileOverlayOptions().tileProvider(tileProvider));
</code></pre>

<p>}
```</p>

<p>できました。うーん、簡単すぎる。
URL は OpenStreetMap のものを使います。y軸の値は、Google Moon では逆順となっていたのを正順のまま使用するだけです。</p>

<p>こんな感じで表示できます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/advent2012_osm.png" alt="OpenStreetMap on Google Map API" /></p>

<p>移動、拡大・縮小だけでなく、API v2 の恩恵で、回転やチルトもできるのが嬉しいですね。</p>

<h2>TileOverlay を透過させる</h2>

<p>さて、ベース地図を Google から他のものに差し替えてしまうならこれまでの使い方で十分でしょう。しかし Google のベクトル3Dグリグリ地図をベース地図として使いたいとは誰しもが思うことでしょう。</p>

<p>ここでは、Google地図の上に TileOverlay を透過で表示することにチャレンジしてみます。
ケースとしては、雨雲レーダーのメッシュや、統計メッシュなどを重ね合わせる事が考えられます。</p>

<p>さて、API v2 のもう一つの新機能 GroundOverlay には <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTransparency(float">setTransparentcy</a> というズバリなメソッドがあり、それを使えば一発です。</p>

<p>しかし、TileOverlay とその関連クラスには、透過に関するメソッドは見当たりません。
そこで TileProvider でダウンロードされた画像データを直接弄って、透過にします。</p>

<p>TileProvider は文字通り <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile">Tile</a> を Provide します。そしてこの Tile はタイル画像データそのものです。</p>

<p><a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data">Tile.data</a> の説明には次のように記述があります。</p>

<blockquote><p>A byte array containing the image data. The image will be created from this data by calling <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/null#decodeByteArray(byte[],%20int,%20int">decodeByteArray(byte[], int, int)</a>).</p></blockquote>

<p>つまりこのプロパティの中身を透過させてあげれば良さげ、という事になります。</p>

<p>上記のコードで使用した UrlTileProvider の <a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/UrlTileProvider#getTile(int,%20int,%20int">getTile</a> を override して…と思ったら、
＿人人人人人人人人人＿
＞　突然の final！　＜
￣<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>Y<sup>￣</sup></sup></sup></sup></sup></sup></sup></sup>
という事で override できません。</p>

<p>仕方ががないので、独自の TileProvider を別途用意して、UrlTileProvider を内包する形で <code>TransparencyUrlTileProvider</code> というクラスを実装します。</p>

<p>```java TransparencyUrlTileProvider.java
public class TransparencyUrlTileProvider implements TileProvider {</p>

<pre><code>private static final String OSM_MAP_URL_FORMAT = "http://tile.openstreetmap.org/%d/%d/%d.png";

private int _transparency; // 透過率(0〜255)
private UrlTileProvider _osmTileProv; // 内包する TileProvider

public TransparencyUrlTileProvider(int width, int height, int transparency) {
    _transparency = transparency;

    _osmTileProv = new UrlTileProvider(width, height) {
        @Override
        public URL getTileUrl(int x, int y, int zoom) {
            String s = String.format(Locale.US, OSM_MAP_URL_FORMAT, zoom, x, y);
            URL url = null;
            try {
                url = new URL(s);
            } catch (MalformedURLException e) {
                throw new AssertionError(e);
            }
            return url;
        }
    };
}

@Override
public Tile getTile(int x, int y, int zoom) {
    Tile tile = _osmTileProv.getTile(x, y, zoom);

    // TODO ここで Tile の透過処理を行う

    return tile;
}
</code></pre>

<p>}
```</p>

<p>使う側は、こんな感じになります。</p>

<p>``` java OsmTileOverlayDemoActivity.java
private GoogleMap mMap;</p>

<p>private void setUpMap() {</p>

<pre><code>// mMap.setMapType(GoogleMap.MAP_TYPE_NONE); ベース地図は消さない

mMap.addTileOverlay(
    new TileOverlayOptions()
    .tileProvider(
        new TransparencyUrlTileProvider(256, 256, 100)));
</code></pre>

<p>}
```</p>

<p>ここまでで改造前と同じく OpenStreetMap が「非透過で」表示されるのは確認できます。</p>

<p>次にいよいよ Bitmap の透過処理です。
まず、Tile から Bitmap を抜き出します。API リファレンスによると、<a href="https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data">Tile.data</a> というメンバがあるハズが…見つかりません。代わりに <code>Tile.bM</code> という byte[] なメンバがあります。こいつで間違いないでしょう。</p>

<h3>2013.4.22 追記</h3>

<p>Tile.data が見つからないのは、どうやらバグのようです。間違えて Proguard で難読化されてしまったようです。</p>

<ul>
<li><a href="https://code.google.com/p/gmaps-api-issues/issues/detail?id=5082">Issue 5082 - gmaps-api-issues - Bug: Public field "data" in Tile wrongly obfuscated - Google Maps API bug reports and feature requests</a></li>
</ul>


<h3>2013.4.22 追記終わり</h3>

<p>Tile.bM の byte[] から Bitmap インスタンスを生成します。</p>

<pre><code>Bitmap bitmap = BitmapFactory.decodeByteArray(tile.bM, 0, tile.bM.length);
</code></pre>

<p>次に透過処理ですが、Android ではちょっと面倒なようです。
以下のサイトを参考にさせて頂いて、関数を作成しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/hypercrab/20110730/1312038162">Android: Bitmap の背景を透明にする - 入隠者通信 ～病を嗜む～</a></li>
</ul>


<p>```java makeTransparentBmp.java
private static Bitmap makeTransparentBmp(final Bitmap bmp, int transparency) {</p>

<pre><code> int width = bmp.getWidth(); 
 int height = bmp.getHeight(); 
 int[] pixels = new int[width * height]; 

 Bitmap bitmap = Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888 );
 bmp.getPixels(pixels, 0, width, 0, 0, width, height); 
 for (int y = 0; y &lt; height; y++) { 
   for (int x = 0; x &lt; width; x++) { 
     int pixel = pixels[x + y * width];
     pixels[x + y * width] = Color.argb(transparency, 
             Color.red(pixel), Color.green(pixel), Color.blue(pixel)); 
   } 
 } 
 bitmap.eraseColor(Color.argb(0, 0, 0, 0)); 
 bitmap.setPixels(pixels, 0, width, 0, 0, width, height); 

 return bitmap;
</code></pre>

<p>}
```</p>

<p>では TODO の所に組み込みます。</p>

<p>```java TransparencyUrlTileProvider.java
public class TransparencyUrlTileProvider implements TileProvider {</p>

<pre><code>&lt;前略&gt;

@Override
public Tile getTile(int x, int y, int zoom) {
    Tile tile = _osmTileProv.getTile(x, y, zoom);

    // Tile の透過処理を行う
   Bitmap bmp = BitmapFactory.decodeByteArray(tile.bM, 0, tile.bM.length);
   Bitmap transparentBmp = makeTransparentBmp(bmp, _transparency);

   // Tile を作り直す
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    transparentBmp.compress(CompressFormat.PNG, 100, bos);
    Tile tranparentTile = new Tile(tile.width, tile.height, bos.toByteArray());

    return tranparentTile;
}

&lt;以下略&gt;
</code></pre>

<p>}
```</p>

<p>動かしてみます。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/advent2012_osmwithg.png" alt="OpenStreetMap with Google Map API" /></p>

<p>これは、GoogleMap の衛星写真の上に OpenStreetMap を透過して重ねた例です（分かりづらい</p>

<h2>まとめ</h2>

<p>このように Google Maps Android API v2 では、TileProvider を使って、タイル地図画像を簡単に表示させることができます。</p>

<p>Google Maps Javascript API や、MapKit でも他のタイル地図画像を利用することはできましたが、それらよりもより簡単に使えます。ハックというよりも API が公式にサポートしている、という感じです。</p>

<p>これまで Android には、Javascript の OpenLayers や、 iOS の route-me のような、地図タイルデータソースを扱える地図SDKはありませんでした（いや OsmDroid くらいか）</p>

<p>それを Google Maps Android API v2 がサポートしたのですから使わない手はありません。地図SDK としては一番高性能で事実上標準なのですから。</p>

<p>これに、OpenStreetMap や電子国土地図、衛星画像などの背景地図や、統計データメッシュや、アメダスなどの主題図的なタイル地図が重ねられるといろいろできそうだなあ、という感じです。
(Yahoo! さんの<a href="http://weather.yahoo.co.jp/weather/zoomradar/">雨雲レーダー</a> のタイル画像もこっそり試してみて「こりゃ面白い」と思ったので公式に提供して欲しいですｗ)</p>

<p>私にはタイル地図データを作る知識は無いので、タイル地図のポータルみたいなものがあるといいなあと思います。 <a href="https://www.facebook.com/chitaikyo">地図タイル工法協会</a> さんよろしくおねがいします。</p>

<p>というわけで、Android で地図使いたいなら(今のところ) Google Maps API v2 一択！ 他社さんもガンバレ！</p>

<p>※あれ？このネタどこが FOSS4G だ？ま、いっか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStreetMap と iOS6 の地図を比べてみました]]></title>
    <link href="http://amay077.github.io/blog/2012/10/03/osm-vs-ios-map/"/>
    <updated>2012-10-03T21:08:00+09:00</updated>
    <id>http://amay077.github.io/blog/2012/10/03/osm-vs-ios-map</id>
    <content type="html"><![CDATA[<h4>9.20追記:OpenStreetMap≒MapQuest な事など加筆修正しました</h4>

<p>完全に乗り遅れた感がありますが、OpenStreetMap とiOS6の地図を比べてみました。</p>

<!-- more -->


<p><a href="http://www.openstreetmap.org/">OpenStreetMap</a> は誰でも編集できて自由に使える地図のWikipedia です。
(iOS6地図ガッカリ事件に際して、OpenStreetMap のデータに原因があるかのような報道がありましたが、<a href="http://www.osmf.jp/news/protestagainstnyt">きっぱりと否定</a>しています。)</p>

<p>OpenStreetMap を使ったアプリを開発する方法はさまざまですが、ここでは、MapQuest社の開発キットを紹介します。</p>

<ul>
<li><a href="http://developer.mapquest.com/web/products/featured/apple-ios-maps-api">Apple iOS Maps API - MapQuest Developer Network</a></li>
</ul>


<p>またお約束ではございますが、この記事は、Yahoo さん、Mapion さんの完全なパクリでございます、ご了承ください！</p>

<ul>
<li>ヤフーさんのYOLPの記事は<a href="http://blog.olp.yahoo.co.jp/archives/20120920_yolpios6.html">こちら</a></li>
<li>マピオンさんのネタ記事は<a href="http://labs.mapion.co.jp/blog/labs/ios6.php">こちら</a> ☆(ゝω・)v</li>
</ul>


<h3>OpenStreetMap と MapQuest社 について</h3>

<p>OpenStreetMap は「地図データ」、MapQuest社はそのデータを利用してアプリやサービスを提供する企業です。OpenStreetMap の「◯年◯月◯日時点」のスナップショットを自社で運用して、デザインを調整し、Webサービスやアプリ、SDK として提供しています。</p>

<p>ここで紹介している地図画像は OpenStreetMap そのものではなく、「MapQuest の〜」です。起源は同じ、見た目も似ていますが、正確には異なることをご了承ください。OpenStreetMap 本家の地図はリンクから確認できるようにしてあります。</p>

<p>では、さっそく。</p>

<h2>東京スカイツリー</h2>

<h3>iOS6:</h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/sky-ios.png" alt="sky" /></p>

<h3>OpenStreetMap(MapQuest):<a href="http://www.openstreetmap.org/?lat=35.71003&amp;lon=139.81066&amp;zoom=17&amp;layers=M">→本家</a></h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/sky-osm.png" alt="sky" /></p>

<p>ちゃんとあるよスカイツリー。</p>

<h2>渋谷ヒカリエ</h2>

<h3>iOS6:</h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/hirarie-ios.png" alt="hikarie" /></p>

<h3>OpenStreetMap(MapQuest):<a href="http://www.openstreetmap.org/?lat=35.659051&amp;lon=139.70417&amp;zoom=18&amp;layers=M">→本家</a></h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/hirarie-osm.png" alt="hikarie" /></p>

<p>ちゃんとあるよヒカ…な、ない！
※本家にはちゃんとヒカリエありました！<a href="http://qiita.com/items/03cf7e04cac886b84136#comment-055c7f54ebf92d3bd05b">hal_sk</a> さん、ありがとうございます。</p>

<h2>新宿駅周辺</h2>

<h3>iOS6:</h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/shinjuku-ios.png" alt="shinjuku" /></p>

<h3>OpenStreetMap(MapQuest):<a href="http://www.openstreetmap.org/?lat=35.68926&amp;lon=139.70072&amp;zoom=17&amp;layers=M">→本家</a></h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/shinjuku-osm.png" alt="sinjuku" /></p>

<p>Apple よ、これが線路だ！</p>

<h2>新東名高速道</h2>

<h3>iOS6:</h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/tomei-ios.png" alt="tomei" /></p>

<h3>OpenStreetMap(MapQuest):<a href="http://www.openstreetmap.org/?lat=34.9941&amp;lon=138.4068&amp;zoom=12&amp;layers=M">→本家</a></h3>

<p><img src="https://dl.dropbox.com/u/264530/qiita/tomei-osm.png" alt="tomei" /></p>

<p>最初に新東名を描いたのは誰でしょう？</p>

<h2>まとめ</h2>

<p>いかがでしたか？</p>

<p>OpenStreetMap は、誰もが編集できる自由な地図です。日夜マッパーさん達が新しい道路や建物を描いてくださっています。そのため、情報量では、少なくともiOS6地図よりは優っています。(場所によっては Googleマップより詳細な地域も ex:<a href="http://www.ikedahayato.com/index.php/archives/15493">北朝鮮までカバー！地図のWikipedia「OpenStreetMap（OSM）」がすごい件 | ihayato.news</a>)</p>

<p>しかし地図デザインはというと、洗練されてはいません。
OpenStreetMap はデータであり、デザインは範疇ではない、と言えます(補足２へ)。</p>

<p>地図のデザインとは、色合い、線の種類や太さ、注記やアイコンの大きさ・配置、どんな情報を表示する／しないかの取捨選択、時には人が見やすいようなディフォルメを加えたり、と職人さんの苦労の賜物です。</p>

<ul>
<li><a href="http://blog.olp.yahoo.co.jp/archives/20120928_chukihaichi.html">これがニッポンの地図づくり！地図職人のこだわりお見せします - YOLP</a></li>
<li><a href="http://blog.olp.yahoo.co.jp/archives/20120720-mapdesign.html">YOLP地図デザインスタッフが語るスマートフォン専用スタイル地図の5つの魅力 - YOLP</a></li>
<li><a href="http://www.mapion.co.jp/topics/gooddesign/">グッドデザイン賞をマピオンの地図が受賞：マピオン</a></li>
</ul>


<p>iOS6マップは、「スカスカ」「注記がおかしい」「位置がズレてる」などが指摘されていますが、それが解決されたとしても、「地図デザイン力」で、Yahoo、Mapion、Google などの他社に追いつけるでしょうか？</p>

<p>テクノロジーだけでも、コンテンツだけでも、両方揃っていてもダメ。
お金では買えない価値がある。
買えるものは・・・<strong>企業じゃね？</strong></p>

<p>というわけで１年後、iOS6マップと地図業界がどうなっているかが楽しみです。</p>

<h4>補足</h4>

<ul>
<li>本記事内で紹介したiOS6地図画像は、マピオンさんの記事から拝借しました。問題があったら言ってください。</li>
<li>同OpenStreetMap地図画像は、<a href="https://play.google.com/store/apps/details?id=com.mapquest.android.ace&amp;hl=ja">MapQuest社のAndroidアプリ</a>からキャプチャしたものです。<a href="http://itunes.apple.com/us/app/mapquest/id316126557?mt=8">iOS版</a>は日本では使えませんでした、なんだよぅ。</li>
<li>Qiita でこんな事書いていいのかしら？SDKに触れてるから、いいよね？問題があったら言ってください(またか)</li>
</ul>


<h4>補足２</h4>

<p>OpenStreetMap を使った地図サイトの「見た目」は、地図データを描画する "マップレンダラー" に何を採用するかで大きく異なります。openstreetmap.org のサイトでは <a href="http://wiki.openstreetmap.org/wiki/JA:Mapnik">Mapnik</a> というライブラリが採用されていますが、他にも<a href="http://wiki.openstreetmap.org/wiki/Rendering">さまざまなもの</a>があるようです。
しかし "マップレンダラー" は地図に適用するスキンのようなもので、よく目的にあった地図を作るには地図データそのものを「加工」する必要があるのではないかと思っています。(この辺、ちょっと勉強不足)</p>

<p>OpenStreetMap については、 <a href="http://qiita.com/items/03cf7e04cac886b84136#comment-49a56e8d30273ad833e4">dkastl@github</a> さんから良いコメントを頂いたので、全力で和訳してみました。</p>

<blockquote><p>OpenStreetMap の特長は、問題や間違っている情報を見つけた時に、すぐにそれを修正したり新しいオブジェクトを追加できることです。
そして、あなたが次に訪れた場所は、地図に載るでしょう。(<sup>^)</sup></p>

<p>そして、高速道路や新しい建物のような人気のスポットに間違いを見つけたらあなたはラッキー、それを(修正して)貢献し、賞賛を受けられます。</p></blockquote>

<p>OpenStreetMapの創始者であるスティーブ・コースト氏は、先に日本で行われたOpenStreetMapの国際会議(SotM)でこう語っています。</p>

<blockquote><p>“LinuxがプロプライエタリなUNIXの品質を凌駕したように、Wikipediaがプロプライエタリな辞書を超えたように、OpenStreetMapの地図の情報は、将来、プロプライエタリな地図を超えるだろう</p></blockquote>

<p>via <a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20120910/421702/?ST=cloud&amp;P=3">SotM 2012 Tokyo レポート - “地図のWikipedia”OpenStreetMapの国際会議が日本で初開催：ITpro</a></p>

<p>そんな OpenStreetMap の未来に期待しつつ、今日も私は<a href="http://www.openstreetmap.org/?lat=34.72014&amp;lon=137.4328&amp;zoom=17&amp;layers=M">のんほいパーク</a>を描き続けるのです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStreetMap で Bing の衛星写真が使えるようになった！けどズレが気になる…]]></title>
    <link href="http://amay077.github.io/blog/2010/12/01/openstreetmap-bing/"/>
    <updated>2010-12-01T07:29:00+09:00</updated>
    <id>http://amay077.github.io/blog/2010/12/01/openstreetmap-bing</id>
    <content type="html"><![CDATA[<p><a href="http://journal.mycom.co.jp/news/2010/11/26/078/">OpenStreetMap のエラい人が Microsoft に加入した</a>事を受け、OpenStreetMap（以下 OSM） の背景地図に Bing Map の衛星写真が重ねられるようになりました。</p>

<!--more-->


<ul>
<li><a href="http://wiki.openstreetmap.org/wiki/JA:Bing">JA:Bing - OpenStreetMap Wiki</a></li>
</ul>


<p>これで、鮮明な衛星写真を元に GPSログ がなくても地図が描けるようになりましたね。</p>

<p>って少し気になることが。</p>

<p>たしか Googleマップ もそうだったですけど、衛生写真 と通常の地図（ベクトル地図）で少しズレてません？</p>

<p>というわけで Googleマップ と、OSM で私が最近ロギングして描いた地図で比較してみました。</p>

<p><img src="https://dl.dropbox.com/u/264530/qiita/osm_bing_1.png" alt="&quot;1&quot;" />
<img src="https://dl.dropbox.com/u/264530/qiita/osm_bing_2.png" alt="&quot;2&quot;" /></p>

<p>一つ目が Google 、 二つ目が OSM (Bing) です。</p>

<p>やっぱりズレてますねー。</p>

<p>Googleマップ も Bing マップもズレの量はともかく、同じ方向にズレている感じです。</p>

<p>地点によっては、まったくズレていない所もあるし、画像補正の関係でこうなっちゃうのかな…。</p>

<p>ということで、OSM に Bing のチカラが加わったのは嬉しいのですが、精度が要求される所では、やっぱり GPS ログを収集しましょう、ということでご注意ください。</p>

<p>それにしても加入して即、Bing を OSM に持ち込むなんてスゴいですね。まるで メカドックに那智さんが加入して即、サバンナRX-7 をスリーローターに改造しちゃうみたいな。。。(わかるひといるかなー？)</p>
]]></content>
  </entry>
  
</feed>
