<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-18T17:26:07+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxJava でズンドコキヨシ(window or buffer 使用)]]></title>
    <link href="http://blog.amay077.net/blog/2016/03/13/zundoko-with-rxjava/"/>
    <updated>2016-03-13T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/03/13/zundoko-with-rxjava</id>
    <content type="html"><![CDATA[<p>調子に乗って RxJava でもやってみた。</p>

<!--more-->




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから<br>「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた</p>&mdash; てくも (@kumiromilk) <a href="https://twitter.com/kumiromilk/status/707437861881180160">2016年3月9日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><a href="http://qiita.com/amay077/items/85dfc4bd194f57c52c57">C# と Reactive Extensions でズンドコキヨシ</a></li>
</ul>


<p>がんばって <a href="http://reactivex.io/documentation/operators/window.html"><code>Observable.window</code></a> を使ってみた。</p>

<p>```java zondoko.java</p>

<p>// なんちゃってラムダ使用。あと Android。
public void doZondoko() {</p>

<pre><code>final Random random = new Random();
final List&lt;String&gt; PATTERN = Arrays.asList("ずん", "ずん", "ずん", "ずん", "どこ");
final String K = "キ・ヨ・シ！";

Observable.concat( // ※ の Observable&lt;List&lt;String&gt;&gt; を直列に連結
    Observable.interval(500, TimeUnit.MILLISECONDS)
        .map(_ -&gt; random.nextInt(2) == 0 ? "ずん" : "どこ") // ランダムに ずん or どこ
        .window(PATTERN.size(), 1) // 要素数5のWindowを1ずつズラしてく
        .map(window -&gt; window.toList())) // Observable&lt;Observable&lt;String&gt;&gt; を Observable&lt;List&lt;String&gt;&gt; に変換 ※
    .flatMap(window -&gt; {
        if (sequenceEqual(window, PATTERN)) { // パターンと一致していたら…
            final List&lt;String&gt; says = new ArrayList&lt;&gt;();
            says.addAll(window);
            says.add(K);                      // キ・ヨ・シ！を追加
            return Observable.concat(
                    Observable.just(says),
                    Observable.just(Collections.&lt;String&gt;emptyList())); // 終了判定用の空リスト
        } else {
            return Observable.just(window);
        }
    })
    .takeWhile(says -&gt; !says.isEmpty())  // 空リストになるまで繰り返す
    .subscribe(says -&gt; Log.d(TAG, dump(says)));
</code></pre>

<p>}</p>

<p>/<em>* リストとリストの要素一致 </em>/
private boolean sequenceEqual(List<String> listA, List<String> listB) {</p>

<pre><code>Iterator&lt;String&gt; iterA = listA.iterator();
Iterator&lt;String&gt; iterB = listB.iterator();

while (iterA.hasNext() &amp;&amp; iterB.hasNext()) {
    if (iterA.next() != iterB.next()) {
        return false;
    }
}
return (!iterA.hasNext() &amp;&amp; !iterB.hasNext());
</code></pre>

<p>}</p>

<p>/<em>* リスト内容をダンプ </em>/
private String dump(List<String> list) {</p>

<pre><code>final StringBuilder b = new StringBuilder();
for (String s : list) {
    if (!TextUtils.isEmpty(b.toString())) {
        b.append(", ");
    }
    b.append(s);
}

return b.toString();
</code></pre>

<p>}
```</p>

<blockquote><p>どこ, ずん, どこ, どこ, ずん<br/>
ずん, どこ, どこ, ずん, どこ<br/>
どこ, どこ, ずん, どこ, ずん<br/>
どこ, ずん, どこ, ずん, どこ<br/>
ずん, どこ, ずん, どこ, どこ<br/>
どこ, ずん, どこ, どこ, ずん<br/>
ずん, どこ, どこ, ずん, ずん<br/>
どこ, どこ, ずん, ずん, ずん<br/>
どこ, ずん, ずん, ずん, ずん<br/>
ずん, ずん, ずん, ずん, どこ, キ・ヨ・シ！</p></blockquote>

<p>「window(5, 1) &ndash;> toList &ndash;> concat してるならそれは <code>buffer(5, 1)</code> やんけ」というのを <a href="http://qiita.com/do6gop/items/c4941f6fb2bdc1c0c0f1">こちら</a> で知って、 <code>buffer</code> 版も書いてみた。</p>

<p>```java Zondoko_buffer.java
public void doZondoko() {</p>

<pre><code>final Random random = new Random();
final List&lt;String&gt; PATTERN = Arrays.asList("ずん", "ずん", "ずん", "ずん", "どこ");
final String K = "キ・ヨ・シ！";

Observable.interval(500, TimeUnit.MILLISECONDS)
    .map(_ -&gt; random.nextInt(2) == 0 ? "ずん" : "どこ") // ランダムに ずん or どこ
    .buffer(PATTERN.size(), 1) // 要素数5のBufferを1ずつズラしてく
    .flatMap(buf -&gt; {
        if (sequenceEqual(buf, PATTERN)) { // パターンと一致していたら…
            final List&lt;String&gt; says = new ArrayList&lt;&gt;();
            says.addAll(buf);
            says.add(K);                      // キ・ヨ・シ！を追加
            return Observable.concat(
                    Observable.just(says),
                    Observable.just(Collections.&lt;String&gt;emptyList())); // 終了判定用の空リスト
        } else {
            return Observable.just(buf);
        }
    })
    .takeWhile(says -&gt; !says.isEmpty())  // 空リストになるまで繰り返す
    .subscribe(says -&gt; Log.d(TAG, dump(says)));
</code></pre>

<p>}
```</p>

<ul>
<li><a href="http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84">さまざまなズンドコキヨシ</a></li>
<li><a href="http://qiita.com/shunsugai@github/items/971a15461de29563bf90">ズンドコキヨシまとめ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2016アプリを Xamarin.Android に移植した話]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/"/>
    <updated>2016-02-24T00:19:01+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android</id>
    <content type="html"><![CDATA[<p>　DroidKaigi2016 の開催前、<a href="https://github.com/konifar/droidkaigi2016">公式アプリが有志によって開発中</a> とのツイート(だったかな？)を見て、ふとこれを「Xamarin.Android に移植してみよう」と思い、夜な夜なぼちぼちと始めました。</p>

<!--more-->


<p>　後付けですが、移植するにあたり調査したかったのは主に、</p>

<ul>
<li>Android-Java の OSSライブラリがどのくらい Xamarin.Android でも利用可能か？</li>
<li>(勉強をサボっていた)Xamarin.Android での Material Design の適用方法</li>
</ul>


<p>です。</p>

<h2>Xamarin.Android について(知らない人向け)</h2>

<p>　Xamarin.Android は、Android API(Javaクラスライブラリを含む)の薄いラッパーで、クラス・メソッド名などは殆どそのままに、言語が Java から C# になったようなものです。
　なので、 <code>activity_main.xml</code> などのリソースファイルもほぼそのまま転用可能です。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/3232064cc8880c809aee">Xamarin.Android で作った HelloWorld のソースを眺めてみる</a></li>
</ul>


<p>　尚、 Xamarin.Forms というワンソースで複数プラットフォームで動作するアプリを開発できるフレームワークとは別のものです。</p>

<h2>Android プロジェクトの Xamarin.Android への移植方法</h2>

<p>すごく大雑把に、以下のような手順で移植します。</p>

<ol>
<li>Androidプロジェクト(以下 Java と表記)の <code>/res</code> 以下を Xamarin.Androidプロジェクト(以下 Xamarin)配下にコピー</li>
<li>Java のソースコード群を、 package構成を崩さずに Xamarin.Android で再構成（結局のところコードの書き直し）</li>
<li>Java側で使われているOSSライブラリと同等のものを、nuget・Xamarin Components で探してXamarin側に追加（なければ <code>.jar</code> ファイルを入手して Xamarin で使えるように Binding Library を作成）</li>
<li>あとはひたすら try and error and error and error&hellip;</li>
</ol>


<h2>Android Data Binding を、Xamarin ではどうしたか？</h2>

<p>　DroidKaigi2016 のアプリには <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">DataBinding</a> が使われています。ただ、 <code>BaseObservable</code> や <code>ObservalbeField</code> によるガッツリとした OneWay/TwoWay のデータバインディングではなく、POJOなデータクラスを使う <a href="https://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingmode(v=vs.110">OneTime</a>.aspx) なものしかなかったので、Xamarin への移植に際しては <a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> や、 <a href="https://github.com/MvvmCross/MvvmCross">MVVMCross</a> などのデータバインディング機能に頼る必要はありませんでした。</p>

<p>　一方、Android Data Binding のもう一つの(副次的な)機能である View binding(<code>findViewById</code> が要らなくなるアレ)の対応は大変でした。</p>

<p>　まず、<code>activity_main.xml</code> などのデータバインド範囲を括る <code>&lt;layout&gt;&lt;/layout&gt;</code> ですが、このタグは Xamarin Studio は解釈してくれないのでエラーになります。このタグはもれなくコメントアウトが必要でした。また、カスタムデータバインディングが使われている箇所も同じくです。
　なので当然、Android Studio(gradle)が生成する <code>DataBinding</code> クラスも使用できません。
　仕方ない(というか始めからわかっていましたが) <code>ActivityMainBinding</code> などに相当するクラスを必要を満たす範囲で自作しました。レガシーな <code>FindViewByID()</code> を使って。</p>

<p>　Windowsアプリ開発の世界では、「DSL で記述された画面レイアウトからUI要素変数を自動生成する」ことは、IDE である Visual Sutdio が普通に行ってくれます。Xamarinアプリ開発のIDEである Xamarin Studio も、iOS の <code>.storyboard</code> ファイルを読んで、自動的に <code>HogeViewController.designer.cs</code> にUI要素変数を生成してくれます。
　Xamarin.Android でも <code>MainActivity.designer.cs</code> とか生成してくれてもいいのになー、とは頭の片隅で思い続けています。(自作Plug-inとかでなんとかできるのかな？)</p>

<h2>DroidKaigi2016 で使われているJavaライブラリを、Xamarinではどうしたか？</h2>

<p>　DroidKaigi2016アプリでは非常にたくさんのOSSライブラリが<a href="https://github.com/konifar/droidkaigi2016#libraries">使用されており</a>、それを眺めるだけでも非常に勉強になります。このソースを読んで初めて知ったものが何個もありました。
　アプリを Xamarin.Android へ移植するにあたり、これらにどのように対応したかを記します。</p>

<h3>Android Support Libraries</h3>

<p> これらは、nuget パッケージが用意されています。要注意なのは、Xamarin Component にも<a href="https://components.xamarin.com/view/xamandroidsupportdesign">同じものが存在</a>していて、大抵はそちらの方が古くて動かない、ということです。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.CustomTabs/">Xamarin.Android.Support.CustomTabs</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.Design/">Xamarin.Android.Support.Design</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v4/">Xamarin.Android.Support.v4</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/">Xamarin.Android.Support.v7.AppCompat</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.CardView/">Xamarin.Android.Support.v7.CardView</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.RecyclerView/">Xamarin.Android.Support.v7.RecyclerView</a></li>
</ul>


<h3><a href="http://google.github.io/dagger/">Dagger2</a></h3>

<p>　Dependency Injection を Annotation ベースで行うライブラリ。
　これはないかなーと思いましたがありました。Dagger(短剣) に対して、その名も Stiletto(短剣)ｗ</p>

<ul>
<li><a href="http://stiletto.bendb.com/">Stiletto</a> &ndash; Stiletto is a .NET port of Dagger, the lightweight Android dependency injector from Square.</li>
</ul>


<p>　使い方も殆ど一緒。どうも Dagger1 相当の機能のようですが、アプリ側は少しの修正で対応できました。
　もっとも Dagger すら使ったことがなかったので、その理解に少々時間を要しました。
　Stiletto は、Xamarin.iOS でも使えるようですが、残念ながら PCL対応していなさそう。PCL対応のプルリクを送るのは今後やってみたいことの一つです。</p>

<h3><a href="http://square.github.io/retrofit/">Retrofit2</a></h3>

<p>　RESTful API のクライアントをサクッと作れるライブラリ。これも Xamarin 用に移植してくれてる方がいます。</p>

<ul>
<li><a href="http://paulcbetts.github.io/refit/">Refit by paulcbetts</a> &ndash; Refit is a library heavily inspired by Square&rsquo;s Retrofit library</li>
</ul>


<p>　こちらも、 Xamarin.iOS でも利用可能、PCL対応済み、カンペキです。</p>

<h3><a href="http://square.github.io/picasso/">Picasso</a></h3>

<p>　多機能且つ使いやすい Image Loader の Picasso。これは Xamarin の人が nuget パッケージを用意してくれています。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Square.Picasso">Square.Picasso</a></li>
</ul>


<p>Picasso が依存している <code>Square.OkHttp</code>, <code>Square.OkIO</code> も nuget パッケージが用意されていて、一緒に追加されます。</p>

<h3><a href="https://github.com/gfx/Android-Orma">Android-Orma</a></h3>

<p>　DroidKaigi当日には、作者 @gfx さんによる即席ランチセッションも聴けたORMライブラリ。若いライブラリなのでさすがに Xamarin版はありません。
　Xamarin.Android での ORMライブラリといえば <a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/part_3_using_sqlite_orm/">SQLite.NET</a> が有名ですが、使い方が面倒そうだったのと、このアプリのデータ構造と量で、リレーショナルDB使うこともないだろうと、 Key-Value Store である Akavache を使いました。これは以前 Qiita に書いたのでそちらを。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/356ad0028b7e6fbf089f">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する</a></li>
</ul>


<p>　とはいえ、移植の際には、かなり強引な実装をしてしまいました。パフォーマンス悪いのは私の実装が原因です。</p>

<h3><a href="https://github.com/ReactiveX/RxJava">RxJava</a></h3>

<p>　これはもう説明不要でしょう。本家 Rx.NET を使用します。</p>

<ul>
<li><a href="https://github.com/Reactive-Extensions/Rx.NET">Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET</a></li>
</ul>


<h3><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></h3>

<p>　これを使う最大の理由である <code>AndroidSchedulers.mainThread()</code> は、 Rx.NET では、 <code>observable.ObserveOn(SynchronizationContext.Current)</code> で代用できるので、不要でした。</p>

<h3><a href="https://github.com/JakeWharton/ThreeTenABP">ThreeTenABP</a></h3>

<p>　これも .NET の日付時刻系クラス(<code>DateTime</code>, <code>DateTimeOffset</code>, <code>TimeSpan</code>) で特に問題ありませんでした。しかし恥ずかしながらこのライブラリも知りませんで、Java では必須になりそうですね。</p>

<h3><a href="http://facebook.github.io/stetho/">Stetho</a></h3>

<p>　デバッグを強力に支援してくれるライブラリですね。これも知りませんでした。移植の時にはとりあえず関係なさそう、と思って代替品は探していません（汗</p>

<h3><a href="https://github.com/LyndonChin/AndroidFlowLayout">AndroidFlowLayout</a></h3>

<p>　View をいい感じに並べてくれるライブラリ。Xamarin.Android用の nuget パッケージがありました。</p>

<ul>
<li><a href="https://www.nuget.org/packages/AndroidFlowLayout/">AndroidFlowLayout &ndash; NuGet Gallery</a></li>
</ul>


<h3>Google Play services</h3>

<p>　Map とか、Analytics とか。こちらも nuget に一通りパッケージが揃っています。Xamarin Components より優先的に使いましょう。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Maps/">Xamarin Google Play Services &ndash; Maps &ndash; NuGet Gallery</a>　</li>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Analytics/">Xamarin Google Play Services &ndash; Analytics &ndash; Maps &ndash; NuGet Gallery</a>　</li>
</ul>


<h3><a href="https://github.com/jd-alexander/LikeButton">LikeButton</a></h3>

<p>　Facebook の いいね!、Twitter の Fav! のようなボタンを提供してくれるライブラリ。押した時のアニメーションがイイ感じです。
　これの Xamarin 版は探してもなかったので、 LikeButton の <code>.jar</code> ファイルを入手して、自前で Java Binding Library プロジェクトを作って使用しています。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin/tree/master/LikeButton">DroidKaigi2016Xamarin/LikeButton · amay077/DroidKaigi2016Xamarin</a></li>
</ul>


<p>　これを nuget に放流するのはやりたいことの2つ目。いくつかやったら <a href="https://resources.xamarin.com/open-source-contributor.html">Xamarin から subscription もらえる</a>だろうか。。。</p>

<h3><a href="https://github.com/johncarl81/parceler">parceler</a></h3>

<p>　Parcel のことが大嫌いじゃなくなるライブラリ。移植に際しては、ModelクラスはPOCO(POJOの.NET版と思ってください)にしたかったので直接の代替品は探しませんでした。
　ModelクラスのParcel化はなんと <a href="http://www.newtonsoft.com/json">JSON.NET</a> でJSONを介しちゃいました。悪手ですがパフォーマンスが気になる程でないならいいでしょ。</p>

<h3><a href="https://try.crashlytics.com/">Crashlytics</a></h3>

<p>　クラッシュレポート解析サービスですね。Xamarin なら <a href="https://xamarin.com/insights">Xamarin Insights</a> がビルトインで使えるので、通常はそうするでしょう。Crashlytics 自体の Xamarin.Android 用ライブラリは、今のところ<a href="https://twittercommunity.com/t/xamarin-and-fabric/37289/13">存在しないみたい</a>です。</p>

<h3><a href="https://github.com/opacapp/multiline-collapsingtoolbar">multiline-collapsingtoolbar</a></h3>

<p>　 Android Design Support Library の <code>CollapsingToolbarLayout</code> って、タイトルが複数行あると、展開しても表示されない(!)んですね。なんじゃそら！ってのを解決してくれるライブラリです。
　 Xamarin.Android向けのは探したけど見つかりませんでした。移植に際してクリティカルじゃなかったので、複数行にならない <code>CollapsingToolbarLayout</code> のままです。これも nuget パッケージ化したら需要あるかも。</p>

<h3><a href="https://github.com/ozodrukh/CircularReveal">CircularReveal</a></h3>

<p>　Lollipop で追加された CircularReveal アニメーションを、それ以前のOSでも行えるライブラリです。
　これもクリティカルでないので、Xamarin版には移植していません。</p>

<h2>まとめ</h2>

<p>　DroidKaigi2016 の公式アプリは、ホストの @konifar さんはじめ、 <a href="https://github.com/konifar/droidkaigi2016/graphs/contributors">35名</a> の精鋭有志の皆さんによる爆速開発で、 2/13 に v1.00 がリリース、イベント当日もアップデートされ、私も便利に利用させていただきました。
　
　一方、私の Xamarin.Android への移植は今やっと &ldquo;とりあえず&rdquo; 終わったばかり。
　しかも、移植の元にしたのが 2/10 付けのソースですが、その日から現在に至るまで本家にマージされた <strong>Pull Request の数は 200超！</strong> 。
　「これが若さか…。」これらの Xamarin版への移植はおじさんにはとても行う気が起きません。DroidKaigi2016公式アプリの Contributors の皆さんを尊敬します。
　
　が、ひとまず動くようになったので、ソースを公開します。モダンな Androidアプリを Xamarin.Android で実現する例としては有用だと思います。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin">amay077/DroidKaigi2016Xamarin: DroidKaigi2016 アプリをこっそりXamarinに移植</a></li>
</ul>


<p>（できればこれを、 プラットフォーム非互換にできる箇所はPCLへ移動、各画面にViewModelを置いてMVVM化、Xamarin.iOS対応、Xamarin.Forms対応とか、いろいろと育てていきたいと思っているのですが、DroidKaigi参加直後で、あれもこれもやりたい病なので、実現は未定です。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava で Observable の並列処理を直列化する]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava/"/>
    <updated>2016-02-08T01:16:02+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava</id>
    <content type="html"><![CDATA[<p><code>rx.Observable&lt;T&gt;</code> のオペレータは、通常は非同期で、並列に処理されます。</p>

<!--more-->


<p>例えば以下のような場合:</p>

<p>```java
public void start() {</p>

<pre><code>Observable.range(1, 5)
    .flatMap(x -&gt; fatTask(x))
    .subscribe(x -&gt; Log.d(TAG, "onNext - " + x));
</code></pre>

<p>}</p>

<p>private final Random rand = new Random();
private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);</p>

<p>// ランダムにスリープした後 x を onNext する
private Observable<Integer> fatTask(final int x) {</p>

<pre><code>return Observable.create(subscriber -&gt; {
    long sleep = (long) (rand.nextDouble() * 10000L);
    Log.d(TAG, "fatTask(" + x + ") - start.");

    executor.schedule(() -&gt; {
        subscriber.onNext(x);
        subscriber.onCompleted();
    }, sleep, TimeUnit.MILLISECONDS);
});
</code></pre>

<p>}
```</p>

<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力:<br/>
fatTask(1) &ndash; start.<br/>
fatTask(2) &ndash; start.<br/>
fatTask(3) &ndash; start.<br/>
fatTask(4) &ndash; start.<br/>
fatTask(5) &ndash; start.<br/>
onNext &ndash; 3<br/>
onNext &ndash; 5<br/>
onNext &ndash; 4<br/>
onNext &ndash; 2<br/>
onNext &ndash; 1<br/></p></blockquote>

<p>fatTask は 1,2,3,4,5 の順で <em>完了を待たずに</em> 呼びだされます。
が、それぞれ処理にかかる時間が異なるので、 <code>onNext</code> が呼ばれる順は 1〜 とは限りません。</p>

<p>ソースとなる Stream の順番を崩したくない場合は、 <code>fatTask(1)</code> が完了してから <code>fatTask(2)</code> を開始する、というように直列化しなければなりません。</p>

<h2>Observable.Concat(concatWith)</h2>

<p>これを行うのが <code>Observable.Concat</code> です(RxJava では <code>Observable.concatWith</code> のようですね)。
複数の <code>Observable</code> を順に（完了してから次へ）処理していきます。</p>

<h3>使い方</h3>

<p><code>toList</code> で一旦ただの <code>List</code> にしてから、<code>concatWith</code> で数珠つなぎにします。</p>

<p>```java
public void start() {</p>

<pre><code>Observable.range(1, 5)
    .toList()
    .flatMap(list -&gt; {
        // fatTask(1).contat(fatTask(2)).contat(fatTask(3))... 
        // にする（fold 使えれば…)
        Observable&lt;Integer&gt; task = null;
        for (int x : list) {
            if (task == null) {
                task = fatTask(x);
            } else {
                task = task.concatWith(fatTask(x));
            }
        }
        return task;
    })
    .subscribe(x -&gt; Log.d(TAG, "onNext - " + x));
</code></pre>

<p>}
```</p>

<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力<br/>
fatTask(1) &ndash; start.<br/>
onNext &ndash; 1<br/>
fatTask(2) &ndash; start.<br/>
onNext &ndash; 2<br/>
fatTask(3) &ndash; start.<br/>
onNext &ndash; 3<br/>
fatTask(4) &ndash; start.<br/>
onNext &ndash; 4<br/>
fatTask(5) &ndash; start.<br/>
onNext &ndash; 5<br/></p></blockquote>

<p><code>fatTask(1)</code> の完了を待ってから、次の <code>fatTask(2)</code> が実行されています。</p>

<p>※
Rx.NET では、</p>

<p><code>csharp
static IObservable&lt;T&gt; Concat&lt;T&gt;(IEnumerable&lt;IObservable&lt;T&gt;&gt; sources)
</code></p>

<p>で、複数の <code>IObservable</code> を一括で渡せるのですが、 RxJava にはないようで、、、。</p>

<p><code>java
static &lt;T&gt; Observable&lt;T&gt; concatEager(Iterable&lt;? extends Observable&lt;? extends T&gt;&gt; sources)
</code></p>

<p>というのがあったんですが、期待通りうごいてくれず、 Eager? なんでしょう？</p>

<h2>ソースが無限リストだったら？</h2>

<p><code>toList</code> で一旦ただの List にしているのが非常に気に入らないですね。
<code>range(1, 5)</code> が <code>interval(1, TimeUnit.SECONDS)</code> のように無限の Stream だったら使えません。</p>

<p>そこで、 <code>concat</code> には、こんな overload もあります。</p>

<p><code>java
static &lt;T&gt; Observable&lt;T&gt; concat(Observable&lt;? extends Observable&lt;? extends T&gt;&gt; observables)
</code></p>

<p>Observable<T> を通知する Observable？ ややこしいですがこう使います。</p>

<p>```java
public void start() {</p>

<pre><code>// 2. を concat する
Observable.concat( 
    // 1. Observable&lt;Long&gt;
    Observable.interval(1, TimeUnit.SECONDS) 
        // 2. Long を Observable&lt;Integer&gt; に変換 
        //    → Observable&lt;Observable&lt;Integer&gt;&gt; になる
        .map(x -&gt; fatTask(x.intValue()))) 
    .subscribe(x -&gt; Log.d(TAG, "onNext - " + x));
</code></pre>

<p>}
```</p>

<p>このプログラムの出力はこうなります。</p>

<blockquote><p>出力<br/>
fatTask(0) &ndash; start.<br/>
onNext &ndash; 0<br/>
fatTask(1) &ndash; start.<br/>
onNext &ndash; 1<br/>
fatTask(2) &ndash; start.<br/>
onNext &ndash; 2<br/>
…つづく<br/></p></blockquote>

<p>無限リストながら、並列処理せずに順序通り動いてくれます。</p>

<p><code>interval</code> の値を単純に <code>map</code> で <code>Observable&lt;Integer&gt;</code> に変換してやります。するとこれは <code>Observable&lt;Observable&lt;Integer&gt;&gt;</code> になり、<code>concat</code> 可能になります。 <code>flatMap</code> だと平坦化されちゃうのでただの <code>map</code> です。</p>

<h2>まとめ</h2>

<p>Observable は普通は非同期で並列処理。
非同期ながら直列化したい場合は <code>Observable.concat</code> でできます。</p>

<ol>
<li>GPS から緯度経度を取得</li>
<li>なんか重い計算を行う</li>
<li>結果をテキストファイルに書き出す</li>
</ol>


<p>みたいな処理をするとき 3. を 1. の順序と同じにしたいのでこれを使います。</p>

<p>はじめ自分は <code>flatMap</code> で繋いでいくだけですべて直列化されているのかなーと勘違いしていたので、これを知った時は目からウロコでした。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.introtorx.com/content/v1.0.10621.0/12_CombiningSequences.html">Intro to Rx &ndash; Combining sequences</a></li>
<li><a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX &ndash; Concat operator</a></li>
<li><a href="http://blog.okazuki.jp/entry/20120219/1329663635">Reactive Extensions再入門 その４１「どんどん合成するよ」 &ndash; かずきのBlog@hatena</a></li>
<li><a href="https://twitter.com/neuecc/status/695604984763650050">https://twitter.com/neuecc/status/695604984763650050</a> &ndash; @neuecc さんありがとうございます！</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-Java でリスト操作するなら IxJava が決定版だと思う]]></title>
    <link href="http://blog.amay077.net/blog/2016/01/21/ixjava-the-best-library-of-list-operations/"/>
    <updated>2016-01-21T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/01/21/ixjava-the-best-library-of-list-operations</id>
    <content type="html"><![CDATA[<p>Android では Java8 が使えないため、 &lsquo;Yet another Stream API&rsquo; なライブラリがいくつかあります。</p>

<!--more-->


<ul>
<li><a href="http://qiita.com/tsumuchan/items/8e438a2ea653fa786c23">Androidでリスト操作するなら、Lightweight-Stream-APIが便利 &ndash; Qiita</a></li>
<li><a href="http://qiita.com/k--kato/items/ec7ab8b392fa8bb0a732">JavaにC#のLINQを移植してみた &ndash; jLinqer &ndash; Qiita</a></li>
<li><a href="http://stackoverflow.com/questions/1217228/what-is-the-java-equivalent-for-linq">What is the Java equivalent for LINQ? &ndash; Stack Overflow</a></li>
</ul>


<p>普段 C# を使っているため LINQ to Objects の便利さをなんとか Androidアプリ開発でも享受したい。
そこで個人的に「これだ！」と思っているライブラリが IxJava です。</p>

<ul>
<li><a href="https://github.com/akarnokd/ixjava">akarnokd/ixjava: Interactive Extensions for Java</a></li>
</ul>


<h2>IxJava とは？</h2>

<p>一言でいえば <em>「LINQ to Objects の Java版」</em> です。</p>

<p>README より、</p>

<blockquote><p>Interactive Extensions for Java, the dual of RxJava. Originally implemented in the Reactive4Java framework, now converted to work with RxJava.</p>

<p>The aim is to provide pull-based datastream support with the same naming as in RxJava mainly for the pre-Java-8 world.</p></blockquote>

<p>開発者の akarnokd 氏は、 RxJava の登場以前から <a href="https://code.google.com/p/reactive4java/">Reactive4Java</a> という「Java版Rx」を開発しており、これには大きく２つの機能が含まれていました。</p>

<ul>
<li><code>Reactive&lt;T&gt;</code> : Reactive Extension の Java実装</li>
<li><code>Interactive&lt;T&gt;</code> : LINQ to Objects の Java実装</li>
</ul>


<p>そう、 akarnokd 氏は、Rx と共に LINQ も Java に移植していたのです。
その後、彼は RxJava への参加を表明し、 reactive4java は開発終了となりましたが、RxJava には LINQ 相当の機能は含まれません。
そこで彼は、 <code>Interactive&lt;T&gt;</code> だけを <em>IxJava</em> として切り離し、純粋な <em>「LINQ to Object for Java」</em> として開発続行したのです。</p>

<p>akarnokd 氏は RxJava の <a href="https://github.com/ReactiveX/RxJava/graphs/contributors">Contributors</a> を見ると中心的な開発者であると思われます。そんな彼が開発した ixjava も安心できる品質ではないかと思います。（ちょっと ixjava の知名度が低いのが残念ですが。ただ reactive4java の <code>Interactive&lt;T&gt;</code> を使ってきましたが問題はありません。）</p>

<h2>使い方（Android の場合）</h2>

<h3>導入方法</h3>

<p>Module の <code>build.gradle</code> に以下を追加するだけです。</p>

<p>```java
dependencies {</p>

<pre><code>compile "com.github.akarnokd:ixjava:0.90.0"
</code></pre>

<p>}
```</p>

<h3>使用例</h3>

<ul>
<li><a href="http://qiita.com/amay077/items/9d2941283c4a5f61f302">LINQ to Objects と Java8-Stream API の対応表 &ndash; Qiita</a></li>
</ul>


<p>のサンプルコードの一部を IxJava で書いてみました。</p>

<h4>抽出(filter)、並べ替え(orderBy)、射影(map)</h4>

<p><code>java ixjava
Ix.from(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
  .filter(x -&gt; x % 2 == 0) // 可視性向上の為のなんちゃってラムダ
  .orderBy(x-&gt; -x)  // OrderByDescending がないので
  .map(x -&gt; x * 10)
  .toList();
</code></p>

<p><code>
//出力
80 60 40 20 0
</code></p>

<h4>平坦化して射影(flatMap)</h4>

<p><code>java ixjava
Ix.from(Arrays.asList(1, 2, 3, 4, 5))
  .flatMap(x −&gt; Ix.range(x * 10, x))
  .toList();
</code></p>

<p><code>
//出力
10
20 21
30 31 32
40 41 42 43
50 51 52 53 54
</code></p>

<h4>2つの値を揃えて流す(zip)</h4>

<p>Stream API には無いが IxJava にはあるのだよ。</p>

<p>```java ixjava
Ix.from(Arrays.asList(1, 2, 3, 4, 5))
  .zip(Ix.from(Arrays.asList(&ldquo;hoge&rdquo;, &ldquo;fuga&rdquo;, &ldquo;piyo&rdquo;)),</p>

<pre><code>(x, y) -&gt; new Pair&lt;Integer, String&gt;(x, y))
</code></pre>

<p>  .toList();
```</p>

<p><code>
//出力
{ first = 1, second = hoge }
{ first = 2, second = fuga }
{ first = 3, second = piyo }
</code></p>

<h4>Ix<T> のメソッド一覧</h4>

<p>あとはテキトーに抜き出したメソッド一覧を置いておきますね。
RxJava や LINQ とほとんど同じなのでだいたい想像付くと思います。
（何気に <code>toObservable</code> で <code>Observable&lt;T&gt;</code> にも変換できますね。）
あ、あとタイトルには Androidの〜 と書きましたが、普通の Java でもフツーに使えますので。</p>

<ul>
<li>aggregate</li>
<li>all</li>
<li>any</li>
<li>argAndMax</li>
<li>argAndMin</li>
<li>averageBigDecimal</li>
<li>averageBigInteger</li>
<li>averageDouble</li>
<li>averageFloat</li>
<li>averageInt</li>
<li>averageLong</li>
<li>buffer</li>
<li>call</li>
<li>concat</li>
<li>concatWith</li>
<li>concatWithAll</li>
<li>contains</li>
<li>count</li>
<li>countLong</li>
<li>defer</li>
<li>dematerialize</li>
<li>distinct</li>
<li>distinctNext</li>
<li>doOnCompleted</li>
<li>doOnNext</li>
<li>doWhile</li>
<li>empty</li>
<li>endWith</li>
<li>error</li>
<li>filter</li>
<li>filterIndexed</li>
<li>first</li>
<li>flatMap</li>
<li>forEach</li>
<li>from</li>
<li>fromPart</li>
<li>generate</li>
<li>groupBy</li>
<li>into</li>
<li>isEmpty</li>
<li>iterator</li>
<li>join</li>
<li>just</li>
<li>last</li>
<li>map</li>
<li>mapIndexed</li>
<li>materialize</li>
<li>max</li>
<li>maxBy</li>
<li>mayBy</li>
<li>memoize</li>
<li>memoizeAll</li>
<li>min</li>
<li>minBy</li>
<li>minxBy</li>
<li>newBuilder</li>
<li>ofType</li>
<li>orderBy</li>
<li>print</li>
<li>println</li>
<li>prune</li>
<li>publish</li>
<li>range</li>
<li>removeAll</li>
<li>repeat</li>
<li>replay</li>
<li>run</li>
<li>scan</li>
<li>share</li>
<li>skipLast</li>
<li>startWith</li>
<li>subsequent</li>
<li>sumBigDecimal</li>
<li>sumBigInteger</li>
<li>sumDouble</li>
<li>sumFloat</li>
<li>sumInt</li>
<li>sumIntAsDouble</li>
<li>sumLong</li>
<li>sumLongAsDouble</li>
<li>take</li>
<li>takeLast</li>
<li>toArray</li>
<li>toBuilder</li>
<li>toHashMap</li>
<li>toHashMultimap</li>
<li>toList</li>
<li>toMap</li>
<li>toMultimap</li>
<li>toObservable</li>
<li>zip</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hot Observable と ConnectableObservable について]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/17/about-hot-observable-and-connectableobservable/"/>
    <updated>2015-12-17T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/17/about-hot-observable-and-connectableobservable</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/rxjava">RxJava Advent Calendar 2015 17日目</a> の記事です。</p>

<p>空いてたので参加してみました。
普段は Xamarin(C#) + Reactive Extensions + ReactiveProperty で、Reactive + MVVM な Android/iOS両対応アプリを開発しています。</p>

<!--more-->


<h2>Cold vs Hot</h2>

<p>Cold Observable は「あなただけの」Stream、Hot は「みんなの」Stream 。
（私的にはニコ動かニコ生か、みたいに理解してますが、その話はいいや）</p>

<p>Cold は、あなたが subscribe した瞬間からデータが流れ始めます。
Hot は、あなたが subscribe してもデータは流れ始めません(流れるかも知れません？)。</p>

<p>では Hot Observable はいつからデータが流れ始める？Observable が生成された瞬間から？
その答え(の一つ)が <strong>ConnectableObservable</strong> 。</p>

<h2>ConnectableObservable のデータ放流の開始と停止</h2>

<p>Cold Observable を Hot化する publish メソッドの返り値は ConnectableObservable。
Hot は必ず ConnectableObservable。（←これ後で否定します）</p>

<p>ConnectableObservable には connect メソッドがあります。
Hot Observable のデータが流れ始めるのは、このメソッドを呼んだ瞬間から。
なので、どれだけ subscriber が居ようとも connect を呼ばなければデータは流れません。逆に subscriber が居なくても connect を呼べばデータが流れ始めます。</p>

<p>connect メソッドの返り値は Subscription です。
Subscription の unsubscribe メソッドを呼ぶと、データの放流が停止します。これも subscriber が居ようが居まいが停止します。
再度 connect すると、 <strong>最初から</strong> データが流れ出します。再開ではありません。</p>

<h2>実例</h2>

<h3>Cold Observable</h3>

<p>Observable.interval は、一定時間置きにインクリメントされた値を流す <strong>Cold</strong> Observable。
なので、複数の subscriber が居たら、各々に独立した値を流します。</p>

<p>Android の画面にボタンが２つ（buttonSubscribe1 と buttonSubscribe2）並んでるだけのサンプルです。</p>

<p>```java
final Observable<Long> tickObservable = Observable.interval(1000, TimeUnit.MILLISECONDS);</p>

<p>// 可視性向上の為のなんちゃってラムダ
findViewById(R.id.buttonSubscribe1).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonSubscribe1 click!");
tickObservable.subscribe(x -&gt; Log.d(TAG, "subscriber1 - onNext - " + x));
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonSubscribe2).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonSubscribe2 click!");
tickObservable.subscribe(x -&gt; Log.d(TAG, "subscriber2 - onNext - " + x));
</code></pre>

<p>});
```</p>

<blockquote><p>結果:<br/>
D/MainActivity: buttonSubscribe1 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 2<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 3<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 5<br/>
D/MainActivity: buttonSubscribe2 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 7<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 8<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 2<br/></p></blockquote>

<p>buttonSubscribe1 を押すとデータ(０から連番)が流れ始めます。
しばらくして buttonSubscribe2 を押すと、1 とは関係なく、また 0 から流れ始めます。</p>

<h3>Hot(Connectable) Observable</h3>

<p>publish で Hot 化します。
connect と unsubscribe を呼ぶためのボタン（buttonConnect, buttonDisConnect）を画面に追加してます。</p>

<p>```java
private Subscription _connection; // field です</p>

<p>final ConnectableObservable<Long> tickObservable =</p>

<pre><code>Observable.interval(1000, TimeUnit.MILLISECONDS).publish(); // publish で Hot化
</code></pre>

<p>findViewById(R.id.buttonSubscribe1).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonSubscribe1 click!");
tickObservable.subscribe(x -&gt; Log.d(TAG, "subscriber1 - onNext - " + x));
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonSubscribe2).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonSubscribe2 click!");
tickObservable.subscribe(x -&gt; Log.d(TAG, "subscriber2 - onNext - " + x));
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonConnect).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonConnect click!");
_connection = tickObservable.connect(); // データ放流開始
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonDisConnect).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonDisConnect click!");
if (_connection != null) {
    _connection.unsubscribe(); // データ放流停止
    _connection = null;
}
</code></pre>

<p>});
```</p>

<blockquote><p>結果:<br/>
D/MainActivity: buttonSubscribe1 click!<br/>
D/MainActivity: buttonConnect click!      // ←数秒経過している<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 2<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 3<br/>
D/MainActivity: buttonSubscribe2 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 6<br/>
D/MainActivity: buttonDisConnect click!<br/>
-これ以降 onNext は出力されない-<br/></p></blockquote>

<p>buttonSubscribe1 を押しても、まだデータは流れてきません。
数秒後、buttonConnect を押すとデータが流れ始めます。
buttonSubscribe2 を押すと、subscriber2 が増えますが、Hot(みんなの)Observable なので、流れてくる値とタイミングは subscriber1 と全く同じです。</p>

<p>buttonDisConnect を押すと、データの放流が停止されます。(ちなみにもう一度 CONNECT すると、また 0 から値が流れます)
subscriber1, subscriber2 にはもう onNext は呼ばれません。</p>

<p>※サンプルでは onNext しか受信していませんが、 buttonDisConnect を押しても、 subscriber1, subscriber2 の onComplete や onError も呼ばれません。つまり、 <strong>「データの放流が停止されても、 subscriber はそれに気付けない」</strong> ということになります。これはこれでいいんだろか、という感じです。</p>

<h2>ConnectableObservable.refCount について</h2>

<blockquote><p>Hot は必ず ConnectableObservable。（←これ後で否定します）</p></blockquote>

<p>否定始めます。</p>

<p>ConnectableObservable では、データ放流の開始と停止は、 connect と unsubscribe に委ねられていました。</p>

<p>refCount() を使うとそれを自動化できます。(refCount？参照カウントを返すメソッド？そう思っていましたが全然違いました。)
どういうことかと言うと、最初の subscriber が現れたらデータ放流を開始し、誰も subscriber が居なくなったら放流を停止する、というものです。
refCount() の返値はただの Observable です、でも Hot です。はい否定しましたー。</p>

<h3>実例</h3>

<p>publish した Hot Observable を refCount してデータ放流を自動制御してもらいます。
画面には、 buttonConnect, buttonDisConnect に代わり、buttonUnsubscribe1, buttonUnsubscribe2 を用意します。</p>

<p>```java
private Subscription <em>subscription1; // field です
private Subscription </em>subscription2; // field です
private Subscription _connection;    // field です</p>

<p>final Observable<Long> tickObservable =</p>

<pre><code>Observable.interval(1000, TimeUnit.MILLISECONDS).publish().refCount(); // 返値は Connectable ではない
</code></pre>

<p>findViewById(R.id.buttonSubscribe1).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonSubscribe1 click!");
_subscription1 = tickObservable.subscribe(x -&gt; Log.d(TAG, "subscriber1 - onNext - " + x));
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonSubscribe2).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonSubscribe2 click!");
_subscription2 = tickObservable.subscribe(x -&gt; Log.d(TAG, "subscriber2 - onNext - " + x));
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonUnsubscribe1).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonUnsubscribe1 click!");
if (_subscription1 != null) {
    _subscription1.unsubscribe(); // 1購読終了
    _subscription1 = null;
}
</code></pre>

<p>});</p>

<p>findViewById(R.id.buttonUnsubscribe2).setOnClickListener(v &ndash;> {</p>

<pre><code>Log.d(TAG, "buttonUnsubscribe2 click!");
if (_subscription2 != null) {
    _subscription2.unsubscribe(); // 2購読終了
    _subscription2 = null;
}
</code></pre>

<p>});
```</p>

<blockquote><p>結果:<br/>
D/MainActivity: buttonSubscribe1 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 0<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 1<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 2<br/>
D/MainActivity: buttonSubscribe2 click!<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 3<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 3<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 4<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 5<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 6<br/>
D/MainActivity: subscriber1 &ndash; onNext &ndash; 7<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 7<br/>
D/MainActivity: buttonUnsubscribe1 click!<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 8<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 9<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 10<br/>
D/MainActivity: subscriber2 &ndash; onNext &ndash; 11<br/>
D/MainActivity: buttonUnsubscribe2 click!<br/>
-これ以降 onNext は出力されない-<br/></p></blockquote>

<p>buttonSubscribe1 を押すと、その時点でデータが流れ始めます(refCount による自動制御)。
buttonSubscribe2 を押すと、subscriber1 と同じタイミングで、同じ値を受信できます(Hot だから)。
buttonUnsubscribe1 を押すと、 subscriber1 は購読をやめますが、subscriber2 はまだ受信しています。
buttonUnsubscribe2 を押すと、subscriber2 も購読をやめ、この時点でデータ放流が停止します(refCount による自動制御)。</p>

<p>※ほんとにデータ放流終わってんの？を確認するには、 tickObservable に doOnNext を繋げて確認するとよいと思います。</p>

<h2>まとめ</h2>

<p>Hot Observable は、ほとんどの場合(publish により生成されるので) ConnectableObservable。
ConnectableObservable は、購読者の有無に関係なく connect でデータ放流開始、Subscription.unsubscribe でデータ放流停止。
refCount により購読者の有無に連動したデータ放流の自動制御が可能。この場合 Hot だけど普通の Observable型。</p>

<p>実際に Hot Observable を使う場合は、refCount() しとくのが無難かなー、と思いました。(購読者の unsubscribe を厳密に管理しておけば、という前提で)</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.introtorx.com/content/v1.0.10621.0/14_HotAndColdObservables.html">Intro to Rx &ndash; Hot and Cold observables</a></li>
<li><a href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators">Connectable Observable Operators · ReactiveX/RxJava Wiki</a></li>
<li><a href="http://qiita.com/advent-calendar/2015/rxjava">RxJava Advent Calendar 2015 を書かれた皆さん</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
