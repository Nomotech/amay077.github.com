<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xamarin | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/xamarin/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-04-06T23:28:53+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収された結果]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/"/>
    <updated>2016-04-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/amay077/items/4aa25db9509216cf5bf0">Xamarin が Microsoft に買収されたので、今後を勝手に予想</a> の答え合わせなんですが…</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/xamarin-for-all/">Xamarin for Everyone | Xamarin Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/ms-xamarin">【速報】Xamarin のこれからについて！ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p><strong>Xamarin は無料ですべての Visual Studio に同梱されることになりました！</strong></p>

<p><strong>Mac では Xamarin Studio が無料で使えるようになりました！！</strong> <a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#%E8%BF%BD%E8%A8%98-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0">※注</a></p>

<p>というか、 <strong>Xamarin のコアライブラリがオープンソースになりました！！！</strong></p>

<p>今日も仕事が手につきませんね！</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎◎◎</h2>

<p>期待以上でしたね。
プロダクトとしては無償になります。
すべての機能が制約なしに使えます。
ソースコードが MIT Lisence なオープンソースになります。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → ◎</h2>

<blockquote><p>OSS として公開、のような可能性があるなら嬉しいかも。</p></blockquote>

<p>これ当たりましたね。Xamarin.Mac の人もこれで一安心。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎◎◎</h2>

<p>これも上2つど同様にオープンソースに。
正直しばらくはプロプラエタリでいくかなーと思ってたので、完全に期待以上でした。
UIデザイナーは・・・Evolve？</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ◎</h2>

<p>これも無償化。ここのソースコードはOSSなのかな？ → OSSにはならないようです（もちろん元々OSSであるMonoDevelop以外のXamarin固有のプラグインのこと） &ndash; <a href="https://www.xamarin.com/faq#xpq7">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a>
とりあえずMacでの開発者には嬉しい。</p>

<p>そして、ありがとう、<a href="https://www.xamarin.com/faq#xpq6">さよなら Xamarin Studio for Windows</a></p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ？</h2>

<p>まあ、消える流れですよね。。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎◎</h2>

<p>Visual Studio Team Services に同梱されるとのことです。
<a href="https://www.visualstudio.com/ja-jp/products/visual-studio-team-services-pricing-vs.aspx">その価格</a> を見ると、今までよりグッと使いやすくなりました。</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → ◎◎</h2>

<blockquote><p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。</p></blockquote>

<p>これハズレましたね。</p>

<p><a href="http://hockeyapp.net/features/">HockeyApp</a> というサービスに統合されるとのことです。</p>

<p>HockeyApp って知らなかったのですが、ログ収集・解析の他に、DeployGate のような配布機能も持っているみたいですね。これは嬉しい。</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ？</h2>

<p>Build2016 では予想通り全く触れられませんでした。さて未来は？</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → ？</h3>

<p>Build2016 では Windows上で動く iOS Simulator のデモを行っていました。</p>

<p>Miguel de Icaza曰く</p>

<blockquote><p>&ldquo;Have touch and no need to turn to your Mac&rdquo;</p></blockquote>

<p>だそうですよ。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ？</h3>

<p>これは特に情報ありませんでした。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ？</h3>

<p>Windows の Android エミュレータ上でアプリが動いているところで、コードを変更すると、 <strong>即座にアプリに変更が適用される</strong> という謎のデモを行っていました。</p>

<p>Xamarin（もとい Microsoft ）の中の人曰く、</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これだよこれがインスタントプログラミングだよ!</p>&mdash; Atsushi Eno (@atsushieno) <a href="https://twitter.com/atsushieno/status/715566438203809792">2016年3月31日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです。（Android Studio さん聴いてる？）</p>

<p>Keynote Day 2 の動画あったのでデモ見られます→ <a href="https://www.youtube.com/watch?v=WC7ijoFzjEg&amp;feature=youtu.be&amp;t=16m">Microsoft Build 2016 | Keynote Day 2 (HD) &ndash; YouTube</a> （このデモの後ほどなくして &ldquo;making Xamarin available at no extra charge.&rdquo; →大歓声、ですね）</p>

<h1>まとめ</h1>

<p>ということで、総じて言えば、皆さんの期待にすべて応える感じで、Xamarin のパワーを活かして開発者を増やしていきたいという意思が表れていましたね。</p>

<p>本当に想像以上でした。
Indie ライセンス買ったばかりだけど、そのお金返せとは言いません、ありがとう Xamarin！！</p>

<h2>【追記】 to 企業の人、無料になると言ったな、あれは Visual Studio Pro 以上を持ってる人のみだ</h2>

<p>Mac しか使ってない企業が自社のアプリを Xamarin を使って開発・配布する場合、 Xamarin Studio を使うことになります。</p>

<p><a href="https://store.xamarin.com/">Store &ndash; Xamarin</a> の Xamarin Studio にある Small teams をクリックすると <a href="https://www.visualstudio.com/support/legal/mt171547">MICROSOFT VISUAL STUDIO COMMUNITY 2015</a> が表示され、以下のような記述があります。</p>

<blockquote><ol>
<li><p>インストールおよび使用に関する権利。</p></li>
<li><p>組織ライセンス。お客様が組織である場合、お客様のユーザーは以下の条件で本ソフトウェアを使用することができます。</p></li>
<li><p>お客様がエンタープライズである場合、お客様の従業員および契約社員は本ソフトウェアを使用して、お客様のアプリケーションを開発またはテストすることはできません。ただし、上記で許可されているオープンソースおよび教育目的の場合を除きます。「エンタープライズ」とは、合計で (a) 250 台を超えるコンピューターがある、もしくは 250 人を超えるユーザーがいる、 または (b) 年間収益が 100 万米ドル (もしくは他の通貨での相当額) を超える、組織およびその関連会社のことです。「関連会社」とは、組織を (過半数所有により) 支配している法人、組織が支配している法人、または組織と共通の支配下にある法人を意味します。</p></li>
</ol>
</blockquote>

<p><del>組織（企業）での利用で、250人を超えるユーザー(=配布スマホ台数ということになるでしょう)が居る場合は、使用できない、と読み取れます。</del>
<a href="http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#comment-2297416c6d83b3593425">コメント</a>で教えていただきました。日本語の <a href="https://www.microsoft.com/ja-jp/dev/products/community.aspx">Visual Studio Community のページ</a> には、ユーザー数に関する記述はないので、この点（配布スマホ台数）に関しては気にしなくてもよさそうです。</p>

<p>また、 Xamarin の FAQ &ndash; <a href="https://www.xamarin.com/faq#xpq8">How do I share code across platforms with Xamarin? and other FAQs &ndash; Xamarin</a> には、以下の記述があります。</p>

<blockquote><p>Xamarin Studio will follow the Visual Studio pricing rules. There is Xamarin Studio Community Edition available for download on the Mac. You’ll need to be a Visual Studio Enterprise subscriber to unlock Visual Studio Enterprise features in Xamarin Studio.</p></blockquote>

<p>Xamarin Studio は、Visual Studio の価格体系に従う、とのことなので、ライセンス条項も同じだと解釈すれば、 Visual Studio Profesional 以上のライセンスがあれば、 Mac + Xamarin Studio で企業のアプリを開発・配布して問題ないと言えます。
Macオンリー企業には、ツールとしてでなくライセンスとしての Visual Studio Pro 以上が必要ということなるのでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin が Microsoft に買収されたので、今後を勝手に予想]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft/"/>
    <updated>2016-02-26T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft</id>
    <content type="html"><![CDATA[<p>いやー起きたら驚きました。いつも午前中は仕事があまり捗らないのですが(ぉぃ、今日はさらに手につきませんでした。</p>

<!--more-->


<ul>
<li><a href="https://blog.xamarin.com/a-xamarin-microsoft-future/">A Xamarin + Microsoft Future | Xamarin Blog</a></li>
<li><a href="http://blogs.microsoft.com/blog/2016/02/24/microsoft-to-acquire-xamarin-and-empower-more-developers-to-build-apps-on-any-device/">Microsoft to acquire Xamarin and empower more developers to build apps on any device &ndash; The Official Microsoft Blog</a></li>
<li><a href="http://ytabuchi.hatenablog.com/entry/2016/02/25/084553">【速報】Xamarin が Microsoft に買収されました &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>続報は、 <a href="http://build.microsoft.com/">3/30-4/1 の Build 2016</a> と <a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> を待てとのことですが、企業としての Xamarin は、様々な製品やツールを展開していますので、MS買収によって、それらが今後どうなるのか、勝手に予想してみます。（個人の主観と希望を多分に含みます。 ○とか△は、今後の継続性(MSから見たら買収効果)を示してます）</p>

<h2><a href="https://xamarin.com/platform">Xamarin.Android, Xamarin.iOS</a> → ◎</h2>

<p>　Android SDK や iOS SDK(CocoaTouch) を C# から呼び出す、現在主力のプロダクト。
　
　Microsoft とのパートナーシップにより、すでに Visual Studio に半ば組み込まれていますが、それがさらに推し進められて、完全統合（追加インストールなし）されると思われます。</p>

<p>　完全統合されたからと言って、 iOSアプリをデバッグ、デプロイするには Mac が必要なわけで、厳密には「Visual Studio だけで開発できる」ことにはならないと思います。</p>

<p>　Xamarin という「ブランド」は、いつか表示されなくなってしまうのかも知れません。。。</p>

<h2><a href="https://xamarin.com/platform#desktop">Xamarin.Mac</a> → △</h2>

<p>　C# で Mac のデスクトップアプリが開発できるというプロダクト。
　現在も、お世辞にも「存在感がある」とは言えないプロダクトで、買収によって今後が不安なもののひとつ。</p>

<p>　Microsoft も、ここに投資するメリットはあまり感じてないのではないでしょうか？
　OSS として公開、のような可能性があるなら嬉しいかも。</p>

<h2><a href="https://xamarin.com/forms">Xamarin.Forms</a> → ◎</h2>

<p>　Xamarin.Android/iOS とは異なり、「単一のコードで複数のプラットフォーム向けのアプリを開発できる」プロダクト。</p>

<p>　画面は XAML(と言っても WPF とは異なる)で記述し、Android/iOS/Windows(UWP) の <code>Activity/ViewController/Window</code> は、<code>Page</code> というクラスに抽象化されます。</p>

<p>　登場以来 Xamarin が最も注力してきたプロダクトで、Microsoft のマルチデバイス戦略にもフィットします(説明しやすいし、デモ受けもしやすいしね)。</p>

<p>　長らくUIエディタがない状態が続いていますが、買収によりいよいよ？ <a href="https://build.microsoft.com/">Build 2016</a> と <a href="https://evolve.xamarin.com/">Evolve 2016</a> が楽しみです。</p>

<h2><a href="https://xamarin.com/studio">Xamarin Studio</a> → ○</h2>

<p>　<a href="http://www.monodevelop.com/">MonoDevelop</a> という OSS の統合開発環境に Xamarin プロダクト向けの Addin を加えたもの。</p>

<p>　Windows では、あえてこれを使用する必要は無いに等しいですが、Mac では、重要なIDEになります。
　実際、 「Android と iOS アプリだけ」を開発する場合は、Mac の方が何かと都合が良いわけで、 <strong>Mac + Xamarin Studio がベストチョイス</strong> なわけです。</p>

<p>　<a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">Roslyn 対応</a> も進んでいるし、ほとんどは OSS だし、非Windows開発者向けのIDEを引っ込めるメリットは Microsoft にはないでしょう。（Windows版の Xamarin Studio は微妙かも）</p>

<p>　(遠い)将来的には、<a href="https://www.visualstudio.com/ja-jp/products/code-vs.aspx">Visual Studio Code</a>からの流れで、 Visual Studio のようなものが Mac に登場すると良いなあ、と思います。</p>

<h2><a href="https://components.xamarin.com/">Xamarin Components</a> → ×</h2>

<p>　Xamarin で使えるライブラリを有償/無償で公開できるストアなんですが、Xamarin が <a href="http://www.atmarkit.co.jp/fdotnet/chushin/nuget_01/nuget_01_01.html">nuget</a> に対応して以来、徐々に影が薄くなり、同じライブラリでも nuget の方が新しい、なんてこともザラになってきました。</p>

<p>　「ライブラリを販売できる」というエコシステムも機能している感じがしないので、徐々になくなっていくのではないでしょうか（誰か困る人いるんだろうか？）。</p>

<h2><a href="https://xamarin.com/test-cloud">Xamarin Test cloud</a> → ◎</h2>

<p>　クラウド上に実際のAndroid/iOSデバイスが用意されており、それを使用してテストが行える「デバイスファーム」としてのサービス、それから、<a href="https://developer.xamarin.com/guides/testcloud/calabash/introduction-to-calabash/">Carabash</a> という自動テスティングフレームワークを指します。</p>

<p>　元々は <a href="http://techcrunch.com/2013/04/16/xamarin-launches-test-cloud-automated-mobile-ui-testing-platform-acquires-mobile-test-company-lesspainful/">LessPainful という企業が提供していたサービスを Xamarin が買収した</a> したものです。</p>

<p>　<a href="https://aws.amazon.com/jp/device-farm/">Amazon</a> や <a href="https://developers.google.com/cloud-test-lab/">Google</a> もデバイスファームをサービスしているのに対し、 Azure はまだないようなので、これは Microsoft にとってメリット大だと思います。</p>

<p>　お値段高めで知られる同サービスなので、今後の値付けが気になります。
　</p>

<h2><a href="https://xamarin.com/insights">Xamarin Insights</a> → △</h2>

<p>　<a href="https://try.crashlytics.com/">Crashlytics</a> のようなクラッシュログ収集・解析サービスです。
　なんだか、 Microsoft には <a href="https://azure.microsoft.com/ja-jp/services/application-insights/">Visual Studio Application Insights</a> というサービスがプレビュー版で出ているようで、丸かぶりですね。</p>

<p>　独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。（実戦投入してるので、ちょっとどうしようかな…）</p>

<h2><a href="https://robovm.com/">RoboVM</a> → ×</h2>

<p>　Java で iOS アプリが開発できる(CocoaTouch がよびだせる)という、まるで Xamarin のような製品だなあと思っていたら、実際に <a href="https://xamarin.com/pr/xamarin-acquires-robovm">Xamarin が買収してしまった</a> プロダクト。</p>

<p>　買収以来特に動きもなく Xamarin の製品ラインナップに載ることもなく「？」な状態が続いていました。</p>

<p>　そんな感じで、さらに Microsoft が Java を推すか？…可能性は低いと思います。</p>

<h2>その他</h2>

<h3><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/">Xamarin Android Player(Preview)</a> → △</h3>

<p>　Xamarin 社が提供する高速Androidエミュレータ。</p>

<p>　Microsoft は <a href="https://www.visualstudio.com/ja-jp/features/msft-android-emulator-vs.aspx">Visual Studio Emulator for Android</a> を持っていますからこれも丸かぶり。しかも VSエミュの方が多機能じゃないかな。</p>

<p> 　唯一、Mac向けには残すかも知れませんね。</p>

<h3><a href="https://xamarin.com/profiler">Xamarin Profiler(Preview)</a> → ○</h3>

<p>　Xcode の Instruments みたいなのを作っちゃいました、というもの(今は Androidアプリのみ対応)。</p>

<p>　既に Visual Studio とも連携してるみたいだし、これは継続進化でしょう。</p>

<h3><a href="https://developer.xamarin.com/guides/cross-platform/inspector/">Xamarin Inspector(Early Preview)</a> → ○</h3>

<p>　Android SDK の <a href="http://developer.android.com/intl/ja/tools/testing-support-library/index.html">Testing Support Library</a> に含まれる <a href="https://www.youtube.com/watch?v=uA54T6R8nhs">UIAutomator Viewer</a> のようなもの。これも Visual Studio の機能とは競合しないと思うので、継続されるでしょう。</p>

<h2>価格</h2>

<p>　みなさんが一番期待しているのは価格でしょう。今は BUSINESS EDITION(Android/iOS) で<a href="https://store.xamarin.com/">年間20万円超</a>（個人向けなら月約5000円から）。</p>

<p>　Microsoft もここの売上をアテにしてるとは到底思えないので、恐らく何らかの改善があるのではないかと思います。
　無難なところでは 「MSDN Subscription に含まれる」でしょうか。</p>

<p>　完全無料化されて、 Visual Studio Community でも使用可能、になるととても嬉しいですね。</p>

<h1>まとめ</h1>

<p>　2年前の投稿、<a href="http://qiita.com/amay077/items/2e86b44e5f274a34b2e9">マカーの人が Xamarin について勘違いしていそうな５つのこと</a> で、以下のように書きました。</p>

<blockquote><p>私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。(中略) Evolve2014 には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。</p></blockquote>

<p>　「中立な立場の方が良いのでは？」という個人の意見は変わっていません、今度の Evolve にも <a href="https://blog.xamarin.com/join-apple-co-founder-steve-wozniak-at-xamarin-evolve-2016/">Apple の Steve Wozniak が参加する</a> と話題になっているのですが、さすが Microsoft のイベントには来られないよなー、と思います。</p>

<p>　とはいえ、「いずれ・・・」と思っていたのも事実で、「ついにXデーが来たかー」、という感想です。
　マイクロソフトももはやガチガチのプロプライエタリというよりはかなりオープンな企業になっていますし、それには Xamarin（というか Mono）の活動も少なからず影響を与えていたと思います（<a href="https://msdn.microsoft.com/ja-jp/library/dn878908(v=vs.110">.NETがオープンソース化される</a>.aspx)とは、数年前誰が予想していたでしょうか）。
　上でまとめて来たように、マイクロソフトにとってメリットの多い買収なので、少なくとも飼い殺しのような事にはならないでしょう。</p>

<p>　個人的にも、「Xamarin が加わった新しい Microsoft」に期待して、Xamarin.Android を始めとした Xamarin 製品群を使い続けますし、Qiita を始め Tips の投稿もしていくつもりです。
　
(おまけ)</p>

<p>今回の買収劇のオチは、</p>

<p><strong>「MSを助ける製品の販売代理店として頑張って活動していたら、その製品がMSに買収されてなくなっちゃった」</strong></p>

<p>という<a href="https://twitter.com/ytabuchi/status/702634391957217280">某さん</a>でしょうかw
　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidKaigi2016アプリを Xamarin.Android に移植した話]]></title>
    <link href="http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/"/>
    <updated>2016-02-24T00:19:01+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android</id>
    <content type="html"><![CDATA[<p>　DroidKaigi2016 の開催前、<a href="https://github.com/konifar/droidkaigi2016">公式アプリが有志によって開発中</a> とのツイート(だったかな？)を見て、ふとこれを「Xamarin.Android に移植してみよう」と思い、夜な夜なぼちぼちと始めました。</p>

<!--more-->


<p>　後付けですが、移植するにあたり調査したかったのは主に、</p>

<ul>
<li>Android-Java の OSSライブラリがどのくらい Xamarin.Android でも利用可能か？</li>
<li>(勉強をサボっていた)Xamarin.Android での Material Design の適用方法</li>
</ul>


<p>です。</p>

<h2>Xamarin.Android について(知らない人向け)</h2>

<p>　Xamarin.Android は、Android API(Javaクラスライブラリを含む)の薄いラッパーで、クラス・メソッド名などは殆どそのままに、言語が Java から C# になったようなものです。
　なので、 <code>activity_main.xml</code> などのリソースファイルもほぼそのまま転用可能です。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/3232064cc8880c809aee">Xamarin.Android で作った HelloWorld のソースを眺めてみる</a></li>
</ul>


<p>　尚、 Xamarin.Forms というワンソースで複数プラットフォームで動作するアプリを開発できるフレームワークとは別のものです。</p>

<h2>Android プロジェクトの Xamarin.Android への移植方法</h2>

<p>すごく大雑把に、以下のような手順で移植します。</p>

<ol>
<li>Androidプロジェクト(以下 Java と表記)の <code>/res</code> 以下を Xamarin.Androidプロジェクト(以下 Xamarin)配下にコピー</li>
<li>Java のソースコード群を、 package構成を崩さずに Xamarin.Android で再構成（結局のところコードの書き直し）</li>
<li>Java側で使われているOSSライブラリと同等のものを、nuget・Xamarin Components で探してXamarin側に追加（なければ <code>.jar</code> ファイルを入手して Xamarin で使えるように Binding Library を作成）</li>
<li>あとはひたすら try and error and error and error&hellip;</li>
</ol>


<h2>Android Data Binding を、Xamarin ではどうしたか？</h2>

<p>　DroidKaigi2016 のアプリには <a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">DataBinding</a> が使われています。ただ、 <code>BaseObservable</code> や <code>ObservalbeField</code> によるガッツリとした OneWay/TwoWay のデータバインディングではなく、POJOなデータクラスを使う <a href="https://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingmode(v=vs.110">OneTime</a>.aspx) なものしかなかったので、Xamarin への移植に際しては <a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> や、 <a href="https://github.com/MvvmCross/MvvmCross">MVVMCross</a> などのデータバインディング機能に頼る必要はありませんでした。</p>

<p>　一方、Android Data Binding のもう一つの(副次的な)機能である View binding(<code>findViewById</code> が要らなくなるアレ)の対応は大変でした。</p>

<p>　まず、<code>activity_main.xml</code> などのデータバインド範囲を括る <code>&lt;layout&gt;&lt;/layout&gt;</code> ですが、このタグは Xamarin Studio は解釈してくれないのでエラーになります。このタグはもれなくコメントアウトが必要でした。また、カスタムデータバインディングが使われている箇所も同じくです。
　なので当然、Android Studio(gradle)が生成する <code>DataBinding</code> クラスも使用できません。
　仕方ない(というか始めからわかっていましたが) <code>ActivityMainBinding</code> などに相当するクラスを必要を満たす範囲で自作しました。レガシーな <code>FindViewByID()</code> を使って。</p>

<p>　Windowsアプリ開発の世界では、「DSL で記述された画面レイアウトからUI要素変数を自動生成する」ことは、IDE である Visual Sutdio が普通に行ってくれます。Xamarinアプリ開発のIDEである Xamarin Studio も、iOS の <code>.storyboard</code> ファイルを読んで、自動的に <code>HogeViewController.designer.cs</code> にUI要素変数を生成してくれます。
　Xamarin.Android でも <code>MainActivity.designer.cs</code> とか生成してくれてもいいのになー、とは頭の片隅で思い続けています。(自作Plug-inとかでなんとかできるのかな？)</p>

<h2>DroidKaigi2016 で使われているJavaライブラリを、Xamarinではどうしたか？</h2>

<p>　DroidKaigi2016アプリでは非常にたくさんのOSSライブラリが<a href="https://github.com/konifar/droidkaigi2016#libraries">使用されており</a>、それを眺めるだけでも非常に勉強になります。このソースを読んで初めて知ったものが何個もありました。
　アプリを Xamarin.Android へ移植するにあたり、これらにどのように対応したかを記します。</p>

<h3>Android Support Libraries</h3>

<p> これらは、nuget パッケージが用意されています。要注意なのは、Xamarin Component にも<a href="https://components.xamarin.com/view/xamandroidsupportdesign">同じものが存在</a>していて、大抵はそちらの方が古くて動かない、ということです。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.CustomTabs/">Xamarin.Android.Support.CustomTabs</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.Design/">Xamarin.Android.Support.Design</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v4/">Xamarin.Android.Support.v4</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/">Xamarin.Android.Support.v7.AppCompat</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.CardView/">Xamarin.Android.Support.v7.CardView</a></li>
<li><a href="https://www.nuget.org/packages/Xamarin.Android.Support.v7.RecyclerView/">Xamarin.Android.Support.v7.RecyclerView</a></li>
</ul>


<h3><a href="http://google.github.io/dagger/">Dagger2</a></h3>

<p>　Dependency Injection を Annotation ベースで行うライブラリ。
　これはないかなーと思いましたがありました。Dagger(短剣) に対して、その名も Stiletto(短剣)ｗ</p>

<ul>
<li><a href="http://stiletto.bendb.com/">Stiletto</a> &ndash; Stiletto is a .NET port of Dagger, the lightweight Android dependency injector from Square.</li>
</ul>


<p>　使い方も殆ど一緒。どうも Dagger1 相当の機能のようですが、アプリ側は少しの修正で対応できました。
　もっとも Dagger すら使ったことがなかったので、その理解に少々時間を要しました。
　Stiletto は、Xamarin.iOS でも使えるようですが、残念ながら PCL対応していなさそう。PCL対応のプルリクを送るのは今後やってみたいことの一つです。</p>

<h3><a href="http://square.github.io/retrofit/">Retrofit2</a></h3>

<p>　RESTful API のクライアントをサクッと作れるライブラリ。これも Xamarin 用に移植してくれてる方がいます。</p>

<ul>
<li><a href="http://paulcbetts.github.io/refit/">Refit by paulcbetts</a> &ndash; Refit is a library heavily inspired by Square&rsquo;s Retrofit library</li>
</ul>


<p>　こちらも、 Xamarin.iOS でも利用可能、PCL対応済み、カンペキです。</p>

<h3><a href="http://square.github.io/picasso/">Picasso</a></h3>

<p>　多機能且つ使いやすい Image Loader の Picasso。これは Xamarin の人が nuget パッケージを用意してくれています。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Square.Picasso">Square.Picasso</a></li>
</ul>


<p>Picasso が依存している <code>Square.OkHttp</code>, <code>Square.OkIO</code> も nuget パッケージが用意されていて、一緒に追加されます。</p>

<h3><a href="https://github.com/gfx/Android-Orma">Android-Orma</a></h3>

<p>　DroidKaigi当日には、作者 @gfx さんによる即席ランチセッションも聴けたORMライブラリ。若いライブラリなのでさすがに Xamarin版はありません。
　Xamarin.Android での ORMライブラリといえば <a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/part_3_using_sqlite_orm/">SQLite.NET</a> が有名ですが、使い方が面倒そうだったのと、このアプリのデータ構造と量で、リレーショナルDB使うこともないだろうと、 Key-Value Store である Akavache を使いました。これは以前 Qiita に書いたのでそちらを。</p>

<ul>
<li><a href="http://qiita.com/amay077/items/356ad0028b7e6fbf089f">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する</a></li>
</ul>


<p>　とはいえ、移植の際には、かなり強引な実装をしてしまいました。パフォーマンス悪いのは私の実装が原因です。</p>

<h3><a href="https://github.com/ReactiveX/RxJava">RxJava</a></h3>

<p>　これはもう説明不要でしょう。本家 Rx.NET を使用します。</p>

<ul>
<li><a href="https://github.com/Reactive-Extensions/Rx.NET">Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET</a></li>
</ul>


<h3><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></h3>

<p>　これを使う最大の理由である <code>AndroidSchedulers.mainThread()</code> は、 Rx.NET では、 <code>observable.ObserveOn(SynchronizationContext.Current)</code> で代用できるので、不要でした。</p>

<h3><a href="https://github.com/JakeWharton/ThreeTenABP">ThreeTenABP</a></h3>

<p>　これも .NET の日付時刻系クラス(<code>DateTime</code>, <code>DateTimeOffset</code>, <code>TimeSpan</code>) で特に問題ありませんでした。しかし恥ずかしながらこのライブラリも知りませんで、Java では必須になりそうですね。</p>

<h3><a href="http://facebook.github.io/stetho/">Stetho</a></h3>

<p>　デバッグを強力に支援してくれるライブラリですね。これも知りませんでした。移植の時にはとりあえず関係なさそう、と思って代替品は探していません（汗</p>

<h3><a href="https://github.com/LyndonChin/AndroidFlowLayout">AndroidFlowLayout</a></h3>

<p>　View をいい感じに並べてくれるライブラリ。Xamarin.Android用の nuget パッケージがありました。</p>

<ul>
<li><a href="https://www.nuget.org/packages/AndroidFlowLayout/">AndroidFlowLayout &ndash; NuGet Gallery</a></li>
</ul>


<h3>Google Play services</h3>

<p>　Map とか、Analytics とか。こちらも nuget に一通りパッケージが揃っています。Xamarin Components より優先的に使いましょう。</p>

<ul>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Maps/">Xamarin Google Play Services &ndash; Maps &ndash; NuGet Gallery</a>　</li>
<li><a href="https://www.nuget.org/packages/Xamarin.GooglePlayServices.Analytics/">Xamarin Google Play Services &ndash; Analytics &ndash; Maps &ndash; NuGet Gallery</a>　</li>
</ul>


<h3><a href="https://github.com/jd-alexander/LikeButton">LikeButton</a></h3>

<p>　Facebook の いいね!、Twitter の Fav! のようなボタンを提供してくれるライブラリ。押した時のアニメーションがイイ感じです。
　これの Xamarin 版は探してもなかったので、 LikeButton の <code>.jar</code> ファイルを入手して、自前で Java Binding Library プロジェクトを作って使用しています。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin/tree/master/LikeButton">DroidKaigi2016Xamarin/LikeButton · amay077/DroidKaigi2016Xamarin</a></li>
</ul>


<p>　これを nuget に放流するのはやりたいことの2つ目。いくつかやったら <a href="https://resources.xamarin.com/open-source-contributor.html">Xamarin から subscription もらえる</a>だろうか。。。</p>

<h3><a href="https://github.com/johncarl81/parceler">parceler</a></h3>

<p>　Parcel のことが大嫌いじゃなくなるライブラリ。移植に際しては、ModelクラスはPOCO(POJOの.NET版と思ってください)にしたかったので直接の代替品は探しませんでした。
　ModelクラスのParcel化はなんと <a href="http://www.newtonsoft.com/json">JSON.NET</a> でJSONを介しちゃいました。悪手ですがパフォーマンスが気になる程でないならいいでしょ。</p>

<h3><a href="https://try.crashlytics.com/">Crashlytics</a></h3>

<p>　クラッシュレポート解析サービスですね。Xamarin なら <a href="https://xamarin.com/insights">Xamarin Insights</a> がビルトインで使えるので、通常はそうするでしょう。Crashlytics 自体の Xamarin.Android 用ライブラリは、今のところ<a href="https://twittercommunity.com/t/xamarin-and-fabric/37289/13">存在しないみたい</a>です。</p>

<h3><a href="https://github.com/opacapp/multiline-collapsingtoolbar">multiline-collapsingtoolbar</a></h3>

<p>　 Android Design Support Library の <code>CollapsingToolbarLayout</code> って、タイトルが複数行あると、展開しても表示されない(!)んですね。なんじゃそら！ってのを解決してくれるライブラリです。
　 Xamarin.Android向けのは探したけど見つかりませんでした。移植に際してクリティカルじゃなかったので、複数行にならない <code>CollapsingToolbarLayout</code> のままです。これも nuget パッケージ化したら需要あるかも。</p>

<h3><a href="https://github.com/ozodrukh/CircularReveal">CircularReveal</a></h3>

<p>　Lollipop で追加された CircularReveal アニメーションを、それ以前のOSでも行えるライブラリです。
　これもクリティカルでないので、Xamarin版には移植していません。</p>

<h2>まとめ</h2>

<p>　DroidKaigi2016 の公式アプリは、ホストの @konifar さんはじめ、 <a href="https://github.com/konifar/droidkaigi2016/graphs/contributors">35名</a> の精鋭有志の皆さんによる爆速開発で、 2/13 に v1.00 がリリース、イベント当日もアップデートされ、私も便利に利用させていただきました。
　
　一方、私の Xamarin.Android への移植は今やっと &ldquo;とりあえず&rdquo; 終わったばかり。
　しかも、移植の元にしたのが 2/10 付けのソースですが、その日から現在に至るまで本家にマージされた <strong>Pull Request の数は 200超！</strong> 。
　「これが若さか…。」これらの Xamarin版への移植はおじさんにはとても行う気が起きません。DroidKaigi2016公式アプリの Contributors の皆さんを尊敬します。
　
　が、ひとまず動くようになったので、ソースを公開します。モダンな Androidアプリを Xamarin.Android で実現する例としては有用だと思います。</p>

<ul>
<li><a href="https://github.com/amay077/DroidKaigi2016Xamarin">amay077/DroidKaigi2016Xamarin: DroidKaigi2016 アプリをこっそりXamarinに移植</a></li>
</ul>


<p>（できればこれを、 プラットフォーム非互換にできる箇所はPCLへ移動、各画面にViewModelを置いてMVVM化、Xamarin.iOS対応、Xamarin.Forms対応とか、いろいろと育てていきたいと思っているのですが、DroidKaigi参加直後で、あれもこれもやりたい病なので、実現は未定です。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava + MVVM パターンで作るストップウォッチアプリ]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/24/creating-stopwatchapp-using-rxjava-and-mvvm-patternn/"/>
    <updated>2015-12-24T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/24/creating-stopwatchapp-using-rxjava-and-mvvm-patternn</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/rxjava">RxJava Advent Calendar 2015 24日目</a> の記事です。</p>

<p>先日、</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/2015/12/20/012007">JXUGC #9 Xamarin.Forms Mvvm 実装方法 Teachathon を開催しました &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>というイベントがありまして、エクセルソフトの田淵さんが作成したストップウォッチのアプリケーション(注:田淵さんはプログラマではないｗ)を、MVVM識者の方々が「MVVMとしてはこうあるべきだ」と叩きまくる、という恐ろしい?ものでした。</p>

<!--more-->


<p>私はこの勉強会には参加できなかったのですが、ストリーミングとか見て、</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">僕もストップウォッチ作ってみるかー</p>&mdash; ジェットあめいカスタム (@amay077) <a href="https://twitter.com/amay077/status/677561989359472640">2015, 12月 17</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>などとつぶやいたらご指名されてしまいました(^^)
このイベントは Xamarin を使ったアプリ製作でしたが、せっかくなので <strong>RxJava + MVVM</strong> で作ってみました。
(ご指名に応えないといけないのでその後 Xamarin版も製作)</p>

<h1>ストップウォッチアプリの仕様</h1>

<p>上記リンクからの引用です。</p>

<ul>
<li>Start/Stop ボタン、Lap ボタン</li>
<li>StartするとラップボタンはEnable.ストップするとDisable

<ul>
<li>スタートしてからの経過時間をXX'XX.XXXみたいな感じで表示</li>
</ul>
</li>
<li>履歴をListViewで残す</li>
<li>ストップしたら結果をダイアログで出して分岐？</li>
<li>今までのラップよりMin, Maxなどをダイアログに表示して次のページに遷移 ←ここ勝手に Toast に仕様変更しましたｗ</li>
<li>スイッチの切り替えで、ミリ秒の桁を表示/非表示</li>
</ul>


<p>こんな機能を満たすサンプルを</p>

<ol>
<li>RxJava を使った Android アプリ(Java言語)</li>
<li>Reactive Extensions, ReactiveProperty を使った Android アプリ(Xamarin, C#言語)</li>
<li>Reactive Extensions, ReactiveProperty を使った iOS アプリ(Xamarin, C#言語)</li>
</ol>


<p>でそれぞれ作ってみました。</p>

<h1>とりあえず、作ったもの</h1>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_00.gif" alt="つくったもの" /></p>

<p>左は Android-Java製、右は Xamarin.iOS製です。(Xamarin.Android製は省略)</p>

<h1>1. RxJava を使った Android アプリ(Java言語)</h1>

<h2>Model-ViewModel-View(MVVM) で考える</h2>

<p>構成図っぽいものを描くとこんな感じになります。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_01.png" alt="クラス図的なの" /></p>

<h3>Model</h3>

<p>　この仕様だと、ストップウォッチの一通りの機能を満たすクラスが Model になります。これを <code>StopWatchModel</code> という名前にしました。</p>

<p>  <strong>「ロジック」は、すべてこの層（このクラス）に書きます。</strong>
　
　例えば、ストップウォッチのタイマーを実行するには、 RxJava で <code>Observable.interval</code> としますが、これを ViewModel層に書いたら「負け」です。
　
また、ストップウォッチの実行は、画面の表示/破棄と連動しなくてよい(画面遷移しても計測し続けるべき)なので、StopWatchModel の生存期間は、アプリケーションの起動時から終了まで、という事になります。</p>

<p>　RxJava を全面的に使いたいので、 StopWatchModel のプロパティは全て <code>Observable&lt;T&gt;</code> にしました。RxJava を使わなかったらプロパティではなくコールバックですね。
　何かメソッドを実行したら、その結果は全て <code>Observable&lt;T&gt;</code> を通じて通知される仕組みです。なので原則として Model のメソッドの戻り値は <code>void</code> です。</p>

<h3>ViewModel</h3>

<p>　しつこいようですが <strong>ここにロジックを書いたら負け</strong> です。
個人としては、条件分岐もしたくない、変数宣言もしたくない、くらいのつもりでいます。もし書いてしまったら「それはModelの方が適切ではないか？」を検討します。</p>

<p>　ViewModel の役割は、Model のプロパティ(コールバック)を、View用に変換して流すこと、Viewのための機能をコマンドとして公開することです。</p>

<p>　例えば、仕様の内、</p>

<blockquote><p>スイッチの切り替えで、ミリ秒の桁を表示/非表示</p></blockquote>

<p>　が、「View用に変換」の良い例になります。
　私の実装では、ミリ秒の桁を表示するか否かの bool 値を、format関数の書式文字列に変換しています。(View側で format して表示しています。)
　↓のような感じです。</p>

<p>```java
/<em>* 時間の表示フォーマット </em>/
public final Observable<String> timeFormat; // field</p>

<p>this.timeFormat = _stopWatch.isVisibleMillis.map(visible &ndash;></p>

<pre><code>visible ? "mm:ss.SSS" : "mm:ss");
</code></pre>

<p>```</p>

<p>RxJava で「変換」とくれば、 <code>map</code> など、 <code>Observable</code> の投影系のメソッドの出番となります。</p>

<p>ViewModel が公開するプロパティも、基本的には <code>Observable&lt;T&gt;</code> になりました。(これはこのアプリの仕様上、OneWayバインディング＜=Modelによるデータの変化をViewに表示する＞だけで済んだためです。TwoWayバインディング＜=Viewからのデータの入力を受け付ける＞が必要な場合は、<code>Subject</code>など、データをセットできる機能が必要になります。)</p>

<p>コマンドとは、Modelのメソッドを呼ぶためのものですが、それに加えて「そのコマンドが実行可能か？」を示すフラグも持ちます。さらにこのフラグも <code>Observable&lt;boolean&gt;</code> で表します。
こうする事で、「機能が利用可能な時のみボタンを Enable にする」のようなバインディングが可能になります。今回の仕様で言えば</p>

<blockquote><p>StartするとラップボタンはEnable.ストップするとDisable</p></blockquote>

<p>に該当します。</p>

<p>コマンドのインターフェースは↓のようになります。</p>

<p>```java
public interface Command {</p>

<pre><code>/** このコマンドが実行可能かを示すフラグの更新を通知するObservable */
Observable&lt;Boolean&gt; canExecuteObservable();

/** このコマンドの処理を実装する */
void execute();
</code></pre>

<p>}
```</p>

<p>今回は、このインターフェースを ViewModel で匿名クラスを作ることで実装しました。↓のような感じです。この <code>commandLap</code> をラップボタンとバインドさせます。</p>

<p>```java
/<em>* 経過時間の記録 </em>/
public final Command commandLap = new Command() {</p>

<pre><code>@Override
public Observable&lt;Boolean&gt; canExecuteObservable() {
    return _stopWatch.isRunning; // 実行中のみ記録可能
}

@Override
public void execute() {
    _stopWatch.lap();
}
</code></pre>

<p>};
```</p>

<p>あ、ViewModel は View とは疎結合に作ります。Viewを参照してはいけないのはもちろん、<code>TextView</code> や <code>Activity</code> などが import されていたら「負け」です。</p>

<p>他には、Viewの状態を保持する役割も担いますが、本アプリの仕様では、それに該当する処理はありませんでした。</p>

<h3>View</h3>

<p>　View層で行うことは、画面要素のレイアウトとViewModelとのバインディングです。それ以外の事は行いません。.NETの世界では、View層において値の変換を行う機能=ValueConverterが存在しますが、ValueConverterを使うべきかViewModelで行うべきかでよく議論になります。
　
　バインディングの実体は、ViewModelのプロパティである <code>Observable&lt;T&gt;</code> を <code>subscribe</code> して、Viewのプロパティにセットしているだけです。前述の通り今回は TwoWay は無いので楽です。TwoWay が出てくるとバインディングのフレームワークにお願いした方がよいです。
　
　例えば、 <code>Observalbe&lt;String&gt;</code> と TextViewのtextプロパティのバインディングは、下のようになります。</p>

<p>```java
public TextViewBinder toTextOneWay(Observable<String> prop) {</p>

<pre><code>_subscriptions.add(
    prop.observeOn(AndroidSchedulers.mainThread())
    .subscribe(x -&gt; _textView.setText(x)));

return this; // メソッドチェーンで連続して呼べるようにしてるだけ
</code></pre>

<p>}
```</p>

<p>.NETの世界では、このバインディングを画面定義ファイル(.xaml)に直接記述できます。
Androidでも一部のライブラリや、<a href="http://developer.android.com/intl/ja/tools/data-binding/guide.html">今後公式にデータバインディングがサポートされる模様</a>ですが、xml でのバンディングの記述は、デバッグしづらくなるので個人的にはそれほどメリットを感じないです。デザイナーとの分業と言っても別な理由で不可能なケースが多いと思います。</p>

<h2>画面遷移や Toast の表示は誰の責務？</h2>

<p>大抵の MVVMフレームワーク に備わっている <code>Messenger</code> という機能を使います。Android界隈の人には「EventBus」と言った方がわかりやすいかも知れません。</p>

<p>ViewModelが「画面遷移を要求するメッセージ」を投げ、それをViewが受信して画面遷移を行います。</p>

<p>```java メッセージ送信側(MainViewModel.java)
public final Command commandNextView = new Command() {</p>

<pre><code>@Override
public void execute() {
    // LapActivity へ遷移させる
    // ほんとは LapViewModel.class を指定すべき(LapActivity は使いたくない)
    messenger.send(new StartActivityMessage(LapActivity.class));
}
</code></pre>

<p>};
```</p>

<p>```java メッセージ受信側(MainActivity.java)
// 画面遷移のメッセージ受信
_viewModel.messenger.register(StartActivityMessage.class.getName(), new Action1<Message>() {</p>

<pre><code>@Override
public void call(final Message message) {
    runOnUiThread(new Runnable() {
        @Override
        public void run() {
            final StartActivityMessage m = (StartActivityMessage)message;
            Intent intent = new Intent(MainActivity.this, m.activityClass);
            MainActivity.this.startActivity(intent);
        }
    });
}
</code></pre>

<p>});
```</p>

<p>今回は簡単な Messenger を実装しました。VM->Vの通知にしか使わないのでVM毎に一つ持つようにしています。</p>

<h1>2.3. Reactive Extensions, ReactiveProperty を使った Android/iOS アプリ(Xamarin, C#言語)</h1>

<p><a href="https://xamarin.com/">Xamarin</a> は、 C# で Android/iOS が作れるプロダクトです。
RubyMotion のように、CocoaTouch や Android SDK の API をラップし、同じ名称のクラス,メソッドで C# から呼び出せるようにしています。</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/">Xamarin 日本語情報</a></li>
<li><a href="http://qiita.com/amay077/items/2e86b44e5f274a34b2e9">マカーの人が Xamarin について勘違いしていそうな５つのこと &ndash; Qiita</a></li>
</ul>


<p>.NETのオープンソース実装である mono 由来の製品であり、また Microsoft とのパートナーシップも結んでいることから、.NET の資産の多くが利用可能です。</p>

<p>何が言いたいかと言うと、RxJava も MVVM パターンも、元は .NET のアプリケーション開発の分野で発案・成熟してきた考え方であり、豊富な.NET製ライブラリ(今回だと Reactive Extensions と ReactiveProperty)を使って Android/iOS アプリを開発できる、という事です。</p>

<h2>Model-ViewModel-View(MVVM) で考える</h2>

<p>Xamarin でも MVVM の役割はまったく同じですが、
<strong>「Model-ViewModel を Android/iOS で使いまわせる」</strong>
という大きなメリットがあります。</p>

<p>Model と ViewModel からは、プラットフォームに依存するコードは排除できます(すべきです)。
Xamarin(というか .NET) ではプラットフォーム非依存の処理をライブラリ化できます(これを PCL=Portable Class Library と言います)。</p>

<p>Android と iOS でそれぞれに実装が必要なのは、View と、そのバインディングのみです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/rxjava_mvvm_stopwatch_02.png" alt="クラス図的なの" /></p>

<h2>Reactive Extensions について</h2>

<p>本家<a href="https://github.com/Reactive-Extensions/Rx.NET">Rx.NET</a>です。RxJava はこの Reactive Extensions を Java にポートしたものです。
RxJava には、いくつか便利なメソッドが追加されています(<code>compose</code> とか)が、殆ど同じです。
また、 C# はラムダ式を標準でサポートしていることから、 retrolambda などに頼らなくても見やすいコードが書けるのは言うまでもないでしょう。</p>

<h2>ReactiveProperty について</h2>

<p><a href="https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md">ReactiveProperty</a> は、Rxの機能を活かしてMVVMパターンの実装を手助けしてくれるライブラリです。</p>

<ul>
<li><a href="http://blog.okazuki.jp/entry/2015/02/22/212827">MVVMとリアクティブプログラミングを支援するライブラリ「ReactiveProperty v2.0」オーバービュー &ndash; かずきのBlog@hatena</a></li>
</ul>


<p>Java版ストップウォッチでは、<code>StopWatchModel</code> や ViewModel のプロパティを全て <code>Observable&lt;T&gt;</code> としましたが、 Xamarin版では <code>ReactiveProperty&lt;T&gt;</code> としています。 <code>ReactiveProperty&lt;T&gt;</code> は <code>Observable&lt;T&gt;</code> から継承しているので、それほど大差はありませんが、<code>Subject</code> のように値の設定をサポートしていたり、バリデーション、エラー通知の仕組みが備わっています。</p>

<p>また、ReactiveProperty は、 Android の View要素とのバインディング機能も持ちます。これを使うとバインディングが以下のように書けます。</p>

<p>```csharp
// TextView(textTime) と viewModel.Time のバインド
FindViewById<TextView>(Resource.Id.textTime)</p>

<pre><code>.SetBinding(v =&gt; v.Text, 
    _viewModel.Time.Select(x =&gt; x.ToString())
    .ObserveOnUIDispatcher()
    .ToReactiveProperty());
</code></pre>

<p>```</p>

<p>iOS のバインディングはありませんが、 <del>ソースの一部を持ってくる事で、殆ど解決します</del> <a href="https://twitter.com/okazuki/status/679256704689684480">ツイートしたら取り込んでもらえました(^^)</a> 。</p>

<h1>作ったアプリのソース</h1>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample">amay077/StopWatchSample</a></li>
</ul>


<p>それぞれ、</p>

<ol>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppAndroid">RxJava を使った Android アプリ(Java言語)</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.Android">Reactive Extensions, ReactiveProperty を使った Android アプリ(Xamarin, C#言語)</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.iOS">Reactive Extensions, ReactiveProperty を使った iOS アプリ(Xamarin, C#言語)</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.Core">Xamarin版アプリの Model, ViewModel</a></li>
</ol>


<p>にあります。</p>

<p>Java版は、</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/models/StopWatchModel.java">StopWatchModel.java</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java">MainViewModel.java</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/views/MainActivity.java">MainActivity.java</a></li>
</ul>


<p>を見るとだいたい分かると思います。</p>

<p>また、Java版 と Xamarin版では、</p>

<ul>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/models/StopWatchModel.java">StopWatchModel.java</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Core/Models/StopWatchModel.cs">StopWatchModel.cs</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java">MainViewModel.java</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Core/ViewModels/MainViewModel.cs">MainViewModel.cs</a></li>
<li><a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/views/MainActivity.java">MainActivity.java</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Android/Views/MainActivity.cs">MainActivity.cs</a> と <a href="https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.iOS/Views/MainViewController.cs">MainViewController.cs</a></li>
</ul>


<p>あたりを見比べるといいと思います。</p>

<h1>まとめ</h1>

<p>MVVM と RxJava はとても相性がよいと感じました。</p>

<p>Model → ViewModel → View と通知を伝搬させるのに、そのまま <code>Observable&lt;T&gt;</code> を繋げればよいのですから。加工が必要なら <code>map</code> などのオペレータを挟むだけ。
これがコールバックだったら…恐ろしくて想像したくありません。</p>

<p>Model が使用するDB層やWebAPIなども RxJava をサポートしていたら、もっと便利になると思います。(Realm は RxJava サポートが追加されたようですね！)</p>

<p>View &ndash; ViewModel のデータバインディングにも RxJava は有効ですが、こちらは、Android公式の Data Binding がどう実装されるかで未来が変わってきそうです。</p>

<p>Android-Java には、まだメジャーな MVVMフレームワークが無いので、登場が待たれるところです。</p>

<h1>おまけ：反省など</h1>

<h2>View か ViewModel か Model か問題</h2>

<p>下は View に書かれている「現在時刻と表示書式文字列のどちらかが更新されたら、時刻をフォーマットして流す」という Observable です。</p>

<p>```java
// フォーマットされた時間を表す Observable（time と timeFormat のどちらかが変更されたら更新）
final Observable<String> formattedTime = Observable.combineLatest(</p>

<pre><code>    _viewModel.time,
    _viewModel.timeFormat, (Long time, String format) -&gt; {
        final SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.getDefault());
        return sdf.format(new Date(time));
    });
</code></pre>

<p>```</p>

<p>これは、ViewModel に用意すべきだったかも知れません。いやいや、フォーマットされた時間を通知する機能が Model にあってもおかしくないとも言えます。
実際、 <code>LapActivity</code> でも同じコードを書いているので D.R.Y原則にも反します。やっぱ Model に持たせるべきだったと反省。</p>

<h2>Model に戻り値が void でないメソッドを作っちゃった問題</h2>

<blockquote><p>原則として Model のメソッドの戻り値は void です</p></blockquote>

<p>の原則に反して、戻り値で最速、最遅ラップ値を返してしまいました。
Toast表示のためだけに取得できればいいやと思いこうしたのですが、これでは「最速、最遅ラップを常に画面に表示する」という仕様変更があっただけで破綻します。これは悪手でした、反省。</p>

<p>だいたいラップの最大、最小の取得は、 <code>Observable&lt;List&lt;Long&gt;&gt; laps</code>  を <code>map</code> で変換すればよいだけの話ですね。LINQ あるいは Stream API が使えれば <code>List&lt;Long&gt;</code> から min/max を取得するのも簡単ですし。</p>

<h2>Timer を 1ms 間隔にしちゃった問題</h2>

<p><code>Observable.interval(1ms)</code> ってやっちゃいましたが、START の時間を覚えておいて、LAP, STOP された時に、現在時刻との差分を取ればよかったですね。基本的なムダで反省。</p>

<p><a href="http://www.moonmile.net/blog/archives/7627">JXUG で話した MVVM の活用の解説を | Moonmile Solutions Blog</a> より</p>

<blockquote><p>Lap ボタンを押したタイミングで DateTime.Now を取得すればよいわけで、何も定期的に内部データを更新する必要はありません</p></blockquote>

<p>その通りですね。。。</p>

<h2>UIスレッドへの変換をだれがやるのか問題</h2>

<p>今回は、以下のように、自作したバインディングの中で <code>observeOn(AndroidSchedulers.mainThread())</code> 行っています。</p>

<p>```java
public TextViewBinder toTextOneWay(Observable<String> prop) {</p>

<pre><code>_subscriptions.add(
    prop.observeOn(AndroidSchedulers.mainThread())
        .subscribe(x -&gt; _textView.setText(x)));

return this;
</code></pre>

<p>}
```</p>

<p>これを ViewModel で行うこと(ViewModel が公開する Observable は必ずUIスレッドで実行されるというルール)もできます。
が、セオリーが分かっていません。とりあえず View側で observeOn しとけば安全かなと思って上記のようにしているだけです。使用するMVVMフレームワークの仕様にも依存しそうです。</p>

<h2>StopWatchModel のプロパティは Hot？ それとも Cold？</h2>

<p>StopWatchModel の各プロパティである <code>Observable&lt;T&gt;</code> は、 <strong><code>subscribe</code> をトリガーに値が流れ始めるものではないので Hot</strong> ですね。</p>

<p>また、<code>BehaviorSubject</code> を使っているので、 <code>subscribe</code> 時には、その時点の最新の値が流れてきます。</p>

<p>シングルトンの <code>StopWatchModel</code> に対して、 <code>MainActivity</code> に続いて <code>LapActivity</code> でも購読した時に、正しくラップタイム群が表示できるのは、<code>BehaviorSubject</code> であるためですね。</p>

<p><code>refCount</code> してないけど、ちゃんと破棄されているのかは未確認。。。</p>

<h2>Observalbe&lt;List&lt;T>></h2>

<p>ラップタイム群を通知するプロパティは <code>Observalbe&lt;List&lt;T&gt;&gt;</code> にしています。
この場合、List の中身を変更されても通知されないので  <code>Collections.unmodifiableList</code> で変更不可にしてから onNext で通知しています。LAPボタンが押される度に List を作りなおしている感じになります。</p>

<p>ListView とのバインディングも同じで、onNext を受信する度に、ListView を洗い替えしています。
このムダが嫌、大量データでパフォーマンスに問題が出る場合は、.NET にある <a href="https://msdn.microsoft.com/ja-jp/library/ms668604(v=vs.110"><code>ObservableCollection&lt;T&gt;</code></a>.aspx) のような仕組みを作る必要があります。(Rx.NET, RxJava では管轄外かな？)</p>

<p><code>ObservableCollection&lt;T&gt;</code> は、リストへの追加、削除、変更をアイテム毎に通知／監視できます(「 <em>項目X</em> が <em>2番目</em> に <em>追加</em> された」のような)。適切な通知とバインディングを実装すれば、ListView の差分更新が可能です（面倒ですが）。</p>

<h1>参考</h1>

<ul>
<li><a href="http://ugaya40.hateblo.jp/entry/model-mistake">MVVMのModelにまつわる誤解 &ndash; the sea of fertility</a></li>
<li><a href="http://www.moonmile.net/blog/archives/7627">JXUG で話した MVVM の活用の解説を | Moonmile Solutions Blog</a> &ndash; タイマを View/ViewModel/Model に持つそれぞれの理由が解説されています。</li>
<li><a href="http://qiita.com/hide92795/items/f7205c8171826cc2153b">RxJava &ndash; Rxで知っておくと便利なSubjectたち &ndash; Qiita</a></li>
<li><a href="http://qiita.com/amay077/items/4bb6b09a1911b074f50c">RxJava &ndash; Hot Observable と ConnectableObservable について &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する]]></title>
    <link href="http://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache/"/>
    <updated>2015-12-01T23:59:59+09:00</updated>
    <id>http://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache</id>
    <content type="html"><![CDATA[<p>　これは <a href="http://qiita.com/advent-calendar/2015/xamarin">Xamarin Advent Calendar 2015 1日目</a> の記事です。</p>

<p>Xamarin Advent Calendar 2015、今日から開始です。
3年目になってもネタに尽きない Xamarin 、まだまだ盛り上がっております。</p>

<p>かくいう自分は、<a href="http://qiita.com/amay077/items/0a3fa3dfac7f29a2807d">前回の投稿</a> が約1年前と、完全に時代遅れになっております（仕事とスプラ&hellip;いえ何でもないです）。
最近のトピックスは他の方にお任せして、1年前からのネタを書きます。</p>

<!--more-->


<p>Xamarin でギョームアプリを開発している時に、Android/iOS で使える ORM を探していたというか、JSON のデータをお手軽に保存・読み出し→インスタンス化できるライブラリないかなーと探していました。</p>

<p>Xamarin の公式ドキュメント</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/">Cross-Platform Data Access &ndash; Xamarin</a></li>
</ul>


<p>には、 SQLite.NET や ADO.NET などが紹介されていますが、どれも面倒そう。そこで使ってみようと思ったのが <a href="http://qiita.com/amay077/items/f14e04d4e86c8a782c15">2年前の投稿</a> でチラッと触れていた Akavache です。</p>

<h1>Akavache とは</h1>

<ul>
<li>akavache/Akavache &ndash; <a href="https://github.com/akavache/Akavache">https://github.com/akavache/Akavache</a></li>
</ul>


<p>以下、README から引用です。</p>

<blockquote><p>Akavache is an asynchronous, persistent (i.e. writes to disk) key-value store created for writing desktop and mobile applications in C#, based on SQLite3. Akavache is great for both storing important data (i.e. user settings) as well as cached local data that expires.</p></blockquote>

<p>(意訳)Akavacheは、C# による、SQLite3 をベースとした非同期で永続的なデスクトップとモバイルアプリケーション向けのキーバリューストアです。 ユーザー設定やキャッシュなどのローカルデータを保存するのに最適です。</p>

<p>バックエンドは SQLite3 なので、まあ得体の知れないデータ形式ではない、と。ちなみに <a href="https://github.com/paulcbetts/AkavacheExplorer">AkavacheExplorer</a> というデータビューアもあります。</p>

<h1>対応プラットフォーム</h1>

<blockquote><p>Akavache is currently compatible with:</p>

<ul>
<li>Xamarin.iOS / Xamarin.Mac 32-bit</li>
<li>Xamarin.Android</li>
<li>.NET 4.5 Desktop (WPF)</li>
<li>Windows Phone 8</li>
<li>WinRT (Windows Store)</li>
<li>Windows Phone 8.1 Universal Apps</li>
</ul>
</blockquote>

<p>ほぼ全てやないかい！</p>

<h1>使ってみよう</h1>

<p>せっかくなので Xamarin.Form で Akavache を使ったアプリを作ってみます。</p>

<h3>1. プロジェクト（ソリューション）の作成</h3>

<p>Xamarin.Forms App で、新しいプロジェクトを作成します。プロジェクト名は AkavacheSample とでもします。</p>

<p>Shared Code: は、'Use Portable Class Library' を選択します。</p>

<p>プロジェクトが3つ（AkavacheSample, AkavacheSample.Droid, AkavacheSample.iOS）作成されます。</p>

<h3>2. Akavache と、依存ライブラリの導入</h3>

<p><strong>3つのプロジェクトそれぞれで</strong> 、NuGet(メニュー → プロジェクト → Add NuGet Packages&hellip;) から、以下のパッケージを追加します（執筆時点の Akavache の最新バージョンは 4.1.2 です。）。</p>

<ul>
<li>Akavache.Core</li>
<li>SQLitePCL.raw</li>
<li>Akavache.SQLite3</li>
<li>Akavache</li>
</ul>


<p>検索ボックスに 「sqlite akavache」と入力すると全部表示されると思います(↓こんな感じに)。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_akavache_01.png" alt="" /></p>

<p>追加に失敗する場合は、上のリストの順番で一つずつ追加するとうまくいくと思います。</p>

<h3>3. サンプルアプリの画面を作る</h3>

<p>サンプルアプリの画面レイアウトを作ります。XAML とか面倒なのでコードでバリッと。</p>

<p>AkavacheSample プロジェクトの App.cs を以下のようにします。テキストボックス２つとボタン２つが縦に並んでいるだけの簡単な画面です。</p>

<p>```csharp AkavacheSample.cs
public class App : Application
{</p>

<pre><code>public App()
{
    var nameEntry  = new Entry { Placeholder = "名前を入力" };
    var ageEntry   = new Entry { Placeholder = "年齢を入力(数値のみ)" };
    var saveButton = new Button { Text = "保存" };
    var loadButton = new Button { Text = "読み出し" };

    // The root page of your application
    MainPage = new ContentPage
    {
        Padding = new Thickness(20),
        Content = new StackLayout
        {
            VerticalOptions = LayoutOptions.Center,
            Children =
            {
                nameEntry,
                ageEntry,
                saveButton,
                loadButton
            }
        }
    };
}

// 以下省略
</code></pre>

<p>}
```</p>

<h3>4. Akavache を使って保存と読み出し</h3>

<p>名前と年齢をひとまとめに保存したいので、Person というクラスを作ります。</p>

<p>```csharp Person.cs
public class Person
{</p>

<pre><code>public string PersonName { get; set; }
public int PersonAge { get; set; }
</code></pre>

<p>}
```</p>

<p>あとはもう、一気に実装するだけです。
保存ボタンを押した時に、入力値を Person に詰めて、Akavache を使って保存します。
読み出しボタンを押した時に、Akavache から Person を読みだし、各テキストボックスにバラして設定します。</p>

<p>Akavache はキー・バリュー・ストアなので、保存・読み出し時のキーを <code>"person"</code> としています。</p>

<p>```csharp AkavacheSample.cs</p>

<p>public class App : Application
{</p>

<pre><code>public App()
{
    var nameEntry  = new Entry { Placeholder = "名前を入力" };
    var ageEntry   = new Entry { Placeholder = "年齢を入力(数値のみ)" };
    var saveButton = new Button { Text = "保存" };
    var loadButton = new Button { Text = "読み出し" };

    saveButton.Clicked += async (sender, e) =&gt; 
    {
        // Person に詰めて…
        var person = new Person { 
            PersonName = nameEntry.Text, 
            PersonAge  = Convert.ToInt16(ageEntry.Text) 
        };

        // 保存
        await BlobCache.LocalMachine.InsertObject("person", person); 
    };

    loadButton.Clicked += async (sender, e) =&gt; 
    {
        // Akavache で Person を読み出し
        var loaded = await BlobCache.LocalMachine.GetObject&lt;Person&gt;("person");
        // 各テキストボックスに設定
        nameEntry.Text = loaded.PersonName;
        ageEntry.Text  = loaded.PersonAge.ToString();
    };

    // The root page of your application
    MainPage = new ContentPage
    {
        Padding = new Thickness(20),
        Content = new StackLayout
        {
            VerticalOptions = LayoutOptions.Center,
            Children =
            {
                nameEntry,
                ageEntry,
                saveButton,
                loadButton
            }
        }
    };
}

// 以下省略
</code></pre>

<p>}
```</p>

<h3>5. 動かす！</h3>

<p>Android Player と iOS Simulater で動かしてみた、の図です。(途中、iPhone でキーボード出すのに苦労してるところは無視してください、Take2 の時間が無かったのですｗ)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_akavache_02.gif" alt="" /></p>

<p>さすが Xamarin.Forms だ、(Android でも iPhone で動かしても)何とも無いぜ！</p>

<h1>まとめ</h1>

<p>Akavache を使って保存と読み出しを行う超簡単なサンプルを作ってみました。
作ったサンプルは <a href="https://github.com/amay077/AkavacheSample">GitHub &ndash; amay077/AkavacheSample</a> においておきます。</p>

<p>仕組みは理解できないけど、とても簡単に使えることが分かると思います。
追加されたパッケージを見ると、 JSON.NET とか、Reactive Extensions とかが入っているので、まあだいたい察しが付くかと。。。</p>

<p>ギョームアプリでがっつり使ってますが、今のところパフォーマンスとかデータ破損とか、そういう問題はないです。POCO なオブジェクトをローカル保存するのに、とても役立っています。</p>

<p>というわけで Advent Calendar 初日のネタは以上です。</p>
]]></content>
  </entry>
  
</feed>
