<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geo | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/geo/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-10-29T11:32:01+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin.iOS で Yahoo! iOSマップSDK を使ってみる]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/23/using-yahoo-maps-sdk-for-ios-in-xamarin-ios/"/>
    <updated>2013-12-23T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/23/using-yahoo-maps-sdk-for-ios-in-xamarin-ios</id>
    <content type="html"><![CDATA[<p>Xamarin.iOS では、既存の iOS用ライブラリが利用できます。
今日は例として Yahoo Maps SDK for iOS を Xamarin.iOS から使ってみます。</p>

<!--more-->


<h2>Yahoo! iOSマップSDK とは</h2>

<ul>
<li><a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/">YOLP(地図):Yahoo! iOSマップSDK &ndash; Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>Yahoo! Japan が提供する地図SDKです。Google Maps にはない魅力として、「雨雲レーダー」「経路探索/案内」「AR機能」が挙げられます。
利用するには上記サイトから APIキー の発行が必要です。</p>

<h2>Xamarin.iOS で Objective-C ライブラリを使う方法</h2>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/">Binding Objective-C | Xamarin</a></li>
</ul>


<p>「Binding」と呼ばれます。
Obj-Cライブラリを呼び出すラッパーのようなものを C# で記述し、それを Xamarin.iOS アプリケーションから使用することが出来ます。</p>

<h2>Xamarin.iOS で Yahoo! iOSマップSDK を使う手順</h2>

<h3>1. Yahoo! iOSマップSDK をダウンロードし、APIキー を発行する</h3>

<p>SDK のダウンロードは、</p>

<ul>
<li><a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/">YOLP(地図):Yahoo! iOSマップSDK &ndash; Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>です。APIキー の発行は、</p>

<ul>
<li><a href="https://e.developer.yahoo.co.jp/dashboard/">アプリケーションの管理：Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>です。手順は、</p>

<ul>
<li><a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/tutorial1.html">YOLP(地図):利用準備 &ndash; Yahoo!デベロッパーネットワーク</a></li>
</ul>


<p>が分かりやすいです。</p>

<h3>2. Xamarin.iOS で Binding プロジェクトを作る</h3>

<p>Xamarin Studio で新しいソリューションを作ります。
iOS → iOS Binding Project で、名前は 「YMapBinding」、ソリューション名は「YMapSample」とします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_01.png" alt="" /></p>

<h3>3. Yahoo! iOSマップSDK のライブラリファイルを Binding プロジェクトに入れる</h3>

<p>ダウンロードした Yahoo! iOSマップSDK を解凍して、中に含まれる <code>YMapKit</code> ファイルを <code>libYMapKit.a</code> にリネームします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_02.png" alt="" /></p>

<p>Xamarin Studio で、YMapBinding プロジェクトに <code>libYMapKit.a</code> を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_03.png" alt="" /></p>

<h3>4. Yahoo! iOSマップSDK の API定義を C# で書く</h3>

<p>Binding プロジェクトにある <code>ApiDefinition.cs</code> を以下のように書き換えます。</p>

<p>```csharp ApiDefinition.cs
using System;
using System.Drawing;
using MonoTouch.ObjCRuntime;
using MonoTouch.Foundation;
using MonoTouch.UIKit;</p>

<p>namespace YMapBinding
{</p>

<pre><code>[BaseType (typeof (UIView))]
public partial interface YMKMapView {
    [Export ("initWithFrame:appid:")]
    IntPtr Constructor (RectangleF frame, string appid);
}
</code></pre>

<p>}
```</p>

<p>よく目を凝らすと分かるんですが、これは iOS版ライブラリの <code>initWithFrame:appId:</code> というコンストラクタを C# で定義しています。
他のメソッドやプロパティ、イベント(delegate)も同じように定義するのですが、ここでは省略します。</p>

<p>次に <code>libYMapKit.linkwith.cs</code> を開いて、以下のように書き換えます。</p>

<p>```csharp libYMapKit.linkwith.cs
using System;
using MonoTouch.ObjCRuntime;</p>

<p>[assembly: LinkWith (&ldquo;libYMapKit.a&rdquo;, LinkTarget.ArmV7 | LinkTarget.ArmV7s | LinkTarget.Simulator ,ForceLoad = true,</p>

<pre><code>Frameworks="UIKit SystemConfiguration CoreGraphics CoreLocation Foundation OpenGLES QuartzCore")]
</code></pre>

<p>```</p>

<p>Yahoo! iOSマップSDK が依存するライブラリを Frameworks に列挙しています。</p>

<p>これでひとまず Binding プロジェクト 側は終わりです。</p>

<h4>5. サンプルアプリケーションプロジェクトを作る</h4>

<p>YMapSample ソリューションに 新しいプロジェクト を追加、iPhone の Single view Application 、名称は「YMapApp」とします。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_04.png" alt="" /></p>

<p>YMapApp プロジェクトを右クリックして、スタートアッププロジェクトをこちらに変更しておきます。</p>

<p>次に、参照設定で YMapBinding を追加します。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_05.png" alt="" /></p>

<h4>6. Yahoo! iOSマップSDK を表示するコードを書く</h4>

<p>YMapApp のビューコントローラ(たぶん YMapAppViewController)の<code>ViewDidLoad</code> に、以下のように追記します。</p>

<p>```csharp YMapAppViewController.cs
public override void ViewDidLoad()
{</p>

<pre><code>base.ViewDidLoad();

var v = new YMKMapView(new RectangleF(0f, 0f, 320f, 320f), 
    “&lt;your app key&gt;”);  // あなたが取得した APIキー
this.View.AddSubview(v);
</code></pre>

<p>}
```</p>

<p>ああ、 <code>using YMapBinding;</code> も必要ですね。</p>

<p>アプリの方もとりあえずこれで OK。</p>

<h4>7. 動かしてみる</h4>

<p>YMapApp を iOSシミュレータで実行してみます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_ymapsdk_on_xamarin_ios_06.gif" alt="" /></p>

<p>はい、このように「とりあえず」Yahoo! iOSマップSDK を Xamarin.iOS で動かすことができました。</p>

<h2>この後（やること多いよ）</h2>

<h3>API定義をちまちまと移植</h3>

<p>この例ではコンストラクタ1つしか定義しませんでしたが、これを他のコンストラクタ、メソッド、プロパティ、イベントについて行う必要があります。これを助けるツールとして <a href="http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/objective_sharpie/">Objective Sharpie</a> が公開されていますが、あまり期待しない方が良さそうです。Yahoo! iOSマップSDK をこのツールにかけてみましたが、出来上がった定義ファイルはエラーがたくさん出ました。</p>

<ul>
<li><a href="http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/">Binding Objective-C | Xamarin</a></li>
</ul>


<p>を理解した上で、Objective Sharpie の結果を参考にして、作っていく必要がありそうです。</p>

<h3>ApiDefinition.cs への定義は正しいのか？</h3>

<p>「Frameworks に、Yahoo! iOSマップSDK が依存しているライブラリを列挙」してみましたが、<a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/tutorial1.html">チュートリアル</a> には <code>libxml2.2.dylib</code> も含まれています。が、 <code>ApiDefinition.cs</code> にはこれは記述していません。けど動いています。何かの機能を使った時に問題になるかもしれません。そしてこの .dylib という拡張子の場合にどう定義すれば良いのか不明です。</p>

<h3>ライブラリが使用するリソースはどこに？</h3>

<p>ダウンロードした Yahoo! iOSマップSDK には <code>image</code> ディレクトリがあり、これをアプリケーションプロジェクトに配置することで、ライブラリがリソースを使うことになっています。Xamarin.iOS Binding プロジェクトではこれはどこに配置すればよいか、未調査です。</p>

<p>ということで Xamarin.iOS の Binding について紹介しました。
.Android の Binding は jar を放り込めばある程度自動で定義を生成してくれていたのに対し、かなり面倒な感じです。アプリケーションに必要な機能だけを定義して使っていく感じかなあと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSS4G 開発者の為の、図形演算ライブラリガイド]]></title>
    <link href="http://blog.amay077.net/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev/"/>
    <updated>2013-12-16T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev</id>
    <content type="html"><![CDATA[<p>これは <a href="http://atnd.org/events/45511">FOSS4G Advent Calendar 2013</a> と、<a href="http://qiita.com/advent-calendar/2013/xamarin">Xamarin Advent Calendar 2013</a>  のクロスポストになります。</p>

<p>地図に関するシステムを作っていますと、必ず必要になるのが図形と図形の演算です。(結合 とか、分割とか、そういうの）</p>

<!--more-->


<p>私にとっては自分で実装するのは、とても大変な部類なのですが、今日では、いろいろなオープンソースライブラリが存在していて、それを使わせて頂いています。</p>

<p>今日は、それらの紹介をします。</p>

<h2>図形演算ライブラリ達</h2>

<h3>JTS Topology Suite (JTS)</h3>

<ul>
<li><a href="http://sourceforge.net/projects/jts-topo-suite/">http://sourceforge.net/projects/jts-topo-suite/</a></li>
<li>言語：Java</li>
<li>ライセンス：LGPL</li>
</ul>


<p>これがなければ死んでいた案件多し。いろいろな言語に移植され、事実上標準のライブラリ。LGPL ということだけが要注意であり少し残念。</p>

<h3>GEOS</h3>

<ul>
<li><a href="http://trac.osgeo.org/geos/">http://trac.osgeo.org/geos/</a></li>
<li>言語：C++</li>
<li>ライセンス：LGPL</li>
</ul>


<p>JTS を C++ に移植したライブラリ。なので機能、ライセンスともに JTS とほとんど一緒。osgeo のツールをビルドする時に出てくること多い。</p>

<h3>Net Topology Suite (NTS)</h3>

<ul>
<li><a href="https://code.google.com/p/nettopologysuite/">https://code.google.com/p/nettopologysuite/</a></li>
<li>言語：C#</li>
<li>ライセンス：LGPL</li>
</ul>


<p>JTS を .NET に移植したライブラリ。最初見た頃は、Not Implemented  な機能が多かったけど、だいぶ揃ってきたのかな。</p>

<h3>Esri Geometry API for Java</h3>

<ul>
<li><a href="https://github.com/Esri/geometry-api-java">https://github.com/Esri/geometry-api-java</a></li>
<li>言語：Java</li>
<li>ライセンス：Apache 2.0</li>
</ul>


<p>この間の FOSS4GJ 2013 Tokyo で教えてもらった、Yet Another 図形演算ライブラリ。GIS の世界シェアトップである ESRI社がオープンソースで公開しています。だから品質は折り紙つき（のハズだ）。Apache ライセンスなのも嬉しい。</p>

<h3>Clipper</h3>

<ul>
<li><a href="http://www.angusj.com/delphi/clipper.php">http://www.angusj.com/delphi/clipper.php</a></li>
<li>言語：Delphi、C++、C#、Python、Perl、Ruby、Haskell</li>
<li>ライセンス：Boost Software License</li>
</ul>


<p>名前の通り Clip(つまり AND(Intersection)演算)と Offset(Buffer の片側だけ)に特化したライブラリ。</p>

<h3>Boost:Geometry</h3>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html">http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html</a></li>
<li>言語：C++</li>
<li>ライセンス：Boost Software License</li>
</ul>


<p>そういえば、C++ の拡張ライブラリである Boost にも Geometry が入ったのでしたね。Screenshot がなかなか圧巻です。</p>

<h3>DotSpatial</h3>

<ul>
<li><a href="http://dotspatial.codeplex.com/">http://dotspatial.codeplex.com/</a></li>
<li>言語：C#</li>
<li>ライセンス：LGPL</li>
</ul>


<p>ライブラリというよりはアプリケーションなのかな？ソースコードの中に <code>DotSpatial.Topology</code> などが見えます。</p>

<h3>JSTS Topology Suite</h3>

<ul>
<li><a href="https://github.com/bjornharrtell/jsts">https://github.com/bjornharrtell/jsts</a></li>
<li>言語：JavaScript</li>
<li>ライセンス：LGPL</li>
</ul>


<p>探してみたらやっぱりあった JTS の JavaScript への移植版。ライセンスは(ry</p>

<h3>GeoScript</h3>

<ul>
<li><a href="http://geoscript.org/">http://geoscript.org/</a></li>
<li>言語：JavaScript</li>
<li>ライセンス：MIT</li>
</ul>


<p>JavaScript製のライブラリ。最近は D3.js による視覚表現が流行ってきたので、内部ではこのようなライブラリが使われているのでしょうか。</p>

<h2>試しに使ってみよう</h2>

<p>Xamarin Advent Calendar と絡めるために無理やり Xamarin Studio で、という事は必然的に Net Topology Suite を使ってみます。</p>

<p>Xamarin Studio は、Android/iOS アプリを作るためだけじゃなくて、コンソールアプリとかも作ることができますよ、と言いたいだけです。</p>

<h3>準備</h3>

<p>まず Xamarin Studio で C# → コンソールアプリのプロジェクトを作ります。</p>

<p>次に、まず NTS を参照に追加しますが、Nuget という仕組みを使います。
Xamarin Studio に Nuget を導入する手順は、</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-nuget-addin">mrward / monodevelop-nuget-addin</a></li>
</ul>


<p>を参考にしてください。</p>

<h3>コードを書く</h3>

<p>こんな感じです。</p>

<p>```csharp Program.cs
using System;
using GeoAPI.Geometries;
using NetTopologySuite;</p>

<p>namespace TopologyTest
{</p>

<pre><code>class MainClass
{
    public static void Main(string[] args)
    {
        var service = NtsGeometryServices.Instance;
        var gf = service.CreateGeometryFactory();

        var polygonA = gf.CreatePolygon(new Coordinate[]
            {
                new Coordinate(34.0, 136.0),
                new Coordinate(34.0, 138.0),
                new Coordinate(37.0, 138.0),
                new Coordinate(37.0, 136.0),
                new Coordinate(34.0, 136.0)
            });

        var polygonB = gf.CreatePolygon(new Coordinate[]
            {
                new Coordinate(36.0, 137.0),
                new Coordinate(35.0, 137.0),
                new Coordinate(35.0, 140.0),
                new Coordinate(36.0, 137.0)
            });

        polygonA.Intersection(polygonB).ToConsole("Intersection");
        polygonA.Union(polygonB).ToConsole("Union");
        polygonA.SymmetricDifference(polygonB).ToConsole("SymmetricDifference");
        polygonA.Difference(polygonB).ToConsole("Difference");
        polygonB.Buffer(0.5).ToConsole("Buffer");
    }

}

public static class GeomExtensions
{
    public static void ToConsole(this IGeometry geom, string tag) {
        Console.WriteLine(tag + " - " + geom.ToString());
    }
}
</code></pre>

<p>}
```</p>

<p>Intersection(AND)、Union(OR)、SymmeticDifference(XOR)、Difference(A &ndash; B)、Buffer(ふくらます)について試しています。</p>

<p>実行すると、コンソールに結果の座標群がずらーと出力されます。</p>

<h2>見える化してよ</h2>

<p>プログラムによる視覚化は、、、ごめんなさい面倒だったので作りませんでした。</p>

<p>その代わり、GeoJSON 化して GitHub にアップして視覚化しました。</p>

<p>まず演算対象の <code>geometryA</code> と <code>geometryB</code> です。(外側の枠は気にしないでください)</p>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson">https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/01_polygonA.geojson"></script>


<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson">https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/02_polygonB.geojson"></script>


<h3>Intersection(AND)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson">https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/03_polygonA_intersection_B.geojson"></script>


<h3>Union(OR)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson">https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/04_polygonA_union_B.geojson"></script>


<h3>SymmetricDifference(XOR)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson">https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/05_polygonA_symmetricdifference_B.geojson"></script>


<h3>Difference(A &ndash; B)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson">https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/06_polygonA_difference_B.geojson"></script>


<h3>Buffer(Bを膨らます)</h3>

<ul>
<li><a href="https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson">https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson</a></li>
</ul>


<script src="https://embed.github.com/view/geojson/amay077/geojsontest/master/07_geometryB_buffer.geojson"></script>


<p>いやー 便利ですね GitHub 。大量のマーカーは自動的にクラスター化までしてくれるそうですよ。</p>

<ul>
<li><a href="https://github.com/blog/1541-geojson-rendering-improvements">GeoJSON rendering improvements</a>。</li>
</ul>


<p>こちらは、 Leaflet.js、OpenStreetMap、<a href="https://www.mapbox.com/maki/">Maki Project</a> などの FOSS4G が使われています。いいですね。</p>

<p>さて、なんの話か分からなくなってきたので、こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地理院地図の標高タイル(CSV)を描画してみた]]></title>
    <link href="http://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api/"/>
    <updated>2013-11-05T21:11:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api</id>
    <content type="html"><![CDATA[<p>国土地理院が提供している API の一つに「標高タイル」というものがあります。</p>

<!--more-->


<p>タイルというと、Googleマップや OpenStreetMap などの Web地図では通常、画像を指しますが、標高タイルAPIでは <strong>「画素毎の高度(ｍ)」</strong> が取得できます。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/development/demtile.html">標高タイル仕様 &ndash; 地理院地図</a></li>
<li><a href="http://cyberjapandata.gsi.go.jp/xyz/dem/14/14547/6463.txt">サンプルURL</a></li>
</ul>


<p>これは面白い、ということで使ってみました。</p>

<h2>サンプル</h2>

<ul>
<li><a href="http://jsdo.it/amay077/jjod">地理院地図の標高タイル(CSV)を描画してみた &ndash; jsdo.it</a></li>
</ul>


<h3>Google Map</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_01.png" alt="img1" /></p>

<h3>標高タイルAPI で取得した標高値を描画</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_02.png" alt="img1" /></p>

<h2>何をしているか？</h2>

<p>下は、このサンプルのコードの抜粋ですが、ポイントは２つ</p>

<ul>
<li>getTile で通常 img 要素を生成して返すが、代わりに canvas 要素に返す</li>
<li>標高API をコールして得られた CSV をパースし、 高さに応じた色を計算して、canvas に矩形を描画する</li>
</ul>


<p>さすがに1ピクセル毎に描画すると重すぎるので、初期値では 16ピクセルずつに間引きしています(画面の DotSize で変更できます)。</p>

<p>クライアント側でレンダリングしているので、色などが動的に変更できます。</p>

<p>```javascript</p>

<pre><code>map.mapTypes.set("GsiMaps", {
  name:"標高タイル",
  tileSize:new google.maps.Size(256,256),
  minZoom:14, // 標高タイルは Lv:14 しか用意されてないので
  maxZoom:14, 
  getTile:function(tileCoord, zoom, ownerDocument) {

    // 普通は img だけど、標高タイルは CSV で画素毎の標高値が取得できるので、
    // クライアント側で描画するために Canvas を使う
    var canvas = ownerDocument.createElement("canvas");
    canvas.width = 256;
    canvas.height = 256;

    var x = (tileCoord.x % Math.pow(2, zoom)).toString();
    var y = tileCoord.y.toString();

    // 各画素の標高値を取得する
    canvas.tileUrl = "http://cyberjapandata.gsi.go.jp/xyz/dem/" + zoom +  "/" + x + "/" + y + ".txt";
    // 標高を描画する
    renderDem(canvas);
    renderedTiles[canvas.tileUrl] = canvas; // タイル再描画の為にとっておく
    return canvas;
  }
});

// 標高タイルを描画する
function renderDem(canvas) {
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, 256, 256);

  $.get(canvas.tileUrl, function(data) {
    // CSV が得られるのでパース
    var lines = data.split(/\r\n|\r|\n/);
    for (var i = 0; i &lt; lines.length; i+=dotSize) {
      var cols = lines[i].split(',');
      for (var j = 0; j &lt; cols.length; j+=dotSize) {
        if (cols[j] == 'e') { // エラーの画素には 'e' が入ってる
          continue;
        }

        // 標高0ｍ を startColor、標高1000ｍを endColor としたグラデーション色を設定する。
        ctx.fillStyle = $.xcolor
        .gradientlevel(startColor, endColor, cols[j] / 1000.0 * 100.0, 100)
        .getCSS();
        ctx.fillRect(j, i, dotSize, dotSize);
      }
    }
  });
}
</code></pre>

<p>```</p>

<h2>まとめ</h2>

<p>ただの標高値を地図に表すなら画像でいいじゃん！とか言われそうですが、よいアイデアが浮かばなかったのでまずは素直に使ってみました。</p>

<p>たとえば、移動手段による移動コストの違い(車だと坂道余裕だけど自転車だとキツい)みたいなのを視覚化するのに使えるような気がします。</p>

<p>今回は、Canvas を使ったのでこの程度ですが、WebGL とかを使えば、Google Map の地形図に負けない、美しい3D地図が描画できるはずです。</p>

<p>他に例を見ない、野心的な試みだと思うので、何か面白い使い方ができるといいなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爆速エミュレータで Google Maps Android API v2 を動かす]]></title>
    <link href="http://blog.amay077.net/blog/2013/10/20/using-gmapv2-on-intel-emulator/"/>
    <updated>2013-10-20T21:58:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/10/20/using-gmapv2-on-intel-emulator</id>
    <content type="html"><![CDATA[<p>Google APIs のエミュレータで Google Map Android API v2 が動くようになったのですが、やっぱり遅い、使えん。
という訳で、Intel の爆速エミュレータで GMapV2 を使う手順の備忘録です。(ご利用は自己責任で)</p>

<!--more-->


<h2>爆速エミュレータの導入</h2>

<p>こちら等を参考にセットアップします。</p>

<ul>
<li><a href="http://qiita.com/gabu/items/8bc1a11f1382409f1d2a">Android再入門 &ndash; エミュレータの作成</a></li>
</ul>


<h2>エミュレータで Google Maps Android API v2 を動かす</h2>

<p><code>com.google.android.gms.apk</code> と <code>com.android.vending.apk</code> が必要なのでどうにかして入手しインストールします。(ほとんど答えだけど下記参照)</p>

<ul>
<li><a href="http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator">Running Google Maps v2 on Android Emulator &ndash; Stack Overflow</a></li>
</ul>


<p>apk が古いとうまく動作しません。なるべく新しいものを探しましょう。(ﾎﾞｿ</p>

<h2>AndroidManifest.xml から com.google.android.maps の定義を消す</h2>

<p>意外とハマったのがコレ。</p>

<p><code>AndroidManifest.xml</code> で</p>

<p><code>
&lt;uses-library android:name="com.google.android.maps" /&gt;
</code></p>

<p>が定義してあると、</p>

<p><code>
10-20 11:35:52.977: E/PackageManager(1178): Package xxxx requires unavailable shared library com.google.android.maps; failing!
</code></p>

<p>というエラーになります。</p>

<p>この <code>com.google.android.maps</code> は Google Maps API v1 で必要だったもので、v2 では必要ありません。削除しましょう。</p>

<p>v2 の使い方を説明するブログやサイトで、これが含まれてしまってるものがあるようです。(かくいう自分もそんなサイトからコピペしてきたまま使ってたのでエラーになりました（汗）</p>

<h2>動かす</h2>

<p>あとは、実機と変わりません。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gmapv2_on_intel_emulator_01.png" alt="img" /></p>

<p>やばい、PC性能とネットワーク環境のおかげで実機より快適になったｗ</p>

<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/ria10/20121218/1355794748">AndroidでGoogle Maps v2 をエミュレータで動かしてしかも爆速 &ndash; リア充爆発日記</a></li>
<li><a href="http://denshikousaku.net/how-to-make-android-google-maps-v2-work-in-android-emulator">エミュレータでGoogle Maps for Android V2を動かす方法 | アプリ開発とRaspberry PIとArduino実験</a></li>
<li><a href="http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator">Running Google Maps v2 on Android Emulator &ndash; Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない]]></title>
    <link href="http://blog.amay077.net/blog/2013/10/11/denshikokudo-on-googlemap/"/>
    <updated>2013-10-11T13:55:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/10/11/denshikokudo-on-googlemap</id>
    <content type="html"><![CDATA[<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>

<!--more-->


<h2>2013.11.03 追記</h2>

<p>電子国土Web.NEXT という名称で試験公開されていたものが、「地理院地図」「地理院タイル」として正式公開されました。</p>

<ul>
<li><a href="http://www.gsi.go.jp/johofukyu/johofukyu40032.html">地理院地図の公開について | 国土地理院</a></li>
<li><a href="http://portal.cyberjapan.jp/help/development.html#siyou">地理院タイルを用いた開発 | 地理院地図</a></li>
</ul>


<p>地理院タイルは <a href="http://portal.cyberjapan.jp/help/development/oldScheme.html">従来版タイル</a> と仕様が異なります。従来版タイルは <strong>2013年度中に提供終了予定</strong> との事ですし、新しい地理院タイルの方が大幅に仕様が簡略化されたので、こちらを使った方が良いです。</p>

<p>このエントリも「電子国土」を「地理院地図（地理院タイル）」に修正しました。</p>

<hr />

<h2>2013.10.17 追記</h2>

<p><a href="http://qiita.com/amay077/items/979dfc858a21c8bbb7a9#comment-6d0be86c2ba90df50808">コメント</a>で頂いていますが、現在は、 <strong>「日本向けにローカライズされた」</strong> Googleマップ側でも表記が修正されたようで、当初「問題がある」と言われていた地域は問題が解消されているように見えます。
<strong>ただし、下記のように Google Maps API で「region=JP」が指定されている場合に限ります。</strong></p>

<ul>
<li><a href="http://d.hatena.ne.jp/kitokitoki/20130415/p1">Google Maps API v3 で 日本海（東海）と「東海」が併記されるのを避けるには &ndash; わからん</a></li>
</ul>


<p>これによって「Googleマップ禁止令はもはや無用である」と考えることもできますし、「依然として国の制御下には無い」と考えることもできます。</p>

<p>以下の情報は必要なくなるかも知れませんが、今後「Googleマップ以外の選択肢」の一つとして参考になれば幸いです。</p>

<p>&mdash; 追記ここまで &mdash;</p>

<hr />

<ul>
<li><a href="http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 &ndash; NAVER まとめ</a></li>
<li><a href="http://shinka3.exblog.jp/20690859/">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>
<li><a href="https://twitter.com/nissyyu/status/387870282570272768">Twitter &ndash; うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>
</ul>


<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>

<p>で、対策としてはいくつかあります。。。</p>

<h4>画像の地図や PDF に変える</h4>

<ul>
<li>どんな時代錯誤ですか</li>
</ul>


<h4>他の地図APIを使う</h4>

<ul>
<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>
<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>
<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>
<li>Bing, OSM は「制御下には無い」でしょう。</li>
</ul>


<h4>GoogleMapの問題のある表記を「正しい表記」に上書きする</h4>

<ul>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（^_^;）</li>
<li>これ→<a href="http://jsdo.it/toaSoku/gmapforjapan">日本政府に「禁止されない」 Google Maps &ndash; jsdo.it &ndash; Share JavaScript, HTML5 and CSS</a></li>
<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>
</ul>


<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>

<h2>ではどうするか？</h2>

<p><a href="http://portal.cyberjapan.jp/">地理院地図</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>

<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>

<p>ただし、Google Map API から地理院地図の地図APIに移行することは、前述の通り、それなりのコストが発生します。</p>

<p>ので、 <strong>「Google Map API を使って地理院地図を利用する方法」</strong> を紹介します。</p>

<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>

<p>既に実現されてる方々がいらっしゃいます。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws">Googleマップを使って国土地理院の地図を見る</a></li>
<li><a href="http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>
</ul>


<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで地理院地図(地理院タイル)を使う、 最もシンプルな実装例を紹介します。</p>

<h3>1. Googleマップを表示するページを用意する</h3>

<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>

<ul>
<li><a href="http://jsdo.it/amay077/tM0q">Google Maps Javascript API v3 の使用例</a></li>
</ul>


<p>HTML+Javascript のソースコードはこんな感じ(<a href="http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>

<p>```html google.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>2. 地理院地図(地理院タイル)を表示するように置き換える</h3>

<ul>
<li><a href="http://jsdo.it/amay077/wFtJ">Google Maps Javascript API v3 での地理院地図の表示例</a></li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/denshikokudo_on_googlemap_01.png" alt="" /></p>

<p>表示が地理院地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、ロゴの表示が必要なので、左下に置いています。(地理院地図の正式なロゴが公開されたら置き換えてください)</p>

<p>という処理を追加したのが、下のコード。
変更が１行、追加行が30行くらいです。
変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。
<a href="https://gist.github.com/amay077/6928205/revisions">gist</a> でも diff を見られます。</p>

<p>```html gsi_map.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: "GsiMaps", // 地理院地図の英語表記は「GIS Maps」
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);

  map.setOptions({
    mapTypeControl: false // 右上の地図タイプ選択を消す
  });

  // 地理院タイルを Overlay する
  // via http://portal.cyberjapan.jp/help/development.html
  map.mapTypes.set("GsiMaps", {
    name:"地理院地図(GSI Maps)",
    tileSize:new google.maps.Size(256,256),
    minZoom:5,
    maxZoom:18, 
    getTile:function(tileCoord, zoom, ownerDocument) {
      var img = ownerDocument.createElement("img");
      img.style.width = "256px";
      img.style.height = "256px";
      var x = (tileCoord.x % Math.pow(2, zoom)).toString();
      var y = tileCoord.y.toString();
      img.src = "http://cyberjapandata.gsi.go.jp/xyz/std/" + zoom +  "/" + x + "/" + y + ".png";
      return img;
    }
  });

   // 左下に電子国土ロゴを表示(TODO: 地理院地図の正式なロゴが公開されたら置き換える)
  var logo = document.createElement('DIV');
  logo.style.padding = '3px';
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo);
  logo.innerHTML = '&lt;a href="http://portal.cyberjapan.jp/portalsite/kiyaku/index.html" target="_blank"&gt;&lt;img style="width:32px, height:32px" src="http://cyberjapan.jp/images/icon01.gif" alt="電子国土" /&gt;&lt;/a&gt;';    }
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>不安とか懸念とか…</h3>

<h4>地図の表示が Google に比べて…</h4>

<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>

<h4>「試験公開」ってなってるんですけど…</h4>

<p>地理院地図は「正式公開」になったので安心ですね。</p>

<p>旧Verについては、2013年度中に運用停止とのことです。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/oldver.html">地理院地図｜旧版情報</a></li>
</ul>


<h4>利用規約とかどうなってるの？</h4>

<p><a href="http://portal.cyberjapan.jp/help/termsofuse.html">地理院地図｜利用規約</a> を見てください。</p>

<h2>まとめ</h2>

<p>いかがでしょうか？</p>

<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」地理院地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>

<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>

<p>地理院地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>

<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>

<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>
]]></content>
  </entry>
  
</feed>
