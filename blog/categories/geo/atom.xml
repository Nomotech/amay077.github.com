<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geo | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/geo/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-09-10T21:15:17+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[総務省のデータを Elasticsearch にぶち込んで、緯度経度から市区町村の何丁目までを取り出す]]></title>
    <link href="http://amay077.github.io/blog/2013/09/10/implementing-reverse-geocoding-using-elasticsearch/"/>
    <updated>2013-09-10T21:13:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/10/implementing-reverse-geocoding-using-elasticsearch</id>
    <content type="html"><![CDATA[<p>いわゆる「逆ジオコーディング」と呼ばれる機能ですが、きっかけはこれら２つの記事です。</p>

<!--more-->


<ul>
<li><a href="http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9">PHP - 総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></li>
<li><a href="http://qiita.com/masuidrive/items/21a282c7bf54fd6a4985">PostgreSQL - 国土交通省のデータを使って、緯度経度から市区町村までを取り出す</a></li>
</ul>


<p>Solr や Elasticsearch でも同じことができるのでは、という事で Elasticsearch でやってみました。</p>

<h2>Elasticsearch の導入</h2>

<p>は、</p>

<ul>
<li><a href="http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch/">Elasticsearch で位置情報を検索する手順 - Experiments Never Fail</a></li>
</ul>


<p>をご覧ください。</p>

<h2>1. 総務省のデータをダウンロードする</h2>

<ul>
<li><a href="http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9">PHP - 総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></li>
</ul>


<p>とほぼ同じですが、「世界測地系緯度経度・G-XML形式」ではなく、 <strong>「世界測地系緯度経度・shape形式」</strong> を使います。</p>

<p>一応再掲すると、</p>

<ol>
<li><a href="http://e-stat.go.jp/SG2/eStatGIS/page/download.html">http://e-stat.go.jp/SG2/eStatGIS/page/download.html</a> へ行く。</li>
<li>左から「平成22年度国勢調査（小地域）」を選ぶ。</li>
<li>「男女別人口総数及び世帯総数」（←なんでもいい）を選択して、「統計表各種データダウンロードへ」を押す。</li>
<li>「世界測地系緯度経度・Shape形式」のデータ（下図参照）をダウンロードする。ダウンロードしたら zip ファイルのまま置いといて。</li>
</ol>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/implementing_reverse_geocoding_using_elasticsearch_01.png" alt="img" /></p>

<h2>2. Shapefile を GeoJSON 形式に変換する</h2>

<p>Elasticsearch へ投入できるデータ形式は JSON なので、ダウンロードした Shape形式のデータを JSON 形式の地理空間拡張である GeoJSON 形式に変換します。</p>

<p>スクリプトを書いてもできますが面倒なので、便利なオンラインツールに頼ることにします。</p>

<ul>
<li><a href="http://converter.mygeodata.eu/#convertVector">Free on-line GIS data format and coordinates converter</a></li>
</ul>


<p>手順は、</p>

<ol>
<li>上記サイトへ行き、「Run vector converter」を押す。</li>
<li>「ファイルを選択」で、さっきダウンロードした ZIP ファイルを指定し、「Send ZIP File」を押す。</li>
<li>"Datasets description" というページになったら、その最下部にある「Chack available operations」を押す。(ここでは、不要なデータ項目を除外できるのだけど、面倒なので割愛)</li>
<li>”Export to format:” で "GeoJSON" を選択。それ以外はそのままで「Proceed selected operation」を押す。</li>
<li>しばらく待つと、「Download the ZIP file」リンクが表れるので、押して変換結果をダウンロードする。</li>
</ol>


<p>ダウンロードした ZIP ファイルを解凍すると、「xxx.json」ファイルが見つかります。それをテキストエディタで開くと、<code>features</code> 以下に、住所エリアの情報が1行ずつ出力されています。</p>

<p>試しに1行取り出して、JSON を整形（見やすいよう適宜省略）してみると次のようになります。</p>

<p>```javascript town.json
{</p>

<pre><code>"type": "Feature",
"properties": {
    "KEN_NAME": "愛知県", 
    "GST_NAME": "名古屋市", 
    "CSS_NAME": "中区", 
    "MOJI": "本丸", 
    …省略…
}, 
"geometry": {
    "type": "Polygon",
    "coordinates": [
        [[136.895888, 35.187236], 
         [136.897375, 35.187357], 
          …中略… 
         [136.895888, 35.187236]]
    ]
}
</code></pre>

<p>}
```</p>

<p>これは「愛知県名古屋市中区本丸」のデータですね。
<code>properties</code> 以下は、この住所エリアの属性情報を示しています。
<code>geometry</code> 以下が、この住所エリアの位置情報（ポリゴン）を示しています。</p>

<h2>3. Elasticsearch にスキーマを定義する</h2>

<p>Elasticseach はスキーマフリーですが、位置情報のところだけは明示的に宣言しないといけないらしいので、下のようなコマンドを実行して定義します。</p>

<p>あ、ここでは、</p>

<ul>
<li>Index名 : towns</li>
<li>Type名 : town</li>
</ul>


<p>としています。</p>

<p>「Index や Type って何？」という方は</p>

<ul>
<li><a href="http://qiita.com/ise_daisuke/items/5e10e0b3ef9dffed08a9">Elasticsearch用語の適当なまとめ</a></li>
</ul>


<p>をどうぞ。</p>

<p>ではコマンドです。</p>

<p>```sh
curl -XPUT 'http://localhost:9200/towns/'</p>

<p>curl -XPUT 'http://localhost:9200/towns/town/_mapping' -d '
{</p>

<pre><code>"town" : {
    "properties": {
        "geometry": {
            "type": "geo_shape", 
            "tree": "quadtree",
            "precision": "1m"
        }
    }
}
</code></pre>

<p>}'
```</p>

<p><code>properties.geometry</code> は、「geo_shape」 として扱う事を宣言しています。他の２つの設定は、インデックスの種類と精度を意味しますが、よく分かってません。</p>

<ul>
<li><a href="http://www.elasticsearch.org/guide/reference/mapping/geo-shape-type/">Geo Shape Type | Reference Guide | Elasticsearch</a></li>
</ul>


<p>で勉強しましょう。</p>

<h2>4. データを Elasticsearch に投入する</h2>

<p>さて、いよいよこの「1行1JSON」のデータを、1行ずつ、Elasticsearch に投入します。
先の xxxx.json を置換なり何なりを駆使して、スクリプトにしちゃうのがてっとり早いでしょう。(json ファイルは Shift-jis なので、UTF-8 に変換しておきましょう。）</p>

<p>1行のデータを投入するコマンドは次のようになります。</p>

<p>```
curl -XPUT 'http://localhost:9200/towns/town/1' -d '{</p>

<pre><code>"type": "Feature",
"properties": {
    "KEN_NAME": "愛知県", 
    "GST_NAME": "名古屋市", 
    "CSS_NAME": "中区", 
    "MOJI": "本丸", 
    …省略…
}, 
"geometry": {
    "type": "Polygon",
    "coordinates": [
        [[136.895888, 35.187236], 
         [136.897375, 35.187357], 
          …中略… 
         [136.895888, 35.187236]]
    ]
}
</code></pre>

<p>}'
```</p>

<p><code>towns/town/1</code> の最後の「1」のところは、連番にする必要があります。(オートインクリメントとかないのかな？)</p>

<p>全件を PUT すつスクリプトファイルは、下の画像のような感じになると思います。(データのライセンスがどうか分からないのでスクリプトファイル自体を公開するのはやめておきます)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/implementing_reverse_geocoding_using_elasticsearch_02.png" alt="img" /></p>

<p>これをTerminal で実行すると、数分かからずに Elasticsearch にデータが投入完了します。</p>

<p><code>curl -XGET 'http://localhost:9200/towns/town/1'</code> などを実行すれば、正しくデータが登録できたか確認できます。</p>

<h2>5. 検索してみる</h2>

<p>ついに来ました。
では、緯度経度を与えて住所が返ってくるところ、やってみましょう。</p>

<p>Elasticsearch では検索クエリも JSON で書きます。</p>

<p>例えば、<a href="http://yahoo.jp/zsXYL2">大須観音駅</a> らへんの緯度経度(35.1613077,136.898282)の住所で検索する場合は、次のようにします。</p>

<p>```
curl -XPOST 'http://localhost:9200/towns/town/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
             "geo_shape": {
                "town.geometry": {
                    "shape": {
                        "type" : "envelope",
                        "coordinates" : [[136.898282, 35.1613077], [136.898282, 35.1613077]]
                    }
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<p><code>geo_shape</code> フィルタを使い、条件に envelople(左上〜右下の領域) を指定します。今は「点」での検索をしたいので、左上、右下に同じ座標を指定します。
注意点は、 <strong>「経度, 緯度」</strong> の順であることです。</p>

<p>※ <a href="http://www.elasticsearch.org/guide/reference/query-dsl/geo-distance-filter/"><code>geo_distance</code></a> というフィルタもありますが、こちらはデータが「点」専用なようで、今回のような「ポリゴン」には使えませんでした。</p>

<p>さて、上のコマンドを実行すると、下のような結果が得られます。(整形、省略済)</p>

<p>```
{
  "took":1,
  "timed_out":false,
  "_shards":{</p>

<pre><code>"total":5,
"successful":5,
"failed":0
</code></pre>

<p>  },
  "hits":{</p>

<pre><code>"total":1,
"max_score":1.0,
"hits":[{
  "_index":"towns",
  "_type":"town",
  "_id":"29",
  "_score":1.0, 
  "_source" : { 
    "type": "Feature", 
    "properties": { 
      "KEN_NAME": "愛知県", 
      "GST_NAME": "名古屋市", 
      "CSS_NAME": "中区", 
      "MOJI": "大須２丁目", 
      …以下省略…
</code></pre>

<p>```</p>

<p>はい、「緯度経度(35.1613077,136.898282)」の住所は「愛知県名古屋市中区大須２丁目」であることが取得できました。</p>

<h2>まとめ</h2>

<p>いかがでしょうか、Elasticsearch でも逆ジオコーディングの実装が、簡単にできることが分かりました。</p>

<p>PostGIS、MongoDB との対比では、</p>

<ul>
<li>セットアップが簡単</li>
<li>REST API なので直接他のサービスとマッシュアップできる</li>
</ul>


<p>あたりがメリットでしょうか。</p>

<p>逆にデータの取り込みはひと工夫必要で、PostGIS の方が簡単です。
このデータ用の River plugin を作ればよいのでしょうが、方法がさっぱり…。</p>

<p>最後に、</p>

<p><a href="http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9">総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></p>

<blockquote><p>実は、データをダウンロードするのが、一番手間がかかります・・・。</p></blockquote>

<p>でも言われていますが、まったくその通りです。
１市区町村ずつダウンロードとか正直やってられません。</p>

<p>総務省でも国土交通省でもどちらでも良いのですが、
<strong>「全国の大字境界＋属性データを一括入手する方法」</strong> を用意して欲しいものです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch で位置情報を検索する手順]]></title>
    <link href="http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch/"/>
    <updated>2013-09-09T21:08:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch</id>
    <content type="html"><![CDATA[<p>Elasticsearch は、オープンソースの全文検索エンジンです。Apache Solr と並んでよく取り上げられるようになってきました。</p>

<p>位置情報の検索機能も標準搭載しているとのことで、試しに使ってみました。</p>

<!--more-->


<h2>Elasticsearch の導入</h2>

<p>下の情報が大変参考になりました。(環境は Mac。事前に Java と homebrew の導入が必要です）</p>

<ul>
<li><a href="http://qiita.com/Konboi@github/items/56f0aaca77db5df027af">elasticsearch - ElasitcSearch ことはじめ - Qiita [キータ]</a></li>
</ul>


<h2>試しに使ってみる</h2>

<p>下のサイトが大変参考なりました。</p>

<ul>
<li><a href="http://inokara.hateblo.jp/entry/2013/09/07/153826">Elasticsearch を試してみる - ようへいの日々精進</a></li>
</ul>


<h2>位置情報を検索してみる</h2>

<p>下のようなスキーマのデータを登録して検索する想定です。</p>

<p>```javascript venue_example.json
{</p>

<pre><code>"name" : "Tokyo St",
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}
```</p>

<h3>1. スキーマを登録する</h3>

<p>Elasticsearch は基本的にはスキーマレスで動くのですが、位置情報を表す項目は、明確にスキーマを定義する必要があるようです。</p>

<p>データ投入の前にそれを行います。</p>

<p>```sh
curl -XPUT 'http://localhost:9200/myvenues/'</p>

<p>curl -XPUT 'http://localhost:9200/myvenues/venue/_mapping' -d '
{</p>

<pre><code>"venue" : {
    "properties" : {
        "pin" : { "type" : "geo_point" }
    }
}
</code></pre>

<p>}'
```</p>

<p>ここでは、<code>venue</code> のプロパティ群の内の <code>pin</code> 項目は、位置情報(geo_point)だよ、と定義しています。</p>

<h3>2. データを投入する</h3>

<p>2件ほど、テストデータを投入します。</p>

<p>```sh
curl -XPUT 'http://localhost:9200/myvenues/venue/1' -d '{</p>

<pre><code>"name" : "Tokyo St",
"tag" : ["station", "train"],
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}'</p>

<p>curl -XPUT 'http://localhost:9200/myvenues/venue/2' -d '{</p>

<pre><code>"name" : "Nagoya St",
"tag" : ["station", "train"],
"pin" : {
    "location" : {
        "lat" : 35.17,
        "lon" : 136.88
    }
}
</code></pre>

<p>}'
```</p>

<h3>3. 位置情報で検索する</h3>

<h4>位置＋距離</h4>

<p>緯度/経度:35.6/139.8 から 20km 周囲にあるデータを検索します。</p>

<p>```sh
curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_distance" : {
                "distance" : "20km",
                "venue.pin" : {
                    "lat" : 35.6,
                    "lon" : 139.8
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<h5>結果</h5>

<p>Tokyo St だけがヒットしました。</p>

<p>```javascript
{"took":0,"timed_out":false,"<em>shards":{"total":5,"successful":5,"failed":0},"hits":{"total":1,"max_score":1.0,"hits":[{"</em>index":"myvenues","<em>type":"venue","</em>id":"1","<em>score":1.0, "</em>source" : {</p>

<pre><code>"name" : "Tokyo St",
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}}]}}
```</p>

<h4>範囲(矩形)</h4>

<p>左上:35.2/136.8 〜 右下:35.1/136.9 にあるデータを検索します。緯度は上(北)の方が値が大きくなるので、上下関係に注意が必要です。</p>

<p>```sh
curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "venue.pin" : {
                    "top_left" : {
                        "lat" : 35.2,
                        "lon" : 136.8
                    },
                    "bottom_right" : {
                        "lat" : 35.1,
                        "lon" : 136.9
                    }
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<h5>結果</h5>

<p>Nagoya St だけがヒットしました。</p>

<p>```javascript
{"took":0,"timed_out":false,"<em>shards":{"total":5,"successful":5,"failed":0},"hits":{"total":1,"max_score":1.0,"hits":[{"</em>index":"myvenues","<em>type":"venue","</em>id":"2","<em>score":1.0, "</em>source" : {</p>

<pre><code>"name" : "Nagoya St",
"pin" : {
    "location" : {
        "lat" : 35.17,
        "lon" : 136.88
    }
}
</code></pre>

<p>}}]}}
```</p>

<h4>範囲(多角形)</h4>

<p>任意の多角形領域にあるデータを検索します。</p>

<p>ここでは GeoJSON 互換の記述方式で書いてます。経度が先なので注意。
今までのような lat: lon: の配列でもかけますが、 GeoJSON 便利なので。</p>

<p>```sh
curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_polygon" : {
                "venue.pin" : {
                    "points" : [
                        [139.7, 35.7],  // 経度が先！
                        [139.8, 35.7],
                        [139.8, 35.6],
                        [139.7, 35.6],
                        [139.7, 35.7]
                    ]
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<h5>結果</h5>

<p>Tokyo St だけがヒットしました。</p>

<p>```javascript
{"took":0,"timed_out":false,"<em>shards":{"total":5,"successful":5,"failed":0},"hits":{"total":1,"max_score":1.0,"hits":[{"</em>index":"myvenues","<em>type":"venue","</em>id":"1","<em>score":1.0, "</em>source" : {</p>

<pre><code>"name" : "Tokyo St",
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}}]}}
```</p>

<p>(ポリゴンの座標群が、右回りじゃないとダメかな？と思って恐る恐る左回りにしてみたら、問題なく検索できました！)</p>

<h2>まとめ</h2>

<p>最初 <code>geo_point</code> を明示的に指定しないといけないのに気づかなくてしばらくハマりましたが、それ意外はすんなりと動きました。</p>

<p>機能を試しただけでパフォーマンスなどは計測できていませんが、なんか使えそうな気はします。</p>

<p>位置情報関係の情報を探したい時は、公式サイトの GUIDE</p>

<ul>
<li><a href="http://www.elasticsearch.org/guide/">Reference Guide | Elasticsearch</a></li>
</ul>


<p>の検索バーで 「geo」で検索すると、有用な情報が得られます。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.elasticsearch.org/">Open Source Distributed Real Time Search &amp; Analytics | Elasticsearch</a></li>
<li><a href="http://www.elasticsearch.org/blog/geo-location-and-search/">Geo Location And Search | Blog | Elasticsearch</a></li>
<li><a href="http://www.elasticsearchtutorial.com/spatial-search-tutorial.html">Spatial Search ElasticSearch tutorial - ElasticSearch Tutorial.com</a></li>
<li><a href="http://stackoverflow.com/questions/16113439/elasticsearch-geo-distance-filter-with-multiple-locations-in-array-possible">ElasticSearch geo distance filter with multiple locations in array - possible? - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
