<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Geo | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/geo/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-10-16T16:10:15+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Googleマップ禁止令が出たのなら、電子国土地図をGoogleマップで使えばいいじゃない]]></title>
    <link href="http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap/"/>
    <updated>2013-10-11T13:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap</id>
    <content type="html"><![CDATA[<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>

<!--more-->


<ul>
<li><a href="http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 - NAVER まとめ</a></li>
<li><a href="http://shinka3.exblog.jp/20690859/">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>
<li><a href="https://twitter.com/nissyyu/status/387870282570272768">Twitter - うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>
</ul>


<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>

<p>で、対策としてはいくつかあります。。。</p>

<h4>画像の地図や PDF に変える</h4>

<ul>
<li>どんな時代錯誤ですか</li>
</ul>


<h4>他の地図APIを使う</h4>

<ul>
<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>
<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>
<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>
<li>Bing, OSM は「制御下には無い」でしょう。</li>
</ul>


<h4>GoogleMapの問題のある表記を「正しい表記」に上書きする</h4>

<ul>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（<sup>_<sup>;）</sup></sup></li>
<li>これ→<a href="http://jsdo.it/toaSoku/gmapforjapan">日本政府に「禁止されない」 Google Maps - jsdo.it - Share JavaScript, HTML5 and CSS</a></li>
<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>
</ul>


<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>

<h2>ではどうするか？</h2>

<p><a href="http://portal.cyberjapan.jp/">電子国土</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>

<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>

<p>ただし、Google Map API から電子国土の地図APIに移行することは、前述の通それなりのコストが発生します。</p>

<p>ので、ここでは、 <strong>「Google Map API を使って電子国土地図を利用する方法」</strong> を紹介します。</p>

<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>

<p>既に実現されてる方々がいらっしゃいます。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws">Googleマップを使って国土地理院の地図を見る</a></li>
<li><a href="http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>
</ul>


<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで電子国土地図を使う、 最もシンプルな実装例を紹介します。</p>

<h3>1. Googleマップを表示するページを用意する</h3>

<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>

<ul>
<li><a href="http://jsdo.it/amay077/tM0q">Google Maps Javascript API v3 の使用例</a></li>
</ul>


<p>HTML+Javascript のソースコードはこんな感じ(<a href="http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>

<p>```html google.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>2. 電子国土地図を表示するように置き換える</h3>

<ul>
<li><a href="http://jsdo.it/amay077/wFtJ">Google Maps Javascript API v3 での電子国土地図の表示例</a></li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/denshikokudo_on_googlemap_01.png" alt="" /></p>

<p>表示が電子国土の地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、「電子国土」のロゴの表示が必要なので、左下に置いています。</p>

<p>という処理を追加したのが、下のコード。
変更が１行、追加行が６０行くらい（ちと長い?）です。
変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。
<a href="https://gist.github.com/amay077/6928205/revisions">gist</a> でも diff を見られます。</p>

<p>```html denshikokudo.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: "DenshiKokudo",   // ← 電子国土を使うように変更
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);

  // ↓↓電子国土地図を Overlay する↓↓
  map.setOptions({
    mapTypeControl: false // 右上の地図タイプ選択を消す
  });

  // via http://portal.cyberjapan.jp/portalsite/version/v4/index.html
  var dataset = [null, null, null, null, null, "JAIS","JAIS","JAIS","JAIS", "BAFD1000K",
    "BAFD1000K", "BAFD1000K", "BAFD200K","BAFD200K","BAFD200K", "DJBMM","DJBMM",
    "DJBMM", "FGD"];

  map.mapTypes.set("DenshiKokudo", {
    name:"電子国土",
    tileSize:new google.maps.Size(256,256),
    minZoom:5,
    maxZoom:18, 
    getTile:function(tileCoord, zoom, ownerDocument) {
      var img = ownerDocument.createElement("img");
      img.style.width = "256px";
      img.style.height = "256px";
      var x = (tileCoord.x % Math.pow(2, zoom)).toString();
      var y = tileCoord.y.toString();
      var tileX = "0000000".substr(0, (7 - x.length)) + x;
      var tileY = "0000000".substr(0, (7 - y.length)) + y;
      var dir = "";
      for( var i = 0; i &lt; 6; i++ ) {
        dir += tileX.charAt(i) + tileY.charAt(i) + "/";
      }
      img.src = "http://cyberjapandata.gsi.go.jp/sqras/all/" + dataset[zoom] + "/latest/" + zoom + "/" + dir + tileX + tileY + ".png";
      return img;
    }
  });

  // 左下に電子国土ロゴを表示する
  var logo = document.createElement('DIV');
  logo.style.padding = '3px';
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo);
  logo.innerHTML = '&lt;a href="http://portal.cyberjapan.jp/portalsite/kiyaku/index.html" target="_blank"&gt;&lt;img style="width:32px, height:32px" src="http://cyberjapan.jp/images/icon01.gif" alt="電子国土" /&gt;&lt;/a&gt;';    
  // ↑↑電子国土地図を Overlay する↑↑
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>不安とか懸念とか…</h3>

<h4>地図の表示が Google に比べて…</h4>

<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>

<h4>「試験公開」ってなってるんですけど…</h4>

<p>なにが「試験公開」なのかよくわからないです。電子国土Web.NEXT が試験公開で、地図画像自体は「正式」公開なのでしょうか。。。</p>

<p>運用予定についてのページ <a href="http://portal.cyberjapan.jp/portalsite/version/djapan_yotei.html#v234">電子国土Webシステムの今後の予定について</a> をチェックしておくと良さそうです。</p>

<h4>利用規約とかどうなってるの？</h4>

<p><a href="http://portal.cyberjapan.jp/portalsite/q_and_a/index.html">電子国土Webシステムの利用に関するフロー</a> を見てください。</p>

<h2>まとめ</h2>

<p>いかがでしょうか？</p>

<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」電子国土の地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>

<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>

<p>電子国土地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>

<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>

<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metersToEquatorPixels を Google Maps Android API v2 で]]></title>
    <link href="http://amay077.github.io/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2/"/>
    <updated>2013-10-09T00:21:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2</id>
    <content type="html"><![CDATA[<p>Google Map API v1 には、「地図上の距離(ｍ)を画面上の距離(ピクセル)に変換する」ためのメソッド <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float">Projection.metersToEquatorPixels</a>) がありましたが、v2 ではなくなってしまいました。</p>

<!--more-->


<p>ので、以下のような代替関数を作ってみました。</p>

<p>```java metersToEquatorPixels.java
public static int metersToEquatorPixels(GoogleMap map, LatLng base, float meters) {</p>

<pre><code>final double OFFSET_LON = 0.5d;

Location baseLoc = new Location("");
baseLoc.setLatitude(base.latitude);
baseLoc.setLongitude(base.longitude);

Location dest = new Location("");
dest.setLatitude(base.latitude);
dest.setLongitude(base.longitude + OFFSET_LON);

double degPerMeter = OFFSET_LON / baseLoc.distanceTo(dest); // 1m は何度？
double lonDistance = meters * degPerMeter; // m を度に変換

Projection proj = map.getProjection();
Point basePt = proj.toScreenLocation(base);
Point destPt = proj.toScreenLocation(new LatLng(base.latitude, base.longitude + lonDistance));

return Math.abs(destPt.x - basePt.x);
</code></pre>

<p>}
```</p>

<p>行っていることは単純で、基準となる緯度経度:<code>base</code> から、適当に(ここでは 0.5度)東へ移動した緯度経度を <code>Location.distanceTo</code> で求め、その結果から、「1ｍは何度か？」を求めます。あとは、この係数を使って 地図上の距離:<code>meters</code> を度に変換し、最後に、<code>base</code> と移動後の緯度経度それぞれを画面座標に変換して、画面上の距離を返す、というものです。</p>

<p>「1ｍは何度か？」は、赤道上の値を使っても良いのですが、緯度によって値が大きく変わるので、このような手法を取りました。</p>

<p>ただこれでも、求める距離の精度によっては、<code>OFFSET_LON</code> の値の調整が必要な気がします。また、経度:0 をまたぐような地域では正しく動かない気がします。(いずれも未検証)</p>

<p>また、緯度方向にもそれなりに正確な数値を出すには、上記と同じことを緯度に対しても行う必要があります。(これは v1 の API にもなかった)</p>

<p>v2 になって、描画系でピクセル座標を意識することはなくなったんであまり使うことも無いと思いますが、なにかで必要になったら思い出す程度で。</p>

<h3>追記</h3>

<p>あとで気づいたんですが、 v1 の <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float">Projection.metersToEquatorPixels</a>) は、赤道上の距離で算出してたんですね。それと比べるとちょっとオーバースペックでした。</p>

<p> それと、この記事を書く前に私のツイートを読まれた @honjo2 さんが、 v1 と同じ(赤道の距離を使う)仕様の関数を公開してくださいました。</p>

<blockquote class="twitter-tweet"><p>どうぞ <a href="https://t.co/quYnqvn1tw">https://t.co/quYnqvn1tw</a> RT <a href="https://twitter.com/amay077">@amay077</a>: Google Map Android v2 になって metersToEquatorPixels がなくなっちゃったのが地味に不便だ。</p>&mdash; 本城 博昭 (@honjo2) <a href="https://twitter.com/honjo2/statuses/387368608541589505">October 8, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longitude の略し方。lng 派と lon 派の終わらない争い]]></title>
    <link href="http://amay077.github.io/blog/2013/09/25/the-battle-of-abbreviation-lat-vs-lng/"/>
    <updated>2013-09-25T21:08:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/25/the-battle-of-abbreviation-lat-vs-lng</id>
    <content type="html"><![CDATA[<p>地図上での位置は「緯度経度」で表します。英語だと「latitude, longitude」ですね。
これらの単語、コーディングする際は短縮したいわけです。latitude は <code>lat</code> で全会一致です。問題は longitude 。</p>

<!--more-->


<p>業界？の中では、longitude の略し方についての議論が度々沸き起こります。</p>

<p>例えば、、、</p>

<p>初めは、タイトルの議論で推移していましたが、次第に略し方の議論に。。。</p>

<ul>
<li><a href="http://togetter.com/li/85864">latitudeとlongitude，どっちが緯度でどっちが経度？ - Togetter</a></li>
</ul>


<p><code>lon</code> 派の方の意見。</p>

<blockquote class="twitter-tweet"><p>そういえば緯度経度のうち経度（longitude）をlong, lon, lngなどと書く場合があるんだけど、longは長整数型のために予約語になってる場合があるのと、lngだと「イング」と読めてしまうからという理由でlonにしてる。</p>&mdash; Masaki Ohashi (@ohashimasaki) <a href="https://twitter.com/ohashimasaki/statuses/308895891308294144">March 5, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><code>lng</code> 支持？な方々</p>

<blockquote class="twitter-tweet"><p>longitudeの省略形を何にするか迷ってる。lon or lng 今のところlngが優勢。</p>&mdash; 本城 博昭 (@honjo2) <a href="https://twitter.com/honjo2/statuses/28848028079">October 27, 2010</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>最近Google Maps APIを触っていたので、CHINTAIの地図で経度(longitude)のパラメータがlngじゃなくてlonなのが新鮮に思えた</p>&mdash; Ryusuke SEKIYAMA (@rsky) <a href="https://twitter.com/rsky/statuses/25312333134">September 23, 2010</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>振り回されてる方々</p>

<blockquote class="twitter-tweet"><p>lngとlonで５分ハマったー</p>&mdash; ばん↓どう↑さん↓ (@netartjp) <a href="https://twitter.com/netartjp/statuses/379923672632266752">September 17, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>lonとlngのミスで1時間無駄にした</p>&mdash; カメキチ (@kamekiti) <a href="https://twitter.com/kamekiti/statuses/186149216492589056">March 31, 2012</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>YahooのローカルサーチAPIのパラメーターの経度情報って、「lon」から始まる値なんですね。他の多くが「lng」な気がするので、始め何でエラーが出るのは分かりませんでした。ということで、ほぼ出来たピョン吉。</p>&mdash; 星野邦敏 (@khoshino) <a href="https://twitter.com/khoshino/statuses/149640555092131842">December 22, 2011</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>おいマジか Yahoo!（笑</p>

<blockquote class="twitter-tweet"><p>「Y.LatLngオブジェクトのメソッドはlat、lngですが、ローカルサーチAPIのパラメータ名はlat、lonなので注意してください」YOLPで挑戦～「マクドナルドはどこだ」アプリをHTML5で作る！ <a href="http://t.co/QX8yiyvT">http://t.co/QX8yiyvT</a></p>&mdash; NI-Lab. (@nilab) <a href="https://twitter.com/nilab/statuses/189537270347472896">April 10, 2012</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とこのように、一つの企業内でも「揺れ」が生じてしまう程度にはバラバラな感じです。</p>

<h2>調べてみた</h2>

<p>で、デファクトスタンダードはどれなのよ？をいろんな地図に関する Web API の仕様から一覧化してみました。</p>

<h3>Lng 派</h3>

<p>Google は神！Google 先生について行きます！</p>

<ul>
<li>Google - https://developers.google.com/maps/documentation/javascript/reference?hl=ja#LatLng</li>
<li>Mapion - http://labs.mapion.co.jp/api/asdoc/index.html</li>
<li>ロケタッチ - http://tou.ch/developer/api_all?uri=spots%2Fsearch</li>
<li>Leaflet - http://leafletjs.com/reference.html#latlng</li>
<li>Yahoo(地図API) - http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/js/#index6-2</li>
<li>mapquest - http://www.mapquestapi.com/staticmap/#getmap</li>
</ul>


<h3>Lon 派</h3>

<p>頭から３文字取ったら普通これだろjk</p>

<ul>
<li>Yahoo(ローカルサーチ) - http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/localsearch.html</li>
<li>OpenStreetMap - http://wiki.openstreetmap.org/wiki/API_v0.6#Create_a_new_note:<em>Create:</em>POST_.2Fapi.2F0.6.2Fnotes</li>
<li>OpenLayers - http://dev.openlayers.org/docs/files/OpenLayers/BaseTypes/LonLat-js.html ※LonLat！</li>
<li>電子国土Web - http://portal.cyberjapan.jp/site/mapuse4/#zoom=5&amp;lat=35.99989&amp;lon=138.75&amp;layers=BTTT</li>
<li>Elasticsearch - http://www.elasticsearch.org/guide/reference/mapping/geo-point-type/</li>
<li>MongoDB - http://myadventuresincoding.wordpress.com/2011/10/02/mongodb-geospatial-queries/</li>
<li>ゼンリンデータコム(いつもNavi) - http://support.e-map.ne.jp/manuals/V20/index.html?%A5%AF%A5%E9%A5%B9%A5%EA%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9%2FZDC.LatLon</li>
<li>簡易逆ジオコーディングサービス / Finds.jp - http://www.finds.jp/wsdocs/rgeocode/index.html.ja#PARAMS</li>
<li>ジオどす - http://geodosu.com/</li>
<li>モバイラーズオアシスAPI - http://oasis.mogya.com/blog/API</li>
<li>GeOAP(東京ガス) - http://dev.geoap.jp/GeOAP_Course/GeOAP_Trial.asmx?op=CourseLineOfLLToLL</li>
<li>はてなココ - http://c.hatena.ne.jp/s/nearby?lat=36.2648177777778&amp;lon=137.910003611111</li>
<li>Nokia - http://developer.here.com/rest-apis/documentation/enterprise-map-image</li>
</ul>


<h3>Long 派</h3>

<p>「〜itude」は同じなんだから、それより前の部分を省略形にすべきだろ（でっち上げの根拠ですｗ</p>

<ul>
<li>LatLongLab(Yahoo) - http://latlonglab.yahoo.co.jp/</li>
<li>はてなココ - http://developer.hatena.ne.jp/ja/documents/coco/apis/v1/spots#spots</li>
</ul>


<h3>Longitude(略さない)派</h3>

<p>こんなに迷うなら、いっそ省略形など要らぬ！</p>

<ul>
<li>Apple - https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationDataTypesRef/Reference/reference.html</li>
<li>Bing Maps - http://msdn.microsoft.com/en-us/library/gg427612.aspx</li>
<li>Facebook -  https://developers.facebook.com/docs/reference/fql/location_post</li>
<li>Amazon - https://developer.amazon.com/sdk/maps/api-reference.html</li>
<li>Evernote - http://dev.evernote.com/doc/reference/Types.html#Struct_NoteAttributes</li>
<li>Path - https://path.com/developers#tags</li>
</ul>


<h3>緯度経度ペアに名前付けちゃう派</h3>

<p>だってペアじゃないと意味ないじゃん？</p>

<ul>
<li>Twitter(geocode) - https://dev.twitter.com/docs/api/1/get/search (緯度、経度)</li>
<li>Foursquare(ll) - https://developer.foursquare.com/docs/venues/search (緯度、経度)</li>
<li>カーリル図書館情報取得API(geocode) - http://calil.jp/doc/api_ref.html (経度、緯度)</li>
</ul>


<h3>X/Y と同じじゃん派</h3>

<p>所詮座標でしょ？(ﾎｼﾞﾎｼﾞ</p>

<ul>
<li>Solr(pt) - http://docs.lucidworks.com/display/solr/Spatial+Search</li>
<li>Oracle Spatial - http://otndnld.oracle.co.jp/document/products/oracle10g/102/doc_cd/appdev.102/B19243-02/sdo_cs_concepts.htm</li>
<li>PostGIS - http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#RefObject</li>
<li>PlaceEngine - http://www.placeengine.com/doc/tut</li>
</ul>


<h2>まとめ</h2>

<p>数では <code>lon</code> 派が優勢。しかし開発者の目に触れる機会では Google が居る <code>lng</code> の方が多いのかも。
MS、Facebook など、割と巨大企業が 略さない を選択してるのも面白いですね。</p>

<p>ペアに名前を付けるやり方は、座標の順番が 緯度→経度 なのか、経度→緯度 なのか揺れるのであまり好きじゃないですね。</p>

<p>XY と同じ概念で扱うのは、そもそも地図以外での利用を想定していたり、地図でも投影されたXY座標を想定しているものが多いですが、XY と LatLon って、これまた混乱するんですよね。Lat って Y なの？順番逆なの？って。</p>

<p>個人的には 略さない派 だったのですが、そうは言っても短く書きたいので、最近は <code>lon</code> 派です。理由は、</p>

<p><strong>「オレオレ緯度経度クラスを使いたいが、Google に <code>LatLng</code> を取られちゃってるから」</strong></p>

<p>クラス名が衝突すると、いろいろ面倒だし、クラス名に Prefix 付けるのもダサいし。。。</p>

<p>というわけで、終わらない争いと知りつつまとめてみました。
上記に載っていない情報があったら教えてもらえると嬉しいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[総務省のデータを Elasticsearch にぶち込んで、緯度経度から市区町村の何丁目までを取り出す]]></title>
    <link href="http://amay077.github.io/blog/2013/09/10/implementing-reverse-geocoding-using-elasticsearch/"/>
    <updated>2013-09-10T21:13:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/10/implementing-reverse-geocoding-using-elasticsearch</id>
    <content type="html"><![CDATA[<p>いわゆる「逆ジオコーディング」と呼ばれる機能ですが、きっかけはこれら２つの記事です。</p>

<!--more-->


<ul>
<li><a href="http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9">PHP - 総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></li>
<li><a href="http://qiita.com/masuidrive/items/21a282c7bf54fd6a4985">PostgreSQL - 国土交通省のデータを使って、緯度経度から市区町村までを取り出す</a></li>
</ul>


<p>Solr や Elasticsearch でも同じことができるのでは、という事で Elasticsearch でやってみました。</p>

<h2>Elasticsearch の導入</h2>

<p>は、</p>

<ul>
<li><a href="http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch/">Elasticsearch で位置情報を検索する手順 - Experiments Never Fail</a></li>
</ul>


<p>をご覧ください。</p>

<h2>1. 総務省のデータをダウンロードする</h2>

<ul>
<li><a href="http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9">PHP - 総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></li>
</ul>


<p>とほぼ同じですが、「世界測地系緯度経度・G-XML形式」ではなく、 <strong>「世界測地系緯度経度・shape形式」</strong> を使います。</p>

<p>一応再掲すると、</p>

<ol>
<li><a href="http://e-stat.go.jp/SG2/eStatGIS/page/download.html">http://e-stat.go.jp/SG2/eStatGIS/page/download.html</a> へ行く。</li>
<li>左から「平成22年度国勢調査（小地域）」を選ぶ。</li>
<li>「男女別人口総数及び世帯総数」（←なんでもいい）を選択して、「統計表各種データダウンロードへ」を押す。</li>
<li>「世界測地系緯度経度・Shape形式」のデータ（下図参照）をダウンロードする。ダウンロードしたら zip ファイルのまま置いといて。</li>
</ol>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/implementing_reverse_geocoding_using_elasticsearch_01.png" alt="img" /></p>

<h2>2. Shapefile を GeoJSON 形式に変換する</h2>

<p>Elasticsearch へ投入できるデータ形式は JSON なので、ダウンロードした Shape形式のデータを JSON 形式の地理空間拡張である GeoJSON 形式に変換します。</p>

<p>スクリプトを書いてもできますが面倒なので、便利なオンラインツールに頼ることにします。</p>

<ul>
<li><a href="http://converter.mygeodata.eu/#convertVector">Free on-line GIS data format and coordinates converter</a></li>
</ul>


<p>手順は、</p>

<ol>
<li>上記サイトへ行き、「Run vector converter」を押す。</li>
<li>「ファイルを選択」で、さっきダウンロードした ZIP ファイルを指定し、「Send ZIP File」を押す。</li>
<li>"Datasets description" というページになったら、その最下部にある「Chack available operations」を押す。(ここでは、不要なデータ項目を除外できるのだけど、面倒なので割愛)</li>
<li>”Export to format:” で "GeoJSON" を選択。それ以外はそのままで「Proceed selected operation」を押す。</li>
<li>しばらく待つと、「Download the ZIP file」リンクが表れるので、押して変換結果をダウンロードする。</li>
</ol>


<p>ダウンロードした ZIP ファイルを解凍すると、「xxx.json」ファイルが見つかります。それをテキストエディタで開くと、<code>features</code> 以下に、住所エリアの情報が1行ずつ出力されています。</p>

<p>試しに1行取り出して、JSON を整形（見やすいよう適宜省略）してみると次のようになります。</p>

<p>```javascript town.json
{</p>

<pre><code>"type": "Feature",
"properties": {
    "KEN_NAME": "愛知県", 
    "GST_NAME": "名古屋市", 
    "CSS_NAME": "中区", 
    "MOJI": "本丸", 
    …省略…
}, 
"geometry": {
    "type": "Polygon",
    "coordinates": [
        [[136.895888, 35.187236], 
         [136.897375, 35.187357], 
          …中略… 
         [136.895888, 35.187236]]
    ]
}
</code></pre>

<p>}
```</p>

<p>これは「愛知県名古屋市中区本丸」のデータですね。
<code>properties</code> 以下は、この住所エリアの属性情報を示しています。
<code>geometry</code> 以下が、この住所エリアの位置情報（ポリゴン）を示しています。</p>

<h2>3. Elasticsearch にスキーマを定義する</h2>

<p>Elasticseach はスキーマフリーですが、位置情報のところだけは明示的に宣言しないといけないらしいので、下のようなコマンドを実行して定義します。</p>

<p>あ、ここでは、</p>

<ul>
<li>Index名 : towns</li>
<li>Type名 : town</li>
</ul>


<p>としています。</p>

<p>「Index や Type って何？」という方は</p>

<ul>
<li><a href="http://qiita.com/ise_daisuke/items/5e10e0b3ef9dffed08a9">Elasticsearch用語の適当なまとめ</a></li>
</ul>


<p>をどうぞ。</p>

<p>ではコマンドです。</p>

<p>```sh
curl -XPUT 'http://localhost:9200/towns/'</p>

<p>curl -XPUT 'http://localhost:9200/towns/town/_mapping' -d '
{</p>

<pre><code>"town" : {
    "properties": {
        "geometry": {
            "type": "geo_shape", 
            "tree": "quadtree",
            "precision": "1m"
        }
    }
}
</code></pre>

<p>}'
```</p>

<p><code>properties.geometry</code> は、「geo_shape」 として扱う事を宣言しています。他の２つの設定は、インデックスの種類と精度を意味しますが、よく分かってません。</p>

<ul>
<li><a href="http://www.elasticsearch.org/guide/reference/mapping/geo-shape-type/">Geo Shape Type | Reference Guide | Elasticsearch</a></li>
</ul>


<p>で勉強しましょう。</p>

<h2>4. データを Elasticsearch に投入する</h2>

<p>さて、いよいよこの「1行1JSON」のデータを、1行ずつ、Elasticsearch に投入します。
先の xxxx.json を置換なり何なりを駆使して、スクリプトにしちゃうのがてっとり早いでしょう。(json ファイルは Shift-jis なので、UTF-8 に変換しておきましょう。）</p>

<p>1行のデータを投入するコマンドは次のようになります。</p>

<p>```
curl -XPUT 'http://localhost:9200/towns/town/1' -d '{</p>

<pre><code>"type": "Feature",
"properties": {
    "KEN_NAME": "愛知県", 
    "GST_NAME": "名古屋市", 
    "CSS_NAME": "中区", 
    "MOJI": "本丸", 
    …省略…
}, 
"geometry": {
    "type": "Polygon",
    "coordinates": [
        [[136.895888, 35.187236], 
         [136.897375, 35.187357], 
          …中略… 
         [136.895888, 35.187236]]
    ]
}
</code></pre>

<p>}'
```</p>

<p><code>towns/town/1</code> の最後の「1」のところは、連番にする必要があります。(オートインクリメントとかないのかな？)</p>

<p>全件を PUT すつスクリプトファイルは、下の画像のような感じになると思います。(データのライセンスがどうか分からないのでスクリプトファイル自体を公開するのはやめておきます)</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/implementing_reverse_geocoding_using_elasticsearch_02.png" alt="img" /></p>

<p>これをTerminal で実行すると、数分かからずに Elasticsearch にデータが投入完了します。</p>

<p><code>curl -XGET 'http://localhost:9200/towns/town/1'</code> などを実行すれば、正しくデータが登録できたか確認できます。</p>

<h2>5. 検索してみる</h2>

<p>ついに来ました。
では、緯度経度を与えて住所が返ってくるところ、やってみましょう。</p>

<p>Elasticsearch では検索クエリも JSON で書きます。</p>

<p>例えば、<a href="http://yahoo.jp/zsXYL2">大須観音駅</a> らへんの緯度経度(35.1613077,136.898282)の住所で検索する場合は、次のようにします。</p>

<p>```
curl -XPOST 'http://localhost:9200/towns/town/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
             "geo_shape": {
                "town.geometry": {
                    "shape": {
                        "type" : "envelope",
                        "coordinates" : [[136.898282, 35.1613077], [136.898282, 35.1613077]]
                    }
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<p><code>geo_shape</code> フィルタを使い、条件に envelople(左上〜右下の領域) を指定します。今は「点」での検索をしたいので、左上、右下に同じ座標を指定します。
注意点は、 <strong>「経度, 緯度」</strong> の順であることです。</p>

<p>※ <a href="http://www.elasticsearch.org/guide/reference/query-dsl/geo-distance-filter/"><code>geo_distance</code></a> というフィルタもありますが、こちらはデータが「点」専用なようで、今回のような「ポリゴン」には使えませんでした。</p>

<p>さて、上のコマンドを実行すると、下のような結果が得られます。(整形、省略済)</p>

<p>```
{
  "took":1,
  "timed_out":false,
  "_shards":{</p>

<pre><code>"total":5,
"successful":5,
"failed":0
</code></pre>

<p>  },
  "hits":{</p>

<pre><code>"total":1,
"max_score":1.0,
"hits":[{
  "_index":"towns",
  "_type":"town",
  "_id":"29",
  "_score":1.0, 
  "_source" : { 
    "type": "Feature", 
    "properties": { 
      "KEN_NAME": "愛知県", 
      "GST_NAME": "名古屋市", 
      "CSS_NAME": "中区", 
      "MOJI": "大須２丁目", 
      …以下省略…
</code></pre>

<p>```</p>

<p>はい、「緯度経度(35.1613077,136.898282)」の住所は「愛知県名古屋市中区大須２丁目」であることが取得できました。</p>

<h2>まとめ</h2>

<p>いかがでしょうか、Elasticsearch でも逆ジオコーディングの実装が、簡単にできることが分かりました。</p>

<p>PostGIS、MongoDB との対比では、</p>

<ul>
<li>セットアップが簡単</li>
<li>REST API なので直接他のサービスとマッシュアップできる</li>
</ul>


<p>あたりがメリットでしょうか。</p>

<p>逆にデータの取り込みはひと工夫必要で、PostGIS の方が簡単です。
このデータ用の River plugin を作ればよいのでしょうが、方法がさっぱり…。</p>

<p>最後に、</p>

<p><a href="http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9">総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></p>

<blockquote><p>実は、データをダウンロードするのが、一番手間がかかります・・・。</p></blockquote>

<p>でも言われていますが、まったくその通りです。
１市区町村ずつダウンロードとか正直やってられません。</p>

<p>総務省でも国土交通省でもどちらでも良いのですが、
<strong>「全国の大字境界＋属性データを一括入手する方法」</strong> を用意して欲しいものです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch で位置情報を検索する手順]]></title>
    <link href="http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch/"/>
    <updated>2013-09-09T21:08:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch</id>
    <content type="html"><![CDATA[<p>Elasticsearch は、オープンソースの全文検索エンジンです。Apache Solr と並んでよく取り上げられるようになってきました。</p>

<p>位置情報の検索機能も標準搭載しているとのことで、試しに使ってみました。</p>

<!--more-->


<h2>Elasticsearch の導入</h2>

<p>下の情報が大変参考になりました。(環境は Mac。事前に Java と homebrew の導入が必要です）</p>

<ul>
<li><a href="http://qiita.com/Konboi@github/items/56f0aaca77db5df027af">elasticsearch - ElasitcSearch ことはじめ - Qiita [キータ]</a></li>
</ul>


<h2>試しに使ってみる</h2>

<p>下のサイトが大変参考なりました。</p>

<ul>
<li><a href="http://inokara.hateblo.jp/entry/2013/09/07/153826">Elasticsearch を試してみる - ようへいの日々精進</a></li>
</ul>


<h2>位置情報を検索してみる</h2>

<p>下のようなスキーマのデータを登録して検索する想定です。</p>

<p>```javascript venue_example.json
{</p>

<pre><code>"name" : "Tokyo St",
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}
```</p>

<h3>1. スキーマを登録する</h3>

<p>Elasticsearch は基本的にはスキーマレスで動くのですが、位置情報を表す項目は、明確にスキーマを定義する必要があるようです。</p>

<p>データ投入の前にそれを行います。</p>

<p>```sh
curl -XPUT 'http://localhost:9200/myvenues/'</p>

<p>curl -XPUT 'http://localhost:9200/myvenues/venue/_mapping' -d '
{</p>

<pre><code>"venue" : {
    "properties" : {
        "pin" : { "type" : "geo_point" }
    }
}
</code></pre>

<p>}'
```</p>

<p>ここでは、<code>venue</code> のプロパティ群の内の <code>pin</code> 項目は、位置情報(geo_point)だよ、と定義しています。</p>

<h3>2. データを投入する</h3>

<p>2件ほど、テストデータを投入します。</p>

<p>```sh
curl -XPUT 'http://localhost:9200/myvenues/venue/1' -d '{</p>

<pre><code>"name" : "Tokyo St",
"tag" : ["station", "train"],
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}'</p>

<p>curl -XPUT 'http://localhost:9200/myvenues/venue/2' -d '{</p>

<pre><code>"name" : "Nagoya St",
"tag" : ["station", "train"],
"pin" : {
    "location" : {
        "lat" : 35.17,
        "lon" : 136.88
    }
}
</code></pre>

<p>}'
```</p>

<h3>3. 位置情報で検索する</h3>

<h4>位置＋距離</h4>

<p>緯度/経度:35.6/139.8 から 20km 周囲にあるデータを検索します。</p>

<p>```sh
curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_distance" : {
                "distance" : "20km",
                "venue.pin" : {
                    "lat" : 35.6,
                    "lon" : 139.8
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<h5>結果</h5>

<p>Tokyo St だけがヒットしました。</p>

<p>```javascript
{"took":0,"timed_out":false,"<em>shards":{"total":5,"successful":5,"failed":0},"hits":{"total":1,"max_score":1.0,"hits":[{"</em>index":"myvenues","<em>type":"venue","</em>id":"1","<em>score":1.0, "</em>source" : {</p>

<pre><code>"name" : "Tokyo St",
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}}]}}
```</p>

<h4>範囲(矩形)</h4>

<p>左上:35.2/136.8 〜 右下:35.1/136.9 にあるデータを検索します。緯度は上(北)の方が値が大きくなるので、上下関係に注意が必要です。</p>

<p>```sh
curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "venue.pin" : {
                    "top_left" : {
                        "lat" : 35.2,
                        "lon" : 136.8
                    },
                    "bottom_right" : {
                        "lat" : 35.1,
                        "lon" : 136.9
                    }
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<h5>結果</h5>

<p>Nagoya St だけがヒットしました。</p>

<p>```javascript
{"took":0,"timed_out":false,"<em>shards":{"total":5,"successful":5,"failed":0},"hits":{"total":1,"max_score":1.0,"hits":[{"</em>index":"myvenues","<em>type":"venue","</em>id":"2","<em>score":1.0, "</em>source" : {</p>

<pre><code>"name" : "Nagoya St",
"pin" : {
    "location" : {
        "lat" : 35.17,
        "lon" : 136.88
    }
}
</code></pre>

<p>}}]}}
```</p>

<h4>範囲(多角形)</h4>

<p>任意の多角形領域にあるデータを検索します。</p>

<p>ここでは GeoJSON 互換の記述方式で書いてます。経度が先なので注意。
今までのような lat: lon: の配列でもかけますが、 GeoJSON 便利なので。</p>

<p>```sh
curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{</p>

<pre><code>"query": {
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_polygon" : {
                "venue.pin" : {
                    "points" : [
                        [139.7, 35.7],  // 経度が先！
                        [139.8, 35.7],
                        [139.8, 35.6],
                        [139.7, 35.6],
                        [139.7, 35.7]
                    ]
                }
            }
        }
    }
}
</code></pre>

<p>}'
```</p>

<h5>結果</h5>

<p>Tokyo St だけがヒットしました。</p>

<p>```javascript
{"took":0,"timed_out":false,"<em>shards":{"total":5,"successful":5,"failed":0},"hits":{"total":1,"max_score":1.0,"hits":[{"</em>index":"myvenues","<em>type":"venue","</em>id":"1","<em>score":1.0, "</em>source" : {</p>

<pre><code>"name" : "Tokyo St",
"pin" : {
    "location" : {
        "lat" : 35.68,
        "lon" : 139.76
    }
}
</code></pre>

<p>}}]}}
```</p>

<p>(ポリゴンの座標群が、右回りじゃないとダメかな？と思って恐る恐る左回りにしてみたら、問題なく検索できました！)</p>

<h2>まとめ</h2>

<p>最初 <code>geo_point</code> を明示的に指定しないといけないのに気づかなくてしばらくハマりましたが、それ意外はすんなりと動きました。</p>

<p>機能を試しただけでパフォーマンスなどは計測できていませんが、なんか使えそうな気はします。</p>

<p>位置情報関係の情報を探したい時は、公式サイトの GUIDE</p>

<ul>
<li><a href="http://www.elasticsearch.org/guide/">Reference Guide | Elasticsearch</a></li>
</ul>


<p>の検索バーで 「geo」で検索すると、有用な情報が得られます。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.elasticsearch.org/">Open Source Distributed Real Time Search &amp; Analytics | Elasticsearch</a></li>
<li><a href="http://www.elasticsearch.org/blog/geo-location-and-search/">Geo Location And Search | Blog | Elasticsearch</a></li>
<li><a href="http://www.elasticsearchtutorial.com/spatial-search-tutorial.html">Spatial Search ElasticSearch tutorial - ElasticSearch Tutorial.com</a></li>
<li><a href="http://stackoverflow.com/questions/16113439/elasticsearch-geo-distance-filter-with-multiple-locations-in-array-possible">ElasticSearch geo distance filter with multiple locations in array - possible? - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
