<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Geo | Experiments Never Fail]]></title>
  <link href="http://amay077.github.io/blog/categories/geo/atom.xml" rel="self"/>
  <link href="http://amay077.github.io/"/>
  <updated>2013-12-18T20:28:29+09:00</updated>
  <id>http://amay077.github.io/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[地理院地図の標高タイル(CSV)を描画してみた]]></title>
    <link href="http://amay077.github.io/blog/2013/11/05/using-gsimap-dem-csv-api/"/>
    <updated>2013-11-05T21:11:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/11/05/using-gsimap-dem-csv-api</id>
    <content type="html"><![CDATA[<p>国土地理院が提供している API の一つに「標高タイル」というものがあります。</p>

<!--more-->


<p>タイルというと、Googleマップや OpenStreetMap などの Web地図では通常、画像を指しますが、標高タイルAPIでは <strong>「画素毎の高度(ｍ)」</strong> が取得できます。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/development/demtile.html">標高タイル仕様 - 地理院地図</a></li>
<li><a href="http://cyberjapandata.gsi.go.jp/xyz/dem/14/14547/6463.txt">サンプルURL</a></li>
</ul>


<p>これは面白い、ということで使ってみました。</p>

<h2>サンプル</h2>

<ul>
<li><a href="http://jsdo.it/amay077/jjod">地理院地図の標高タイル(CSV)を描画してみた - jsdo.it</a></li>
</ul>


<h3>Google Map</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_01.png" alt="img1" /></p>

<h3>標高タイルAPI で取得した標高値を描画</h3>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gsimap_dem_csv_api_02.png" alt="img1" /></p>

<h2>何をしているか？</h2>

<p>下は、このサンプルのコードの抜粋ですが、ポイントは２つ</p>

<ul>
<li>getTile で通常 img 要素を生成して返すが、代わりに canvas 要素に返す</li>
<li>標高API をコールして得られた CSV をパースし、 高さに応じた色を計算して、canvas に矩形を描画する</li>
</ul>


<p>さすがに1ピクセル毎に描画すると重すぎるので、初期値では 16ピクセルずつに間引きしています(画面の DotSize で変更できます)。</p>

<p>クライアント側でレンダリングしているので、色などが動的に変更できます。</p>

<p>```javascript</p>

<pre><code>map.mapTypes.set("GsiMaps", {
  name:"標高タイル",
  tileSize:new google.maps.Size(256,256),
  minZoom:14, // 標高タイルは Lv:14 しか用意されてないので
  maxZoom:14, 
  getTile:function(tileCoord, zoom, ownerDocument) {

    // 普通は img だけど、標高タイルは CSV で画素毎の標高値が取得できるので、
    // クライアント側で描画するために Canvas を使う
    var canvas = ownerDocument.createElement("canvas");
    canvas.width = 256;
    canvas.height = 256;

    var x = (tileCoord.x % Math.pow(2, zoom)).toString();
    var y = tileCoord.y.toString();

    // 各画素の標高値を取得する
    canvas.tileUrl = "http://cyberjapandata.gsi.go.jp/xyz/dem/" + zoom +  "/" + x + "/" + y + ".txt";
    // 標高を描画する
    renderDem(canvas);
    renderedTiles[canvas.tileUrl] = canvas; // タイル再描画の為にとっておく
    return canvas;
  }
});

// 標高タイルを描画する
function renderDem(canvas) {
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, 256, 256);

  $.get(canvas.tileUrl, function(data) {
    // CSV が得られるのでパース
    var lines = data.split(/\r\n|\r|\n/);
    for (var i = 0; i &lt; lines.length; i+=dotSize) {
      var cols = lines[i].split(',');
      for (var j = 0; j &lt; cols.length; j+=dotSize) {
        if (cols[j] == 'e') { // エラーの画素には 'e' が入ってる
          continue;
        }

        // 標高0ｍ を startColor、標高1000ｍを endColor としたグラデーション色を設定する。
        ctx.fillStyle = $.xcolor
        .gradientlevel(startColor, endColor, cols[j] / 1000.0 * 100.0, 100)
        .getCSS();
        ctx.fillRect(j, i, dotSize, dotSize);
      }
    }
  });
}
</code></pre>

<p>```</p>

<h2>まとめ</h2>

<p>ただの標高値を地図に表すなら画像でいいじゃん！とか言われそうですが、よいアイデアが浮かばなかったのでまずは素直に使ってみました。</p>

<p>たとえば、移動手段による移動コストの違い(車だと坂道余裕だけど自転車だとキツい)みたいなのを視覚化するのに使えるような気がします。</p>

<p>今回は、Canvas を使ったのでこの程度ですが、WebGL とかを使えば、Google Map の地形図に負けない、美しい3D地図が描画できるはずです。</p>

<p>他に例を見ない、野心的な試みだと思うので、何か面白い使い方ができるといいなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爆速エミュレータで Google Maps Android API v2 を動かす]]></title>
    <link href="http://amay077.github.io/blog/2013/10/20/using-gmapv2-on-intel-emulator/"/>
    <updated>2013-10-20T21:58:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/20/using-gmapv2-on-intel-emulator</id>
    <content type="html"><![CDATA[<p>Google APIs のエミュレータで Google Map Android API v2 が動くようになったのですが、やっぱり遅い、使えん。
という訳で、Intel の爆速エミュレータで GMapV2 を使う手順の備忘録です。(ご利用は自己責任で)</p>

<!--more-->


<h2>爆速エミュレータの導入</h2>

<p>こちら等を参考にセットアップします。</p>

<ul>
<li><a href="http://qiita.com/gabu/items/8bc1a11f1382409f1d2a">Android再入門 - エミュレータの作成</a></li>
</ul>


<h2>エミュレータで Google Maps Android API v2 を動かす</h2>

<p><code>com.google.android.gms.apk</code> と <code>com.android.vending.apk</code> が必要なのでどうにかして入手しインストールします。(ほとんど答えだけど下記参照)</p>

<ul>
<li><a href="http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator">Running Google Maps v2 on Android Emulator - Stack Overflow</a></li>
</ul>


<p>apk が古いとうまく動作しません。なるべく新しいものを探しましょう。(ﾎﾞｿ</p>

<h2>AndroidManifest.xml から com.google.android.maps の定義を消す</h2>

<p>意外とハマったのがコレ。</p>

<p><code>AndroidManifest.xml</code> で</p>

<p><code>
&lt;uses-library android:name="com.google.android.maps" /&gt;
</code></p>

<p>が定義してあると、</p>

<p><code>
10-20 11:35:52.977: E/PackageManager(1178): Package xxxx requires unavailable shared library com.google.android.maps; failing!
</code></p>

<p>というエラーになります。</p>

<p>この <code>com.google.android.maps</code> は Google Maps API v1 で必要だったもので、v2 では必要ありません。削除しましょう。</p>

<p>v2 の使い方を説明するブログやサイトで、これが含まれてしまってるものがあるようです。(かくいう自分もそんなサイトからコピペしてきたまま使ってたのでエラーになりました（汗）</p>

<h2>動かす</h2>

<p>あとは、実機と変わりません。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/using_gmapv2_on_intel_emulator_01.png" alt="img" /></p>

<p>やばい、PC性能とネットワーク環境のおかげで実機より快適になったｗ</p>

<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/ria10/20121218/1355794748">AndroidでGoogle Maps v2 をエミュレータで動かしてしかも爆速 - リア充爆発日記</a></li>
<li><a href="http://denshikousaku.net/how-to-make-android-google-maps-v2-work-in-android-emulator">エミュレータでGoogle Maps for Android V2を動かす方法 | アプリ開発とRaspberry PIとArduino実験</a></li>
<li><a href="http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator">Running Google Maps v2 on Android Emulator - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない]]></title>
    <link href="http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap/"/>
    <updated>2013-10-11T13:55:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/11/denshikokudo-on-googlemap</id>
    <content type="html"><![CDATA[<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>

<!--more-->


<h2>2013.11.03 追記</h2>

<p>電子国土Web.NEXT という名称で試験公開されていたものが、「地理院地図」「地理院タイル」として正式公開されました。</p>

<ul>
<li><a href="http://www.gsi.go.jp/johofukyu/johofukyu40032.html">地理院地図の公開について | 国土地理院</a></li>
<li><a href="http://portal.cyberjapan.jp/help/development.html#siyou">地理院タイルを用いた開発 | 地理院地図</a></li>
</ul>


<p>地理院タイルは <a href="http://portal.cyberjapan.jp/help/development/oldScheme.html">従来版タイル</a> と仕様が異なります。従来版タイルは <strong>2013年度中に提供終了予定</strong> との事ですし、新しい地理院タイルの方が大幅に仕様が簡略化されたので、こちらを使った方が良いです。</p>

<p>このエントリも「電子国土」を「地理院地図（地理院タイル）」に修正しました。</p>

<hr />

<h2>2013.10.17 追記</h2>

<p><a href="http://qiita.com/amay077/items/979dfc858a21c8bbb7a9#comment-6d0be86c2ba90df50808">コメント</a>で頂いていますが、現在は、 <strong>「日本向けにローカライズされた」</strong> Googleマップ側でも表記が修正されたようで、当初「問題がある」と言われていた地域は問題が解消されているように見えます。
<strong>ただし、下記のように Google Maps API で「region=JP」が指定されている場合に限ります。</strong></p>

<ul>
<li><a href="http://d.hatena.ne.jp/kitokitoki/20130415/p1">Google Maps API v3 で 日本海（東海）と「東海」が併記されるのを避けるには - わからん</a></li>
</ul>


<p>これによって「Googleマップ禁止令はもはや無用である」と考えることもできますし、「依然として国の制御下には無い」と考えることもできます。</p>

<p>以下の情報は必要なくなるかも知れませんが、今後「Googleマップ以外の選択肢」の一つとして参考になれば幸いです。</p>

<p>-- 追記ここまで --</p>

<hr />

<ul>
<li><a href="http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 - NAVER まとめ</a></li>
<li><a href="http://shinka3.exblog.jp/20690859/">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>
<li><a href="https://twitter.com/nissyyu/status/387870282570272768">Twitter - うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>
</ul>


<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>

<p>で、対策としてはいくつかあります。。。</p>

<h4>画像の地図や PDF に変える</h4>

<ul>
<li>どんな時代錯誤ですか</li>
</ul>


<h4>他の地図APIを使う</h4>

<ul>
<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>
<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>
<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>
<li>Bing, OSM は「制御下には無い」でしょう。</li>
</ul>


<h4>GoogleMapの問題のある表記を「正しい表記」に上書きする</h4>

<ul>
<li><a href="http://matome.naver.jp/odai/2138082171982287301">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（<sup>_<sup>;）</sup></sup></li>
<li>これ→<a href="http://jsdo.it/toaSoku/gmapforjapan">日本政府に「禁止されない」 Google Maps - jsdo.it - Share JavaScript, HTML5 and CSS</a></li>
<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>
</ul>


<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>

<h2>ではどうするか？</h2>

<p><a href="http://portal.cyberjapan.jp/">地理院地図</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>

<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>

<p>ただし、Google Map API から地理院地図の地図APIに移行することは、前述の通り、それなりのコストが発生します。</p>

<p>ので、 <strong>「Google Map API を使って地理院地図を利用する方法」</strong> を紹介します。</p>

<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>

<p>既に実現されてる方々がいらっしゃいます。</p>

<ul>
<li><a href="http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws">Googleマップを使って国土地理院の地図を見る</a></li>
<li><a href="http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>
</ul>


<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで地理院地図(地理院タイル)を使う、 最もシンプルな実装例を紹介します。</p>

<h3>1. Googleマップを表示するページを用意する</h3>

<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>

<ul>
<li><a href="http://jsdo.it/amay077/tM0q">Google Maps Javascript API v3 の使用例</a></li>
</ul>


<p>HTML+Javascript のソースコードはこんな感じ(<a href="http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>

<p>```html google.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);
}
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>2. 地理院地図(地理院タイル)を表示するように置き換える</h3>

<ul>
<li><a href="http://jsdo.it/amay077/wFtJ">Google Maps Javascript API v3 での地理院地図の表示例</a></li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/denshikokudo_on_googlemap_01.png" alt="" /></p>

<p>表示が地理院地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、ロゴの表示が必要なので、左下に置いています。(地理院地図の正式なロゴが公開されたら置き換えてください)</p>

<p>という処理を追加したのが、下のコード。
変更が１行、追加行が30行くらいです。
変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。
<a href="https://gist.github.com/amay077/6928205/revisions">gist</a> でも diff を見られます。</p>

<p>```html gsi_map.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;style type="text/css"&gt;
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map { height: 100% }
&lt;/style&gt;

&lt;script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"
    type="text/javascript" charset="UTF-8"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function init() {
  var opts = {
    zoom: 5,
    mapTypeId: "GsiMaps", // 地理院地図の英語表記は「GIS Maps」
    center: new google.maps.LatLng(39, 135)
  };

  var map = new google.maps.Map(document.getElementById("map"), opts);

  map.setOptions({
    mapTypeControl: false // 右上の地図タイプ選択を消す
  });

  // 地理院タイルを Overlay する
  // via http://portal.cyberjapan.jp/help/development.html
  map.mapTypes.set("GsiMaps", {
    name:"地理院地図(GSI Maps)",
    tileSize:new google.maps.Size(256,256),
    minZoom:5,
    maxZoom:18, 
    getTile:function(tileCoord, zoom, ownerDocument) {
      var img = ownerDocument.createElement("img");
      img.style.width = "256px";
      img.style.height = "256px";
      var x = (tileCoord.x % Math.pow(2, zoom)).toString();
      var y = tileCoord.y.toString();
      img.src = "http://cyberjapandata.gsi.go.jp/xyz/std/" + zoom +  "/" + x + "/" + y + ".png";
      return img;
    }
  });

   // 左下に電子国土ロゴを表示(TODO: 地理院地図の正式なロゴが公開されたら置き換える)
  var logo = document.createElement('DIV');
  logo.style.padding = '3px';
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo);
  logo.innerHTML = '&lt;a href="http://portal.cyberjapan.jp/portalsite/kiyaku/index.html" target="_blank"&gt;&lt;img style="width:32px, height:32px" src="http://cyberjapan.jp/images/icon01.gif" alt="電子国土" /&gt;&lt;/a&gt;';    }
&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body onload="init()"></p>

<pre><code>&lt;div id="map"&gt;&lt;/div&gt;
</code></pre>

<p>  </body></p>

<p></html>
```</p>

<h3>不安とか懸念とか…</h3>

<h4>地図の表示が Google に比べて…</h4>

<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>

<h4>「試験公開」ってなってるんですけど…</h4>

<p>地理院地図は「正式公開」になったので安心ですね。</p>

<p>旧Verについては、2013年度中に運用停止とのことです。</p>

<ul>
<li><a href="http://portal.cyberjapan.jp/help/oldver.html">地理院地図｜旧版情報</a></li>
</ul>


<h4>利用規約とかどうなってるの？</h4>

<p><a href="http://portal.cyberjapan.jp/help/termsofuse.html">地理院地図｜利用規約</a> を見てください。</p>

<h2>まとめ</h2>

<p>いかがでしょうか？</p>

<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」地理院地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>

<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>

<p>地理院地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>

<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>

<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metersToEquatorPixels を Google Maps Android API v2 で]]></title>
    <link href="http://amay077.github.io/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2/"/>
    <updated>2013-10-09T00:21:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2</id>
    <content type="html"><![CDATA[<p>Google Map API v1 には、「地図上の距離(ｍ)を画面上の距離(ピクセル)に変換する」ためのメソッド <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float">Projection.metersToEquatorPixels</a>) がありましたが、v2 ではなくなってしまいました。</p>

<!--more-->


<p>ので、以下のような代替関数を作ってみました。</p>

<p>```java metersToEquatorPixels.java
public static int metersToEquatorPixels(GoogleMap map, LatLng base, float meters) {</p>

<pre><code>final double OFFSET_LON = 0.5d;

Location baseLoc = new Location("");
baseLoc.setLatitude(base.latitude);
baseLoc.setLongitude(base.longitude);

Location dest = new Location("");
dest.setLatitude(base.latitude);
dest.setLongitude(base.longitude + OFFSET_LON);

double degPerMeter = OFFSET_LON / baseLoc.distanceTo(dest); // 1m は何度？
double lonDistance = meters * degPerMeter; // m を度に変換

Projection proj = map.getProjection();
Point basePt = proj.toScreenLocation(base);
Point destPt = proj.toScreenLocation(new LatLng(base.latitude, base.longitude + lonDistance));

return Math.abs(destPt.x - basePt.x);
</code></pre>

<p>}
```</p>

<p>行っていることは単純で、基準となる緯度経度:<code>base</code> から、適当に(ここでは 0.5度)東へ移動した緯度経度を <code>Location.distanceTo</code> で求め、その結果から、「1ｍは何度か？」を求めます。あとは、この係数を使って 地図上の距離:<code>meters</code> を度に変換し、最後に、<code>base</code> と移動後の緯度経度それぞれを画面座標に変換して、画面上の距離を返す、というものです。</p>

<p>「1ｍは何度か？」は、赤道上の値を使っても良いのですが、緯度によって値が大きく変わるので、このような手法を取りました。</p>

<p>ただこれでも、求める距離の精度によっては、<code>OFFSET_LON</code> の値の調整が必要な気がします。また、経度:0 をまたぐような地域では正しく動かない気がします。(いずれも未検証)</p>

<p>また、緯度方向にもそれなりに正確な数値を出すには、上記と同じことを緯度に対しても行う必要があります。(これは v1 の API にもなかった)</p>

<p>v2 になって、描画系でピクセル座標を意識することはなくなったんであまり使うことも無いと思いますが、なにかで必要になったら思い出す程度で。</p>

<h3>追記</h3>

<p>あとで気づいたんですが、 v1 の <a href="https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float">Projection.metersToEquatorPixels</a>) は、赤道上の距離で算出してたんですね。それと比べるとちょっとオーバースペックでした。</p>

<p> それと、この記事を書く前に私のツイートを読まれた @honjo2 さんが、 v1 と同じ(赤道の距離を使う)仕様の関数を公開してくださいました。</p>

<blockquote class="twitter-tweet"><p>どうぞ <a href="https://t.co/quYnqvn1tw">https://t.co/quYnqvn1tw</a> RT <a href="https://twitter.com/amay077">@amay077</a>: Google Map Android v2 になって metersToEquatorPixels がなくなっちゃったのが地味に不便だ。</p>&mdash; 本城 博昭 (@honjo2) <a href="https://twitter.com/honjo2/statuses/387368608541589505">October 8, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longitude の略し方。lng 派と lon 派の終わらない争い]]></title>
    <link href="http://amay077.github.io/blog/2013/09/25/the-battle-of-abbreviation-lat-vs-lng/"/>
    <updated>2013-09-25T21:08:00+09:00</updated>
    <id>http://amay077.github.io/blog/2013/09/25/the-battle-of-abbreviation-lat-vs-lng</id>
    <content type="html"><![CDATA[<p>地図上での位置は「緯度経度」で表します。英語だと「latitude, longitude」ですね。
これらの単語、コーディングする際は短縮したいわけです。latitude は <code>lat</code> で全会一致です。問題は longitude 。</p>

<!--more-->


<p>業界？の中では、longitude の略し方についての議論が度々沸き起こります。</p>

<p>例えば、、、</p>

<p>初めは、タイトルの議論で推移していましたが、次第に略し方の議論に。。。</p>

<ul>
<li><a href="http://togetter.com/li/85864">latitudeとlongitude，どっちが緯度でどっちが経度？ - Togetter</a></li>
</ul>


<p><code>lon</code> 派の方の意見。</p>

<blockquote class="twitter-tweet"><p>そういえば緯度経度のうち経度（longitude）をlong, lon, lngなどと書く場合があるんだけど、longは長整数型のために予約語になってる場合があるのと、lngだと「イング」と読めてしまうからという理由でlonにしてる。</p>&mdash; Masaki Ohashi (@ohashimasaki) <a href="https://twitter.com/ohashimasaki/statuses/308895891308294144">March 5, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><code>lng</code> 支持？な方々</p>

<blockquote class="twitter-tweet"><p>longitudeの省略形を何にするか迷ってる。lon or lng 今のところlngが優勢。</p>&mdash; 本城 博昭 (@honjo2) <a href="https://twitter.com/honjo2/statuses/28848028079">October 27, 2010</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>最近Google Maps APIを触っていたので、CHINTAIの地図で経度(longitude)のパラメータがlngじゃなくてlonなのが新鮮に思えた</p>&mdash; Ryusuke SEKIYAMA (@rsky) <a href="https://twitter.com/rsky/statuses/25312333134">September 23, 2010</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>振り回されてる方々</p>

<blockquote class="twitter-tweet"><p>lngとlonで５分ハマったー</p>&mdash; ばん↓どう↑さん↓ (@netartjp) <a href="https://twitter.com/netartjp/statuses/379923672632266752">September 17, 2013</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>lonとlngのミスで1時間無駄にした</p>&mdash; カメキチ (@kamekiti) <a href="https://twitter.com/kamekiti/statuses/186149216492589056">March 31, 2012</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>YahooのローカルサーチAPIのパラメーターの経度情報って、「lon」から始まる値なんですね。他の多くが「lng」な気がするので、始め何でエラーが出るのは分かりませんでした。ということで、ほぼ出来たピョン吉。</p>&mdash; 星野邦敏 (@khoshino) <a href="https://twitter.com/khoshino/statuses/149640555092131842">December 22, 2011</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>おいマジか Yahoo!（笑</p>

<blockquote class="twitter-tweet"><p>「Y.LatLngオブジェクトのメソッドはlat、lngですが、ローカルサーチAPIのパラメータ名はlat、lonなので注意してください」YOLPで挑戦～「マクドナルドはどこだ」アプリをHTML5で作る！ <a href="http://t.co/QX8yiyvT">http://t.co/QX8yiyvT</a></p>&mdash; NI-Lab. (@nilab) <a href="https://twitter.com/nilab/statuses/189537270347472896">April 10, 2012</a></blockquote>


<script async src="http://amay077.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とこのように、一つの企業内でも「揺れ」が生じてしまう程度にはバラバラな感じです。</p>

<h2>調べてみた</h2>

<p>で、デファクトスタンダードはどれなのよ？をいろんな地図に関する Web API の仕様から一覧化してみました。</p>

<h3>Lng 派</h3>

<p>Google は神！Google 先生について行きます！</p>

<ul>
<li>Google - https://developers.google.com/maps/documentation/javascript/reference?hl=ja#LatLng</li>
<li>Mapion - http://labs.mapion.co.jp/api/asdoc/index.html</li>
<li>ロケタッチ - http://tou.ch/developer/api_all?uri=spots%2Fsearch</li>
<li>Leaflet - http://leafletjs.com/reference.html#latlng</li>
<li>Yahoo(地図API) - http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/js/#index6-2</li>
<li>mapquest - http://www.mapquestapi.com/staticmap/#getmap</li>
</ul>


<h3>Lon 派</h3>

<p>頭から３文字取ったら普通これだろjk</p>

<ul>
<li>Yahoo(ローカルサーチ) - http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/localsearch.html</li>
<li>OpenStreetMap - http://wiki.openstreetmap.org/wiki/API_v0.6#Create_a_new_note:<em>Create:</em>POST_.2Fapi.2F0.6.2Fnotes</li>
<li>OpenLayers - http://dev.openlayers.org/docs/files/OpenLayers/BaseTypes/LonLat-js.html ※LonLat！</li>
<li>電子国土Web - http://portal.cyberjapan.jp/site/mapuse4/#zoom=5&amp;lat=35.99989&amp;lon=138.75&amp;layers=BTTT</li>
<li>Elasticsearch - http://www.elasticsearch.org/guide/reference/mapping/geo-point-type/</li>
<li>MongoDB - http://myadventuresincoding.wordpress.com/2011/10/02/mongodb-geospatial-queries/</li>
<li>ゼンリンデータコム(いつもNavi) - http://support.e-map.ne.jp/manuals/V20/index.html?%A5%AF%A5%E9%A5%B9%A5%EA%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9%2FZDC.LatLon</li>
<li>簡易逆ジオコーディングサービス / Finds.jp - http://www.finds.jp/wsdocs/rgeocode/index.html.ja#PARAMS</li>
<li>ジオどす - http://geodosu.com/</li>
<li>モバイラーズオアシスAPI - http://oasis.mogya.com/blog/API</li>
<li>GeOAP(東京ガス) - http://dev.geoap.jp/GeOAP_Course/GeOAP_Trial.asmx?op=CourseLineOfLLToLL</li>
<li>はてなココ - http://c.hatena.ne.jp/s/nearby?lat=36.2648177777778&amp;lon=137.910003611111</li>
<li>Nokia - http://developer.here.com/rest-apis/documentation/enterprise-map-image</li>
</ul>


<h3>Long 派</h3>

<p>「〜itude」は同じなんだから、それより前の部分を省略形にすべきだろ（でっち上げの根拠ですｗ</p>

<ul>
<li>LatLongLab(Yahoo) - http://latlonglab.yahoo.co.jp/</li>
<li>はてなココ - http://developer.hatena.ne.jp/ja/documents/coco/apis/v1/spots#spots</li>
</ul>


<h3>Longitude(略さない)派</h3>

<p>こんなに迷うなら、いっそ省略形など要らぬ！</p>

<ul>
<li>Apple - https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationDataTypesRef/Reference/reference.html</li>
<li>Bing Maps - http://msdn.microsoft.com/en-us/library/gg427612.aspx</li>
<li>Facebook -  https://developers.facebook.com/docs/reference/fql/location_post</li>
<li>Amazon - https://developer.amazon.com/sdk/maps/api-reference.html</li>
<li>Evernote - http://dev.evernote.com/doc/reference/Types.html#Struct_NoteAttributes</li>
<li>Path - https://path.com/developers#tags</li>
</ul>


<h3>緯度経度ペアに名前付けちゃう派</h3>

<p>だってペアじゃないと意味ないじゃん？</p>

<ul>
<li>Twitter(geocode) - https://dev.twitter.com/docs/api/1/get/search (緯度、経度)</li>
<li>Foursquare(ll) - https://developer.foursquare.com/docs/venues/search (緯度、経度)</li>
<li>カーリル図書館情報取得API(geocode) - http://calil.jp/doc/api_ref.html (経度、緯度)</li>
</ul>


<h3>X/Y と同じじゃん派</h3>

<p>所詮座標でしょ？(ﾎｼﾞﾎｼﾞ</p>

<ul>
<li>Solr(pt) - http://docs.lucidworks.com/display/solr/Spatial+Search</li>
<li>Oracle Spatial - http://otndnld.oracle.co.jp/document/products/oracle10g/102/doc_cd/appdev.102/B19243-02/sdo_cs_concepts.htm</li>
<li>PostGIS - http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#RefObject</li>
<li>PlaceEngine - http://www.placeengine.com/doc/tut</li>
</ul>


<h2>まとめ</h2>

<p>数では <code>lon</code> 派が優勢。しかし開発者の目に触れる機会では Google が居る <code>lng</code> の方が多いのかも。
MS、Facebook など、割と巨大企業が 略さない を選択してるのも面白いですね。</p>

<p>ペアに名前を付けるやり方は、座標の順番が 緯度→経度 なのか、経度→緯度 なのか揺れるのであまり好きじゃないですね。</p>

<p>XY と同じ概念で扱うのは、そもそも地図以外での利用を想定していたり、地図でも投影されたXY座標を想定しているものが多いですが、XY と LatLon って、これまた混乱するんですよね。Lat って Y なの？順番逆なの？って。</p>

<p>個人的には 略さない派 だったのですが、そうは言っても短く書きたいので、最近は <code>lon</code> 派です。理由は、</p>

<p><strong>「オレオレ緯度経度クラスを使いたいが、Google に <code>LatLng</code> を取られちゃってるから」</strong></p>

<p>クラス名が衝突すると、いろいろ面倒だし、クラス名に Prefix 付けるのもダサいし。。。</p>

<p>というわけで、終わらない争いと知りつつまとめてみました。
上記に載っていない情報があったら教えてもらえると嬉しいです。</p>
]]></content>
  </entry>
  
</feed>
