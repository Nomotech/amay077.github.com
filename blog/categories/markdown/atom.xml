<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | Experiments Never Fail]]></title>
  <link href="http://blog.amay077.net/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://blog.amay077.net/"/>
  <updated>2016-07-18T17:26:07+09:00</updated>
  <id>http://blog.amay077.net/</id>
  <author>
    <name><![CDATA[amay077]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin Workbooks とかいうやつ]]></title>
    <link href="http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/"/>
    <updated>2016-04-29T00:00:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks</id>
    <content type="html"><![CDATA[<p><a href="https://evolve.xamarin.com/">Xamarin Evolve 2016</a> が開催中されました。</p>

<!--more-->


<p>build での予告どおり、Xamarin.Android/iOS などがついにオープンソースになった、などのエキサイティングな発表のまとめは</p>

<ul>
<li><a href="http://ytabuchi.hatenablog.com/entry/evolve2016">【速報】Evolve 2016 で発表されたエキサイティング情報まとめ &ndash; Xamarin 日本語情報</a></li>
</ul>


<p>その Keynote でデモされていた Xamarin Workbooks というツールがなかなかすごいので紹介。</p>

<h2>なにこれ？</h2>

<p>ひとことでいうと、</p>

<p><strong>Xcode の Playground みたいなやつ + Markdown</strong></p>

<p>まだ意味わかんないですね？</p>

<p>こういうことです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_01.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/264530/qiita/xamarin_workbooks_02.gif" alt="" /></p>

<ul>
<li>Markdown でドキュメントが書ける(このツール自体はリッチなエディタである)</li>
<li>```csharp〜``` で囲まれたコードブロックは、そのまま iOSシミュレータなどでインタラクティブに、Instant に実行できる。</li>
</ul>


<p>上記の Workbook の実ファイルは、これ↓です。</p>

<ul>
<li><a href="https://gist.github.com/amay077/793b5df4aad0098ffe6d9c12a491ee9a">Xamarin Workbooks を使ってみるテスト。 HowToUseMapKit.workbook で保存して Xamarin Inspector で File->Open してね。</a></li>
</ul>


<p>みてわかる通りまんま Markdown ですね。</p>

<h2>Let&rsquo;s try!</h2>

<p>しかも iOS だけじゃなく、Android, Mac, Windows(WPF) に全対応！
Mac でも Windows でも試せるみたいです。</p>

<ul>
<li><a href="https://developer.xamarin.com/guides/cross-platform/workbooks/">Xamarin Workbooks &ndash; Xamarin</a></li>
</ul>


<p>スタンドアロンなアプリとして実行可能なようなので、サクッと使ってみよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAML Front-matter とかいうやつ]]></title>
    <link href="http://blog.amay077.net/blog/2013/10/16/intro-of-yaml-front-matter/"/>
    <updated>2013-10-16T16:08:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/10/16/intro-of-yaml-front-matter</id>
    <content type="html"><![CDATA[<p>Octopress でもブログ書いてるんだけど、markdown のヘッダに、</p>

<!--more-->


<h2>```</h2>

<p>layout: post
title: &ldquo;metersToEquatorPixels を Google Maps Android API v2 で&rdquo;
date: 2013-10-09 00:21
comments: true</p>

<h2>categories: [Android, Java, Geo, GoogleMapsAPI]</h2>

<p>```</p>

<p>こんな風にメタ情報を書くルールになっている。</p>

<p>この書き方、 Front-matter というそうで。</p>

<ul>
<li><a href="http://jekyllrb.com/docs/frontmatter/">Front-matter &ndash; jekyllrb</a></li>
</ul>


<p>んで、github は、これをいい感じに整形して表示してくれる。</p>

<ul>
<li><a href="https://github.com/amay077/amay077.github.com/blob/source/source/_posts/2013-10-09-meterstoequatorpixels-in-gmap-v2.markdown">amay077.github.com/source/_posts/2013-10-09-meterstoequatorpixels-in-gmap-v2.markdown</a></li>
</ul>


<p>@Qiita とか ＠Kobito でもこれに対応してくれると、私が嬉しい。</p>

<p>Kobito で「書き出し」た .md ファイルのヘッダが Front-matter になってたり、逆に Front-matter を読み込んでくれるといいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marked.js で Markdown をクライアント側でパースして表示する]]></title>
    <link href="http://blog.amay077.net/blog/2013/08/06/parse-markdown-using-markedjs/"/>
    <updated>2013-08-06T21:10:00+09:00</updated>
    <id>http://blog.amay077.net/blog/2013/08/06/parse-markdown-using-markedjs</id>
    <content type="html"><![CDATA[<p><a href="http://phyzkit.net/typescript/">Typescript クイックガイド</a> で、ソースを見たら Markdown で書かれてたのをみて「カッケー」と思ったのと、<a href="http://www.atmarkit.co.jp/ait/articles/1302/05/news091.html">利用規約やプライバシーポリシーは Github に置くといいよ</a> というのを見て、なら「github に .markdown ファイルを置いてクライアントサイドでスタイリングできたら嬉しいじゃん？」と思いやってみた。</p>

<!--more-->


<h2>Javascript による markdown パーサいろいろ</h2>

<p>上記 Typescript クイックガイド では <a href="https://github.com/chjj/marked">marked.js</a> が使われているようだが、他にもいろいろある模様。下記にて比較してくださっている。</p>

<ul>
<li><a href="http://kannokanno.hatenablog.com/entry/2013/06/19/132042">JavaScript &ndash; Markdownパーサーのshowdown.js、markdown-js、markedを簡単比較 &ndash; ぼっち勉強会</a></li>
</ul>


<p>もともと marked.js を使おうと思ってたし、上記サイトでも問題無さそうだったので、そのままいく。</p>

<h2>使い方</h2>

<p>marked.js を読み込んだ後、</p>

<p><code>js
var formatted = marked(markdown_text)
</code>
で、HTML に整形された文字列が返されるというシンプルなもの。(整形オプションがいろいろあるようだが割愛)</p>

<p>Typescript クイックガイドでは、HTML 内に Markdown テキストがベタ書きされていたが、せっかくなので管理がしやすいように外部 Markdown ファイルを読みこむようにしてみた。</p>

<p>```html md_renderer.html
&lt;!DOCTYPE html>
<html lang="ja"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="utf-8"&gt;

    &lt;title&gt;Markdown renderer&lt;/title&gt;
    &lt;meta name="description" content="Markdown renderer"&gt;

    &lt;!-- bootstrap --&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css" rel="stylesheet"&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap-responsive.css" rel="stylesheet"&gt;

    &lt;!-- js libraries --&gt;
    &lt;script type="text/javascript" src="js/jquery-2.0.3.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/marked.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        $(document).ready(function(){
            var target = $("#markdown_content");

            $.ajax({
                url: target[0].attributes["src"].value,
            }).success(function(data){
                target.append(marked(data));
            }).error(function(data){
                target.append("This content failed to load.");
            });
        });
    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;!-- Content --&gt;
    &lt;div class="container"&gt;
        &lt;div id="markdown_content" src="./sample.markdown"&gt; &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>一番下の <code>&lt;div id="markdown_content" src="./sample.markdown"&gt;</code> の src に読み込む Markdown ファイルを指定するようにした。</p>

<p>bootstrap で見栄えを良くしているが、必須ではない。</p>

<p>こちらが <a href="https://dl.dropboxusercontent.com/u/264530/qiita/md_renderer/md_renderer.html">デモ</a> 。</p>

<p>さすがに描画に少し時間がかかるみたいです。
<code>marked()</code> は非同期版もあるようなので、そちらを使うべきだったかな。</p>

<p>これで、データ(Markdown)とプレゼンテーション部(HTML)を分離できて、なんか良さげな感じがする。</p>

<p>Octopress とか、HTMLを生成しちゃうんじゃなくて、クライアントサイドで 「Markdown を描画する」できると、投稿の手間が減って良いかもですね。</p>
]]></content>
  </entry>
  
</feed>
